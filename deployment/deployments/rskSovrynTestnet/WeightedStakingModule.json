{
    "address": "0x598370450D4C55a31b150C875f4Cb6008cdFD780",
    "abi": [
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "AdminAdded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "AdminRemoved",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32"
                }
            ],
            "name": "ContractCodeHashAdded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32"
                }
            ],
            "name": "ContractCodeHashRemoved",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "delegator",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lockedUntil",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "fromDelegate",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "toDelegate",
                    "type": "address"
                }
            ],
            "name": "DelegateChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "delegate",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lockedUntil",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "previousBalance",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "newBalance",
                    "type": "uint256"
                }
            ],
            "name": "DelegateStakeChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "staker",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "previousDate",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "newDate",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amountStaked",
                    "type": "uint256"
                }
            ],
            "name": "ExtendedStakingDuration",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "pauser",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "bool",
                    "name": "added",
                    "type": "bool"
                }
            ],
            "name": "PauserAddedOrRemoved",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bool",
                    "name": "setFrozen",
                    "type": "bool"
                }
            ],
            "name": "StakingFrozen",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bool",
                    "name": "setPaused",
                    "type": "bool"
                }
            ],
            "name": "StakingPaused",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "staker",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "until",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "receiver",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "bool",
                    "name": "isGovernance",
                    "type": "bool"
                }
            ],
            "name": "StakingWithdrawn",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "caller",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "receiver",
                    "type": "address"
                }
            ],
            "name": "TeamVestingCancelled",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "caller",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "receiver",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lastProcessedDate",
                    "type": "uint256"
                }
            ],
            "name": "TeamVestingPartiallyCancelled",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "staker",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lockedUntil",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "totalStaked",
                    "type": "uint256"
                }
            ],
            "name": "TokensStaked",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "TokensUnlocked",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lockedTS",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint96",
                    "name": "value",
                    "type": "uint96"
                }
            ],
            "name": "VestingStakeSet",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "vesting",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "receiver",
                    "type": "address"
                }
            ],
            "name": "VestingTokensWithdrawn",
            "type": "event"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "DELEGATION_TYPEHASH",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "DOMAIN_TYPEHASH",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "MAX_DURATION",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "MAX_VOTING_WEIGHT",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "SOVToken",
            "outputs": [
                {
                    "internalType": "contract IERC20",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "WEIGHT_FACTOR",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "admins",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "allUnlocked",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "date",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "startDate",
                    "type": "uint256"
                }
            ],
            "name": "computeWeightByDate",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "weight",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "delegateStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "delegates",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "feeSharing",
            "outputs": [
                {
                    "internalType": "contract IFeeSharingCollector",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "frozen",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "getFunctionsList",
            "outputs": [
                {
                    "internalType": "bytes4[]",
                    "name": "",
                    "type": "bytes4[]"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "blockNumber",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "date",
                    "type": "uint256"
                }
            ],
            "name": "getPriorWeightedStake",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "priorWeightedStake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "isOwner",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "kickoffTS",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "newStakingContract",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "nonces",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numDelegateStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numTotalStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numUserStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numVestingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "paused",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "pausers",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "totalStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "userStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "vestingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "name": "vestingCodeHashes",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "vestingRegistryLogic",
            "outputs": [
                {
                    "internalType": "contract IVestingRegistry",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "vestingWhitelist",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "weightScaling",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "date",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "startDate",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "blockNumber",
                    "type": "uint256"
                }
            ],
            "name": "weightedStakeByDate",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "power",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "transactionHash": "0xd94b6fbf4ea08e96e458c6cb604a0b3b11c3c2e7134fc9e9ed2efc1fd21f0a4b",
    "receipt": {
        "to": null,
        "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
        "contractAddress": "0x598370450D4C55a31b150C875f4Cb6008cdFD780",
        "transactionIndex": 0,
        "gasUsed": "1636436",
        "logsBloom": "0x
        "blockHash": "0x898b7c6235b9b5a1b1153cd834da3d64d646a2f06445eac6ee4ccad7b6245ac3",
        "transactionHash": "0xd94b6fbf4ea08e96e458c6cb604a0b3b11c3c2e7134fc9e9ed2efc1fd21f0a4b",
        "logs": [
            {
                "transactionIndex": 0,
                "blockNumber": 3655774,
                "transactionHash": "0xd94b6fbf4ea08e96e458c6cb604a0b3b11c3c2e7134fc9e9ed2efc1fd21f0a4b",
                "address": "0x598370450D4C55a31b150C875f4Cb6008cdFD780",
                "topics": [
                    "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x00000000000000000000000013be55487d37fe3c66ee7305e1e9c1ac85de75ae"
                ],
                "data": "0x",
                "logIndex": 0,
                "blockHash": "0x898b7c6235b9b5a1b1153cd834da3d64d646a2f06445eac6ee4ccad7b6245ac3"
            }
        ],
        "blockNumber": 3655774,
        "cumulativeGasUsed": "1636436",
        "status": 1,
        "byzantium": true
    },
    "args": [],
    "numDeployments": 2,
    "solcInputHash": "5aac57e986071e917d667feba06fc19b",
    "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ContractCodeHashAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ContractCodeHashRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateStakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"ExtendedStakingDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"PauserAddedOrRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"setFrozen\",\"type\":\"bool\"}],\"name\":\"StakingFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"setPaused\",\"type\":\"bool\"}],\"name\":\"StakingPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isGovernance\",\"type\":\"bool\"}],\"name\":\"StakingWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"TeamVestingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedDate\",\"type\":\"uint256\"}],\"name\":\"TeamVestingPartiallyCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedTS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"name\":\"VestingStakeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"VestingTokensWithdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VOTING_WEIGHT\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOVToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEIGHT_FACTOR\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"name\":\"computeWeightByDate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"weight\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"delegateStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeSharing\",\"outputs\":[{\"internalType\":\"contract IFeeSharingCollector\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFunctionsList\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"\",\"type\":\"bytes4[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"getPriorWeightedStake\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"priorWeightedStake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kickoffTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newStakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numDelegateStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numTotalStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numUserStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numVestingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"totalStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"userStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"vestingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vestingCodeHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingRegistryLogic\",\"outputs\":[{\"internalType\":\"contract IVestingRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weightScaling\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"weightedStakeByDate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"power\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"computeWeightByDate(uint256,uint256)\":{\"params\":{\"date\":\"The unlocking date.\",\"startDate\":\"We compute the weight for the tokens staked until 'date' on 'startDate'.\"},\"return\":\"The weighted stake the account had as of the given block.\"},\"getPriorWeightedStake(address,uint256,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.     Used for fee sharing, not voting.\",\"params\":{\"account\":\"The address of the account to check.\",\"blockNumber\":\"The block number to get the vote balance at.\",\"date\":\"The date/timestamp of the unstaking time.\"},\"return\":\"The weighted stake the account had as of the given block.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"weightedStakeByDate(address,uint256,uint256,uint256)\":{\"params\":{\"account\":\"The user address.\",\"blockNumber\":\"The block number, needed for checkpointing.\",\"date\":\"The staking date to compute the power for. Adjusted to the previous valid lock date, if necessary.\",\"startDate\":\"The date for which we need to know the power of the stake. Adjusted to the previous valid lock date, if necessary.\"},\"return\":\"The staking power.\"}},\"title\":\"Weighted Staking module contract.\"},\"userdoc\":{\"methods\":{\"computeWeightByDate(uint256,uint256)\":{\"notice\":\"Compute the weight for a specific date.\"},\"getPriorWeightedStake(address,uint256,uint256)\":{\"notice\":\"Determine the prior weighted stake for an account as of a block number. Iterate through checkpoints adding up voting power.\"},\"weightedStakeByDate(address,uint256,uint256,uint256)\":{\"notice\":\"Compute the voting power for a specific date. Power = stake * weight\"}},\"notice\":\"Implements getters for weighted staking functionality\"}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Staking/modules/WeightedStakingModule.sol\":\"WeightedStakingModule\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/governance/IFeeSharingCollector.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for contract governance/FeeSharingCollector/FeeSharingCollector.sol\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * */\\ninterface IFeeSharingCollector {\\n    function withdrawFees(address[] calldata _token) external;\\n\\n    function transferTokens(address _token, uint96 _amount) external;\\n\\n    function withdraw(\\n        address _loanPoolToken,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7794cb434d9395ea983dcf8ded48db5b68897a338429320f60172c4caa47fb40\"},\"contracts/governance/Staking/SafeMath96.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title SafeMath96 contract.\\n * @notice Improved Solidity's arithmetic operations with added overflow checks.\\n * @dev SafeMath96 uses uint96, unsigned integers of 96 bits length, so every\\n * integer from 0 to 2^96-1 can be operated.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * SafeMath restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this contract instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n * */\\ncontract SafeMath96 {\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe64(uint256 n, string memory errorMessage) internal pure returns (uint64) {\\n        require(n < 2**64, errorMessage);\\n        return uint64(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `+` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe addition a+b.\\n     * */\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Substracts two unsigned integers, reverting on underflow.\\n     * @dev Counterpart to Solidity's `-` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on underflow.\\n     * @return The safe substraction a-b.\\n     * */\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `*` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe product a*b.\\n     * */\\n    function mul96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint96 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Divides two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `/` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe division a/b.\\n     * */\\n    function div96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint96 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xc37b24a41212f26435849813104568112c9e151a60018f53d76c7d06e74782ce\"},\"contracts/governance/Staking/modules/WeightedStakingModule.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./shared/CheckpointsShared.sol\\\";\\nimport \\\"./shared/StakingShared.sol\\\";\\nimport \\\"../../../proxy/modules/interfaces/IFunctionsList.sol\\\";\\n\\n/**\\n * @title Weighted Staking module contract.\\n * @notice Implements getters for weighted staking functionality\\n * */\\ncontract WeightedStakingModule is IFunctionsList, StakingShared, CheckpointsShared {\\n    /*************************** User Weighted Stake computation for fee sharing *******************************/\\n\\n    /**\\n     * @notice Determine the prior weighted stake for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     *\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The date/timestamp of the unstaking time.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorWeightedStake(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96 priorWeightedStake) {\\n        return _getPriorWeightedStake(account, blockNumber, date);\\n    }\\n\\n    function _getPriorWeightedStake(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) internal view returns (uint96 priorWeightedStake) {\\n        /// @dev If date is not an exact break point, start weight computation from the previous break point (alternative would be the next).\\n        uint256 start = _timestampToLockDate(date);\\n        uint256 end = start + MAX_DURATION;\\n\\n        /// @dev Max 78 iterations.\\n        for (uint256 i = start; i <= end; i += TWO_WEEKS) {\\n            uint96 weightedStake = _weightedStakeByDate(account, i, start, blockNumber);\\n            if (weightedStake > 0) {\\n                priorWeightedStake = add96(\\n                    priorWeightedStake,\\n                    weightedStake,\\n                    \\\"overflow on total weight calc\\\"\\n                ); // WS12\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * @param account The user address.\\n     * @param date The staking date to compute the power for. Adjusted to the previous valid lock date, if necessary.\\n     * @param startDate The date for which we need to know the power of the stake. Adjusted to the previous valid lock date, if necessary.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The staking power.\\n     * */\\n    function weightedStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power) {\\n        date = _timestampToLockDate(date);\\n        startDate = _timestampToLockDate(startDate);\\n        return _weightedStakeByDate(account, date, startDate, blockNumber);\\n    }\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * @param account The user address.\\n     * @param date The staking date to compute the power for.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The staking power.\\n     * */\\n    function _weightedStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) internal view returns (uint96 power) {\\n        uint96 staked = _getPriorUserStakeByDate(account, date, blockNumber);\\n        if (staked > 0) {\\n            uint96 weight = _computeWeightByDate(date, startDate);\\n            power = mul96(staked, weight, \\\"mul overflow\\\") / WEIGHT_FACTOR; // WS13\\n        } else {\\n            power = 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Compute the weight for a specific date.\\n     * @param date The unlocking date.\\n     * @param startDate We compute the weight for the tokens staked until 'date' on 'startDate'.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function computeWeightByDate(uint256 date, uint256 startDate)\\n        public\\n        pure\\n        returns (uint96 weight)\\n    {\\n        return _computeWeightByDate(date, startDate);\\n    }\\n\\n    function getFunctionsList() external pure returns (bytes4[] memory) {\\n        bytes4[] memory functionsList = new bytes4[](3);\\n        functionsList[0] = this.getPriorWeightedStake.selector;\\n        functionsList[1] = this.weightedStakeByDate.selector;\\n        functionsList[2] = this.computeWeightByDate.selector;\\n        return functionsList;\\n    }\\n}\\n\",\"keccak256\":\"0x7917d2dc19f20d9d1e8601bde861cd62cbf9c5b73d594451a89e66e465daab0d\"},\"contracts/governance/Staking/modules/shared/CheckpointsShared.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./StakingStorageShared.sol\\\";\\nimport \\\"../../SafeMath96.sol\\\";\\n\\n/**\\n * @title Checkpoints contract.\\n * @notice Increases and decreases storage values for users, delegatees and\\n * total daily stake.\\n * */\\ncontract CheckpointsShared is StakingStorageShared, SafeMath96 {\\n    /// @notice An event emitted when an account changes its delegate.\\n    event DelegateChanged(\\n        address indexed delegator,\\n        uint256 lockedUntil,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event emitted when a delegate account's stake balance changes.\\n    event DelegateStakeChanged(\\n        address indexed delegate,\\n        uint256 lockedUntil,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /// @notice An event emitted when tokens get staked.\\n    event TokensStaked(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 lockedUntil,\\n        uint256 totalStaked\\n    );\\n\\n    /// @notice An event emitted when staked tokens get withdrawn.\\n    event StakingWithdrawn(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 until,\\n        address indexed receiver,\\n        bool isGovernance\\n    );\\n\\n    /// @notice An event emitted when vesting tokens get withdrawn.\\n    event VestingTokensWithdrawn(address vesting, address receiver);\\n\\n    /// @notice An event emitted when the owner unlocks all tokens.\\n    event TokensUnlocked(uint256 amount);\\n\\n    /// @notice An event emitted when a staking period gets extended.\\n    event ExtendedStakingDuration(\\n        address indexed staker,\\n        uint256 previousDate,\\n        uint256 newDate,\\n        uint256 amountStaked\\n    );\\n\\n    event AdminAdded(address admin);\\n\\n    event AdminRemoved(address admin);\\n\\n    /// @param pauser address to grant power to pause the contract\\n    /// @param added true - added, false - removed\\n    event PauserAddedOrRemoved(address indexed pauser, bool indexed added);\\n\\n    /// @notice An event emitted when a staking is paused or unpaused\\n    /// @param setPaused true - pause, false - unpause\\n    event StakingPaused(bool indexed setPaused);\\n\\n    /// @notice An event emitted when a staking is frozen or unfrozen\\n    /// @param setFrozen true - freeze, false - unfreeze\\n    event StakingFrozen(bool indexed setFrozen);\\n\\n    event ContractCodeHashAdded(bytes32 hash);\\n\\n    event ContractCodeHashRemoved(bytes32 hash);\\n\\n    event VestingStakeSet(uint256 lockedTS, uint96 value);\\n\\n    event TeamVestingCancelled(address indexed caller, address receiver);\\n\\n    event TeamVestingPartiallyCancelled(\\n        address indexed caller,\\n        address receiver,\\n        uint256 lastProcessedDate\\n    );\\n\\n    constructor() internal {\\n        // abstract\\n    }\\n\\n    /**\\n     * @notice Increases the user's vesting stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseVestingStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numVestingCheckpoints[lockedTS];\\n        uint96 vested = vestingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newVest = add96(vested, value, \\\"CP01\\\"); // vested overflow\\n        _writeVestingCheckpoint(lockedTS, nCheckpoints, newVest);\\n    }\\n\\n    /**\\n     * @notice Decreases the user's vesting stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseVestingStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numVestingCheckpoints[lockedTS];\\n        uint96 vested = vestingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newVest = sub96(vested, value, \\\"CP02\\\"); // vested underflow\\n        _writeVestingCheckpoint(lockedTS, nCheckpoints, newVest);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the user vested amount.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newVest The new vest balance.\\n     * */\\n    function _writeVestingCheckpoint(\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newVest\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP03\\\"); // block num > 32 bits\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            vestingCheckpoints[lockedTS][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            vestingCheckpoints[lockedTS][nCheckpoints - 1].stake = newVest;\\n        } else {\\n            vestingCheckpoints[lockedTS][nCheckpoints] = Checkpoint(blockNumber, newVest);\\n            numVestingCheckpoints[lockedTS] = nCheckpoints + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases the user's stake for a giving lock date and writes a checkpoint.\\n     * @param account The user address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseUserStake(\\n        address account,\\n        uint256 lockedTS,\\n        uint96 value\\n    ) internal {\\n        uint32 nCheckpoints = numUserStakingCheckpoints[account][lockedTS];\\n        uint96 staked = userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = add96(staked, value, \\\"CP04\\\"); // staked overflow\\n        _writeUserCheckpoint(account, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Decreases the user's stake for a giving lock date and writes a checkpoint.\\n     * @param account The user address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseUserStake(\\n        address account,\\n        uint256 lockedTS,\\n        uint96 value\\n    ) internal {\\n        uint32 nCheckpoints = numUserStakingCheckpoints[account][lockedTS];\\n        uint96 staked = userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = sub96(staked, value, \\\"CP05\\\"); // staked underflow\\n        _writeUserCheckpoint(account, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the user stake.\\n     * @param account The user address.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newStake The new staked balance.\\n     * */\\n    function _writeUserCheckpoint(\\n        address account,\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newStake\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP06\\\"); // block number > 32 bits\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].stake = newStake;\\n        } else {\\n            userStakingCheckpoints[account][lockedTS][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newStake\\n            );\\n            numUserStakingCheckpoints[account][lockedTS] = nCheckpoints + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases the delegatee's stake for a giving lock date and writes a checkpoint.\\n     * @param delegatee The delegatee address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseDelegateStake(\\n        address delegatee,\\n        uint256 lockedTS,\\n        uint96 value\\n    ) internal {\\n        uint32 nCheckpoints = numDelegateStakingCheckpoints[delegatee][lockedTS];\\n        uint96 staked = delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = add96(staked, value, \\\"CP07\\\"); // block number > 32 bits\\n        _writeDelegateCheckpoint(delegatee, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Decreases the delegatee's stake for a giving lock date and writes a checkpoint.\\n     * @param delegatee The delegatee address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseDelegateStake(\\n        address delegatee,\\n        uint256 lockedTS,\\n        uint96 value\\n    ) internal {\\n        uint32 nCheckpoints = numDelegateStakingCheckpoints[delegatee][lockedTS];\\n        uint96 staked = delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = 0;\\n        // @dev We need to check delegate checkpoint value here,\\n        //\\t\\tbecause we had an issue in `stake` function:\\n        //\\t\\tdelegate checkpoint wasn't updating for the second and next stakes for the same date\\n        //\\t\\tif first stake was withdrawn completely and stake was delegated to the staker\\n        //\\t\\t(no delegation to another address).\\n        // @dev It can be greater than 0, but inconsistent after 3 transactions\\n        if (staked > value) {\\n            newStake = sub96(staked, value, \\\"CP08\\\"); // staked underflow\\n        }\\n        _writeDelegateCheckpoint(delegatee, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the delegate stake.\\n     * @param delegatee The delegate address.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newStake The new staked balance.\\n     * */\\n    function _writeDelegateCheckpoint(\\n        address delegatee,\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newStake\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP09\\\"); // block numb > 32 bits\\n        uint96 oldStake = delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake;\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].fromBlock ==\\n            blockNumber\\n        ) {\\n            delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake = newStake;\\n        } else {\\n            delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newStake\\n            );\\n            numDelegateStakingCheckpoints[delegatee][lockedTS] = nCheckpoints + 1;\\n        }\\n        emit DelegateStakeChanged(delegatee, lockedTS, oldStake, newStake);\\n    }\\n\\n    /**\\n     * @notice Increases the total stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseDailyStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numTotalStakingCheckpoints[lockedTS];\\n        uint96 staked = totalStakingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = add96(staked, value, \\\"CP10\\\"); // staked overflow\\n        _writeStakingCheckpoint(lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Decreases the total stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseDailyStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numTotalStakingCheckpoints[lockedTS];\\n        uint96 staked = totalStakingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = sub96(staked, value, \\\"CP11\\\"); // staked underflow\\n        _writeStakingCheckpoint(lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the total stake.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newStake The new staked balance.\\n     * */\\n    function _writeStakingCheckpoint(\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newStake\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP12\\\"); // block num > 32 bits\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            totalStakingCheckpoints[lockedTS][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            totalStakingCheckpoints[lockedTS][nCheckpoints - 1].stake = newStake;\\n        } else {\\n            totalStakingCheckpoints[lockedTS][nCheckpoints] = Checkpoint(blockNumber, newStake);\\n            numTotalStakingCheckpoints[lockedTS] = nCheckpoints + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the current balance of an account locked until a certain date.\\n     * @param account The user address.\\n     * @param lockDate The lock date.\\n     * @return The stake amount.\\n     * */\\n    function _currentBalance(address account, uint256 lockDate) internal view returns (uint96) {\\n        uint32 _numUnserStakingCheckpoints = numUserStakingCheckpoints[account][lockDate] - 1;\\n        return userStakingCheckpoints[account][lockDate][_numUnserStakingCheckpoints].stake;\\n    }\\n}\\n\",\"keccak256\":\"0x0008c67cca18adda882118e4543045905e7e75d8536034ffcc97526065784036\"},\"contracts/governance/Staking/modules/shared/StakingShared.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./StakingStorageShared.sol\\\";\\nimport \\\"../../SafeMath96.sol\\\";\\nimport \\\"../../../../openzeppelin/SafeMath.sol\\\";\\nimport \\\"../../../../openzeppelin/Ownable.sol\\\";\\n\\n/**\\n * @title Staking modules shared functionality\\n */\\ncontract StakingShared is StakingStorageShared, SafeMath96 {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant FOUR_WEEKS = 4 weeks;\\n\\n    /**\\n     * @dev Throws if paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"paused\\\"); // SS03\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner or admin.\\n     */\\n    modifier onlyAuthorized() {\\n        require(isOwner() || admins[msg.sender], \\\"unauthorized\\\"); // SS01\\n        _;\\n    }\\n\\n    /**\\n\\t * @dev Throws if called by any account other than the owner or admin or pauser.\\n\\t \\n\\tmodifier onlyAuthorizedOrPauser() {\\n\\t\\trequire(isOwner() || admins[msg.sender] || pausers[msg.sender], \\\"unauthorized\\\"); // WS02\\n\\t\\t_;\\n\\t}\\n\\t*/\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner or pauser.\\n     */\\n    modifier onlyPauserOrOwner() {\\n        require(isOwner() || pausers[msg.sender], \\\"unauthorized\\\"); // SS02\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than pauser.\\n     * @notice Uncomment when needed\\n     */\\n    /*\\n\\tmodifier onlyPauser() {\\n\\t\\trequire(pausers[msg.sender], \\\"Not pauser\\\");\\n\\t\\t_;\\n\\t}\\n\\t*/\\n\\n    /**\\n     * @dev Throws if frozen.\\n     */\\n    modifier whenNotFrozen() {\\n        require(!frozen, \\\"paused\\\"); // SS04\\n        _;\\n    }\\n\\n    constructor() internal {\\n        // abstract\\n    }\\n\\n    function _notSameBlockAsStakingCheckpoint(uint256 lockDate, address stakeFor) internal view {\\n        uint32 nCheckpoints = numUserStakingCheckpoints[stakeFor][lockDate];\\n        bool notSameBlock =\\n            userStakingCheckpoints[stakeFor][lockDate][nCheckpoints - 1].fromBlock != block.number;\\n        require(notSameBlock, \\\"cannot be mined in the same block as last stake\\\"); // S20\\n    }\\n\\n    /**\\n     * @notice Unstaking is possible every 2 weeks only. This means, to\\n     * calculate the key value for the staking checkpoints, we need to\\n     * map the intended timestamp to the closest available date.\\n     * @param timestamp The unlocking timestamp.\\n     * @return The actual unlocking date (might be up to 2 weeks shorter than intended).\\n     * */\\n    function _timestampToLockDate(uint256 timestamp) internal view returns (uint256 lockDate) {\\n        // Optimize gas costs by reading kickoffTS from storage only once.\\n        uint256 start = kickoffTS;\\n        require(timestamp >= start, \\\"timestamp < contract creation\\\"); // WS23\\n        /**\\n         * @dev If staking timestamp does not match any of the unstaking dates\\n         * , set the lockDate to the closest one before the timestamp.\\n         * E.g. Passed timestamps lies 7 weeks after kickoff -> only stake for 6 weeks.\\n         * */\\n        uint256 periodFromKickoff = (timestamp - start) / TWO_WEEKS;\\n        lockDate = periodFromKickoff * TWO_WEEKS + start;\\n    }\\n\\n    /**\\n     * @notice Determine the current Block Number\\n     * @dev This is segregated from the _getPriorUserStakeByDate function to better test\\n     * advancing blocks functionality using Mock Contracts\\n     * */\\n    function _getCurrentBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account until a\\n     * \\t\\tcertain lock date as of a block number.\\n     * @dev All functions of Staking contract use this internal version,\\n     * \\t\\twe need to modify public function in order to workaround issue with Vesting.withdrawTokens:\\n     * return 1 instead of 0 if message sender is a contract.\\n     * @param account The address of the account to check.\\n     * @param date The lock date. Adjusted to the next valid lock date, if necessary.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function _getPriorUserStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) internal view returns (uint96) {\\n        require(blockNumber < _getCurrentBlockNumber(), \\\"not determined\\\"); // WS14\\n\\n        date = _adjustDateForOrigin(date);\\n        uint32 nCheckpoints = numUserStakingCheckpoints[account][date];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        /// @dev First check most recent balance.\\n        if (userStakingCheckpoints[account][date][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return userStakingCheckpoints[account][date][nCheckpoints - 1].stake;\\n        }\\n\\n        /// @dev Next check implicit zero balance.\\n        if (userStakingCheckpoints[account][date][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; /// @dev ceil, avoiding overflow.\\n            Checkpoint memory cp = userStakingCheckpoints[account][date][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.stake;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return userStakingCheckpoints[account][date][lower].stake;\\n    }\\n\\n    /**\\n     * @dev origin vesting contracts have different dates\\n     * we need to add 2 weeks to get end of period (by default, it's start)\\n     * @param date The staking date to compute the power for.\\n     * @return unlocking date.\\n     */\\n    function _adjustDateForOrigin(uint256 date) internal view returns (uint256) {\\n        uint256 adjustedDate = _timestampToLockDate(date);\\n        //origin vesting contracts have different dates\\n        //we need to add 2 weeks to get end of period (by default, it's start)\\n        if (adjustedDate != date) {\\n            date = adjustedDate + TWO_WEEKS;\\n        }\\n        return date;\\n    }\\n\\n    /**\\n     * @notice Compute the weight for a specific date.\\n     * @param date The unlocking date.\\n     * @param startDate We compute the weight for the tokens staked until 'date' on 'startDate'.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function _computeWeightByDate(uint256 date, uint256 startDate)\\n        internal\\n        pure\\n        returns (uint96 weight)\\n    {\\n        require(date >= startDate, \\\"date < startDate\\\"); // WS18\\n        uint256 remainingTime = (date - startDate);\\n        require(MAX_DURATION >= remainingTime, \\\"remaining time > max duration\\\"); // WS19\\n        /// @dev x = max days - remaining days\\n        uint96 x = uint96(MAX_DURATION - remainingTime) / (1 days);\\n        /// @dev w = (m^2 - x^2)/m^2 +1 (multiplied by the weight factor)\\n        weight = add96(\\n            WEIGHT_FACTOR,\\n            mul96(\\n                MAX_VOTING_WEIGHT * WEIGHT_FACTOR,\\n                sub96(\\n                    MAX_DURATION_POW_2,\\n                    x * x,\\n                    \\\"weight underflow\\\" // WS20\\n                ),\\n                \\\"weight mul overflow\\\" // WS21\\n            ) / MAX_DURATION_POW_2,\\n            \\\"overflow on weight\\\" // WS22\\n        );\\n    }\\n\\n    /**\\n     * @notice Return flag whether the given address is a registered vesting contract.\\n     * @param stakerAddress the address to check\\n     */\\n    function _isVestingContract(address stakerAddress) internal view returns (bool) {\\n        bool isVesting;\\n        bytes32 codeHash;\\n\\n        assembly {\\n            codeHash := extcodehash(stakerAddress)\\n        }\\n        if (address(vestingRegistryLogic) != address(0)) {\\n            isVesting = vestingRegistryLogic.isVestingAddress(stakerAddress);\\n        }\\n\\n        if (isVesting) return true;\\n        if (vestingCodeHashes[codeHash]) return true;\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x4032aa3828ef2fefc034188429ac376f760f0a74cb002a724aef5e270adc0098\"},\"contracts/governance/Staking/modules/shared/StakingStorageShared.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../../../interfaces/IERC20.sol\\\";\\nimport \\\"../../../IFeeSharingCollector.sol\\\";\\nimport \\\"../../../Vesting/IVestingRegistry.sol\\\";\\n\\n/**\\n * @title StakingStorageShared contract is inherited by Staking modules.\\n * @notice Just the storage part of stacking contract, no functions,\\n * only constant, variables and required structures (mappings).\\n * Used by StackingProxy and Checkpoints contracts.\\n *\\n * What is SOV staking?\\n * The purpose of the SOV token is to provide a pseudonymous,\\n * censorship-resistant mechanism for governing the parameters of the Sovryn\\n * protocol, while aligning the incentives of protocol governors with the\\n * long-term success of the protocol. Any SOV token holder can choose to\\n * stake (lock up) their tokens for a fixed period of time in return for\\n * voting rights in the Bitocracy. Stakers are further incentivised through\\n * fee and slashing rewards.\\n * */\\ncontract StakingStorageShared is Ownable {\\n    /// @notice 2 weeks in seconds.\\n    uint256 constant TWO_WEEKS = 1209600;\\n\\n    /// @notice The maximum possible voting weight before adding +1 (actually 10, but need 9 for computation).\\n    uint96 public constant MAX_VOTING_WEIGHT = 9;\\n\\n    /// @notice weight is multiplied with this factor (for allowing decimals, like 1.2x).\\n    /// @dev MAX_VOTING_WEIGHT * WEIGHT_FACTOR needs to be < 792, because there are 100,000,000 SOV with 18 decimals\\n    uint96 public constant WEIGHT_FACTOR = 10;\\n\\n    /// @notice The maximum duration to stake tokens for.\\n    uint256 public constant MAX_DURATION = 1092 days;\\n\\n    /// @notice The maximum duration ^2\\n    uint96 constant MAX_DURATION_POW_2 = 1092 * 1092;\\n\\n    /// @notice Default weight scaling.\\n    uint96 constant DEFAULT_WEIGHT_SCALING = 3;\\n\\n    /// @notice Range for weight scaling.\\n    uint96 constant MIN_WEIGHT_SCALING = 1;\\n    uint96 constant MAX_WEIGHT_SCALING = 9;\\n\\n    /// @notice The timestamp of contract creation. Base for the staking period calculation.\\n    uint256 public kickoffTS;\\n\\n    string name = \\\"SOVStaking\\\";\\n\\n    /// @notice The token to be staked.\\n    IERC20 public SOVToken;\\n\\n    /// @notice A record of each accounts delegate.\\n    mapping(address => mapping(uint256 => address)) public delegates;\\n\\n    /// @notice If this flag is set to true, all tokens are unlocked immediately.\\n    bool public allUnlocked = false;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain.\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 lockDate,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice Used for stake migrations to a new staking contract with a different storage structure.\\n    address public newStakingContract;\\n\\n    /*************************** Checkpoints *******************************/\\n\\n    /// @notice A checkpoint for marking the stakes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 stake;\\n    }\\n\\n    /// @notice A record of tokens to be unstaked at a given time in total.\\n    /// For total voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev totalStakingCheckpoints[date][index] is a checkpoint.\\n    mapping(uint256 => mapping(uint32 => Checkpoint)) public totalStakingCheckpoints;\\n\\n    /// @notice The number of total staking checkpoints for each date.\\n    /// @dev numTotalStakingCheckpoints[date] is a number.\\n    mapping(uint256 => uint32) public numTotalStakingCheckpoints;\\n\\n    /// @notice A record of tokens to be unstaked at a given time which were delegated to a certain address.\\n    /// For delegatee voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev delegateStakingCheckpoints[delegatee][date][index] is a checkpoint.\\n    mapping(address => mapping(uint256 => mapping(uint32 => Checkpoint)))\\n        public delegateStakingCheckpoints;\\n\\n    /// @notice The number of total staking checkpoints for each date per delegate.\\n    /// @dev numDelegateStakingCheckpoints[delegatee][date] is a number.\\n    mapping(address => mapping(uint256 => uint32)) public numDelegateStakingCheckpoints;\\n\\n    /// @notice A record of tokens to be unstaked at a given time which per user address (address -> lockDate -> stake checkpoint)\\n    /// @dev userStakingCheckpoints[user][date][index] is a checkpoint.\\n    mapping(address => mapping(uint256 => mapping(uint32 => Checkpoint)))\\n        public userStakingCheckpoints;\\n\\n    /// @notice The number of total staking checkpoints for each date per user.\\n    /// @dev numUserStakingCheckpoints[user][date] is a number.\\n    mapping(address => mapping(uint256 => uint32)) public numUserStakingCheckpoints;\\n\\n    /// @notice A record of states for signing / validating signatures\\n    /// @dev nonces[user] is a number.\\n    mapping(address => uint256) public nonces;\\n\\n    /*************************** Slashing *******************************/\\n\\n    /// @notice the address of FeeSharingCollectorProxy contract, we need it for unstaking with slashing.\\n    IFeeSharingCollector public feeSharing;\\n\\n    /// @notice used for weight scaling when unstaking with slashing.\\n    uint96 public weightScaling = DEFAULT_WEIGHT_SCALING;\\n\\n    /// @notice List of vesting contracts, tokens for these contracts won't be slashed if unstaked by governance.\\n    /// @dev vestingWhitelist[contract] is true/false.\\n    mapping(address => bool) public vestingWhitelist;\\n\\n    /// @dev user => flag whether user has admin role.\\n    /// @dev multisig should be an admin, admin can invoke only governanceWithdrawVesting function,\\n    /// \\tthis function works only with Team Vesting contracts\\n    mapping(address => bool) public admins;\\n\\n    /// @dev vesting contract code hash => flag whether it's registered code hash\\n    mapping(bytes32 => bool) public vestingCodeHashes;\\n\\n    /// @notice A record of tokens to be unstaked from vesting contract at a given time (lockDate -> vest checkpoint)\\n    /// @dev vestingCheckpoints[date][index] is a checkpoint.\\n    mapping(uint256 => mapping(uint32 => Checkpoint)) public vestingCheckpoints;\\n\\n    /// @notice The number of total vesting checkpoints for each date.\\n    /// @dev numVestingCheckpoints[date] is a number.\\n    mapping(uint256 => uint32) public numVestingCheckpoints;\\n\\n    ///@notice vesting registry contract\\n    IVestingRegistry public vestingRegistryLogic;\\n\\n    /// @dev user => flag whether user has pauser role.\\n    mapping(address => bool) public pausers;\\n\\n    /// @dev Staking contract is paused\\n    bool public paused;\\n\\n    /// @dev Staking contract is frozen\\n    bool public frozen;\\n\\n    /// @dev max iterations that can be supported in 1 tx for the withdrawal\\n    uint256 internal maxVestingWithdrawIterations;\\n\\n    constructor() internal {\\n        //abstract\\n    }\\n}\\n\",\"keccak256\":\"0xf83eb462825c77f9c0629d15a52c8248cd1e9ce1e947c6ea93102d952790dca4\"},\"contracts/governance/Vesting/IVestingRegistry.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for upgradable Vesting Registry contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n */\\ninterface IVestingRegistry {\\n    function getVesting(address _tokenOwner) external view returns (address);\\n\\n    function getTeamVesting(address _tokenOwner) external view returns (address);\\n\\n    function setVestingRegistry(address _vestingRegistryProxy) external;\\n\\n    function isVestingAdress(address _vestingAddress) external view returns (bool); //name typo. to be deprecated.\\n\\n    function isVestingAddress(address _vestingAddress) external view returns (bool);\\n\\n    function isTeamVesting(address _vestingAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9f972c6eff9310beed9807757744bbaa0901c34df1cfff1eb5f58cf47b25904d\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) public view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) public returns (bool);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xea0bb1bf7d022130bb42a4efdfd875ef76ac5ac730a94ddd7b8c9949d4253855\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"},\"contracts/proxy/modules/interfaces/IFunctionsList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.17;\\n\\ninterface IFunctionsList {\\n    function getFunctionsList() external pure returns (bytes4[] memory functionSignatures);\\n}\\n\",\"keccak256\":\"0x38fb0166042329bc9ffcab69742f215efd135cdcf2d48b2202cb7f1546709101\"}},\"version\":1}",
    "bytecode": "0x60c0604052600a608081905269534f565374616b696e6760b01b60a09081526200002d9160029190620000ae565b506005805460ff19169055600d80546001600160a01b0316600360a01b179055600062000059620000a9565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000150565b335b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000f157805160ff191683800117855562000121565b8280016001018555821562000121579182015b828111156200012157825182559160200191906001019062000104565b506200012f92915062000133565b5090565b620000ab91905b808211156200012f57600081556001016200013a565b6115e180620001606000396000f3fe608060405234801561001057600080fd5b50600436106102105760003560e01c80638dae1b1611610125578063bb533cf2116100ad578063db27ec181161007c578063db27ec1814610411578063dfb267c214610424578063e7a324dc14610437578063f2fde38b1461043f578063f3f197311461045457610210565b8063bb533cf2146103d9578063bf626ec1146103ec578063d27569e7146103f4578063d8ad326d146103fc57610210565b80639929e886116100f45780639929e886146103a6578063a58848c5146103ae578063adae9002146103b6578063ae81dfe4146103c9578063b1724b46146103d157610210565b80638dae1b16146103585780638f32d59b1461036b5780639436e7d41461037357806394c2ce581461039357610210565b806337e6b1c1116101a857806368cefccc1161017757806368cefccc146102f65780636b6fde0e146103175780637ecebe001461032a57806380f51c121461033d5780638da5cb5b1461035057610210565b806337e6b1c1146102b5578063429b62e5146102c85780635c975abb146102db57806362cf8a08146102e357610210565b8063104932cf116101e4578063104932cf1461027057806317748adc1461027857806320606b701461028d57806327dd1b001461029557610210565b8062073f991461021557806303a18fa314610233578063054f7d9c1461024857806307392cc01461025d575b600080fd5b61021d610467565b60405161022a9190611416565b60405180910390f35b61023b61046d565b60405161022a9190611424565b61025061047c565b60405161022a9190611408565b61025061026b366004611066565b61048a565b61023b61049f565b6102806104ae565b60405161022a91906114cc565b61021d6104b3565b6102a86102a3366004610f3b565b6104ca565b60405161022a91906113e9565b6102806102c3366004610f75565b6104f0565b6102506102d6366004610f15565b610507565b61025061051c565b6102806102f1366004611084565b610525565b610309610304366004611023565b61053a565b60405161022a9291906114b1565b610309610325366004611023565b610575565b61021d610338366004610f15565b6105b0565b61025061034b366004610f15565b6105c2565b6102a86105d7565b610280610366366004610fc2565b6105e6565b610250610613565b610386610381366004611066565b610637565b60405161022a91906114a3565b6103866103a1366004610f3b565b61064f565b610250610672565b61023b61067b565b6102506103c4366004610f15565b61068a565b6102a861069f565b61021d6106b3565b6103866103e7366004611066565b6106bb565b6102806106d3565b6102806106e9565b6104046106ee565b60405161022a91906113f7565b61038661041f366004610f3b565b6107a8565b6103096104323660046110a3565b6107cb565b61021d610800565b61045261044d366004610f15565b61080c565b005b6103096104623660046110a3565b610845565b60015481565b600d546001600160a01b031681565b601554610100900460ff1681565b60106020526000908152604090205460ff1681565b6013546001600160a01b031681565b600981565b6040516104bf906113d3565b604051809103902081565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b60006104fd84848461087a565b90505b9392505050565b600f6020526000908152604090205460ff1681565b60155460ff1681565b6000610531838361090f565b90505b92915050565b600a60209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b600860209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b600c6020526000908152604090205481565b60146020526000908152604090205460ff1681565b6000546001600160a01b031690565b60006105f184610a3c565b93506105fc83610a3c565b925061060a85858585610a7c565b95945050505050565b600080546001600160a01b0316610628610b0a565b6001600160a01b031614905090565b60076020526000908152604090205463ffffffff1681565b600960209081526000928352604080842090915290825290205463ffffffff1681565b60055460ff1681565b6003546001600160a01b031681565b600e6020526000908152604090205460ff1681565b60055461010090046001600160a01b031681565b63059fa60081565b60126020526000908152604090205463ffffffff1681565b600d54600160a01b90046001600160601b031681565b600a81565b604080516003808252608082019092526060918291906020820183803883390190505090506337e6b1c160e01b8160008151811061072857fe5b6001600160e01b03199092166020928302919091019091015280516346d70d8b60e11b908290600190811061075957fe5b6001600160e01b0319909216602092830291909101909101528051630c59f14160e31b908290600290811061078a57fe5b6001600160e01b031990921660209283029190910190910152905090565b600b60209081526000928352604080842090915290825290205463ffffffff1681565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6040516104bf906113de565b610814610613565b6108395760405162461bcd60e51b815260040161083090611463565b60405180910390fd5b61084281610b0e565b50565b601160209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b60008061088683610a3c565b905063059fa6008101815b8181116109055760006108a68883868a610a7c565b90506001600160601b038116156108fa576108f785826040518060400160405280601d81526020017f6f766572666c6f77206f6e20746f74616c207765696768742063616c63000000815250610b8f565b94505b506212750001610891565b5050509392505050565b6000818310156109315760405162461bcd60e51b815260040161083090611473565b81830363059fa6008111156109585760405162461bcd60e51b815260040161083090611493565b6000620151808263059fa600036001600160601b03168161097557fe5b04905061060a600a621232106001600160601b03166109fb600a6009026109ca621232108788026040518060400160405280601081526020016f77656967687420756e646572666c6f7760801b815250610bc2565b60405180604001604052806013815260200172776569676874206d756c206f766572666c6f7760681b815250610c01565b6001600160601b031681610a0b57fe5b04604051806040016040528060128152602001711bdd995c999b1bddc81bdb881dd95a59da1d60721b815250610b8f565b60015460009080831015610a625760405162461bcd60e51b815260040161083090611443565b600062127500828503046212750002919091019392505050565b600080610a8a868685610c5f565b90506001600160601b03811615610afc576000610aa7868661090f565b9050600a6001600160601b0316610ae383836040518060400160405280600c81526020016b6d756c206f766572666c6f7760a01b815250610c01565b6001600160601b031681610af357fe5b04925050610b01565b600091505b50949350505050565b3390565b6001600160a01b038116610b345760405162461bcd60e51b815260040161083090611453565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000838301826001600160601b038087169083161015610b015760405162461bcd60e51b81526004016108309190611432565b6000836001600160601b0316836001600160601b031611158290610bf95760405162461bcd60e51b81526004016108309190611432565b505050900390565b60006001600160601b038416610c1957506000610500565b8383026001600160601b038085169080871690831681610c3557fe5b046001600160601b0316148390610b015760405162461bcd60e51b81526004016108309190611432565b6000610c69610eb4565b8210610c875760405162461bcd60e51b815260040161083090611483565b610c9083610eb8565b6001600160a01b0385166000908152600b6020908152604080832084845290915290205490935063ffffffff1680610ccc576000915050610500565b6001600160a01b0385166000908152600a60209081526040808320878452825280832063ffffffff600019860181168552925290912054168310610d58576001600160a01b0385166000908152600a6020908152604080832087845282528083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610500565b6001600160a01b0385166000908152600a60209081526040808320878452825280832083805290915290205463ffffffff16831015610d9b576000915050610500565b600060001982015b8163ffffffff168163ffffffff161115610e6657600282820363ffffffff16048103610dcd610edd565b506001600160a01b0388166000908152600a602090815260408083208a8452825280832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b03169181019190915290871415610e41576020015194506105009350505050565b805163ffffffff16871115610e5857819350610e5f565b6001820392505b5050610da3565b506001600160a01b0386166000908152600a60209081526040808320888452825280832063ffffffff909416835292905220546001600160601b03600160201b909104169150509392505050565b4390565b600080610ec483610a3c565b9050828114610ed65762127500810192505b5090919050565b604080518082019091526000808252602082015290565b803561053481611578565b80356105348161158c565b803561053481611595565b600060208284031215610f2757600080fd5b6000610f338484610ef4565b949350505050565b60008060408385031215610f4e57600080fd5b6000610f5a8585610ef4565b9250506020610f6b85828601610eff565b9150509250929050565b600080600060608486031215610f8a57600080fd5b6000610f968686610ef4565b9350506020610fa786828701610eff565b9250506040610fb886828701610eff565b9150509250925092565b60008060008060808587031215610fd857600080fd5b6000610fe48787610ef4565b9450506020610ff587828801610eff565b935050604061100687828801610eff565b925050606061101787828801610eff565b91505092959194509250565b60008060006060848603121561103857600080fd5b60006110448686610ef4565b935050602061105586828701610eff565b9250506040610fb886828701610f0a565b60006020828403121561107857600080fd5b6000610f338484610eff565b6000806040838503121561109757600080fd5b6000610f5a8585610eff565b600080604083850312156110b657600080fd5b60006110c28585610eff565b9250506020610f6b85828601610f0a565b60006110df8383611161565b505060200190565b6110f0816114f2565b82525050565b6000611101826114e0565b61110b81856114e4565b9350611116836114da565b8060005b8381101561114457815161112e88826110d3565b9750611139836114da565b92505060010161111a565b509495945050505050565b6110f0816114fd565b6110f081611502565b6110f081611505565b6110f081611533565b600061117e826114e0565b61118881856114e4565b935061119881856020860161153e565b6111a18161156e565b9093019392505050565b60006111b8601d836114e4565b7f74696d657374616d70203c20636f6e7472616374206372656174696f6e000000815260200192915050565b60006111f16026836114e4565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b60006112396043836114ed565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b60006112a4600c836114e4565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b60006112cc6010836114e4565b6f64617465203c2073746172744461746560801b815260200192915050565b60006112f8600e836114e4565b6d1b9bdd0819195d195c9b5a5b995960921b815260200192915050565b6000611322601d836114e4565b7f72656d61696e696e672074696d65203e206d6178206475726174696f6e000000815260200192915050565b600061135b604b836114ed565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206c6f636b446174652c75696e74323536206e6f6e63652c75696e7460208201526a323536206578706972792960a81b6040820152604b0192915050565b6110f08161151e565b6110f081611527565b60006105348261122c565b60006105348261134e565b6020810161053482846110e7565b6020808252810161053181846110f6565b60208101610534828461114f565b602081016105348284611158565b60208101610534828461116a565b602080825281016105318184611173565b60208082528101610534816111ab565b60208082528101610534816111e4565b6020808252810161053481611297565b60208082528101610534816112bf565b60208082528101610534816112eb565b6020808252810161053481611315565b6020810161053482846113c1565b604081016114bf82856113c1565b61050060208301846113ca565b6020810161053482846113ca565b60200190565b5190565b90815260200190565b919050565b600061053482611512565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b63ffffffff1690565b6001600160601b031690565b6000610534826114f2565b60005b83811015611559578181015183820152602001611541565b83811115611568576000848401525b50505050565b601f01601f191690565b611581816114f2565b811461084257600080fd5b61158181611502565b6115818161151e56fea365627a7a72315820d5ce43ce628f8b128b79c600ca6a89af16e5f0304966a5075a6e66ef51d3c4076c6578706572696d656e74616cf564736f6c63430005110040",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102105760003560e01c80638dae1b1611610125578063bb533cf2116100ad578063db27ec181161007c578063db27ec1814610411578063dfb267c214610424578063e7a324dc14610437578063f2fde38b1461043f578063f3f197311461045457610210565b8063bb533cf2146103d9578063bf626ec1146103ec578063d27569e7146103f4578063d8ad326d146103fc57610210565b80639929e886116100f45780639929e886146103a6578063a58848c5146103ae578063adae9002146103b6578063ae81dfe4146103c9578063b1724b46146103d157610210565b80638dae1b16146103585780638f32d59b1461036b5780639436e7d41461037357806394c2ce581461039357610210565b806337e6b1c1116101a857806368cefccc1161017757806368cefccc146102f65780636b6fde0e146103175780637ecebe001461032a57806380f51c121461033d5780638da5cb5b1461035057610210565b806337e6b1c1146102b5578063429b62e5146102c85780635c975abb146102db57806362cf8a08146102e357610210565b8063104932cf116101e4578063104932cf1461027057806317748adc1461027857806320606b701461028d57806327dd1b001461029557610210565b8062073f991461021557806303a18fa314610233578063054f7d9c1461024857806307392cc01461025d575b600080fd5b61021d610467565b60405161022a9190611416565b60405180910390f35b61023b61046d565b60405161022a9190611424565b61025061047c565b60405161022a9190611408565b61025061026b366004611066565b61048a565b61023b61049f565b6102806104ae565b60405161022a91906114cc565b61021d6104b3565b6102a86102a3366004610f3b565b6104ca565b60405161022a91906113e9565b6102806102c3366004610f75565b6104f0565b6102506102d6366004610f15565b610507565b61025061051c565b6102806102f1366004611084565b610525565b610309610304366004611023565b61053a565b60405161022a9291906114b1565b610309610325366004611023565b610575565b61021d610338366004610f15565b6105b0565b61025061034b366004610f15565b6105c2565b6102a86105d7565b610280610366366004610fc2565b6105e6565b610250610613565b610386610381366004611066565b610637565b60405161022a91906114a3565b6103866103a1366004610f3b565b61064f565b610250610672565b61023b61067b565b6102506103c4366004610f15565b61068a565b6102a861069f565b61021d6106b3565b6103866103e7366004611066565b6106bb565b6102806106d3565b6102806106e9565b6104046106ee565b60405161022a91906113f7565b61038661041f366004610f3b565b6107a8565b6103096104323660046110a3565b6107cb565b61021d610800565b61045261044d366004610f15565b61080c565b005b6103096104623660046110a3565b610845565b60015481565b600d546001600160a01b031681565b601554610100900460ff1681565b60106020526000908152604090205460ff1681565b6013546001600160a01b031681565b600981565b6040516104bf906113d3565b604051809103902081565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b60006104fd84848461087a565b90505b9392505050565b600f6020526000908152604090205460ff1681565b60155460ff1681565b6000610531838361090f565b90505b92915050565b600a60209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b600860209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b600c6020526000908152604090205481565b60146020526000908152604090205460ff1681565b6000546001600160a01b031690565b60006105f184610a3c565b93506105fc83610a3c565b925061060a85858585610a7c565b95945050505050565b600080546001600160a01b0316610628610b0a565b6001600160a01b031614905090565b60076020526000908152604090205463ffffffff1681565b600960209081526000928352604080842090915290825290205463ffffffff1681565b60055460ff1681565b6003546001600160a01b031681565b600e6020526000908152604090205460ff1681565b60055461010090046001600160a01b031681565b63059fa60081565b60126020526000908152604090205463ffffffff1681565b600d54600160a01b90046001600160601b031681565b600a81565b604080516003808252608082019092526060918291906020820183803883390190505090506337e6b1c160e01b8160008151811061072857fe5b6001600160e01b03199092166020928302919091019091015280516346d70d8b60e11b908290600190811061075957fe5b6001600160e01b0319909216602092830291909101909101528051630c59f14160e31b908290600290811061078a57fe5b6001600160e01b031990921660209283029190910190910152905090565b600b60209081526000928352604080842090915290825290205463ffffffff1681565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6040516104bf906113de565b610814610613565b6108395760405162461bcd60e51b815260040161083090611463565b60405180910390fd5b61084281610b0e565b50565b601160209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b60008061088683610a3c565b905063059fa6008101815b8181116109055760006108a68883868a610a7c565b90506001600160601b038116156108fa576108f785826040518060400160405280601d81526020017f6f766572666c6f77206f6e20746f74616c207765696768742063616c63000000815250610b8f565b94505b506212750001610891565b5050509392505050565b6000818310156109315760405162461bcd60e51b815260040161083090611473565b81830363059fa6008111156109585760405162461bcd60e51b815260040161083090611493565b6000620151808263059fa600036001600160601b03168161097557fe5b04905061060a600a621232106001600160601b03166109fb600a6009026109ca621232108788026040518060400160405280601081526020016f77656967687420756e646572666c6f7760801b815250610bc2565b60405180604001604052806013815260200172776569676874206d756c206f766572666c6f7760681b815250610c01565b6001600160601b031681610a0b57fe5b04604051806040016040528060128152602001711bdd995c999b1bddc81bdb881dd95a59da1d60721b815250610b8f565b60015460009080831015610a625760405162461bcd60e51b815260040161083090611443565b600062127500828503046212750002919091019392505050565b600080610a8a868685610c5f565b90506001600160601b03811615610afc576000610aa7868661090f565b9050600a6001600160601b0316610ae383836040518060400160405280600c81526020016b6d756c206f766572666c6f7760a01b815250610c01565b6001600160601b031681610af357fe5b04925050610b01565b600091505b50949350505050565b3390565b6001600160a01b038116610b345760405162461bcd60e51b815260040161083090611453565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000838301826001600160601b038087169083161015610b015760405162461bcd60e51b81526004016108309190611432565b6000836001600160601b0316836001600160601b031611158290610bf95760405162461bcd60e51b81526004016108309190611432565b505050900390565b60006001600160601b038416610c1957506000610500565b8383026001600160601b038085169080871690831681610c3557fe5b046001600160601b0316148390610b015760405162461bcd60e51b81526004016108309190611432565b6000610c69610eb4565b8210610c875760405162461bcd60e51b815260040161083090611483565b610c9083610eb8565b6001600160a01b0385166000908152600b6020908152604080832084845290915290205490935063ffffffff1680610ccc576000915050610500565b6001600160a01b0385166000908152600a60209081526040808320878452825280832063ffffffff600019860181168552925290912054168310610d58576001600160a01b0385166000908152600a6020908152604080832087845282528083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610500565b6001600160a01b0385166000908152600a60209081526040808320878452825280832083805290915290205463ffffffff16831015610d9b576000915050610500565b600060001982015b8163ffffffff168163ffffffff161115610e6657600282820363ffffffff16048103610dcd610edd565b506001600160a01b0388166000908152600a602090815260408083208a8452825280832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b03169181019190915290871415610e41576020015194506105009350505050565b805163ffffffff16871115610e5857819350610e5f565b6001820392505b5050610da3565b506001600160a01b0386166000908152600a60209081526040808320888452825280832063ffffffff909416835292905220546001600160601b03600160201b909104169150509392505050565b4390565b600080610ec483610a3c565b9050828114610ed65762127500810192505b5090919050565b604080518082019091526000808252602082015290565b803561053481611578565b80356105348161158c565b803561053481611595565b600060208284031215610f2757600080fd5b6000610f338484610ef4565b949350505050565b60008060408385031215610f4e57600080fd5b6000610f5a8585610ef4565b9250506020610f6b85828601610eff565b9150509250929050565b600080600060608486031215610f8a57600080fd5b6000610f968686610ef4565b9350506020610fa786828701610eff565b9250506040610fb886828701610eff565b9150509250925092565b60008060008060808587031215610fd857600080fd5b6000610fe48787610ef4565b9450506020610ff587828801610eff565b935050604061100687828801610eff565b925050606061101787828801610eff565b91505092959194509250565b60008060006060848603121561103857600080fd5b60006110448686610ef4565b935050602061105586828701610eff565b9250506040610fb886828701610f0a565b60006020828403121561107857600080fd5b6000610f338484610eff565b6000806040838503121561109757600080fd5b6000610f5a8585610eff565b600080604083850312156110b657600080fd5b60006110c28585610eff565b9250506020610f6b85828601610f0a565b60006110df8383611161565b505060200190565b6110f0816114f2565b82525050565b6000611101826114e0565b61110b81856114e4565b9350611116836114da565b8060005b8381101561114457815161112e88826110d3565b9750611139836114da565b92505060010161111a565b509495945050505050565b6110f0816114fd565b6110f081611502565b6110f081611505565b6110f081611533565b600061117e826114e0565b61118881856114e4565b935061119881856020860161153e565b6111a18161156e565b9093019392505050565b60006111b8601d836114e4565b7f74696d657374616d70203c20636f6e7472616374206372656174696f6e000000815260200192915050565b60006111f16026836114e4565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b60006112396043836114ed565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b60006112a4600c836114e4565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b60006112cc6010836114e4565b6f64617465203c2073746172744461746560801b815260200192915050565b60006112f8600e836114e4565b6d1b9bdd0819195d195c9b5a5b995960921b815260200192915050565b6000611322601d836114e4565b7f72656d61696e696e672074696d65203e206d6178206475726174696f6e000000815260200192915050565b600061135b604b836114ed565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206c6f636b446174652c75696e74323536206e6f6e63652c75696e7460208201526a323536206578706972792960a81b6040820152604b0192915050565b6110f08161151e565b6110f081611527565b60006105348261122c565b60006105348261134e565b6020810161053482846110e7565b6020808252810161053181846110f6565b60208101610534828461114f565b602081016105348284611158565b60208101610534828461116a565b602080825281016105318184611173565b60208082528101610534816111ab565b60208082528101610534816111e4565b6020808252810161053481611297565b60208082528101610534816112bf565b60208082528101610534816112eb565b6020808252810161053481611315565b6020810161053482846113c1565b604081016114bf82856113c1565b61050060208301846113ca565b6020810161053482846113ca565b60200190565b5190565b90815260200190565b919050565b600061053482611512565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b63ffffffff1690565b6001600160601b031690565b6000610534826114f2565b60005b83811015611559578181015183820152602001611541565b83811115611568576000848401525b50505050565b601f01601f191690565b611581816114f2565b811461084257600080fd5b61158181611502565b6115818161151e56fea365627a7a72315820d5ce43ce628f8b128b79c600ca6a89af16e5f0304966a5075a6e66ef51d3c4076c6578706572696d656e74616cf564736f6c63430005110040",
    "devdoc": {
        "methods": {
            "computeWeightByDate(uint256,uint256)": {
                "params": {
                    "date": "The unlocking date.",
                    "startDate": "We compute the weight for the tokens staked until 'date' on 'startDate'."
                },
                "return": "The weighted stake the account had as of the given block."
            },
            "getPriorWeightedStake(address,uint256,uint256)": {
                "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.     Used for fee sharing, not voting.",
                "params": {
                    "account": "The address of the account to check.",
                    "blockNumber": "The block number to get the vote balance at.",
                    "date": "The date/timestamp of the unstaking time."
                },
                "return": "The weighted stake the account had as of the given block."
            },
            "isOwner()": {
                "details": "Returns true if the caller is the current owner."
            },
            "owner()": {
                "details": "Returns the address of the current owner."
            },
            "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            },
            "weightedStakeByDate(address,uint256,uint256,uint256)": {
                "params": {
                    "account": "The user address.",
                    "blockNumber": "The block number, needed for checkpointing.",
                    "date": "The staking date to compute the power for. Adjusted to the previous valid lock date, if necessary.",
                    "startDate": "The date for which we need to know the power of the stake. Adjusted to the previous valid lock date, if necessary."
                },
                "return": "The staking power."
            }
        },
        "title": "Weighted Staking module contract."
    },
    "userdoc": {
        "methods": {
            "computeWeightByDate(uint256,uint256)": {
                "notice": "Compute the weight for a specific date."
            },
            "getPriorWeightedStake(address,uint256,uint256)": {
                "notice": "Determine the prior weighted stake for an account as of a block number. Iterate through checkpoints adding up voting power."
            },
            "weightedStakeByDate(address,uint256,uint256,uint256)": {
                "notice": "Compute the voting power for a specific date. Power = stake * weight"
            }
        },
        "notice": "Implements getters for weighted staking functionality"
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 52587,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
            },
            {
                "astId": 22109,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "kickoffTS",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
            },
            {
                "astId": 22112,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "name",
                "offset": 0,
                "slot": "2",
                "type": "t_string_storage"
            },
            {
                "astId": 22114,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "SOVToken",
                "offset": 0,
                "slot": "3",
                "type": "t_contract(IERC20)31656"
            },
            {
                "astId": 22120,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "delegates",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
            },
            {
                "astId": 22123,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "allUnlocked",
                "offset": 0,
                "slot": "5",
                "type": "t_bool"
            },
            {
                "astId": 22135,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "newStakingContract",
                "offset": 1,
                "slot": "5",
                "type": "t_address"
            },
            {
                "astId": 22146,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "totalStakingCheckpoints",
                "offset": 0,
                "slot": "6",
                "type": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)22140_storage))"
            },
            {
                "astId": 22150,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "numTotalStakingCheckpoints",
                "offset": 0,
                "slot": "7",
                "type": "t_mapping(t_uint256,t_uint32)"
            },
            {
                "astId": 22158,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "delegateStakingCheckpoints",
                "offset": 0,
                "slot": "8",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)22140_storage)))"
            },
            {
                "astId": 22164,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "numDelegateStakingCheckpoints",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint32))"
            },
            {
                "astId": 22172,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "userStakingCheckpoints",
                "offset": 0,
                "slot": "10",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)22140_storage)))"
            },
            {
                "astId": 22178,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "numUserStakingCheckpoints",
                "offset": 0,
                "slot": "11",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint32))"
            },
            {
                "astId": 22182,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "nonces",
                "offset": 0,
                "slot": "12",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 22184,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "feeSharing",
                "offset": 0,
                "slot": "13",
                "type": "t_contract(IFeeSharingCollector)15397"
            },
            {
                "astId": 22187,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "weightScaling",
                "offset": 20,
                "slot": "13",
                "type": "t_uint96"
            },
            {
                "astId": 22191,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "vestingWhitelist",
                "offset": 0,
                "slot": "14",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 22195,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "admins",
                "offset": 0,
                "slot": "15",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 22199,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "vestingCodeHashes",
                "offset": 0,
                "slot": "16",
                "type": "t_mapping(t_bytes32,t_bool)"
            },
            {
                "astId": 22205,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "vestingCheckpoints",
                "offset": 0,
                "slot": "17",
                "type": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)22140_storage))"
            },
            {
                "astId": 22209,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "numVestingCheckpoints",
                "offset": 0,
                "slot": "18",
                "type": "t_mapping(t_uint256,t_uint32)"
            },
            {
                "astId": 22211,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "vestingRegistryLogic",
                "offset": 0,
                "slot": "19",
                "type": "t_contract(IVestingRegistry)24488"
            },
            {
                "astId": 22215,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "pausers",
                "offset": 0,
                "slot": "20",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 22217,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "paused",
                "offset": 0,
                "slot": "21",
                "type": "t_bool"
            },
            {
                "astId": 22219,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "frozen",
                "offset": 1,
                "slot": "21",
                "type": "t_bool"
            },
            {
                "astId": 22221,
                "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                "label": "maxVestingWithdrawIterations",
                "offset": 0,
                "slot": "22",
                "type": "t_uint256"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
            },
            "t_contract(IERC20)31656": {
                "encoding": "inplace",
                "label": "contract IERC20",
                "numberOfBytes": "20"
            },
            "t_contract(IFeeSharingCollector)15397": {
                "encoding": "inplace",
                "label": "contract IFeeSharingCollector",
                "numberOfBytes": "20"
            },
            "t_contract(IVestingRegistry)24488": {
                "encoding": "inplace",
                "label": "contract IVestingRegistry",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => address))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)22140_storage)))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => mapping(uint32 => struct StakingStorageShared.Checkpoint)))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)22140_storage))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint32))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => uint32))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_bytes32,t_bool)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_uint256,t_address)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
            },
            "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)22140_storage))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(uint32 => struct StakingStorageShared.Checkpoint))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint32,t_struct(Checkpoint)22140_storage)"
            },
            "t_mapping(t_uint256,t_uint32)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => uint32)",
                "numberOfBytes": "32",
                "value": "t_uint32"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)22140_storage)": {
                "encoding": "mapping",
                "key": "t_uint32",
                "label": "mapping(uint32 => struct StakingStorageShared.Checkpoint)",
                "numberOfBytes": "32",
                "value": "t_struct(Checkpoint)22140_storage"
            },
            "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)22140_storage": {
                "encoding": "inplace",
                "label": "struct StakingStorageShared.Checkpoint",
                "members": [
                    {
                        "astId": 22137,
                        "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                        "label": "fromBlock",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint32"
                    },
                    {
                        "astId": 22139,
                        "contract": "contracts/governance/Staking/modules/WeightedStakingModule.sol:WeightedStakingModule",
                        "label": "stake",
                        "offset": 4,
                        "slot": "0",
                        "type": "t_uint96"
                    }
                ],
                "numberOfBytes": "32"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            },
            "t_uint32": {
                "encoding": "inplace",
                "label": "uint32",
                "numberOfBytes": "4"
            },
            "t_uint96": {
                "encoding": "inplace",
                "label": "uint96",
                "numberOfBytes": "12"
            }
        }
    }
}
