{
    "address": "0x164E4f8c386da88Ff474E4456EFf917cF46767Bc",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_vestingLogic",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "constant": false,
        "inputs": [
          {
            "internalType": "address",
            "name": "_SOV",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_staking",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_tokenOwner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_cliff",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_duration",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_feeSharing",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_vestingOwner",
            "type": "address"
          }
        ],
        "name": "deployTeamVesting",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "internalType": "address",
            "name": "_SOV",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_staking",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_tokenOwner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_cliff",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_duration",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_feeSharing",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_vestingOwner",
            "type": "address"
          }
        ],
        "name": "deployVesting",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "isOwner",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "vestingLogic",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "transactionHash": "0x07e561de83e85fc6fc5a23d901bbcee494bc3450bbfeab65ddcffaf6a9f885cc",
    "receipt": {
      "to": null,
      "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
      "contractAddress": "0x164E4f8c386da88Ff474E4456EFf917cF46767Bc",
      "transactionIndex": 0,
      "gasUsed": "2593623",
      "logsBloom": "0x
      "blockHash": "0x148ce9cda6a6828be3277b2eadfe32c06668a74fdf432024d54f1ed87e4d59f0",
      "transactionHash": "0x07e561de83e85fc6fc5a23d901bbcee494bc3450bbfeab65ddcffaf6a9f885cc",
      "logs": [
        {
          "transactionIndex": 0,
          "blockNumber": 4639994,
          "transactionHash": "0x07e561de83e85fc6fc5a23d901bbcee494bc3450bbfeab65ddcffaf6a9f885cc",
          "address": "0x164E4f8c386da88Ff474E4456EFf917cF46767Bc",
          "topics": [
            "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x00000000000000000000000013be55487d37fe3c66ee7305e1e9c1ac85de75ae"
          ],
          "data": "0x",
          "logIndex": 0,
          "blockHash": "0x148ce9cda6a6828be3277b2eadfe32c06668a74fdf432024d54f1ed87e4d59f0"
        }
      ],
      "blockNumber": 4639994,
      "cumulativeGasUsed": "2593623",
      "status": 1,
      "byzantium": true
    },
    "args": [
      "0x07ba5E5bD20810A0B00b0B22D55243aAdd3F33E4"
    ],
    "numDeployments": 2,
    "solcInputHash": "aca886878e9e0827277d5a4711a5589b",
    "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingLogic\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SOV\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeSharing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingOwner\",\"type\":\"address\"}],\"name\":\"deployTeamVesting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SOV\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeSharing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingOwner\",\"type\":\"address\"}],\"name\":\"deployVesting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"deployTeamVesting(address,address,address,uint256,uint256,address,address)\":{\"params\":{\"_SOV\":\"The address of SOV token.\",\"_cliff\":\"The time interval to the first withdraw in seconds.\",\"_duration\":\"The total duration in seconds.\",\"_feeSharing\":\"The address of fee sharing contract.\",\"_staking\":\"The address of staking contract.\",\"_tokenOwner\":\"The owner of the tokens.\",\"_vestingOwner\":\"The address of an owner of vesting contract.\"},\"return\":\"The vesting contract address.\"},\"deployVesting(address,address,address,uint256,uint256,address,address)\":{\"params\":{\"_SOV\":\"the address of SOV token.\",\"_cliff\":\"The time interval to the first withdraw in seconds.\",\"_duration\":\"The total duration in seconds.\",\"_feeSharing\":\"The address of fee sharing contract.\",\"_staking\":\"The address of staking contract.\",\"_tokenOwner\":\"The owner of the tokens.\",\"_vestingOwner\":\"The address of an owner of vesting contract.\"},\"return\":\"The vesting contract address.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Vesting Factory: Contract to deploy vesting contracts of two types: vesting (TokenHolder) and team vesting (Multisig).\"},\"userdoc\":{\"methods\":{\"deployTeamVesting(address,address,address,uint256,uint256,address,address)\":{\"notice\":\"Deploys Team Vesting contract.\"},\"deployVesting(address,address,address,uint256,uint256,address,address)\":{\"notice\":\"Deploys Vesting contract.\"}},\"notice\":\"Factory pattern allows to create multiple instances of the same contract and keep track of them easier.\"}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Vesting/VestingFactory.sol\":\"VestingFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/governance/ApprovalReceiver.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"./ErrorDecoder.sol\\\";\\nimport \\\"../token/IApproveAndCall.sol\\\";\\n\\n/**\\n * @title Base contract for receiving approval from SOV token.\\n */\\ncontract ApprovalReceiver is ErrorDecoder, IApproveAndCall {\\n    modifier onlyThisContract() {\\n        // Accepts calls only from receiveApproval function.\\n        require(msg.sender == address(this), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _data The data will be used for low level call.\\n     */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external {\\n        // Accepts calls only from SOV token.\\n        require(msg.sender == _getToken(), \\\"unauthorized\\\");\\n        require(msg.sender == _token, \\\"unauthorized\\\");\\n\\n        // Only allowed methods.\\n        bool isAllowed = false;\\n        bytes4[] memory selectors = _getSelectors();\\n        bytes4 sig = _getSig(_data);\\n        for (uint256 i = 0; i < selectors.length; i++) {\\n            if (sig == selectors[i]) {\\n                isAllowed = true;\\n                break;\\n            }\\n        }\\n        require(isAllowed, \\\"method is not allowed\\\");\\n\\n        // Check sender and amount.\\n        address sender;\\n        uint256 amount;\\n        (, sender, amount) = abi.decode(\\n            abi.encodePacked(bytes28(0), _data),\\n            (bytes32, address, uint256)\\n        );\\n        require(sender == _sender, \\\"sender mismatch\\\");\\n        require(amount == _amount, \\\"amount mismatch\\\");\\n\\n        _call(_data);\\n    }\\n\\n    /**\\n     * @notice Returns token address, only this address can be a sender for receiveApproval.\\n     * @dev Should be overridden in child contracts, otherwise error will be thrown.\\n     * @return By default, 0x. When overriden, the token address making the call.\\n     */\\n    function _getToken() internal view returns (address) {\\n        return address(0);\\n    }\\n\\n    /**\\n     * @notice Returns list of function selectors allowed to be invoked.\\n     * @dev Should be overridden in child contracts, otherwise error will be thrown.\\n     * @return By default, empty array. When overriden, allowed selectors.\\n     */\\n    function _getSelectors() internal pure returns (bytes4[] memory) {\\n        return new bytes4[](0);\\n    }\\n\\n    /**\\n     * @notice Makes call and reverts w/ enhanced error message.\\n     * @param _data Error message as bytes.\\n     */\\n    function _call(bytes memory _data) internal {\\n        (bool success, bytes memory returnData) = address(this).call(_data);\\n        if (!success) {\\n            if (returnData.length <= ERROR_MESSAGE_SHIFT) {\\n                revert(\\\"receiveApproval: Transaction execution reverted.\\\");\\n            } else {\\n                revert(_addErrorMessage(\\\"receiveApproval: \\\", string(returnData)));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Extracts the called function selector, a hash of the signature.\\n     * @dev The first four bytes of the call data for a function call specifies\\n     * the function to be called. It is the first (left, high-order in big-endian)\\n     * four bytes of the Keccak-256 (SHA-3) hash of the signature of the function.\\n     * Solidity doesn't yet support a casting of byte[4] to bytes4.\\n     * Example:\\n     *  msg.data:\\n     *    0xcdcd77c000000000000000000000000000000000000000000000000000000000000\\n     *    000450000000000000000000000000000000000000000000000000000000000000001\\n     *  selector (or method ID): 0xcdcd77c0\\n     *  signature: baz(uint32,bool)\\n     * @param _data The msg.data from the low level call.\\n     * @return sig First 4 bytes of msg.data i.e. the selector, hash of the signature.\\n     */\\n    function _getSig(bytes memory _data) internal pure returns (bytes4 sig) {\\n        assembly {\\n            sig := mload(add(_data, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfec344456774fa83b0885dd71825ccb6780be8db63c394f3ca09107977c65429\"},\"contracts/governance/ErrorDecoder.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Base contract to properly handle returned data on failed calls\\n * @dev On EVM if the return data length of a call is less than 68,\\n * then the transaction fails silently without a revert message!\\n *\\n * As described in the Solidity documentation\\n * https://solidity.readthedocs.io/en/v0.5.17/control-structures.html#revert\\n * the revert reason is an ABI-encoded string consisting of:\\n * 0x08c379a0 // Function selector (method id) for \\\"Error(string)\\\" signature\\n * 0x0000000000000000000000000000000000000000000000000000000000000020 // Data offset\\n * 0x000000000000000000000000000000000000000000000000000000000000001a // String length\\n * 0x4e6f7420656e6f7567682045746865722070726f76696465642e000000000000 // String data\\n *\\n * Another example, debug data from test:\\n *   0x08c379a0\\n *   0000000000000000000000000000000000000000000000000000000000000020\\n *   0000000000000000000000000000000000000000000000000000000000000034\\n *   54696d656c6f636b3a3a73657444656c61793a2044656c6179206d7573742065\\n *   7863656564206d696e696d756d2064656c61792e000000000000000000000000\\n *\\n * Parsed into:\\n *   Data offset: 20\\n *   Length: 34\\n *   Error message:\\n *     54696d656c6f636b3a3a73657444656c61793a2044656c6179206d7573742065\\n *     7863656564206d696e696d756d2064656c61792e000000000000000000000000\\n */\\ncontract ErrorDecoder {\\n    uint256 constant ERROR_MESSAGE_SHIFT = 68; // EVM silent revert error string length\\n\\n    /**\\n     * @notice Concats two error strings taking into account ERROR_MESSAGE_SHIFT.\\n     * @param str1 First string, usually a hardcoded context written by dev.\\n     * @param str2 Second string, usually the error message from the reverted call.\\n     * @return The concatenated error string\\n     */\\n    function _addErrorMessage(string memory str1, string memory str2)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory bytesStr1 = bytes(str1);\\n        bytes memory bytesStr2 = bytes(str2);\\n        string memory str12 =\\n            new string(bytesStr1.length + bytesStr2.length - ERROR_MESSAGE_SHIFT);\\n        bytes memory bytesStr12 = bytes(str12);\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < bytesStr1.length; i++) {\\n            bytesStr12[j++] = bytesStr1[i];\\n        }\\n        for (uint256 i = ERROR_MESSAGE_SHIFT; i < bytesStr2.length; i++) {\\n            bytesStr12[j++] = bytesStr2[i];\\n        }\\n        return string(bytesStr12);\\n    }\\n}\\n\",\"keccak256\":\"0xa0fa7986924aab574ca9e7c265f8c7bf00671ba1d86dbad143df7c14455f1c6a\"},\"contracts/governance/IFeeSharingCollector.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for contract governance/FeeSharingCollector/FeeSharingCollector.sol\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * */\\ninterface IFeeSharingCollector {\\n    function withdrawFees(address[] calldata _token) external;\\n\\n    function transferTokens(address _token, uint96 _amount) external;\\n\\n    function withdraw(\\n        address _loanPoolToken,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7794cb434d9395ea983dcf8ded48db5b68897a338429320f60172c4caa47fb40\"},\"contracts/governance/Staking/interfaces/IStaking.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Interface for Staking modules governance/Staking/modules\\n */\\n\\ninterface IStaking {\\n    /*************************** StakingAdminModule ***************************/\\n\\n    /**\\n     * @notice Add account to Admins ACL.\\n     * @param _admin The addresses of the account to grant permissions.\\n     * */\\n    function addAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Remove account from Admins ACL.\\n     * @param _admin The addresses of the account to revoke permissions.\\n     * */\\n    function removeAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Add account to pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function addPauser(address _pauser) external;\\n\\n    /**\\n     * @notice Remove account from pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function removePauser(address _pauser) external;\\n\\n    /**\\n     * @notice Pause/unpause contract\\n     * @param _pause true when pausing, false when unpausing\\n     * */\\n    function pauseUnpause(bool _pause) external;\\n\\n    /**\\n     * @notice Freeze contract - disable all functions\\n     * @param _freeze true when freezing, false when unfreezing\\n     * @dev When freezing, pause is always applied too. When unfreezing, the contract is left in paused stated.\\n     * */\\n    function freezeUnfreeze(bool _freeze) external;\\n\\n    /**\\n     * @notice Allows the owner to set a fee sharing proxy contract.\\n     * We need it for unstaking with slashing.\\n     * @param _feeSharing The address of FeeSharingCollectorProxy contract.\\n     * */\\n    function setFeeSharing(address _feeSharing) external;\\n\\n    /**\\n     * @notice Allow the owner to set weight scaling.\\n     * We need it for unstaking with slashing.\\n     * @param _weightScaling The weight scaling.\\n     * */\\n    function setWeightScaling(uint96 _weightScaling) external;\\n\\n    /**\\n     * @notice Allow the owner to set a new staking contract.\\n     * As a consequence it allows the stakers to migrate their positions\\n     * to the new contract.\\n     * @dev Doesn't have any influence as long as migrateToNewStakingContract\\n     * is not implemented.\\n     * @param _newStakingContract The address of the new staking contract.\\n     * */\\n    function setNewStakingContract(address _newStakingContract) external;\\n\\n    /**\\n     * @notice Allow a staker to migrate his positions to the new staking contract.\\n     * @dev Staking contract needs to be set before by the owner.\\n     * Currently not implemented, just needed for the interface.\\n     *      In case it's needed at some point in the future,\\n     *      the implementation needs to be changed first.\\n     * */\\n    function migrateToNewStakingContract() external; // dummy - not implemented as of now\\n\\n    /*************************** StakingGovernanceModule ***************************/\\n\\n    /**\\n     * @notice Compute the total voting power at a given time.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @param time The timestamp for which to calculate the total voting power.\\n     * @return The total voting power at the given time.\\n     * */\\n    function getPriorTotalVotingPower(uint32 blockNumber, uint256 time)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Get the current votes balance for a user account.\\n     * @param account The address to get votes balance.\\n     * @dev This is a wrapper to simplify arguments. The actual computation is\\n     * performed on WeightedStaking parent contract.\\n     * @return The number of current votes for a user account.\\n     * */\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of votes for a delegatee as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will revert\\n     * to prevent misinformation.\\n     *      Used for Voting, not for fee sharing.\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The number of votes the delegatee had as of the given block.\\n     * */\\n    function getPriorVotes(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The staking date to compute the power for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorStakeByDateForDelegatee(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an unlocking date as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * TODO: WeightedStaking::getPriorTotalStakesForDate should probably better\\n     * be internal instead of a public function.\\n     * @param date The date to check the stakes for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorTotalStakesForDate(uint256 date, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` which are locked until lockDate to `delegatee`.\\n     * @param delegatee The address to delegate votes to.\\n     * @param lockDate the date if the position to delegate.\\n     * */\\n    function delegate(address delegatee, uint256 lockDate) external;\\n\\n    /*************************** StakingStakeModule ***************************/\\n\\n    event TokensStaked(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 lockedUntil,\\n        uint256 totalStaked\\n    );\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stake(\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @dev This function will be invoked from receiveApproval\\n     * @dev SOV.approveAndCall -> this.receiveApproval -> this.stakeWithApproval\\n     * @param sender The sender of SOV.approveAndCall\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeWithApproval(\\n        address sender,\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _data The data will be used for low level call.\\n     */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Extend the staking duration until the specified date.\\n     * @param previousLock The old unlocking timestamp.\\n     * @param until The new unlocking timestamp in seconds.\\n     * */\\n    function extendStakingDuration(uint256 previousLock, uint256 until) external;\\n\\n    /**\\n     * @dev DO NOT USE this misspelled function. Use stakeBySchedule function instead.\\n     * This function cannot be deprecated while we have non-upgradeable vesting contracts.\\n     * */\\n    function stakesBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Stake tokens according to the vesting schedule.\\n     * @param amount The amount of tokens to stake.\\n     * @param cliff The time interval to the first withdraw.\\n     * @param duration The staking duration.\\n     * @param intervalLength The length of each staking interval when cliff passed.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Get the number of staked tokens held by the user account.\\n     * @dev Iterate checkpoints adding up stakes.\\n     * @param account The address of the account to get the balance of.\\n     * @return The number of tokens held.\\n     * */\\n    function balanceOf(address account) external view returns (uint96 balance);\\n\\n    /**\\n     * @notice Get the current number of tokens staked for a day.\\n     * @param lockedTS The timestamp to get the staked tokens for.\\n     * */\\n    function getCurrentStakedUntil(uint256 lockedTS) external view returns (uint96);\\n\\n    /**\\n     * @notice Get list of stakes for a user account.\\n     * @param account The address to get stakes.\\n     * @return The arrays of dates and stakes.\\n     * */\\n    function getStakes(address account)\\n        external\\n        view\\n        returns (uint256[] memory dates, uint96[] memory stakes);\\n\\n    /**\\n     * @notice Unstaking is possible every 2 weeks only. This means, to\\n     * calculate the key value for the staking checkpoints, we need to\\n     * map the intended timestamp to the closest available date.\\n     * @param timestamp The unlocking timestamp.\\n     * @return The actual unlocking date (might be up to 2 weeks shorter than intended).\\n     * */\\n    function timestampToLockDate(uint256 timestamp) external view returns (uint256);\\n\\n    /*************************** StakingStorageModule ***************************/\\n\\n    /// @notice The maximum duration to stake tokens\\n    /// @return MAX_DURATION to stake tokens\\n    function getStorageMaxDurationToStakeTokens() external pure returns (uint256);\\n\\n    /// @notice The maximum possible voting weight before adding +1 (actually 10, but need 9 for computation).\\n    /// @return uint256(MAX_VOTING_WEIGHT);\\n    function getStorageMaxVotingWeight() external pure returns (uint256);\\n\\n    /// @notice weight is multiplied with this factor (for allowing decimals, like 1.2x).\\n    /// @dev MAX_VOTING_WEIGHT * WEIGHT_FACTOR needs to be < 792, because there are 100,000,000 SOV with 18 decimals\\n    /// @return uint256(WEIGHT_FACTOR);\\n    function getStorageWeightFactor() external pure returns (uint256);\\n\\n    /// @return uint256(DEFAULT_WEIGHT_SCALING);\\n    function getStorageDefaultWeightScaling() external pure returns (uint256);\\n\\n    /// @notice return (uint256(MIN_WEIGHT_SCALING), uint256(MAX_WEIGHT_SCALING))\\n    function getStorageRangeForWeightScaling()\\n        external\\n        pure\\n        returns (uint256 minWeightScaling, uint256 maxWeightScaling);\\n\\n    /// @notice The EIP-712 typehash for the contract's domain.\\n    /// @return uint256(DOMAIN_TYPEHASH);\\n    function getStorageDomainTypehash() external pure returns (uint256);\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\\n    /// @return uint256(DELEGATION_TYPEHASH);\\n    function getStorageDelegationTypehash() external pure returns (uint256);\\n\\n    /// @return name;\\n    function getStorageName() external view returns (string memory);\\n\\n    /// AUTOGENERATED FUNCTIONS FROM THE STAKING STORAGE PUBLIC VARIABLES ///\\n\\n    /// @notice The timestamp of contract creation. Base for the staking period calculation.\\n    function kickoffTS() external view returns (uint256);\\n\\n    /// @notice The token to be staked\\n    function SOVToken() external view returns (address);\\n\\n    /// @notice Stakers delegated voting power\\n    /// @param staker - the delegating address\\n    /// @param until - delegated voting\\n    /// @return _delegate - voting power delegated to address\\n    function delegates(address staker, uint256 until) external view returns (address _delegate);\\n\\n    /// @notice If this flag is set to true, all tokens are unlocked immediately\\n    /// see function unlockAllTokens() for details\\n    function allUnlocked() external view returns (bool);\\n\\n    /// @notice Used for stake migrations to a new staking contract with a different storage structure\\n    function newStakingContract() external view returns (address);\\n\\n    /// CHECKPOINTS\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 stake;\\n    }\\n\\n    /// @notice A record of tokens to be unstaked at a given time in total.\\n    /// For total voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev totalStakingCheckpoints[date][index] is a checkpoint\\n    function totalStakingCheckpoints(uint256 date, uint32 index)\\n        external\\n        view\\n        returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date.\\n    /// @dev numTotalStakingCheckpoints[date] is a number.\\n    function numTotalStakingCheckpoints(uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which were delegated to a certain address.\\n    /// For delegatee voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev delegateStakingCheckpoints[delegatee][date][index] is a checkpoint.\\n    function delegateStakingCheckpoints(\\n        address delagatee,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per delegate.\\n    /// @dev numDelegateStakingCheckpoints[delegatee][date] is a number.\\n    function numDelegateStakingCheckpoints(address delegatee, uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which per user address (address -> lockDate -> stake checkpoint)\\n    /// @dev userStakingCheckpoints[user][date][index] is a checkpoint.\\n    function userStakingCheckpoints(\\n        address user,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per user.\\n    /// @dev numUserStakingCheckpoints[user][date] is a number\\n    function numUserStakingCheckpoints(address user, uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of states for signing / validating signatures\\n    /// @dev nonces[user] is a number.\\n    function nonces(address user) external view returns (uint256 nonce);\\n\\n    /// SLASHING ///\\n\\n    /// @notice the address of FeeSharingCollectorProxy contract, we need it for unstaking with slashing.\\n    function feeSharing() external view returns (address);\\n\\n    /// @notice used for weight scaling when unstaking with slashing.\\n    /// @return uint96 DEFAULT_WEIGHT_SCALING\\n    function weightScaling() external view returns (uint96);\\n\\n    /// @notice List of vesting contracts, tokens for these contracts won't be slashed if unstaked by governance.\\n    /// @dev vestingWhitelist[contract] is true/false.\\n    function vestingWhitelist(address isWhitelisted) external view returns (bool);\\n\\n    /// @dev user => flag whether user has admin role.\\n    /// @dev multisig should be an admin, admin can invoke only governanceWithdrawVesting function,\\n    /// \\tthis function works only with Team Vesting contracts\\n    function admins(address isAdmin) external view returns (bool);\\n\\n    /// @dev vesting contract code hash => flag whether it's registered code hash\\n    function vestingCodeHashes(bytes32 vestingLogicCodeHash) external view returns (bool);\\n\\n    /// @notice A record of tokens to be unstaked from vesting contract at a given time (lockDate -> vest checkpoint)\\n    /// @dev vestingCheckpoints[date][index] is a checkpoint.\\n    function vestingCheckpoints(uint256 date, uint32 index)\\n        external\\n        view\\n        returns (Checkpoint memory);\\n\\n    /// @notice The number of total vesting checkpoints for each date.\\n    /// @dev numVestingCheckpoints[date] is a number.\\n    function numVestingCheckpoints(uint256 date) external view returns (uint32 checkpointsQty);\\n\\n    ///@notice vesting registry contract PROXY address\\n    function vestingRegistryLogic() external view returns (address);\\n\\n    /// @dev user => flag whether user has pauser role.\\n    function pausers(address isPauser) external view returns (bool);\\n\\n    /// @dev Staking contract is paused\\n    function paused() external view returns (bool);\\n\\n    /// @dev Staking contract is frozen\\n    function frozen() external view returns (bool);\\n\\n    /*************************** StakingVestingModule ***************************/\\n\\n    event VestingStakeSet(uint256 lockedTS, uint96 value);\\n\\n    /**\\n     * @notice Return flag whether the given address is a registered vesting contract.\\n     * @param stakerAddress the address to check\\n     */\\n    function isVestingContract(address stakerAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Remove vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function removeContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Add vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function addContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Determine the prior number of vested stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorVestingStakeByDate(uint256 date, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * @param date The staking date to compute the power for. Adjusted to the next valid lock date, if necessary.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedVestingStakeByDate(\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Determine the prior weighted vested amount for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     * TODO: WeightedStaking::getPriorVestingWeightedStake is using the variable name \\\"votes\\\"\\n     * to add up token stake, and that could be misleading.\\n     *\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorVestingWeightedStake(uint256 blockNumber, uint256 date)\\n        external\\n        view\\n        returns (uint96 votes);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorUserStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Sets the users' vesting stakes for a giving lock dates and writes checkpoints.\\n     * @param lockedDates The arrays of lock dates.\\n     * @param values The array of values to add to the staked balance.\\n     */\\n    function setVestingStakes(uint256[] calldata lockedDates, uint96[] calldata values) external;\\n\\n    /**\\n     * @notice sets vesting registry\\n     * @param _vestingRegistryProxy the address of vesting registry proxy contract\\n     * @dev _vestingRegistryProxy can be set to 0 as this function can be reused by\\n     * various other functionalities without the necessity of linking it with Vesting Registry\\n     */\\n    function setVestingRegistry(address _vestingRegistryProxy) external;\\n\\n    /*************************** StakingWithdrawModule ***************************/\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens if they are unlocked.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * */\\n    function withdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting\\n     * @dev **WARNING** This function should not be no longer used by Sovryn Protocol.\\n     * Sovryn protocol will use the cancelTeamVesting function for the withdrawal moving forward.\\n     * */\\n    function governanceWithdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw tokens for vesting contract.\\n     * @param vesting The address of Vesting contract.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting.\\n     * */\\n    function governanceWithdrawVesting(address vesting, address receiver) external;\\n\\n    /**\\n     * @notice Get available and punished amount for withdrawing.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * */\\n    function getWithdrawAmounts(uint96 amount, uint256 until)\\n        external\\n        view\\n        returns (uint96, uint96);\\n\\n    /**\\n     * @notice Allow the owner to unlock all tokens in case the staking contract\\n     * is going to be replaced\\n     * Note: Not reversible on purpose. once unlocked, everything is unlocked.\\n     * The owner should not be able to just quickly unlock to withdraw his own\\n     * tokens and lock again.\\n     * @dev Last resort.\\n     * */\\n    function unlockAllTokens() external;\\n\\n    /*************************** WeightedStakingModule ***************************/\\n\\n    /**\\n     * @notice Determine the prior weighted stake for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     *\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The date/timestamp of the unstaking time.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorWeightedStake(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96 priorWeightedStake);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * TODO: WeightedStaking::weightedStakeByDate should probably better\\n     * be internal instead of a public function.\\n     * @param account The user address.\\n     * @param date The staking date to compute the power for.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Compute the weight for a specific date.\\n     * @param date The unlocking date.\\n     * @param startDate We compute the weight for the tokens staked until 'date' on 'startDate'.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function computeWeightByDate(uint256 date, uint256 startDate)\\n        external\\n        pure\\n        returns (uint96 weight);\\n\\n    /**\\n     * @notice Returns public constant MAX_DURATION\\n     * preserved for backwards compatibility\\n     * Use getStorageMaxDurationToStakeTokens()\\n     * @return uint96 MAX_DURATION for staking\\n     **/\\n    function MAX_DURATION() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() external view returns (bool);\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @notice Governance withdraw vesting directly through staking contract.\\n     * This direct withdraw vesting solves the out of gas issue when there are too many iterations when withdrawing.\\n     * This function only allows cancelling vesting contract of the TeamVesting type.\\n     *\\n     * @param vesting The vesting address.\\n     * @param receiver The receiving address.\\n     * @param startFrom The start value for the iterations.\\n     */\\n    function cancelTeamVesting(\\n        address vesting,\\n        address receiver,\\n        uint256 startFrom\\n    ) external;\\n\\n    /**\\n     * @notice Max iteration for direct withdrawal from staking to prevent out of gas issue.\\n     *\\n     * @return max iteration value.\\n     */\\n    function getMaxVestingWithdrawIterations() external view returns (uint256);\\n\\n    /**\\n     * @dev set max withdraw iterations.\\n     *\\n     * @param maxIterations new max iterations value.\\n     */\\n    function setMaxVestingWithdrawIterations(uint256 maxIterations) external;\\n}\\n\",\"keccak256\":\"0x720bd2cc1042cb4abc2bd3a6839131638eafd3d224571ad9ac21cae36625ec2e\"},\"contracts/governance/Vesting/IVesting.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for Vesting contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * This interface is used by VestingLogic contract to implement stakeTokens function\\n * and on VestingRegistry contract to call IVesting(vesting).stakeTokens function\\n * at a vesting instance.\\n */\\ninterface IVesting {\\n    function duration() external returns (uint256);\\n\\n    function endDate() external returns (uint256);\\n\\n    function stakeTokens(uint256 amount) external;\\n\\n    function tokenOwner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3482a1e27402655f85f5ff2cb06e0876e9bb94e1a63446a09e33babd60274b4b\"},\"contracts/governance/Vesting/IVestingFactory.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for Vesting Factory contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * This interface is used by VestingFactory contract to override empty\\n * implemention of deployVesting and deployTeamVesting functions\\n * and on VestingRegistry contract to use an instance of VestingFactory.\\n */\\ninterface IVestingFactory {\\n    function deployVesting(\\n        address _SOV,\\n        address _staking,\\n        address _tokenOwner,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        address _feeSharing,\\n        address _owner\\n    ) external returns (address);\\n\\n    function deployTeamVesting(\\n        address _SOV,\\n        address _staking,\\n        address _tokenOwner,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        address _feeSharing,\\n        address _owner\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xc77e276b71ec23ca6d4eead9a842bc01cc37bcfe55a88528190f1f6106773175\"},\"contracts/governance/Vesting/TeamVesting.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../interfaces/IERC20.sol\\\";\\n//import \\\"../Staking/interfaces/IStaking.sol\\\";\\nimport \\\"../IFeeSharingCollector.sol\\\";\\nimport \\\"./IVesting.sol\\\";\\nimport \\\"../ApprovalReceiver.sol\\\";\\nimport \\\"./VestingStorage.sol\\\";\\nimport \\\"../../proxy/Proxy.sol\\\";\\n\\n/**\\n * @title Team Vesting Contract.\\n *\\n * @notice A regular vesting contract, but the owner (governance) is able to\\n * withdraw earlier without a slashing.\\n *\\n * @dev Vesting contracts shouldn't be upgradable,\\n * use Proxy instead of UpgradableProxy.\\n * */\\ncontract TeamVesting is VestingStorage, Proxy {\\n    /**\\n     * @notice Setup the vesting schedule.\\n     * @param _logic The address of logic contract.\\n     * @param _SOV The SOV token address.\\n     * @param _tokenOwner The owner of the tokens.\\n     * @param _cliff The time interval to the first withdraw in seconds.\\n     * @param _duration The total duration in seconds.\\n     * */\\n    constructor(\\n        address _logic,\\n        address _SOV,\\n        address _stakingAddress,\\n        address _tokenOwner,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        address _feeSharingCollector\\n    ) public {\\n        require(_SOV != address(0), \\\"SOV address invalid\\\");\\n        require(_stakingAddress != address(0), \\\"staking address invalid\\\");\\n        require(_tokenOwner != address(0), \\\"token owner address invalid\\\");\\n        require(_duration >= _cliff, \\\"duration must be bigger than or equal to the cliff\\\");\\n        require(_feeSharingCollector != address(0), \\\"feeSharingCollector address invalid\\\");\\n\\n        _setImplementation(_logic);\\n        SOV = IERC20(_SOV);\\n        staking = IStaking(_stakingAddress);\\n        require(_duration <= staking.MAX_DURATION(), \\\"duration may not exceed the max duration\\\");\\n        tokenOwner = _tokenOwner;\\n        cliff = _cliff;\\n        duration = _duration;\\n        feeSharingCollector = IFeeSharingCollector(_feeSharingCollector);\\n    }\\n}\\n\",\"keccak256\":\"0xba6c95ae79e37dc20ba1c67a48ec227f7b3c210078763b5e8ad20c8b3db0b645\"},\"contracts/governance/Vesting/Vesting.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./TeamVesting.sol\\\";\\n\\n/**\\n * @title Vesting Contract.\\n * @notice Team tokens and investor tokens are vested. Therefore, a smart\\n * contract needs to be developed to enforce the vesting schedule.\\n *\\n * */\\ncontract Vesting is TeamVesting {\\n    /**\\n     * @notice Setup the vesting schedule.\\n     * @param _logic The address of logic contract.\\n     * @param _SOV The SOV token address.\\n     * @param _tokenOwner The owner of the tokens.\\n     * @param _cliff The time interval to the first withdraw in seconds.\\n     * @param _duration The total duration in seconds.\\n     * */\\n    constructor(\\n        address _logic,\\n        address _SOV,\\n        address _stakingAddress,\\n        address _tokenOwner,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        address _feeSharingCollectorProxy\\n    )\\n        public\\n        TeamVesting(\\n            _logic,\\n            _SOV,\\n            _stakingAddress,\\n            _tokenOwner,\\n            _cliff,\\n            _duration,\\n            _feeSharingCollectorProxy\\n        )\\n    {}\\n\\n    /**\\n     * @dev We need to add this implementation to prevent proxy call VestingLogic.governanceWithdrawTokens\\n     * @param receiver The receiver of the token withdrawal.\\n     * */\\n    function governanceWithdrawTokens(address receiver) public {\\n        revert(\\\"operation not supported\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa042b910acc3bec9c75213160bc5257c3acade8ce56b4dd0777caab903d0ab23\"},\"contracts/governance/Vesting/VestingFactory.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../openzeppelin/Ownable.sol\\\";\\nimport \\\"./Vesting.sol\\\";\\nimport \\\"./TeamVesting.sol\\\";\\nimport \\\"./IVestingFactory.sol\\\";\\n\\n/**\\n * @title Vesting Factory: Contract to deploy vesting contracts\\n * of two types: vesting (TokenHolder) and team vesting (Multisig).\\n * @notice Factory pattern allows to create multiple instances\\n * of the same contract and keep track of them easier.\\n * */\\ncontract VestingFactory is IVestingFactory, Ownable {\\n    address public vestingLogic;\\n\\n    constructor(address _vestingLogic) public {\\n        require(_vestingLogic != address(0), \\\"invalid vesting logic address\\\");\\n        vestingLogic = _vestingLogic;\\n    }\\n\\n    /**\\n     * @notice Deploys Vesting contract.\\n     * @param _SOV the address of SOV token.\\n     * @param _staking The address of staking contract.\\n     * @param _tokenOwner The owner of the tokens.\\n     * @param _cliff The time interval to the first withdraw in seconds.\\n     * @param _duration The total duration in seconds.\\n     * @param _feeSharing The address of fee sharing contract.\\n     * @param _vestingOwner The address of an owner of vesting contract.\\n     * @return The vesting contract address.\\n     * */\\n    function deployVesting(\\n        address _SOV,\\n        address _staking,\\n        address _tokenOwner,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        address _feeSharing,\\n        address _vestingOwner\\n    )\\n        external\\n        onlyOwner /// @dev owner - VestingRegistry\\n        returns (address)\\n    {\\n        address vesting =\\n            address(\\n                new Vesting(\\n                    vestingLogic,\\n                    _SOV,\\n                    _staking,\\n                    _tokenOwner,\\n                    _cliff,\\n                    _duration,\\n                    _feeSharing\\n                )\\n            );\\n        Ownable(vesting).transferOwnership(_vestingOwner);\\n        return vesting;\\n    }\\n\\n    /**\\n     * @notice Deploys Team Vesting contract.\\n     * @param _SOV The address of SOV token.\\n     * @param _staking The address of staking contract.\\n     * @param _tokenOwner The owner of the tokens.\\n     * @param _cliff The time interval to the first withdraw in seconds.\\n     * @param _duration The total duration in seconds.\\n     * @param _feeSharing The address of fee sharing contract.\\n     * @param _vestingOwner The address of an owner of vesting contract.\\n     * @return The vesting contract address.\\n     * */\\n    function deployTeamVesting(\\n        address _SOV,\\n        address _staking,\\n        address _tokenOwner,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        address _feeSharing,\\n        address _vestingOwner\\n    )\\n        external\\n        onlyOwner //owner - VestingRegistry\\n        returns (address)\\n    {\\n        address vesting =\\n            address(\\n                new TeamVesting(\\n                    vestingLogic,\\n                    _SOV,\\n                    _staking,\\n                    _tokenOwner,\\n                    _cliff,\\n                    _duration,\\n                    _feeSharing\\n                )\\n            );\\n        Ownable(vesting).transferOwnership(_vestingOwner);\\n        return vesting;\\n    }\\n}\\n\",\"keccak256\":\"0x50ea6d6fc9ab0522c442bbf14be6a7fd0808fd96141d2d198c818b300e04298c\"},\"contracts/governance/Vesting/VestingStorage.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../Staking/interfaces/IStaking.sol\\\";\\nimport \\\"../IFeeSharingCollector.sol\\\";\\n\\n/**\\n * @title Vesting Storage Contract.\\n *\\n * @notice This contract is just the storage required for vesting.\\n * It is parent of VestingLogic and TeamVesting.\\n *\\n * @dev Use Ownable as a parent to align storage structure for Logic and Proxy contracts.\\n * */\\ncontract VestingStorage is Ownable {\\n    /// @notice The SOV token contract.\\n    IERC20 public SOV;\\n\\n    /// @notice The staking contract address.\\n    IStaking public staking;\\n\\n    /// @notice The owner of the vested tokens.\\n    address public tokenOwner;\\n\\n    /// @notice Fee sharing Proxy.\\n    IFeeSharingCollector public feeSharingCollector;\\n\\n    /// @notice The cliff. After this time period the tokens begin to unlock.\\n    uint256 public cliff;\\n\\n    /// @notice The duration. After this period all tokens will have been unlocked.\\n    uint256 public duration;\\n\\n    /// @notice The start date of the vesting.\\n    uint256 public startDate;\\n\\n    /// @notice The end date of the vesting.\\n    uint256 public endDate;\\n\\n    /// @notice Constant used for computing the vesting dates.\\n    uint256 constant FOUR_WEEKS = 4 weeks;\\n}\\n\",\"keccak256\":\"0xf70f579d357d8f0aa0839824c1a1d66713c3cd42a58118d2893a35b52baaa140\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _who) external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbc0c9bb48f19651930ec9aff366b2e11a1abf89c846e4b2d52d8102b15ce6721\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/proxy/Proxy.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Base Proxy contract.\\n * @notice The proxy performs delegated calls to the contract implementation\\n * it is pointing to. This way upgradable contracts are possible on blockchain.\\n *\\n * Delegating proxy contracts are widely used for both upgradeability and gas\\n * savings. These proxies rely on a logic contract (also known as implementation\\n * contract or master copy) that is called using delegatecall. This allows\\n * proxies to keep a persistent state (storage and balance) while the code is\\n * delegated to the logic contract.\\n *\\n * Proxy contract is meant to be inherited and its internal functions\\n * _setImplementation and _setProxyOwner to be called when upgrades become\\n * neccessary.\\n *\\n * The loan token (iToken) contract as well as the protocol contract act as\\n * proxies, delegating all calls to underlying contracts. Therefore, if you\\n * want to interact with them using web3, you need to use the ABIs from the\\n * contracts containing the actual logic or the interface contract.\\n *   ABI for LoanToken contracts: LoanTokenLogicStandard\\n *   ABI for Protocol contract: ISovryn\\n *\\n * @dev UpgradableProxy is the contract that inherits Proxy and wraps these\\n * functions.\\n * */\\ncontract Proxy {\\n    bytes32 private constant KEY_IMPLEMENTATION = keccak256(\\\"key.implementation\\\");\\n    bytes32 private constant KEY_OWNER = keccak256(\\\"key.proxy.owner\\\");\\n\\n    event OwnershipTransferred(address indexed _oldOwner, address indexed _newOwner);\\n    event ImplementationChanged(\\n        address indexed _oldImplementation,\\n        address indexed _newImplementation\\n    );\\n\\n    /**\\n     * @notice Set sender as an owner.\\n     * */\\n    constructor() public {\\n        _setProxyOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Throw error if called not by an owner.\\n     * */\\n    modifier onlyProxyOwner() {\\n        require(msg.sender == getProxyOwner(), \\\"Proxy:: access denied\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set address of the implementation.\\n     * @param _implementation Address of the implementation.\\n     * */\\n    function _setImplementation(address _implementation) internal {\\n        require(_implementation != address(0), \\\"Proxy::setImplementation: invalid address\\\");\\n        emit ImplementationChanged(getImplementation(), _implementation);\\n\\n        bytes32 key = KEY_IMPLEMENTATION;\\n        assembly {\\n            sstore(key, _implementation)\\n        }\\n    }\\n\\n    /**\\n     * @notice Return address of the implementation.\\n     * @return Address of the implementation.\\n     * */\\n    function getImplementation() public view returns (address _implementation) {\\n        bytes32 key = KEY_IMPLEMENTATION;\\n        assembly {\\n            _implementation := sload(key)\\n        }\\n    }\\n\\n    /**\\n     * @notice Set address of the owner.\\n     * @param _owner Address of the owner.\\n     * */\\n    function _setProxyOwner(address _owner) internal {\\n        require(_owner != address(0), \\\"Proxy::setProxyOwner: invalid address\\\");\\n        emit OwnershipTransferred(getProxyOwner(), _owner);\\n\\n        bytes32 key = KEY_OWNER;\\n        assembly {\\n            sstore(key, _owner)\\n        }\\n    }\\n\\n    /**\\n     * @notice Return address of the owner.\\n     * @return Address of the owner.\\n     * */\\n    function getProxyOwner() public view returns (address _owner) {\\n        bytes32 key = KEY_OWNER;\\n        assembly {\\n            _owner := sload(key)\\n        }\\n    }\\n\\n    /**\\n     * @notice Fallback function performs a delegate call\\n     * to the actual implementation address is pointing this proxy.\\n     * Returns whatever the implementation call returns.\\n     * */\\n    function() external payable {\\n        address implementation = getImplementation();\\n        require(implementation != address(0), \\\"Proxy::(): implementation not found\\\");\\n\\n        assembly {\\n            let pointer := mload(0x40)\\n            calldatacopy(pointer, 0, calldatasize)\\n            let result := delegatecall(gas, implementation, pointer, calldatasize, 0, 0)\\n            let size := returndatasize\\n            returndatacopy(pointer, 0, size)\\n\\n            switch result\\n                case 0 {\\n                    revert(pointer, size)\\n                }\\n                default {\\n                    return(pointer, size)\\n                }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8574814d1ea5b04efc8ef1e629e04e5783d4c106ff73a47c72e279c027a6a403\"},\"contracts/token/IApproveAndCall.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for contract governance/ApprovalReceiver.sol\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n */\\ninterface IApproveAndCall {\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _sender The sender of SOV.approveAndCall function.\\n     * @param _amount The amount was approved.\\n     * @param _token The address of token.\\n     * @param _data The data will be used for low level call.\\n     * */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0ca93f8436a4d81d80de5ea9214139b490d96f708f09c975a0869ce9abc61635\"}},\"version\":1}",
    "bytecode": "",
    "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200006a5760003560e01c8063546344f0146200006f5780638da5cb5b146200009e5780638f32d59b14620000a8578063c0cad24e14620000c1578063f2fde38b14620000cb578063fa5f771e14620000e4575b600080fd5b6200008662000080366004620003bc565b620000fb565b60405162000095919062000502565b60405180910390f35b62000086620001fd565b620000b26200020c565b60405162000095919062000588565b6200008662000232565b620000e2620000dc36600462000393565b62000241565b005b62000086620000f5366004620003bc565b62000278565b6000620001076200020c565b6200012f5760405162461bcd60e51b81526004016200012690620005aa565b60405180910390fd5b6000600160009054906101000a90046001600160a01b03168989898989896040516200015b9062000357565b6200016d979695949392919062000512565b604051809103906000f0801580156200018a573d6000803e3d6000fd5b5060405163f2fde38b60e01b81529091506001600160a01b0382169063f2fde38b90620001bc90869060040162000502565b600060405180830381600087803b158015620001d757600080fd5b505af1158015620001ec573d6000803e3d6000fd5b50929b9a5050505050505050505050565b6000546001600160a01b031690565b600080546001600160a01b031662000223620002cf565b6001600160a01b031614905090565b6001546001600160a01b031681565b6200024b6200020c565b6200026a5760405162461bcd60e51b81526004016200012690620005aa565b6200027581620002d3565b50565b6000620002846200020c565b620002a35760405162461bcd60e51b81526004016200012690620005aa565b6000600160009054906101000a90046001600160a01b03168989898989896040516200015b9062000365565b3390565b6001600160a01b038116620002fc5760405162461bcd60e51b8152600401620001269062000598565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b610ed5806200060983390190565b610f7f80620014de83390190565b80356200038081620005e6565b92915050565b80356200038081620005fd565b600060208284031215620003a657600080fd5b6000620003b4848462000373565b949350505050565b600080600080600080600060e0888a031215620003d857600080fd5b6000620003e68a8a62000373565b9750506020620003f98a828b0162000373565b96505060406200040c8a828b0162000373565b95505060606200041f8a828b0162000386565b9450506080620004328a828b0162000386565b93505060a0620004458a828b0162000373565b92505060c0620004588a828b0162000373565b91505092959891949750929550565b6200047281620005c5565b82525050565b6200047281620005d2565b600062000492602683620005bc565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000620004dc600c83620005bc565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6200047281620005e3565b6020810162000380828462000467565b60e0810162000522828a62000467565b62000531602083018962000467565b62000540604083018862000467565b6200054f606083018762000467565b6200055e6080830186620004f7565b6200056d60a0830185620004f7565b6200057c60c083018462000467565b98975050505050505050565b6020810162000380828462000478565b60208082528101620003808162000483565b602080825281016200038081620004cd565b90815260200190565b60006200038082620005d7565b151590565b6001600160a01b031690565b90565b620005f181620005c5565b81146200027557600080fd5b620005f181620005e356fe60806040523480156200001157600080fd5b5060405162000ed538038062000ed58339810160408190526200003491620003ef565b6000620000496001600160e01b036200028416565b600080546001600160a01b0319166001600160a01b03831690811782556040519293509160008051602062000eb5833981519152908290a35062000096336001600160e01b036200028816565b6001600160a01b038616620000c85760405162461bcd60e51b8152600401620000bf90620007e8565b60405180910390fd5b6001600160a01b038516620000f15760405162461bcd60e51b8152600401620000bf90620007d6565b6001600160a01b0384166200011a5760405162461bcd60e51b8152600401620000bf906200078e565b828210156200013d5760405162461bcd60e51b8152600401620000bf906200077c565b6001600160a01b038116620001665760405162461bcd60e51b8152600401620000bf90620007b2565b6200017a876001600160e01b036200031216565b600180546001600160a01b038089166001600160a01b0319928316179092556002805488841692169190911790819055604080516358b925a360e11b81529051919092169163b1724b46916004808301926020929190829003018186803b158015620001e557600080fd5b505afa158015620001fa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200022091908101906200049a565b821115620002425760405162461bcd60e51b8152600401620000bf906200076a565b600380546001600160a01b039586166001600160a01b031991821617909155600593909355600691909155600480549190931691161790555062000842915050565b3390565b6001600160a01b038116620002b15760405162461bcd60e51b8152600401620000bf90620007c4565b6001600160a01b038116620002ce6001600160e01b036200039d16565b6001600160a01b031660008051602062000eb583398151915260405160405180910390a3600060405162000302906200075d565b6040519081900390209190915550565b6001600160a01b0381166200033b5760405162461bcd60e51b8152600401620000bf90620007a0565b6001600160a01b038116620003586001600160e01b03620003be16565b6001600160a01b03167fcfbf4028add9318bbf716f08c348595afb063b0e9feed1f86d33681a4b3ed4d360405160405180910390a36000604051620003029062000750565b600080604051620003ae906200075d565b6040519081900390205492915050565b600080604051620003ae9062000750565b8051620003dc816200081d565b92915050565b8051620003dc8162000837565b600080600080600080600060e0888a0312156200040b57600080fd5b6000620004198a8a620003cf565b97505060206200042c8a828b01620003cf565b96505060406200043f8a828b01620003cf565b9550506060620004528a828b01620003cf565b9450506080620004658a828b01620003e2565b93505060a0620004788a828b01620003e2565b92505060c06200048b8a828b01620003cf565b91505092959891949750929550565b600060208284031215620004ad57600080fd5b6000620004bb8484620003e2565b949350505050565b6000620004d2602883620007fa565b7f6475726174696f6e206d6179206e6f742065786365656420746865206d617820815267323ab930ba34b7b760c11b602082015260400192915050565b60006200051e603283620007fa565b7f6475726174696f6e206d75737420626520626967676572207468616e206f722081527132b8bab0b6103a37903a34329031b634b33360711b602082015260400192915050565b600062000574601b83620007fa565b7f746f6b656e206f776e6572206164647265737320696e76616c69640000000000815260200192915050565b6000620005af602983620007fa565b7f50726f78793a3a736574496d706c656d656e746174696f6e3a20696e76616c6981526864206164647265737360b81b602082015260400192915050565b6000620005fc60128362000803565b7135b2bc9734b6b83632b6b2b73a30ba34b7b760711b815260120192915050565b60006200062c602383620007fa565b7f66656553686172696e67436f6c6c6563746f72206164647265737320696e76618152621b1a5960ea1b602082015260400192915050565b600062000673600f8362000803565b6e35b2bc97383937bc3c9737bbb732b960891b8152600f0192915050565b6000620006a0602583620007fa565b7f50726f78793a3a73657450726f78794f776e65723a20696e76616c6964206164815264647265737360d81b602082015260400192915050565b6000620006e9601783620007fa565b7f7374616b696e67206164647265737320696e76616c6964000000000000000000815260200192915050565b600062000724601383620007fa565b7f534f56206164647265737320696e76616c696400000000000000000000000000815260200192915050565b6000620003dc82620005ed565b6000620003dc8262000664565b60208082528101620003dc81620004c3565b60208082528101620003dc816200050f565b60208082528101620003dc8162000565565b60208082528101620003dc81620005a0565b60208082528101620003dc816200061d565b60208082528101620003dc8162000691565b60208082528101620003dc81620006da565b60208082528101620003dc8162000715565b90815260200190565b919050565b60006001600160a01b038216620003dc565b90565b620008288162000808565b81146200083457600080fd5b50565b62000828816200081a565b61066380620008526000396000f3fe6080604052600436106100c25760003560e01c80636b7dbb2d1161007f578063a3e6761011610059578063a3e676101461021c578063aaf10f4214610231578063c24a0f8b14610246578063f2fde38b1461025b576100c2565b80636b7dbb2d146101d05780638da5cb5b146101e55780638f32d59b146101fa576100c2565b806308dcb360146101225780630b97bc861461014d5780630fb5a6b41461016f57806313d033c0146101845780631ab7710d146101995780634cf088d9146101bb575b60006100cc61027d565b90506001600160a01b0381166100fd5760405162461bcd60e51b81526004016100f4906105b6565b60405180910390fd5b60405136600082376000803683855af43d806000843e81801561011e578184f35b8184fd5b34801561012e57600080fd5b5061013761029c565b6040516101449190610588565b60405180910390f35b34801561015957600080fd5b506101626102ab565b60405161014491906105c6565b34801561017b57600080fd5b506101626102b1565b34801561019057600080fd5b506101626102b7565b3480156101a557600080fd5b506101ae6102bd565b604051610144919061056c565b3480156101c757600080fd5b506101376102cc565b3480156101dc57600080fd5b506101376102db565b3480156101f157600080fd5b506101ae6102ea565b34801561020657600080fd5b5061020f6102f9565b604051610144919061057a565b34801561022857600080fd5b506101ae61031d565b34801561023d57600080fd5b506101ae61027d565b34801561025257600080fd5b5061016261032c565b34801561026757600080fd5b5061027b6102763660046103f8565b610332565b005b60008060405161028c90610556565b6040519081900390205492915050565b6001546001600160a01b031681565b60075481565b60065481565b60055481565b60008060405161028c90610561565b6002546001600160a01b031681565b6004546001600160a01b031681565b6000546001600160a01b031690565b600080546001600160a01b031661030e610362565b6001600160a01b031614905090565b6003546001600160a01b031681565b60085481565b61033a6102f9565b6103565760405162461bcd60e51b81526004016100f4906105a6565b61035f81610366565b50565b3390565b6001600160a01b03811661038c5760405162461bcd60e51b81526004016100f490610596565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b80356103f28161060c565b92915050565b60006020828403121561040a57600080fd5b600061041684846103e7565b949350505050565b610427816105e2565b82525050565b610427816105ed565b61042781610601565b600061044c6026836105d4565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000610494600c836105d4565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b60006104bc6012836105dd565b7135b2bc9734b6b83632b6b2b73a30ba34b7b760711b815260120192915050565b60006104ea600f836105dd565b6e35b2bc97383937bc3c9737bbb732b960891b8152600f0192915050565b60006105156023836105d4565b7f50726f78793a3a28293a20696d706c656d656e746174696f6e206e6f7420666f8152621d5b9960ea1b602082015260400192915050565b610427816105fe565b60006103f2826104af565b60006103f2826104dd565b602081016103f2828461041e565b602081016103f2828461042d565b602081016103f28284610436565b602080825281016103f28161043f565b602080825281016103f281610487565b602080825281016103f281610508565b602081016103f2828461054d565b90815260200190565b919050565b60006103f2826105f2565b151590565b6001600160a01b031690565b90565b60006103f2826105e2565b610615816105e2565b811461035f57600080fdfea365627a7a723158208fadf5a06e09bf0282ebdaf120f87f9d40a56739860e4c58f5e6f248e5be98c96c6578706572696d656e74616cf564736f6c634300051100408be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060806040523480156200001157600080fd5b5060405162000f7f38038062000f7f8339810160408190526200003491620003fd565b868686868686866000620000506001600160e01b036200029216565b600080546001600160a01b0319166001600160a01b03831690811782556040519293509160008051602062000f5f833981519152908290a3506200009d336001600160e01b036200029616565b6001600160a01b038616620000cf5760405162461bcd60e51b8152600401620000c690620007f6565b60405180910390fd5b6001600160a01b038516620000f85760405162461bcd60e51b8152600401620000c690620007e4565b6001600160a01b038416620001215760405162461bcd60e51b8152600401620000c6906200079c565b82821015620001445760405162461bcd60e51b8152600401620000c6906200078a565b6001600160a01b0381166200016d5760405162461bcd60e51b8152600401620000c690620007c0565b62000181876001600160e01b036200032016565b600180546001600160a01b038089166001600160a01b0319928316179092556002805488841692169190911790819055604080516358b925a360e11b81529051919092169163b1724b46916004808301926020929190829003018186803b158015620001ec57600080fd5b505afa15801562000201573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620002279190810190620004a8565b821115620002495760405162461bcd60e51b8152600401620000c69062000778565b600380546001600160a01b039586166001600160a01b03199182161790915560059390935560069190915560048054919093169116179055506200085098505050505050505050565b3390565b6001600160a01b038116620002bf5760405162461bcd60e51b8152600401620000c690620007d2565b6001600160a01b038116620002dc6001600160e01b03620003ab16565b6001600160a01b031660008051602062000f5f83398151915260405160405180910390a3600060405162000310906200076b565b6040519081900390209190915550565b6001600160a01b038116620003495760405162461bcd60e51b8152600401620000c690620007ae565b6001600160a01b038116620003666001600160e01b03620003cc16565b6001600160a01b03167fcfbf4028add9318bbf716f08c348595afb063b0e9feed1f86d33681a4b3ed4d360405160405180910390a3600060405162000310906200075e565b600080604051620003bc906200076b565b6040519081900390205492915050565b600080604051620003bc906200075e565b8051620003ea816200082b565b92915050565b8051620003ea8162000845565b600080600080600080600060e0888a0312156200041957600080fd5b6000620004278a8a620003dd565b97505060206200043a8a828b01620003dd565b96505060406200044d8a828b01620003dd565b9550506060620004608a828b01620003dd565b9450506080620004738a828b01620003f0565b93505060a0620004868a828b01620003f0565b92505060c0620004998a828b01620003dd565b91505092959891949750929550565b600060208284031215620004bb57600080fd5b6000620004c98484620003f0565b949350505050565b6000620004e060288362000808565b7f6475726174696f6e206d6179206e6f742065786365656420746865206d617820815267323ab930ba34b7b760c11b602082015260400192915050565b60006200052c60328362000808565b7f6475726174696f6e206d75737420626520626967676572207468616e206f722081527132b8bab0b6103a37903a34329031b634b33360711b602082015260400192915050565b600062000582601b8362000808565b7f746f6b656e206f776e6572206164647265737320696e76616c69640000000000815260200192915050565b6000620005bd60298362000808565b7f50726f78793a3a736574496d706c656d656e746174696f6e3a20696e76616c6981526864206164647265737360b81b602082015260400192915050565b60006200060a60128362000811565b7135b2bc9734b6b83632b6b2b73a30ba34b7b760711b815260120192915050565b60006200063a60238362000808565b7f66656553686172696e67436f6c6c6563746f72206164647265737320696e76618152621b1a5960ea1b602082015260400192915050565b600062000681600f8362000811565b6e35b2bc97383937bc3c9737bbb732b960891b8152600f0192915050565b6000620006ae60258362000808565b7f50726f78793a3a73657450726f78794f776e65723a20696e76616c6964206164815264647265737360d81b602082015260400192915050565b6000620006f760178362000808565b7f7374616b696e67206164647265737320696e76616c6964000000000000000000815260200192915050565b60006200073260138362000808565b7f534f56206164647265737320696e76616c696400000000000000000000000000815260200192915050565b6000620003ea82620005fb565b6000620003ea8262000672565b60208082528101620003ea81620004d1565b60208082528101620003ea816200051d565b60208082528101620003ea8162000573565b60208082528101620003ea81620005ae565b60208082528101620003ea816200062b565b60208082528101620003ea816200069f565b60208082528101620003ea81620006e8565b60208082528101620003ea8162000723565b90815260200190565b919050565b60006001600160a01b038216620003ea565b90565b620008368162000816565b81146200084257600080fd5b50565b620008368162000828565b6106ff80620008606000396000f3fe6080604052600436106100dd5760003560e01c806378f24bc61161007f578063a3e6761011610059578063a3e6761014610259578063aaf10f421461026e578063c24a0f8b14610283578063f2fde38b14610298576100dd565b806378f24bc6146102005780638da5cb5b146102225780638f32d59b14610237576100dd565b806313d033c0116100bb57806313d033c01461019f5780631ab7710d146101b45780634cf088d9146101d65780636b7dbb2d146101eb576100dd565b806308dcb3601461013d5780630b97bc86146101685780630fb5a6b41461018a575b60006100e76102b8565b90506001600160a01b0381166101185760405162461bcd60e51b815260040161010f90610652565b60405180910390fd5b60405136600082376000803683855af43d806000843e818015610139578184f35b8184fd5b34801561014957600080fd5b506101526102d7565b60405161015f9190610614565b60405180910390f35b34801561017457600080fd5b5061017d6102e6565b60405161015f9190610662565b34801561019657600080fd5b5061017d6102ec565b3480156101ab57600080fd5b5061017d6102f2565b3480156101c057600080fd5b506101c96102f8565b60405161015f91906105f8565b3480156101e257600080fd5b50610152610307565b3480156101f757600080fd5b50610152610316565b34801561020c57600080fd5b5061022061021b36600461044b565b610325565b005b34801561022e57600080fd5b506101c961033d565b34801561024357600080fd5b5061024c61034c565b60405161015f9190610606565b34801561026557600080fd5b506101c9610370565b34801561027a57600080fd5b506101c96102b8565b34801561028f57600080fd5b5061017d61037f565b3480156102a457600080fd5b506102206102b336600461044b565b610385565b6000806040516102c7906105e2565b6040519081900390205492915050565b6001546001600160a01b031681565b60075481565b60065481565b60055481565b6000806040516102c7906105ed565b6002546001600160a01b031681565b6004546001600160a01b031681565b60405162461bcd60e51b815260040161010f90610642565b6000546001600160a01b031690565b600080546001600160a01b03166103616103b5565b6001600160a01b031614905090565b6003546001600160a01b031681565b60085481565b61038d61034c565b6103a95760405162461bcd60e51b815260040161010f90610632565b6103b2816103b9565b50565b3390565b6001600160a01b0381166103df5760405162461bcd60e51b815260040161010f90610622565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b8035610445816106a8565b92915050565b60006020828403121561045d57600080fd5b6000610469848461043a565b949350505050565b61047a8161067e565b82525050565b61047a81610689565b61047a8161069d565b600061049f602683610670565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b60006104e7600c83610670565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b600061050f601283610679565b7135b2bc9734b6b83632b6b2b73a30ba34b7b760711b815260120192915050565b600061053d600f83610679565b6e35b2bc97383937bc3c9737bbb732b960891b8152600f0192915050565b6000610568601783610670565b7f6f7065726174696f6e206e6f7420737570706f72746564000000000000000000815260200192915050565b60006105a1602383610670565b7f50726f78793a3a28293a20696d706c656d656e746174696f6e206e6f7420666f8152621d5b9960ea1b602082015260400192915050565b61047a8161069a565b600061044582610502565b600061044582610530565b602081016104458284610471565b602081016104458284610480565b602081016104458284610489565b6020808252810161044581610492565b60208082528101610445816104da565b602080825281016104458161055b565b6020808252810161044581610594565b6020810161044582846105d9565b90815260200190565b919050565b60006104458261068e565b151590565b6001600160a01b031690565b90565b60006104458261067e565b6106b18161067e565b81146103b257600080fdfea365627a7a72315820be360ea1d4e93148d403f9008d876b066a6c2d8288b504631d0dd9ff68dba3e06c6578706572696d656e74616cf564736f6c634300051100408be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a365627a7a72315820263920a47b0db9ab876a46fbd30285526b6d23cf1cb18eda4e93022821d6c8c46c6578706572696d656e74616cf564736f6c63430005110040",
    "devdoc": {
      "methods": {
        "deployTeamVesting(address,address,address,uint256,uint256,address,address)": {
          "params": {
            "_SOV": "The address of SOV token.",
            "_cliff": "The time interval to the first withdraw in seconds.",
            "_duration": "The total duration in seconds.",
            "_feeSharing": "The address of fee sharing contract.",
            "_staking": "The address of staking contract.",
            "_tokenOwner": "The owner of the tokens.",
            "_vestingOwner": "The address of an owner of vesting contract."
          },
          "return": "The vesting contract address."
        },
        "deployVesting(address,address,address,uint256,uint256,address,address)": {
          "params": {
            "_SOV": "the address of SOV token.",
            "_cliff": "The time interval to the first withdraw in seconds.",
            "_duration": "The total duration in seconds.",
            "_feeSharing": "The address of fee sharing contract.",
            "_staking": "The address of staking contract.",
            "_tokenOwner": "The owner of the tokens.",
            "_vestingOwner": "The address of an owner of vesting contract."
          },
          "return": "The vesting contract address."
        },
        "isOwner()": {
          "details": "Returns true if the caller is the current owner."
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      },
      "title": "Vesting Factory: Contract to deploy vesting contracts of two types: vesting (TokenHolder) and team vesting (Multisig)."
    },
    "userdoc": {
      "methods": {
        "deployTeamVesting(address,address,address,uint256,uint256,address,address)": {
          "notice": "Deploys Team Vesting contract."
        },
        "deployVesting(address,address,address,uint256,uint256,address,address)": {
          "notice": "Deploys Vesting contract."
        }
      },
      "notice": "Factory pattern allows to create multiple instances of the same contract and keep track of them easier."
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 54767,
          "contract": "contracts/governance/Vesting/VestingFactory.sol:VestingFactory",
          "label": "_owner",
          "offset": 0,
          "slot": "0",
          "type": "t_address"
        },
        {
          "astId": 27890,
          "contract": "contracts/governance/Vesting/VestingFactory.sol:VestingFactory",
          "label": "vestingLogic",
          "offset": 0,
          "slot": "1",
          "type": "t_address"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        }
      }
    }
  }