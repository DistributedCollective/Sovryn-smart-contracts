{
  "language": "Solidity",
  "sources": {
    "contracts/integrations/bob/interfaces/ISafeDepositsSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface ISafeDepositsSender {\n    event Withdraw(address indexed from, address indexed token, uint256 amount);\n    event DepositToLockdrop(address indexed token, uint256 amount);\n    event WithdrawBalanceFromSafe(address indexed token, uint256 balance);\n    event DepositSOVToLockdrop(uint256 amount);\n    event Pause();\n    event Unpause();\n    event Stop();\n    event SetDepositorAddress(address indexed oldDepositor, address indexed newDepositor);\n    event SetLockDropAddress(address indexed oldLockDrop, address indexed newLockDrop);\n    event MapDepositorToReceiver(address indexed depositor, address indexed receiver);\n\n    function getSafeAddress() external view returns (address);\n    function getLockDropAddress() external view returns (address);\n    function getSovTokenAddress() external view returns (address);\n    function getDepositorAddress() external view returns (address);\n    function isStopped() external view returns (bool);\n    function isPaused() external view returns (bool);\n\n    // @note amount > 0 should be checked by the caller\n    function withdraw(\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        address recipient\n    ) external;\n\n    function withdrawAll(address[] calldata tokens, address recipient) external;\n\n    function pause() external;\n\n    function unpause() external;\n\n    function stop() external;\n\n    function setDepositorAddress(address _newDepositor) external;\n\n    function sendToLockDropContract(\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256 sovAmount\n    ) external;\n}\n"
    },
    "contracts/integrations/bob/SafeDepositsSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport { ISafeDepositsSender } from \"./interfaces/ISafeDepositsSender.sol\";\n\ninterface IERC20Spec {\n    function balanceOf(address _who) external view returns (uint256);\n    function transfer(address _to, uint256 _value) external returns (bool);\n}\ninterface GnosisSafe {\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction.\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Operation operation\n    ) external returns (bool success);\n}\n\n/**\n * @title SafeDepositsSender\n * @notice This contract is a gateway for depositing funds into the Bob locker contracts\n */\ncontract SafeDepositsSender is ISafeDepositsSender {\n    address public constant ETH_TOKEN_ADDRESS = address(0x01);\n\n    GnosisSafe private immutable SAFE;\n    address private immutable SOV_TOKEN_ADDRESS;\n    address private LOCK_DROP_ADDRESS;\n    address private DEPOSITOR_ADDRESS;\n    uint256 private stopBlock; // if set the contract is stopped forever - irreversible\n    bool private paused;\n\n    /**\n     * @param _safeAddress Address of the Gnosis Safe\n     * @param _lockDrop Address of the lock drop contract\n     * @param _sovToken Address of the SOV token contract\n     * @param _depositor Address of the depositor account\n     */\n    constructor(address _safeAddress, address _lockDrop, address _sovToken, address _depositor) {\n        require(_safeAddress != address(0), \"SafeDepositsSender: Invalid safe address\");\n        require(_lockDrop != address(0), \"SafeDepositsSender: Invalid lockdrop address\");\n        require(_sovToken != address(0), \"SafeDepositsSender: Invalid sov token address\");\n        require(_depositor != address(0), \"SafeDepositsSender: Invalid depositor token address\");\n        SAFE = GnosisSafe(_safeAddress);\n        LOCK_DROP_ADDRESS = _lockDrop;\n        SOV_TOKEN_ADDRESS = _sovToken;\n        DEPOSITOR_ADDRESS = _depositor;\n    }\n\n    receive() external payable {}\n\n    // MODIFIERS //\n\n    modifier onlySafe() {\n        require(msg.sender == address(SAFE), \"SafeDepositsSender: Only Safe\");\n        _;\n    }\n\n    modifier onlyDepositor() {\n        require(msg.sender == DEPOSITOR_ADDRESS, \"SafeDepositsSender: Only Depositor\");\n        _;\n    }\n\n    modifier onlyDepositorOrSafe() {\n        require(\n            msg.sender == DEPOSITOR_ADDRESS || msg.sender == address(SAFE),\n            \"SafeDepositsSender: Only Depositor or Safe\"\n        );\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!paused, \"SafeDepositsSender: Paused\");\n        _;\n    }\n\n    modifier whenPaused() {\n        require(paused, \"SafeDepositsSender: Not paused\");\n        _;\n    }\n\n    modifier whenUnstopped() {\n        require(stopBlock == 0, \"SafeDepositsSender: Stopped\");\n        _;\n    }\n\n    modifier notZeroAddress(address _address) {\n        require(_address != address(0), \"SafeDepositsSender: Invalid address\");\n        _;\n    }\n\n    // CORE FUNCTIONS\n\n    /**\n     * @notice Sends tokens to the LockDrop contract\n     * @dev This function is for sending tokens to the LockDrop contract for users to receive rewards and to be bridged to the BOB mainnet for Sovryn DEX\n     * @dev The function is allowed to be called only by the DEPOSITOR_ADDRESS\n     * @dev Token amounts and SOV amount to send are calculated offchain\n     * @param tokens List of tokens to send\n     * @param amounts List of amounts of tokens to send\n     * @param sovAmount Amount of SOV tokens to send\n     */\n    function sendToLockDropContract(\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256 sovAmount\n    ) external onlyDepositorOrSafe whenNotPaused whenUnstopped {\n        require(\n            tokens.length == amounts.length,\n            \"SafeDepositsSender: Tokens and amounts length mismatch\"\n        );\n        require(sovAmount > 0, \"SafeDepositsSender: Invalid SOV amount\");\n\n        bytes memory data;\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(\n                tokens[i] != SOV_TOKEN_ADDRESS,\n                \"SafeDepositsSender: SOV token is transferred separately\"\n            );\n\n            // transfer native token\n            uint256 balance;\n            if (tokens[i] == address(0x01)) {\n                require(\n                    address(SAFE).balance >= amounts[i],\n                    \"SafeDepositsSender: Not enough funds\"\n                );\n                data = abi.encodeWithSignature(\"depositEth()\");\n                require(\n                    SAFE.execTransactionFromModule(\n                        LOCK_DROP_ADDRESS,\n                        amounts[i],\n                        data,\n                        GnosisSafe.Operation.Call\n                    ),\n                    \"Could not execute ether transfer\"\n                );\n\n                // withdraw balance to this contract left after deposit to the LockDrop\n                balance = address(SAFE).balance;\n                require(\n                    SAFE.execTransactionFromModule(\n                        address(this),\n                        balance,\n                        \"\",\n                        GnosisSafe.Operation.Call\n                    ),\n                    \"Could not execute ether transfer\"\n                );\n            } else {\n                // transfer ERC20 tokens\n                IERC20Spec token = IERC20Spec(tokens[i]);\n                balance = token.balanceOf(address(SAFE));\n                require(balance >= amounts[i], \"SafeDepositsSender: Not enough funds\");\n\n                data = abi.encodeWithSignature(\n                    \"approve(address,uint256)\",\n                    LOCK_DROP_ADDRESS,\n                    amounts[i]\n                );\n                require(\n                    SAFE.execTransactionFromModule(tokens[i], 0, data, GnosisSafe.Operation.Call),\n                    \"SafeDepositsSender: Could not approve token transfer\"\n                );\n\n                data = abi.encodeWithSignature(\n                    \"depositERC20(address,uint256)\",\n                    tokens[i],\n                    amounts[i]\n                );\n                require(\n                    SAFE.execTransactionFromModule(\n                        LOCK_DROP_ADDRESS,\n                        0,\n                        data,\n                        GnosisSafe.Operation.Call\n                    ),\n                    \"SafeDepositsSender: Could not execute token transfer\"\n                );\n\n                // withdraw balance to this contract left after deposit to the LockDrop\n                balance = token.balanceOf(address(SAFE));\n                data = abi.encodeWithSignature(\n                    \"transfer(address,uint256)\",\n                    address(this),\n                    balance\n                );\n                require(\n                    SAFE.execTransactionFromModule(tokens[i], 0, data, GnosisSafe.Operation.Call),\n                    \"SafeDepositsSender: Could not execute ether transfer\"\n                );\n            }\n            emit DepositToLockdrop(tokens[i], amounts[i]);\n            emit WithdrawBalanceFromSafe(tokens[i], balance);\n        }\n\n        // transfer SOV\n        data = abi.encodeWithSignature(\"approve(address,uint256)\", LOCK_DROP_ADDRESS, sovAmount);\n        require(\n            SAFE.execTransactionFromModule(SOV_TOKEN_ADDRESS, 0, data, GnosisSafe.Operation.Call),\n            \"SafeDepositsSender: Could not execute SOV token transfer\"\n        );\n        data = abi.encodeWithSignature(\n            \"depositERC20(address,uint256)\",\n            SOV_TOKEN_ADDRESS,\n            sovAmount\n        );\n        require(\n            SAFE.execTransactionFromModule(LOCK_DROP_ADDRESS, 0, data, GnosisSafe.Operation.Call),\n            \"Could not execute SOV transfer\"\n        );\n\n        emit DepositSOVToLockdrop(sovAmount);\n    }\n\n    /// @notice Maps depositor on ethereum to receiver on BOB\n    /// @notice Receiver from the last emitted event called by msg.sender will be used\n    /// @param receiver Receiver address on BOB. The depositor address will be replaced with the receiver address for distribution of LP tokens and rewards on BOB\n    function mapDepositorToReceiver(address receiver) external onlyDepositorOrSafe {\n        emit MapDepositorToReceiver(msg.sender, receiver);\n    }\n\n    // ADMINISTRATIVE FUNCTIONS //\n\n    /// @notice There is no check if _newDepositor is not zero on purpose - that could be required\n\n    /**\n     * @notice Sets new depositor address\n     * @dev Only Safe can call this function\n     * @dev New depositor can be zero address\n     * @param _newDepositor New depositor address\n     */\n    function setDepositorAddress(address _newDepositor) external onlySafe {\n        emit SetDepositorAddress(DEPOSITOR_ADDRESS, _newDepositor);\n        DEPOSITOR_ADDRESS = _newDepositor;\n    }\n\n    /**\n     * @notice Sets new LockDrop address\n     * @dev Only Safe can call this function\n     * @dev New LockDrop can't be zero address\n     * @param _newLockdrop New depositor address\n     */\n    function setLockDropAddress(address _newLockdrop) external onlySafe {\n        require(_newLockdrop != address(0), \"SafeDepositsSender: Zero address not allowed\");\n        emit SetLockDropAddress(LOCK_DROP_ADDRESS, _newLockdrop);\n        LOCK_DROP_ADDRESS = _newLockdrop;\n    }\n\n    /**\n     * @notice Withdraws tokens from this contract to a recipient address\n     * @notice Withdrawal to the Safe address will affect balances and rewards\n     * @notice Amount > 0 should be checked by the caller before calling this function\n     * @dev Only Safe can call this function\n     * @dev Recipient should not be a zero address\n     * @param tokens List of token addresses to withdraw\n     * @param amounts List of token amounts to withdraw\n     * @param recipient Recipient address\n     */\n    function withdraw(\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        address recipient\n    ) external onlySafe notZeroAddress(recipient) {\n        require(\n            tokens.length == amounts.length,\n            \"SafeDepositsSender: Tokens and amounts length mismatch\"\n        );\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(tokens[i] != address(0x00), \"SafeDepositsSender: Zero address not allowed\");\n            require(amounts[i] != 0, \"SafeDepositsSender: Zero amount not allowed\");\n            if (tokens[i] == address(0x01)) {\n                require(\n                    address(this).balance >= amounts[i],\n                    \"SafeDepositsSender: Not enough funds\"\n                );\n                (bool success, ) = payable(recipient).call{ value: amounts[i] }(\"\");\n                require(success, \"Could not withdraw ether\");\n                continue;\n            }\n\n            IERC20Spec token = IERC20Spec(tokens[i]);\n            uint256 balance = token.balanceOf(address(this));\n            require(balance >= amounts[i], \"SafeDepositsSender: Not enough funds\");\n\n            token.transfer(recipient, amounts[i]);\n\n            emit Withdraw(recipient, tokens[i], amounts[i]);\n        }\n    }\n\n    /**\n     * @notice Withdraws all tokens from this contract to a recipient\n     * @notice Amount > 0 should be checked by the caller before calling this function\n     * @dev Only Safe can call this function\n     * @dev Recipient should not be a zero address\n     * @notice Withdrawal to the Safe address will affect balances and rewards\n     * @param tokens List of token addresses to withdraw\n     * @param recipient Recipient address\n     */\n    function withdrawAll(\n        address[] calldata tokens,\n        address recipient\n    ) external onlySafe notZeroAddress(recipient) {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            if (tokens[i] == address(0x01)) {\n                (bool success, ) = payable(recipient).call{ value: address(this).balance }(\"\");\n                require(success, \"Could not withdraw ether\");\n                continue;\n            }\n            IERC20Spec token = IERC20Spec(tokens[i]);\n            uint256 balance = token.balanceOf(address(this));\n            if (balance > 0) {\n                token.transfer(recipient, balance);\n            }\n\n            emit Withdraw(recipient, tokens[i], balance);\n        }\n    }\n\n    /// @notice pause the contract - no funds can be sent to the LockDrop contract\n    function pause() external onlySafe whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /// @notice unpause the contract\n    function unpause() external onlySafe whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n\n    /// @notice stops the contract - no funds can be sent to the LockDrop contract, this is irreversible\n    function stop() external onlySafe {\n        stopBlock = block.number;\n        emit Stop();\n    }\n\n    // GETTERS //\n    function getSafeAddress() external view returns (address) {\n        return address(SAFE);\n    }\n\n    function getLockDropAddress() external view returns (address) {\n        return LOCK_DROP_ADDRESS;\n    }\n\n    function getSovTokenAddress() external view returns (address) {\n        return SOV_TOKEN_ADDRESS;\n    }\n\n    function getDepositorAddress() external view returns (address) {\n        return DEPOSITOR_ADDRESS;\n    }\n\n    function isStopped() external view returns (bool) {\n        return stopBlock != 0;\n    }\n\n    function getStopBlock() external view returns (uint256) {\n        return stopBlock;\n    }\n\n    function isPaused() external view returns (bool) {\n        return paused;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "remappings": [
      "@contracts/=contracts/",
      "ds-test/=foundry/lib/forge-std/lib/ds-test/src/",
      "forge-std/=foundry/lib/forge-std/src/"
    ]
  }
}