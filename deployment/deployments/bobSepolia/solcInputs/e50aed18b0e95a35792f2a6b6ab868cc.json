{
  "language": "Solidity",
  "sources": {
    "contracts/multisig/MultiSigWallet.sol": {
      "content": "pragma solidity ^0.5.17;\n\n/**\n * @title Multisignature wallet - Allows multiple parties to agree on\n *   transactions before execution.\n *\n * @author Stefan George - <stefan.george@consensys.net>\n * */\ncontract MultiSigWallet {\n    /*\n     *  Events\n     */\n    event Confirmation(address indexed sender, uint256 indexed transactionId);\n    event Revocation(address indexed sender, uint256 indexed transactionId);\n    event Submission(uint256 indexed transactionId);\n    event Execution(uint256 indexed transactionId);\n    event ExecutionFailure(uint256 indexed transactionId);\n    event Deposit(address indexed sender, uint256 value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint256 required);\n\n    /*\n     *  Constants\n     */\n    uint256 public constant MAX_OWNER_COUNT = 50;\n\n    /*\n     *  Storage\n     */\n    mapping(uint256 => Transaction) public transactions;\n    mapping(uint256 => mapping(address => bool)) public confirmations;\n    mapping(address => bool) public isOwner;\n    address[] public owners;\n    uint256 public required;\n    uint256 public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint256 value;\n        bytes data;\n        bool executed;\n    }\n\n    /*\n     *  Modifiers\n     */\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint256 transactionId) {\n        require(transactions[transactionId].destination != address(0));\n        _;\n    }\n\n    modifier confirmed(uint256 transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint256 transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint256 transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != address(0));\n        _;\n    }\n\n    modifier validRequirement(uint256 ownerCount, uint256 _required) {\n        require(\n            ownerCount <= MAX_OWNER_COUNT &&\n                _required <= ownerCount &&\n                _required != 0 &&\n                ownerCount != 0\n        );\n        _;\n    }\n\n    /// @notice Fallback function allows to deposit ether.\n    function() external payable {\n        if (msg.value > 0) emit Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n\n    /**\n     * @notice Contract constructor sets initial owners and required number\n     *   of confirmations.\n     *\n     * @param _owners List of initial owners.\n     * @param _required Number of required confirmations.\n     * */\n    constructor(\n        address[] memory _owners,\n        uint256 _required\n    ) public validRequirement(_owners.length, _required) {\n        for (uint256 i = 0; i < _owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != address(0));\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /**\n     * @notice Allows to add a new owner. Transaction has to be sent by wallet.\n     * @param owner Address of new owner.\n     * */\n    function addOwner(\n        address owner\n    )\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        emit OwnerAddition(owner);\n    }\n\n    /**\n     * @notice Allows to remove an owner. Transaction has to be sent by wallet.\n     * @param owner Address of owner.\n     * */\n    function removeOwner(address owner) public onlyWallet ownerExists(owner) {\n        isOwner[owner] = false;\n        for (uint256 i = 0; i < owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length) changeRequirement(owners.length);\n        emit OwnerRemoval(owner);\n    }\n\n    /**\n     * @notice Allows to replace an owner with a new owner. Transaction has\n     *   to be sent by wallet.\n     *\n     * @param owner Address of owner to be replaced.\n     * @param newOwner Address of new owner.\n     * */\n    function replaceOwner(\n        address owner,\n        address newOwner\n    ) public onlyWallet ownerExists(owner) ownerDoesNotExist(newOwner) {\n        for (uint256 i = 0; i < owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        emit OwnerRemoval(owner);\n        emit OwnerAddition(newOwner);\n    }\n\n    /**\n     * @notice Allows to change the number of required confirmations.\n     * Transaction has to be sent by wallet.\n     *\n     * @param _required Number of required confirmations.\n     * */\n    function changeRequirement(\n        uint256 _required\n    ) public onlyWallet validRequirement(owners.length, _required) {\n        required = _required;\n        emit RequirementChange(_required);\n    }\n\n    /**\n     * @notice Allows an owner to submit and confirm a transaction.\n     *\n     * @param destination Transaction target address.\n     * @param value Transaction ether value.\n     * @param data Transaction data payload.\n     *\n     * @return Returns transaction ID.\n     * */\n    function submitTransaction(\n        address destination,\n        uint256 value,\n        bytes memory data\n    ) public returns (uint256 transactionId) {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /**\n     * @notice Allows an owner to confirm a transaction.\n     * @param transactionId Transaction ID.\n     * */\n    function confirmTransaction(\n        uint256 transactionId\n    )\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /**\n     * @notice Allows an owner to revoke a confirmation for a transaction.\n     * @param transactionId Transaction ID.\n     * */\n    function revokeConfirmation(\n        uint256 transactionId\n    )\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        emit Revocation(msg.sender, transactionId);\n    }\n\n    /**\n     * @notice Allows anyone to execute a confirmed transaction.\n     * @param transactionId Transaction ID.\n     * */\n    function executeTransaction(\n        uint256 transactionId\n    )\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId];\n            txn.executed = true;\n            if (external_call(txn.destination, txn.value, txn.data.length, txn.data))\n                emit Execution(transactionId);\n            else {\n                emit ExecutionFailure(transactionId);\n                txn.executed = false;\n            }\n        }\n    }\n\n    /**\n     * @notice Low level transaction execution.\n     *\n     * @dev Call has been separated into its own function in order to\n     *   take advantage of the Solidity's code generator to produce a\n     *   loop that copies tx.data into memory.\n     *\n     * @param destination The address of the Smart Contract to call.\n     * @param value The amout of rBTC to send w/ the transaction.\n     * @param dataLength The size of the payload.\n     * @param data The payload.\n     *\n     * @return Success or failure.\n     * */\n    function external_call(\n        address destination,\n        uint256 value,\n        uint256 dataLength,\n        bytes memory data\n    ) internal returns (bool) {\n        bool result;\n        assembly {\n            let x := mload(0x40) /// \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\n            let d := add(data, 32) /// First 32 bytes are the padded length of data, so exclude that\n            result := call(\n                sub(gas, 34710), /// 34710 is the value that solidity is currently emitting\n                /// It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n                /// callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n                destination,\n                value,\n                d,\n                dataLength, /// Size of the input (in bytes) - this is what fixes the padding problem\n                x,\n                0 /// Output is ignored, therefore the output size is zero\n            )\n        }\n        return result;\n    }\n\n    /**\n     * @notice Returns the confirmation status of a transaction.\n     * @param transactionId Transaction ID.\n     * @return Confirmation status.\n     * */\n    function isConfirmed(uint256 transactionId) public view returns (bool) {\n        uint256 count = 0;\n        for (uint256 i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]]) count += 1;\n            if (count == required) return true;\n        }\n\n        return false;\n    }\n\n    /*\n     * Internal functions\n     */\n\n    /**\n     * @notice Adds a new transaction to the transaction mapping,\n     *   if transaction does not exist yet.\n     *\n     * @param destination Transaction target address.\n     * @param value Transaction ether value.\n     * @param data Transaction data payload.\n     *\n     * @return Returns transaction ID.\n     * */\n    function addTransaction(\n        address destination,\n        uint256 value,\n        bytes memory data\n    ) internal notNull(destination) returns (uint256 transactionId) {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n\n    /**\n     * @notice Get the number of confirmations of a transaction.\n     * @param transactionId Transaction ID.\n     * @return Number of confirmations.\n     * */\n    function getConfirmationCount(uint256 transactionId) public view returns (uint256 count) {\n        for (uint256 i = 0; i < owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) count += 1;\n    }\n\n    /**\n     * @notice Get the total number of transactions after filers are applied.\n     * @param pending Include pending transactions.\n     * @param executed Include executed transactions.\n     * @return Total number of transactions after filters are applied.\n     * */\n    function getTransactionCount(bool pending, bool executed) public view returns (uint256 count) {\n        for (uint256 i = 0; i < transactionCount; i++)\n            if ((pending && !transactions[i].executed) || (executed && transactions[i].executed))\n                count += 1;\n    }\n\n    /**\n     * @notice Get the list of owners.\n     * @return List of owner addresses.\n     * */\n    function getOwners() public view returns (address[] memory) {\n        return owners;\n    }\n\n    /**\n     * @notice Get the array with owner addresses, which confirmed transaction.\n     * @param transactionId Transaction ID.\n     * @return Returns array of owner addresses.\n     * */\n    function getConfirmations(\n        uint256 transactionId\n    ) public view returns (address[] memory _confirmations) {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint256 count = 0;\n        uint256 i;\n        for (i = 0; i < owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i = 0; i < count; i++) _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /**\n     * @notice Get the list of transaction IDs in defined range.\n     *\n     * @param from Index start position of transaction array.\n     * @param to Index end position of transaction array.\n     * @param pending Include pending transactions.\n     * @param executed Include executed transactions.\n     *\n     * @return Returns array of transaction IDs.\n     * */\n    function getTransactionIds(\n        uint256 from,\n        uint256 to,\n        bool pending,\n        bool executed\n    ) public view returns (uint256[] memory _transactionIds) {\n        uint256[] memory transactionIdsTemp = new uint256[](transactionCount);\n        uint256 count = 0;\n        uint256 i;\n        for (i = 0; i < transactionCount; i++)\n            if ((pending && !transactions[i].executed) || (executed && transactions[i].executed)) {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint256[](to - from);\n        for (i = from; i < to; i++) _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "remappings": [
      "ds-test/=foundry/lib/forge-std/lib/ds-test/src/",
      "forge-std/=foundry/lib/forge-std/src/"
    ]
  }
}