{
    "address": "",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_bootstrapPeriod",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_activePoolAddress",
                    "type": "address"
                }
            ],
            "name": "ActivePoolAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_baseRate",
                    "type": "uint256"
                }
            ],
            "name": "BaseRateUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_newBorrowerOperationsAddress",
                    "type": "address"
                }
            ],
            "name": "BorrowerOperationsAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_collSurplusPoolAddress",
                    "type": "address"
                }
            ],
            "name": "CollSurplusPoolAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_defaultPoolAddress",
                    "type": "address"
                }
            ],
            "name": "DefaultPoolAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_feeDistributorAddress",
                    "type": "address"
                }
            ],
            "name": "FeeDistributorAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_gasPoolAddress",
                    "type": "address"
                }
            ],
            "name": "GasPoolAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_L_ETH",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_L_ZUSDDebt",
                    "type": "uint256"
                }
            ],
            "name": "LTermsUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_lastFeeOpTime",
                    "type": "uint256"
                }
            ],
            "name": "LastFeeOpTimeUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_liquidatedDebt",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_liquidatedColl",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_collGasCompensation",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_ZUSDGasCompensation",
                    "type": "uint256"
                }
            ],
            "name": "Liquidation",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_borrowerOperationsAddress",
                    "type": "address"
                }
            ],
            "name": "LiquityBaseParamsAddressChanges",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_newPriceFeedAddress",
                    "type": "address"
                }
            ],
            "name": "PriceFeedAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_attemptedZUSDAmount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_actualZUSDAmount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_ETHSent",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_ETHFee",
                    "type": "uint256"
                }
            ],
            "name": "Redemption",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_sortedTrovesAddress",
                    "type": "address"
                }
            ],
            "name": "SortedTrovesAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_stabilityPoolAddress",
                    "type": "address"
                }
            ],
            "name": "StabilityPoolAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_totalStakesSnapshot",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_totalCollateralSnapshot",
                    "type": "uint256"
                }
            ],
            "name": "SystemSnapshotsUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_newTotalStakes",
                    "type": "uint256"
                }
            ],
            "name": "TotalStakesUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_newIndex",
                    "type": "uint256"
                }
            ],
            "name": "TroveIndexUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_debt",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_coll",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint8",
                    "name": "operation",
                    "type": "uint8"
                }
            ],
            "name": "TroveLiquidated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_troveManagerRedeemOps",
                    "type": "address"
                }
            ],
            "name": "TroveManagerRedeemOpsAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_L_ETH",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_L_ZUSDDebt",
                    "type": "uint256"
                }
            ],
            "name": "TroveSnapshotsUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_debt",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_coll",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "stake",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint8",
                    "name": "operation",
                    "type": "uint8"
                }
            ],
            "name": "TroveUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_zeroStakingAddress",
                    "type": "address"
                }
            ],
            "name": "ZEROStakingAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_zeroTokenAddress",
                    "type": "address"
                }
            ],
            "name": "ZEROTokenAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_newZUSDTokenAddress",
                    "type": "address"
                }
            ],
            "name": "ZUSDTokenAddressChanged",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "BETA",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "BOOTSTRAP_PERIOD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "CCR",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "DECIMAL_PRECISION",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "L_ETH",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "L_ZUSDDebt",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "MCR",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "MINUTE_DECAY_FACTOR",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "MIN_NET_DEBT",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "NAME",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "SECONDS_IN_ONE_MINUTE",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "TroveOwners",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "Troves",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "debt",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "coll",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "stake",
                    "type": "uint256"
                },
                {
                    "internalType": "enum TroveManagerStorage.Status",
                    "name": "status",
                    "type": "uint8"
                },
                {
                    "internalType": "uint128",
                    "name": "arrayIndex",
                    "type": "uint128"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "ZUSD_GAS_COMPENSATION",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "_100pct",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_price",
                    "type": "uint256"
                }
            ],
            "name": "_getCurrentICR",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "_getPendingETHReward",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "_getPendingZUSDDebtReward",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "_getRedemptionRate",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "_hasPendingRewards",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "_stabilityPool",
            "outputs": [
                {
                    "internalType": "contract IStabilityPool",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "_zeroStaking",
            "outputs": [
                {
                    "internalType": "contract IZEROStaking",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "_zeroToken",
            "outputs": [
                {
                    "internalType": "contract IZEROToken",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "_zusdToken",
            "outputs": [
                {
                    "internalType": "contract IZUSDToken",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "activePool",
            "outputs": [
                {
                    "internalType": "contract IActivePool",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "addTroveOwnerToArray",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "applyPendingRewards",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "baseRate",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "_troveArray",
                    "type": "address[]"
                }
            ],
            "name": "batchLiquidateTroves",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "borrowerOperationsAddress",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_price",
                    "type": "uint256"
                }
            ],
            "name": "checkRecoveryMode",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "closeTrove",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "decayBaseRateFromBorrowing",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_collDecrease",
                    "type": "uint256"
                }
            ],
            "name": "decreaseTroveColl",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_debtDecrease",
                    "type": "uint256"
                }
            ],
            "name": "decreaseTroveDebt",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "defaultPool",
            "outputs": [
                {
                    "internalType": "contract IDefaultPool",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "feeDistributor",
            "outputs": [
                {
                    "internalType": "contract IFeeDistributor",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_ZUSDDebt",
                    "type": "uint256"
                }
            ],
            "name": "getBorrowingFee",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_ZUSDDebt",
                    "type": "uint256"
                }
            ],
            "name": "getBorrowingFeeWithDecay",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getBorrowingRate",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getBorrowingRateWithDecay",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_price",
                    "type": "uint256"
                }
            ],
            "name": "getCurrentICR",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "getEntireDebtAndColl",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "debt",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "coll",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "pendingZUSDDebtReward",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "pendingETHReward",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getEntireSystemColl",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "entireSystemColl",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getEntireSystemDebt",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "entireSystemDebt",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "getNominalICR",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "getPendingETHReward",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "getPendingZUSDDebtReward",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_ETHDrawn",
                    "type": "uint256"
                }
            ],
            "name": "getRedemptionFeeWithDecay",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getRedemptionRate",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getRedemptionRateWithDecay",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_price",
                    "type": "uint256"
                }
            ],
            "name": "getTCR",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "getTroveColl",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "getTroveDebt",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_index",
                    "type": "uint256"
                }
            ],
            "name": "getTroveFromTroveOwnersArray",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getTroveOwnersCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "getTroveStake",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "getTroveStatus",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "hasPendingRewards",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_collIncrease",
                    "type": "uint256"
                }
            ],
            "name": "increaseTroveColl",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_debtIncrease",
                    "type": "uint256"
                }
            ],
            "name": "increaseTroveDebt",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "lastETHError_Redistribution",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "lastFeeOperationTime",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "lastZUSDDebtError_Redistribution",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "liquidate",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_n",
                    "type": "uint256"
                }
            ],
            "name": "liquidateTroves",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "liquityBaseParams",
            "outputs": [
                {
                    "internalType": "contract ILiquityBaseParams",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "priceFeed",
            "outputs": [
                {
                    "internalType": "contract IPriceFeed",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_ZUSDamount",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_firstRedemptionHint",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_upperPartialRedemptionHint",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_lowerPartialRedemptionHint",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_partialRedemptionHintNICR",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_maxIterations",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_maxFeePercentage",
                    "type": "uint256"
                }
            ],
            "name": "redeemCollateral",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_dllrAmount",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_firstRedemptionHint",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_upperPartialRedemptionHint",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_lowerPartialRedemptionHint",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_partialRedemptionHintNICR",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_maxIterations",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_maxFeePercentage",
                    "type": "uint256"
                },
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "deadline",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint8",
                            "name": "v",
                            "type": "uint8"
                        },
                        {
                            "internalType": "bytes32",
                            "name": "r",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "bytes32",
                            "name": "s",
                            "type": "bytes32"
                        }
                    ],
                    "internalType": "struct IMassetManager.PermitParams",
                    "name": "_permitParams",
                    "type": "tuple"
                }
            ],
            "name": "redeemCollateralViaDLLR",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "removeStake",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "rewardSnapshots",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "ETH",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "ZUSDDebt",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "_feeDistributorAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "_troveManagerRedeemOps",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "_liquityBaseParamsAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "_borrowerOperationsAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "_activePoolAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "_defaultPoolAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "_stabilityPoolAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "_gasPoolAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "_collSurplusPoolAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "_priceFeedAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "_zusdTokenAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "_sortedTrovesAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "_zeroTokenAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "_zeroStakingAddress",
                            "type": "address"
                        }
                    ],
                    "internalType": "struct ITroveManager.TroveManagerInitAddressesParams",
                    "name": "_troveManagerInitAddressesParams",
                    "type": "tuple"
                }
            ],
            "name": "setAddresses",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "setOwner",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_troveManagerRedeemOps",
                    "type": "address"
                }
            ],
            "name": "setTroveManagerRedeemOps",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_num",
                    "type": "uint256"
                }
            ],
            "name": "setTroveStatus",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "sortedTroves",
            "outputs": [
                {
                    "internalType": "contract ISortedTroves",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalCollateralSnapshot",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalStakes",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalStakesSnapshot",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "troveManagerRedeemOps",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "updateStakeAndTotalStakes",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_borrower",
                    "type": "address"
                }
            ],
            "name": "updateTroveRewardSnapshots",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x5e79544280be0b8237cef4c14a8495edb75d99f93435a813a4079e610981a666",
    "receipt": {
        "to": null,
        "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
        "contractAddress": "0x43f7819FEB3E39cb4C40DDDD7149458B2C51b674",
        "transactionIndex": 0,
        "gasUsed": "5873039",
        "logsBloom": "0x
        "blockHash": "0xecc8d8f2c48fbe2d77dc8fe0aff2af0eaf5c3f5dca4765f019f3b77ede09cb84",
        "transactionHash": "0x5e79544280be0b8237cef4c14a8495edb75d99f93435a813a4079e610981a666",
        "logs": [
            {
                "transactionIndex": 0,
                "blockNumber": 4692960,
                "transactionHash": "0x5e79544280be0b8237cef4c14a8495edb75d99f93435a813a4079e610981a666",
                "address": "0x43f7819FEB3E39cb4C40DDDD7149458B2C51b674",
                "topics": [
                    "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x00000000000000000000000013be55487d37fe3c66ee7305e1e9c1ac85de75ae"
                ],
                "data": "0x",
                "logIndex": 0,
                "blockHash": "0xecc8d8f2c48fbe2d77dc8fe0aff2af0eaf5c3f5dca4765f019f3b77ede09cb84"
            }
        ],
        "blockNumber": 4692960,
        "cumulativeGasUsed": "5873039",
        "status": 1,
        "byzantium": true
    },
    "args": ["1209600"],
    "numDeployments": 1,
    "solcInputHash": "0fec888a5a632cda18ca2432f18ab5f4",
    "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bootstrapPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"}],\"name\":\"BaseRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBorrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"CollSurplusPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeDistributorAddress\",\"type\":\"address\"}],\"name\":\"FeeDistributorAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"}],\"name\":\"GasPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_ETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_ZUSDDebt\",\"type\":\"uint256\"}],\"name\":\"LTermsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastFeeOpTime\",\"type\":\"uint256\"}],\"name\":\"LastFeeOpTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatedColl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collGasCompensation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ZUSDGasCompensation\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"LiquityBaseParamsAddressChanges\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"PriceFeedAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_attemptedZUSDAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actualZUSDAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ETHSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ETHFee\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalStakesSnapshot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalCollateralSnapshot\",\"type\":\"uint256\"}],\"name\":\"SystemSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalStakes\",\"type\":\"uint256\"}],\"name\":\"TotalStakesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newIndex\",\"type\":\"uint256\"}],\"name\":\"TroveIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TroveLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_troveManagerRedeemOps\",\"type\":\"address\"}],\"name\":\"TroveManagerRedeemOpsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_ETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L_ZUSDDebt\",\"type\":\"uint256\"}],\"name\":\"TroveSnapshotsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TroveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_zeroStakingAddress\",\"type\":\"address\"}],\"name\":\"ZEROStakingAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_zeroTokenAddress\",\"type\":\"address\"}],\"name\":\"ZEROTokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newZUSDTokenAddress\",\"type\":\"address\"}],\"name\":\"ZUSDTokenAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BETA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOTSTRAP_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L_ZUSDDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUTE_DECAY_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_ONE_MINUTE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TroveOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Troves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"enum TroveManagerStorage.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"arrayIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZUSD_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"_getCurrentICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"_getPendingETHReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"_getPendingZUSDDebtReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"_hasPendingRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stabilityPool\",\"outputs\":[{\"internalType\":\"contract IStabilityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_zeroStaking\",\"outputs\":[{\"internalType\":\"contract IZEROStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_zeroToken\",\"outputs\":[{\"internalType\":\"contract IZEROToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_zusdToken\",\"outputs\":[{\"internalType\":\"contract IZUSDToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"addTroveOwnerToArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"applyPendingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_troveArray\",\"type\":\"address[]\"}],\"name\":\"batchLiquidateTroves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"checkRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayBaseRateFromBorrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"contract IFeeDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ZUSDDebt\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ZUSDDebt\",\"type\":\"uint256\"}],\"name\":\"getBorrowingFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowingRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getCurrentICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getEntireDebtAndColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingZUSDDebtReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingETHReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getNominalICR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingETHReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getPendingZUSDDebtReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ETHDrawn\",\"type\":\"uint256\"}],\"name\":\"getRedemptionFeeWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRateWithDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getTCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTroveFromTroveOwnersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTroveOwnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getTroveStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"hasPendingRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTroveColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseTroveDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastETHError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeOperationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastZUSDDebtError_Redistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"liquidateTroves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquityBaseParams\",\"outputs\":[{\"internalType\":\"contract ILiquityBaseParams\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ZUSDamount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_firstRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upperPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_partialRedemptionHintNICR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"redeemCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dllrAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_firstRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upperPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerPartialRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_partialRedemptionHintNICR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMassetManager.PermitParams\",\"name\":\"_permitParams\",\"type\":\"tuple\"}],\"name\":\"redeemCollateralViaDLLR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ZUSDDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_feeDistributorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerRedeemOps\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquityBaseParamsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zusdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zeroTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zeroStakingAddress\",\"type\":\"address\"}],\"internalType\":\"struct ITroveManager.TroveManagerInitAddressesParams\",\"name\":\"_troveManagerInitAddressesParams\",\"type\":\"tuple\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveManagerRedeemOps\",\"type\":\"address\"}],\"name\":\"setTroveManagerRedeemOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setTroveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateralSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakesSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManagerRedeemOps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateStakeAndTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"updateTroveRewardSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"applyPendingRewards(address)\":{\"params\":{\"_borrower\":\"borrower address\"}},\"closeTrove(address)\":{\"params\":{\"_borrower\":\"borrower address\"}},\"constructor\":{\"params\":{\"_bootstrapPeriod\":\"During bootsrap period redemptions are not allowed\"}},\"decreaseTroveColl(address,uint256)\":{\"params\":{\"_borrower\":\"borrower address\",\"_collDecrease\":\"amount of collateral to decrease\"},\"returns\":{\"_0\":\"new trove collateral\"}},\"decreaseTroveDebt(address,uint256)\":{\"params\":{\"_borrower\":\"borrower address\",\"_debtDecrease\":\"amount of debt to decrease\"},\"returns\":{\"_0\":\"new trove debt\"}},\"getBorrowingFeeWithDecay(uint256)\":{\"params\":{\"_ZUSDDebt\":\"ZUSD debt amount to calculate fee\"},\"returns\":{\"_0\":\"borrowing fee using borrowing rate with decay\"}},\"getBorrowingRate()\":{\"returns\":{\"_0\":\"borrowing rate\"}},\"getBorrowingRateWithDecay()\":{\"returns\":{\"_0\":\"borrowing rate calculated using decayed as base rate\"}},\"getCurrentICR(address,uint256)\":{\"params\":{\"_borrower\":\"borrower address\",\"_price\":\"ETH price\"},\"returns\":{\"_0\":\"the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\"}},\"getNominalICR(address)\":{\"returns\":{\"_0\":\"the nominal collateral ratio (ICR) of a given Trove, without the price. Takes a trove's pending coll and debt rewards from redistributions into account.\"}},\"getOwner()\":{\"returns\":{\"_owner\":\"Address of the owner. \"}},\"getPendingETHReward(address)\":{\"params\":{\"_borrower\":\"borrower address\"},\"returns\":{\"_0\":\"the borrower's pending accumulated ETH reward, earned by their stake\"}},\"getPendingZUSDDebtReward(address)\":{\"params\":{\"_borrower\":\"borrower address\"},\"returns\":{\"_0\":\"the borrower's pending accumulated ZUSD reward, earned by their stake\"}},\"getRedemptionFeeWithDecay(uint256)\":{\"params\":{\"_ETHDrawn\":\"ETH drawn\"}},\"getRedemptionRate()\":{\"returns\":{\"_0\":\"calculated redemption rate using baseRate\"}},\"getRedemptionRateWithDecay()\":{\"returns\":{\"_0\":\"calculated redemption rate using calculated decayed as base rate\"}},\"getTCR(uint256)\":{\"params\":{\"_price\":\"ETH price\"},\"returns\":{\"_0\":\"the total collateralization ratio (TCR) of the system. The TCR is based on the the entire system debt and collateral (including pending rewards).\"}},\"getTroveColl(address)\":{\"params\":{\"_borrower\":\"borrower address\"},\"returns\":{\"_0\":\"Trove collateral from given trove\"}},\"getTroveDebt(address)\":{\"params\":{\"_borrower\":\"borrower address\"},\"returns\":{\"_0\":\"Trove debt from given trove\"}},\"getTroveFromTroveOwnersArray(uint256)\":{\"params\":{\"_index\":\"Trove owner index\"},\"returns\":{\"_0\":\"Trove from TroveOwners array in given index\"}},\"getTroveOwnersCount()\":{\"returns\":{\"_0\":\"Trove owners count\"}},\"getTroveStake(address)\":{\"params\":{\"_borrower\":\"borrower address\"},\"returns\":{\"_0\":\"Trove stake from given trove\"}},\"getTroveStatus(address)\":{\"params\":{\"_borrower\":\"borrower address\"},\"returns\":{\"_0\":\"Trove status from given trove\"}},\"increaseTroveColl(address,uint256)\":{\"params\":{\"_borrower\":\"borrower address\",\"_collIncrease\":\"amount of collateral to increase\"},\"returns\":{\"_0\":\"new trove collateral\"}},\"increaseTroveDebt(address,uint256)\":{\"params\":{\"_borrower\":\"borrower address\",\"_debtIncrease\":\"amount of debt to increase\"},\"returns\":{\"_0\":\"new trove debt\"}},\"redeemCollateral(uint256,address,address,address,uint256,uint256,uint256)\":{\"details\":\"this function forwards the call to the troveManagerRedeemOps in a delegate call fashion         so the parameters are not needed\"},\"redeemCollateralViaDLLR(uint256,address,address,address,uint256,uint256,uint256,(uint256,uint8,bytes32,bytes32))\":{\"details\":\"this function forwards the call to the troveManagerRedeemOps in a delegate call fashion         so the parameters are not needed DLLR _owner or _spender can use Sovryn Mynt to convert DLLR to ZUSD, then use the Zero redemption mechanism to redeem ZUSD for RBTC, all in a single transaction\"},\"removeStake(address)\":{\"params\":{\"_borrower\":\"borrower address\"}},\"setOwner(address)\":{\"params\":{\"_owner\":\"Address of the owner. \"}},\"updateStakeAndTotalStakes(address)\":{\"params\":{\"_borrower\":\"borrower address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BETA()\":{\"notice\":\"BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction, in order to calc the new base rate from a redemption. Corresponds to (1 / ALPHA) in the white paper.\"},\"BOOTSTRAP_PERIOD()\":{\"notice\":\"During bootsrap period redemptions are not allowed\"},\"MIN_NET_DEBT()\":{\"notice\":\"Minimum amount of net ZUSD debt a trove must have\"},\"ZUSD_GAS_COMPENSATION()\":{\"notice\":\"Amount of ZUSD to be locked in gas pool on opening troves\"},\"_getCurrentICR(address,uint256)\":{\"notice\":\"Return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\"},\"_getPendingETHReward(address)\":{\"notice\":\"Get the borrower's pending accumulated ETH reward, earned by their stake\"},\"_getPendingZUSDDebtReward(address)\":{\"notice\":\"Get the borrower's pending accumulated ZUSD reward, earned by their stake\"},\"addTroveOwnerToArray(address)\":{\"notice\":\"Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\"},\"applyPendingRewards(address)\":{\"notice\":\"Add the borrowers's coll and debt rewards earned from redistributions, to their Trove\"},\"batchLiquidateTroves(address[])\":{\"notice\":\"Attempt to liquidate a custom list of troves provided by the caller.\"},\"checkRecoveryMode(uint256)\":{\"notice\":\"reveals whether or not the system is in Recovery Mode (i.e. whether the Total Collateralization Ratio (TCR) is below the Critical Collateralization Ratio (CCR)).\"},\"closeTrove(address)\":{\"notice\":\"Close given trove. Called by BorrowerOperations.\"},\"decayBaseRateFromBorrowing()\":{\"notice\":\"Updates the baseRate state variable based on time elapsed since the last redemption or ZUSD borrowing operation.\"},\"getCurrentICR(address,uint256)\":{\"notice\":\"computes the user\\u2019s individual collateralization ratio (ICR) based on their total collateral and total ZUSD debt. Returns 2^256 -1 if they have 0 debt.\"},\"getEntireDebtAndColl(address)\":{\"notice\":\"Return the Troves entire debt and coll, including pending rewards from redistributions.\"},\"getOwner()\":{\"notice\":\"Return address of the owner.\"},\"getRedemptionFeeWithDecay(uint256)\":{\"notice\":\"The redemption fee is taken as a cut of the total ETH drawn from the system in a redemption. It is based on the current redemption rate.\"},\"liquidate(address)\":{\"notice\":\"Single liquidation function. Closes the trove if its ICR is lower than the minimum collateral ratio.\"},\"liquidateTroves(uint256)\":{\"notice\":\"Liquidate a sequence of troves. Closes a maximum number of n under-collateralized Troves, starting from the one with the lowest collateral ratio in the system, and moving upwards\"},\"removeStake(address)\":{\"notice\":\"Remove borrower's stake from the totalStakes sum, and set their stake to 0\"},\"setOwner(address)\":{\"notice\":\"Set address of the owner (only owner can call this function)\"},\"updateStakeAndTotalStakes(address)\":{\"notice\":\"Update borrower's stake based on their latest collateral value\"},\"updateTroveRewardSnapshots(address)\":{\"notice\":\"Update borrower's snapshots of L_ETH and L_ZUSDDebt to reflect the current values\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TroveManager.sol\":\"TroveManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/Dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n\\ncontract BaseMath {\\n    uint constant public DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0x7e1369ca5cb09e818e345a2def19a261401f79c985a6030b55b7311dd6f53be4\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n\\ncontract CheckContract {\\n    /**\\n     * @dev Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(_account) }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4c7dc4d0197c27ebc7de671b00458a9ff45f57223aeb520e6ddd2eb6d2d89e5c\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on the OpenZeppelin IER20 interface:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\n *\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    \\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xe0b2473eba89df8d27d7cea2a99fce788c212f3fd393c9508e449e51a3f220fa\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n * \\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 amount, \\n                    uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    \\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to \\n     * a value in the near future. The deadline argument can be set to uint(-1) to \\n     * create Permits that effectively never expire.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n    \\n    function version() external view returns (string memory);\\n    function permitTypeHash() external view returns (bytes32);\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd376458452f8b480bfea549637bd71d3f9eb1f12e9d59d1beff373417462d67f\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../Interfaces/IActivePool.sol\\\";\\nimport \\\"../Interfaces/IDefaultPool.sol\\\";\\nimport \\\"../Interfaces/IPriceFeed.sol\\\";\\nimport \\\"../Interfaces/ILiquityBase.sol\\\";\\nimport \\\"../Interfaces/ILiquityBaseParams.sol\\\";\\n\\n/**\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is BaseMath, ILiquityBase {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n    /// Amount of ZUSD to be locked in gas pool on opening troves\\n    uint256 public constant ZUSD_GAS_COMPENSATION = 20e18;\\n\\n    /// Minimum amount of net ZUSD debt a trove must have\\n    uint256 public constant MIN_NET_DEBT = 180e18;\\n\\n    IActivePool public activePool;\\n\\n    IDefaultPool public defaultPool;\\n\\n    IPriceFeed public override priceFeed;\\n\\n    ILiquityBaseParams public override liquityBaseParams;\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    function _getCompositeDebt(uint256 _debt) internal pure returns (uint256) {\\n        return _debt.add(ZUSD_GAS_COMPENSATION);\\n    }\\n\\n    function _getNetDebt(uint256 _debt) internal pure returns (uint256) {\\n        return _debt.sub(ZUSD_GAS_COMPENSATION);\\n    }\\n\\n    /// Return the amount of ETH to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(uint256 _entireColl) internal view returns (uint256) {\\n        return _entireColl / liquityBaseParams.PERCENT_DIVISOR();\\n    }\\n\\n    function getEntireSystemColl() public view returns (uint256 entireSystemColl) {\\n        uint256 activeColl = activePool.getETH();\\n        uint256 liquidatedColl = defaultPool.getETH();\\n\\n        return activeColl.add(liquidatedColl);\\n    }\\n\\n    function getEntireSystemDebt() public view returns (uint256 entireSystemDebt) {\\n        uint256 activeDebt = activePool.getZUSDDebt();\\n        uint256 closedDebt = defaultPool.getZUSDDebt();\\n\\n        return activeDebt.add(closedDebt);\\n    }\\n\\n    function _getTCR(uint256 _price) internal view returns (uint256 TCR) {\\n        uint256 entireSystemColl = getEntireSystemColl();\\n        uint256 entireSystemDebt = getEntireSystemDebt();\\n\\n        TCR = LiquityMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\n\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint256 _price) internal view returns (bool) {\\n        uint256 TCR = _getTCR(_price);\\n\\n        return TCR < liquityBaseParams.CCR();\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint256 _fee,\\n        uint256 _amount,\\n        uint256 _maxFeePercentage\\n    ) internal pure {\\n        uint256 feePercentage = _fee.mul(DECIMAL_PRECISION).div(_amount);\\n        require(feePercentage <= _maxFeePercentage, \\\"Fee exceeded provided maximum\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x100b8a1c17caa95f5c9977e88f9263847a1977a365ca0a795753dd74aa1d6d7c\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./console.sol\\\";\\n\\nlibrary LiquityMath {\\n    using SafeMath for uint;\\n\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division. \\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /* \\n    * Multiply two decimal numbers and use normal rounding rules:\\n    * -round product up if 19'th mantissa digit >= 5\\n    * -round product down if 19'th mantissa digit < 5\\n    *\\n    * Used only inside the exponentiation, _decPow().\\n    */\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n        uint prod_xy = x.mul(y);\\n\\n        decProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\n    }\\n\\n    /* \\n    * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n    * \\n    * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity. \\n    * \\n    * Called by two functions that represent time in units of minutes:\\n    * 1) TroveManager._calcDecayedBaseRate\\n    * 2) CommunityIssuance._getCumulativeIssuanceFraction \\n    * \\n    * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n    * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n    * \\n    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n    * negligibly different from just passing the cap, since: \\n    *\\n    * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n    */\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n       \\n        if (_minutes > 525600000) {_minutes = 525600000;}  // cap to avoid overflow\\n    \\n        if (_minutes == 0) {return DECIMAL_PRECISION;}\\n\\n        uint y = DECIMAL_PRECISION;\\n        uint x = _base;\\n        uint n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n.div(2);\\n            } else { // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n.sub(1)).div(2);\\n            }\\n        }\\n\\n        return decMul(x, y);\\n  }\\n\\n    function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\n    }\\n\\n    function _computeNominalCR(uint _coll, uint _debt) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return _coll.mul(NICR_PRECISION).div(_debt);\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else { // if (_debt == 0)\\n            return 2**256 - 1;\\n        }\\n    }\\n\\n    function _computeCR(uint _coll, uint _debt, uint _price) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint newCollRatio = _coll.mul(_price).div(_debt);\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else { // if (_debt == 0)\\n            return 2**256 - 1; \\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a95ed70d8937e0896c054b433ad0dfc87a9cfd028cae1694098e9d5d68127cd\",\"license\":\"MIT\"},\"contracts/Dependencies/Mynt/IMassetManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface IMassetManager {\\n    struct PermitParams {\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function mintTo(\\n        address _bAsset,\\n        uint256 _bAssetQuantity,\\n        address _recipient\\n    ) external returns (uint256);\\n\\n    function getToken() external view returns (address);\\n\\n    /**\\n     * @dev Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the\\n     *      relative mAsset quantity from the sender. Sender also incurs a small fee, if any.\\n     * @param _bAsset           Address of the bAsset to redeem.\\n     * @param _massetQuantity   Units of the masset to redeem.\\n     * @param _recipient        Address to credit with withdrawn bAssets.\\n     * @return massetRedeemed   Relative number of mAsset units burned to pay for the bAssets.\\n     */\\n    function redeemTo(\\n        address _bAsset,\\n        uint256 _massetQuantity,\\n        address _recipient\\n    ) external returns (uint256 massetRedeemed);\\n\\n    function getMAssetTokenTransferWithPermitAddress() external view returns(address);\\n}\\n\",\"keccak256\":\"0xea06cb4c14ea4d762d0802f44ff5968018e975d787195d4168cc18b66881d5ac\",\"license\":\"MIT\"},\"contracts/Dependencies/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on OpenZeppelin's Ownable contract:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n *\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    bytes32 private constant KEY_OWNER = keccak256(\\\"key.ownable.owner\\\");\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == getOwner(), \\\"Ownable:: access denied\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set address of the owner.\\n     * @param _owner Address of the owner.\\n     * */\\n    function _setOwner(address _owner) internal {\\n        require(_owner != address(0), \\\"Ownable::setOwner: invalid address\\\");\\n        emit OwnershipTransferred(getOwner(), _owner);\\n\\n        bytes32 key = KEY_OWNER;\\n        assembly {\\n            sstore(key, _owner)\\n        }\\n    }\\n\\n    /**\\n     * @notice Set address of the owner (only owner can call this function)\\n     * @param _owner Address of the owner.\\n     * */\\n    function setOwner(address _owner) public onlyOwner {\\n        _setOwner(_owner);\\n    }\\n\\n    /**\\n     * @notice Return address of the owner.\\n     * @return _owner Address of the owner.\\n     * */\\n    function getOwner() public view returns (address _owner) {\\n        bytes32 key = KEY_OWNER;\\n        assembly {\\n            _owner := sload(key)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb5fc626e0b227fc0feb1d84440585015a0a5f586547d298534a604dd113efec6\",\"license\":\"MIT\"},\"contracts/Dependencies/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on OpenZeppelin's SafeMath:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\n *\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x666b890992a066cc791f36c2975cd595d9761a014c654c385ed36ffaf658f3fd\",\"license\":\"MIT\"},\"contracts/Dependencies/TroveManagerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"../Interfaces/IActivePool.sol\\\";\\nimport \\\"../Interfaces/IDefaultPool.sol\\\";\\nimport \\\"../Interfaces/IZUSDToken.sol\\\";\\nimport \\\"../Interfaces/IZEROStaking.sol\\\";\\nimport \\\"../Interfaces/ISortedTroves.sol\\\";\\nimport \\\"../Interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"../TroveManagerStorage.sol\\\";\\nimport \\\"./LiquityBase.sol\\\";\\n\\ncontract TroveManagerBase is LiquityBase, TroveManagerStorage {\\n    uint256 public constant SECONDS_IN_ONE_MINUTE = 60;\\n\\n    uint256 public constant MINUTE_DECAY_FACTOR = 999037758833783000;\\n\\n    /// During bootsrap period redemptions are not allowed\\n    uint256 public immutable BOOTSTRAP_PERIOD;\\n\\n    /**\\n      BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction, in order to calc the new base rate from a redemption.\\n      Corresponds to (1 / ALPHA) in the white paper.\\n     */\\n    uint256 public constant BETA = 2;\\n\\n    /**\\n      --- Variable container structs for liquidations ---\\n     \\n      These structs are used to hold, return and assign variables inside the liquidation functions,\\n      in order to avoid the error: \\\"CompilerError: Stack too deep\\\".\\n     */\\n\\n    struct LocalVariables_OuterLiquidationFunction {\\n        uint256 price;\\n        uint256 ZUSDInStabPool;\\n        bool recoveryModeAtStart;\\n        uint256 liquidatedDebt;\\n        uint256 liquidatedColl;\\n    }\\n\\n    struct LocalVariables_InnerSingleLiquidateFunction {\\n        uint256 collToLiquidate;\\n        uint256 pendingDebtReward;\\n        uint256 pendingCollReward;\\n    }\\n\\n    struct LocalVariables_LiquidationSequence {\\n        uint256 remainingZUSDInStabPool;\\n        uint256 i;\\n        uint256 ICR;\\n        address user;\\n        bool backToNormalMode;\\n        uint256 entireSystemDebt;\\n        uint256 entireSystemColl;\\n    }\\n\\n    struct LiquidationValues {\\n        uint256 entireTroveDebt;\\n        uint256 entireTroveColl;\\n        uint256 collGasCompensation;\\n        uint256 ZUSDGasCompensation;\\n        uint256 debtToOffset;\\n        uint256 collToSendToSP;\\n        uint256 debtToRedistribute;\\n        uint256 collToRedistribute;\\n        uint256 collSurplus;\\n    }\\n\\n    struct LiquidationTotals {\\n        uint256 totalCollInSequence;\\n        uint256 totalDebtInSequence;\\n        uint256 totalCollGasCompensation;\\n        uint256 totalZUSDGasCompensation;\\n        uint256 totalDebtToOffset;\\n        uint256 totalCollToSendToSP;\\n        uint256 totalDebtToRedistribute;\\n        uint256 totalCollToRedistribute;\\n        uint256 totalCollSurplus;\\n    }\\n\\n    struct ContractsCache {\\n        IActivePool activePool;\\n        IDefaultPool defaultPool;\\n        IZUSDToken zusdToken;\\n        IZEROStaking zeroStaking;\\n        ISortedTroves sortedTroves;\\n        ICollSurplusPool collSurplusPool;\\n        address gasPoolAddress;\\n    }\\n    // --- Variable container structs for redemptions ---\\n\\n    struct RedemptionTotals {\\n        uint256 remainingZUSD;\\n        uint256 totalZUSDToRedeem;\\n        uint256 totalETHDrawn;\\n        uint256 ETHFee;\\n        uint256 ETHToSendToRedeemer;\\n        uint256 decayedBaseRate;\\n        uint256 price;\\n        uint256 totalZUSDSupplyAtStart;\\n    }\\n\\n    struct SingleRedemptionValues {\\n        uint256 ZUSDLot;\\n        uint256 ETHLot;\\n        bool cancelledPartial;\\n    }\\n\\n    // --- Events ---\\n\\n    event Liquidation(\\n        uint256 _liquidatedDebt,\\n        uint256 _liquidatedColl,\\n        uint256 _collGasCompensation,\\n        uint256 _ZUSDGasCompensation\\n    );\\n    event Redemption(\\n        uint256 _attemptedZUSDAmount,\\n        uint256 _actualZUSDAmount,\\n        uint256 _ETHSent,\\n        uint256 _ETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _stake,\\n        TroveManagerOperation _operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        TroveManagerOperation _operation\\n    );\\n    event BaseRateUpdated(uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\\n    event LTermsUpdated(uint256 _L_ETH, uint256 _L_ZUSDDebt);\\n    event TroveSnapshotsUpdated(uint256 _L_ETH, uint256 _L_ZUSDDebt);\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n    enum TroveManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral\\n    }\\n\\n    constructor(uint256 _bootstrapPeriod) public {\\n        BOOTSTRAP_PERIOD = _bootstrapPeriod;\\n    }\\n\\n    /// Return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function _getCurrentICR(address _borrower, uint256 _price) public view returns (uint256) {\\n        (uint256 currentETH, uint256 currentZUSDDebt) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint256 ICR = LiquityMath._computeCR(currentETH, currentZUSDDebt, _price);\\n        return ICR;\\n    }\\n\\n    function _getCurrentTroveAmounts(address _borrower) internal view returns (uint256, uint256) {\\n        uint256 pendingETHReward = _getPendingETHReward(_borrower);\\n        uint256 pendingZUSDDebtReward = _getPendingZUSDDebtReward(_borrower);\\n\\n        uint256 currentETH = Troves[_borrower].coll.add(pendingETHReward);\\n        uint256 currentZUSDDebt = Troves[_borrower].debt.add(pendingZUSDDebtReward);\\n\\n        return (currentETH, currentZUSDDebt);\\n    }\\n\\n    /// Get the borrower's pending accumulated ETH reward, earned by their stake\\n    function _getPendingETHReward(address _borrower) public view returns (uint256) {\\n        uint256 snapshotETH = rewardSnapshots[_borrower].ETH;\\n        uint256 rewardPerUnitStaked = L_ETH.sub(snapshotETH);\\n\\n        if (rewardPerUnitStaked == 0 || Troves[_borrower].status != Status.active) {\\n            return 0;\\n        }\\n\\n        uint256 stake = Troves[_borrower].stake;\\n\\n        uint256 pendingETHReward = stake.mul(rewardPerUnitStaked).div(DECIMAL_PRECISION);\\n\\n        return pendingETHReward;\\n    }\\n\\n    /// Get the borrower's pending accumulated ZUSD reward, earned by their stake\\n    function _getPendingZUSDDebtReward(address _borrower) public view returns (uint256) {\\n        uint256 snapshotZUSDDebt = rewardSnapshots[_borrower].ZUSDDebt;\\n        uint256 rewardPerUnitStaked = L_ZUSDDebt.sub(snapshotZUSDDebt);\\n\\n        if (rewardPerUnitStaked == 0 || Troves[_borrower].status != Status.active) {\\n            return 0;\\n        }\\n\\n        uint256 stake = Troves[_borrower].stake;\\n\\n        uint256 pendingZUSDDebtReward = stake.mul(rewardPerUnitStaked).div(DECIMAL_PRECISION);\\n\\n        return pendingZUSDDebtReward;\\n    }\\n\\n    /// Add the borrowers's coll and debt rewards earned from redistributions, to their Trove\\n    function _applyPendingRewards(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower\\n    ) internal {\\n        if (_hasPendingRewards(_borrower)) {\\n            _requireTroveIsActive(_borrower);\\n\\n            // Compute pending rewards\\n            uint256 pendingETHReward = _getPendingETHReward(_borrower);\\n            uint256 pendingZUSDDebtReward = _getPendingZUSDDebtReward(_borrower);\\n\\n            // Apply pending rewards to trove's state\\n            Troves[_borrower].coll = Troves[_borrower].coll.add(pendingETHReward);\\n            Troves[_borrower].debt = Troves[_borrower].debt.add(pendingZUSDDebtReward);\\n\\n            _updateTroveRewardSnapshots(_borrower);\\n\\n            // Transfer from DefaultPool to ActivePool\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                pendingZUSDDebtReward,\\n                pendingETHReward\\n            );\\n\\n            emit TroveUpdated(\\n                _borrower,\\n                Troves[_borrower].debt,\\n                Troves[_borrower].coll,\\n                Troves[_borrower].stake,\\n                TroveManagerOperation.applyPendingRewards\\n            );\\n        }\\n    }\\n\\n    function _hasPendingRewards(address _borrower) public view returns (bool) {\\n        /*\\n         * A Trove has pending rewards if its snapshot is less than the current rewards per-unit-staked sum:\\n         * this indicates that rewards have occured since the snapshot was made, and the user therefore has\\n         * pending rewards\\n         */\\n        if (Troves[_borrower].status != Status.active) {\\n            return false;\\n        }\\n\\n        return (rewardSnapshots[_borrower].ETH < L_ETH);\\n    }\\n\\n    function _updateTroveRewardSnapshots(address _borrower) internal {\\n        rewardSnapshots[_borrower].ETH = L_ETH;\\n        rewardSnapshots[_borrower].ZUSDDebt = L_ZUSDDebt;\\n        emit TroveSnapshotsUpdated(L_ETH, L_ZUSDDebt);\\n    }\\n\\n    /// Move a Trove's pending debt and collateral rewards from distributions, from the Default Pool to the Active Pool\\n    function _movePendingTroveRewardsToActivePool(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint256 _ZUSD,\\n        uint256 _ETH\\n    ) internal {\\n        _defaultPool.decreaseZUSDDebt(_ZUSD);\\n        _activePool.increaseZUSDDebt(_ZUSD);\\n        _defaultPool.sendETHToActivePool(_ETH);\\n    }\\n\\n    /// Remove borrower's stake from the totalStakes sum, and set their stake to 0\\n    function _removeStake(address _borrower) internal {\\n        uint256 stake = Troves[_borrower].stake;\\n        totalStakes = totalStakes.sub(stake);\\n        Troves[_borrower].stake = 0;\\n    }\\n\\n    function _closeTrove(address _borrower, Status closedStatus) internal {\\n        assert(closedStatus != Status.nonExistent && closedStatus != Status.active);\\n\\n        uint256 TroveOwnersArrayLength = TroveOwners.length;\\n        _requireMoreThanOneTroveInSystem(TroveOwnersArrayLength);\\n\\n        Troves[_borrower].status = closedStatus;\\n        Troves[_borrower].coll = 0;\\n        Troves[_borrower].debt = 0;\\n\\n        rewardSnapshots[_borrower].ETH = 0;\\n        rewardSnapshots[_borrower].ZUSDDebt = 0;\\n\\n        _removeTroveOwner(_borrower, TroveOwnersArrayLength);\\n        sortedTroves.remove(_borrower);\\n    }\\n\\n    /// Update borrower's stake based on their latest collateral value\\n    function _updateStakeAndTotalStakes(address _borrower) internal returns (uint256) {\\n        uint256 newStake = _computeNewStake(Troves[_borrower].coll);\\n        uint256 oldStake = Troves[_borrower].stake;\\n        Troves[_borrower].stake = newStake;\\n\\n        totalStakes = totalStakes.sub(oldStake).add(newStake);\\n        emit TotalStakesUpdated(totalStakes);\\n\\n        return newStake;\\n    }\\n\\n    // Calculate a new stake based on the snapshots of the totalStakes and totalCollateral taken at the last liquidation\\n    function _computeNewStake(uint256 _coll) internal view returns (uint256) {\\n        uint256 stake;\\n        if (totalCollateralSnapshot == 0) {\\n            stake = _coll;\\n        } else {\\n            /*\\n             * The following assert() holds true because:\\n             * - The system always contains >= 1 trove\\n             * - When we close or liquidate a trove, we redistribute the pending rewards, so if all troves were closed/liquidated,\\n             * rewards would\\u2019ve been emptied and totalCollateralSnapshot would be zero too.\\n             */\\n            assert(totalStakesSnapshot > 0);\\n            stake = _coll.mul(totalStakesSnapshot).div(totalCollateralSnapshot);\\n        }\\n        return stake;\\n    }\\n\\n    function _calcDecayedBaseRate() internal view returns (uint256) {\\n        uint256 minutesPassed = _minutesPassedSinceLastFeeOp();\\n        uint256 decayFactor = LiquityMath._decPow(MINUTE_DECAY_FACTOR, minutesPassed);\\n\\n        return baseRate.mul(decayFactor).div(DECIMAL_PRECISION);\\n    }\\n\\n    function _minutesPassedSinceLastFeeOp() internal view returns (uint256) {\\n        return (block.timestamp.sub(lastFeeOperationTime)).div(SECONDS_IN_ONE_MINUTE);\\n    }\\n\\n    // Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\n    function _updateLastFeeOpTime() internal {\\n        uint256 timePassed = block.timestamp.sub(lastFeeOperationTime);\\n\\n        if (timePassed >= SECONDS_IN_ONE_MINUTE) {\\n            lastFeeOperationTime = block.timestamp;\\n            emit LastFeeOpTimeUpdated(block.timestamp);\\n        }\\n    }\\n\\n    function _calcRedemptionFee(\\n        uint256 _redemptionRate,\\n        uint256 _ETHDrawn\\n    ) internal pure returns (uint256) {\\n        uint256 redemptionFee = _redemptionRate.mul(_ETHDrawn).div(DECIMAL_PRECISION);\\n        require(\\n            redemptionFee < _ETHDrawn,\\n            \\\"TroveManager: Fee would eat up all returned collateral\\\"\\n        );\\n        return redemptionFee;\\n    }\\n\\n    function _getRedemptionRate() public view returns (uint256) {\\n        return _calcRedemptionRate(baseRate);\\n    }\\n\\n    function _getRedemptionFee(uint256 _ETHDrawn) internal view returns (uint256) {\\n        return _calcRedemptionFee(_getRedemptionRate(), _ETHDrawn);\\n    }\\n\\n    function _calcRedemptionRate(uint256 _baseRate) internal view returns (uint256) {\\n        return\\n            LiquityMath._min(\\n                liquityBaseParams.REDEMPTION_FEE_FLOOR().add(_baseRate),\\n                DECIMAL_PRECISION // cap at a maximum of 100%\\n            );\\n    }\\n\\n    /**\\n      Remove a Trove owner from the TroveOwners array, not preserving array order. Removing owner 'B' does the following:\\n      [A B C D E] => [A E C D], and updates E's Trove struct to point to its new array index.\\n     */\\n    function _removeTroveOwner(address _borrower, uint256 TroveOwnersArrayLength) internal {\\n        Status troveStatus = Troves[_borrower].status;\\n        // It\\u2019s set in caller function `_closeTrove`\\n        assert(troveStatus != Status.nonExistent && troveStatus != Status.active);\\n\\n        uint128 index = Troves[_borrower].arrayIndex;\\n        uint256 length = TroveOwnersArrayLength;\\n        uint256 idxLast = length.sub(1);\\n\\n        assert(index <= idxLast);\\n\\n        address addressToMove = TroveOwners[idxLast];\\n\\n        TroveOwners[index] = addressToMove;\\n        Troves[addressToMove].arrayIndex = index;\\n        emit TroveIndexUpdated(addressToMove, index);\\n\\n        TroveOwners.pop();\\n    }\\n\\n    // --- 'require' wrapper functions ---\\n\\n    function _requireCallerIsBorrowerOperations() internal view {\\n        require(\\n            msg.sender == borrowerOperationsAddress,\\n            \\\"TroveManager: Caller is not the BorrowerOperations contract\\\"\\n        );\\n    }\\n\\n    function _requireTroveIsActive(address _borrower) internal view {\\n        require(\\n            Troves[_borrower].status == Status.active,\\n            \\\"TroveManager: Trove does not exist or is closed\\\"\\n        );\\n    }\\n\\n    function _requireZUSDBalanceCoversRedemption(\\n        IZUSDToken _zusdToken,\\n        address _redeemer,\\n        uint256 _amount\\n    ) internal view {\\n        require(\\n            _zusdToken.balanceOf(_redeemer) >= _amount,\\n            \\\"TroveManager: Requested redemption amount must be <= user's ZUSD token balance\\\"\\n        );\\n    }\\n\\n    function _requireMoreThanOneTroveInSystem(uint256 TroveOwnersArrayLength) internal view {\\n        require(\\n            TroveOwnersArrayLength > 1 && sortedTroves.getSize() > 1,\\n            \\\"TroveManager: Only one trove in the system\\\"\\n        );\\n    }\\n\\n    function _requireAmountGreaterThanZero(uint256 _amount) internal pure {\\n        require(_amount > 0, \\\"TroveManager: Amount must be greater than zero\\\");\\n    }\\n\\n    function _requireTCRoverMCR(uint256 _price) internal view {\\n        require(\\n            _getTCR(_price) >= liquityBaseParams.MCR(),\\n            \\\"TroveManager: Cannot redeem when TCR < MCR\\\"\\n        );\\n    }\\n\\n    function _requireAfterBootstrapPeriod() internal view {\\n        uint256 systemDeploymentTime = _zeroToken.getDeploymentStartTime();\\n        require(\\n            block.timestamp >= systemDeploymentTime.add(BOOTSTRAP_PERIOD),\\n            \\\"TroveManager: Redemptions are not allowed during bootstrap phase\\\"\\n        );\\n    }\\n\\n    function _requireValidMaxFeePercentage(uint256 _maxFeePercentage) internal view {\\n        require(\\n            _maxFeePercentage >= liquityBaseParams.REDEMPTION_FEE_FLOOR() &&\\n                _maxFeePercentage <= DECIMAL_PRECISION,\\n            \\\"Max fee percentage must be between 0.5% and 100%\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x83e1bfaa93cf973052c41df1cc0741a93f737659cd664f207c0d42256f78617b\",\"license\":\"MIT\"},\"contracts/Dependencies/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n// Buidler's helper contract for console logging\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction log() internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t\\tignored;\\n\\t}\\tfunction logInt(int p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logByte(byte p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(byte)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x6fa1de4ffe22b8f58b0b64d65db11dd5037be9b9db47b365a72adb489e217000\",\"license\":\"MIT\"},\"contracts/Interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * The Active Pool holds the ETH collateral and ZUSD debt (but not ZUSD tokens) for all active troves.\\n *\\n * When a trove is liquidated, it's ETH and ZUSD debt are transferred from the Active Pool, to either the\\n * Stability Pool, the Default Pool, or both, depending on the liquidation conditions.\\n *\\n */\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolZUSDDebtUpdated(uint _ZUSDDebt);\\n    event ActivePoolETHBalanceUpdated(uint _ETH);\\n\\n    // --- Functions ---\\n\\n    /// @notice Send ETH amount to given account. Updates ActivePool balance. Only callable by BorrowerOperations, TroveManager or StabilityPool.\\n    /// @param _account account to receive the ETH amount\\n    /// @param _amount ETH amount to send\\n    function sendETH(address _account, uint _amount) external;\\n}\\n\",\"keccak256\":\"0xdd5f1b6fae4050b4c885a85a10c2d0e73b82187a51736d009065aaeea33bf0d0\",\"license\":\"MIT\"},\"contracts/Interfaces/ICollSurplusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint256 _newBalance);\\n    event EtherSent(address _to, uint256 _amount);\\n\\n    // --- Contract setters ---\\n\\n    /**\\n     * @notice Called only once on init, to set addresses of other Zero contracts. Callable only by owner\\n     * @dev initializer function, checks addresses are contracts\\n     * @param _borrowerOperationsAddress BorrowerOperations contract address\\n     * @param _troveManagerAddress TroveManager contract address\\n     * @param _activePoolAddress ActivePool contract address\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    /// @notice Not necessarily equal to the raw ether balance - ether can be forcibly sent to contracts.\\n    /// @return ETH state variable\\n    function getETH() external view returns (uint256);\\n\\n    /// @param _account account to retrieve collateral\\n    /// @return collateral\\n    function getCollateral(address _account) external view returns (uint256);\\n\\n    /// @notice adds amount to current account balance. Only callable by TroveManager.\\n    /// @param _account account to add amount\\n    /// @param _amount amount to add\\n    function accountSurplus(address _account, uint256 _amount) external;\\n\\n    /// @notice claims collateral for given account. Only callable by BorrowerOperations.\\n    /// @param _account account to send claimable collateral\\n    function claimColl(address _account) external;\\n}\\n\",\"keccak256\":\"0xac983936efe70d19205bff65a18b4e6000d489d4e4d1e2e92f951873cee91048\",\"license\":\"MIT\"},\"contracts/Interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolZUSDDebtUpdated(uint256 _ZUSDDebt);\\n    event DefaultPoolETHBalanceUpdated(uint256 _ETH);\\n\\n    // --- Functions ---\\n\\n    /// @notice Send ETH to Active Pool\\n    /// @param _amount ETH to send\\n    function sendETHToActivePool(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xfb2607676b2eb0f2defd248b4dd32895820048317f29aa6bdb572403a3e3d44e\",\"license\":\"MIT\"},\"contracts/Interfaces/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/// Common interface for Fee Distributor.\\ninterface IFeeDistributor {\\n    // --- Events ---\\n\\n    event FeeSharingCollectorAddressChanged(address _feeSharingCollectorAddress);\\n    event ZeroStakingAddressChanged(address _zeroStakingAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event WrbtcAddressChanged(address _wrbtcAddress);\\n    event ZUSDTokenAddressChanged(address _zusdTokenAddress);\\n    event ActivePoolAddressSet(address _activePoolAddress);\\n\\n    event ZUSDDistributed(uint256 _zusdDistributedAmount);\\n    event RBTCistributed(uint256 _rbtcDistributedAmount);\\n\\n    // --- Functions ---\\n\\n    /**\\n     * @notice Called only once on init, to set addresses of other Zero contracts. Callable only by owner\\n     * @dev initializer function, checks addresses are contracts\\n     * @param _feeSharingCollectorAddress FeeSharingCollector address\\n     * @param _zeroStakingAddress ZEROStaking contract address\\n     * @param _borrowerOperationsAddress borrowerOperations contract address\\n     * @param _troveManagerAddress TroveManager contract address\\n     * @param _wrbtcAddress wrbtc ERC20 contract address\\n     * @param _zusdTokenAddress ZUSDToken contract address\\n     * @param _activePoolAddress ActivePool contract address\\n     */\\n    function setAddresses(\\n        address _feeSharingCollectorAddress,\\n        address _zeroStakingAddress,\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _wrbtcAddress,\\n        address _zusdTokenAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    function distributeFees() external;\\n}\\n\",\"keccak256\":\"0x4b9bc6eaa8a9ea5e0570ffd84c0af2a92e74b001ae1ee1c8518d76382691a07f\",\"license\":\"MIT\"},\"contracts/Interfaces/ILiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\nimport \\\"./ILiquityBaseParams.sol\\\";\\n\\ninterface ILiquityBase {\\n    /// @return PriceFeed contract\\n    function priceFeed() external view returns (IPriceFeed);\\n\\n    /// @return LiquityBaseParams contract\\n    function liquityBaseParams() external view returns (ILiquityBaseParams);\\n}\\n\",\"keccak256\":\"0xa4a57bd79e64d56a687c28d2a35c55b733fde8dda2a7ba861606eed3211724e1\",\"license\":\"MIT\"},\"contracts/Interfaces/ILiquityBaseParams.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface ILiquityBaseParams {\\n\\n    /// Minimum collateral ratio for individual troves\\n    function MCR() external view returns (uint);\\n\\n    /// Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    function CCR() external view returns (uint);\\n\\n    function PERCENT_DIVISOR() external view returns (uint);\\n\\n    function BORROWING_FEE_FLOOR() external view returns (uint);\\n\\n    /**\\n     * Half-life of 12h. 12h = 720 min\\n     * (1/2) = d^720 => d = (1/2)^(1/720)\\n     */\\n    function REDEMPTION_FEE_FLOOR() external view returns (uint);\\n\\n    function MAX_BORROWING_FEE() external view returns (uint);\\n\\n}\",\"keccak256\":\"0xef8c0e8ad5d13d604c11b04983ff5bdd41768b646f2b33f45ddd988adec204e0\",\"license\":\"MIT\"},\"contracts/Interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event ETHBalanceUpdated(uint _newBalance);\\n    event ZUSDBalanceUpdated(uint _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event EtherSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    /// @notice Not necessarily equal to the raw ether balance - ether can be forcibly sent to contracts.\\n    /// @return ETH pool balance\\n    function getETH() external view returns (uint);\\n\\n    /// @return ZUSD debt pool balance\\n    function getZUSDDebt() external view returns (uint);\\n\\n    /// @notice Increases ZUSD debt of the pool.\\n    /// @param _amount ZUSD amount to add to the pool debt\\n    function increaseZUSDDebt(uint _amount) external;\\n\\n    /// @notice Decreases ZUSD debt of the pool.\\n    /// @param _amount ZUSD amount to subtract to the pool debt\\n    function decreaseZUSDDebt(uint _amount) external;\\n}\\n\",\"keccak256\":\"0x148e87ab38c6176d74f36c9e8989b99e768a7b18d8a045f1f01d6583b986806d\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint256 _lastGoodPrice);\\n\\n    // --- Function ---\\n\\n    /// @notice Returns the latest price obtained from the Oracle. Called by Zero functions that require a current price.\\n    ///         It uses the main price feed and fallback to the backup one in case of an error. If both fail return the last\\n    ///         good price seen.\\n    /// @dev It's also callable by anyone externally\\n    /// @return The price\\n    function fetchPrice() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x85fd97219a8156209d2cb5c6ae7c5ead01d893db000bf575023fcef0e62f9591\",\"license\":\"MIT\"},\"contracts/Interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint256 _NICR);\\n    event NodeRemoved(address _id);\\n\\n    // --- Functions ---\\n\\n    /**\\n     * @notice Called only once on init, to set addresses of other Zero contracts and size. Callable only by owner\\n     * @dev initializer function, checks addresses are contracts\\n     * @param _size max size of troves list\\n     * @param _TroveManagerAddress TroveManager contract address\\n     * @param _borrowerOperationsAddress BorrowerOperations contract address\\n     */\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    /**\\n     * @dev Add a node to the list\\n     * @param _id Node's id\\n     * @param _ICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n    function insert(\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    /**\\n     * @dev Remove a node from the list\\n     * @param _id Node's id\\n     */\\n    function remove(address _id) external;\\n\\n    /**\\n     * @dev Re-insert the node at a new position, based on its new NICR\\n     * @param _id Node's id\\n     * @param _newICR Node's new NICR\\n     * @param _prevId Id of previous node for the new insert position\\n     * @param _nextId Id of next node for the new insert position\\n     */\\n    function reInsert(\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    /**\\n     * @dev Checks if the list contains a node\\n     * @param _id Node's id\\n     * @return true if list contains a node with given id\\n     */\\n    function contains(address _id) external view returns (bool);\\n\\n    /**\\n     * @dev Checks if the list is full\\n     * @return true if list is full\\n     */\\n    function isFull() external view returns (bool);\\n\\n    /**\\n     * @dev Checks if the list is empty\\n     * @return true if list is empty\\n     */\\n    function isEmpty() external view returns (bool);\\n\\n    /**\\n     * @return list current size\\n     */\\n    function getSize() external view returns (uint256);\\n\\n    /**\\n     * @return list max size\\n     */\\n    function getMaxSize() external view returns (uint256);\\n\\n    /**\\n     * @return the first node in the list (node with the largest NICR)\\n     */\\n    function getFirst() external view returns (address);\\n\\n    /**\\n     * @return the last node in the list (node with the smallest NICR)\\n     */\\n    function getLast() external view returns (address);\\n\\n    /**\\n     * @param _id Node's id\\n     * @return the next node (with a smaller NICR) in the list for a given node\\n     */\\n    function getNext(address _id) external view returns (address);\\n\\n    /**\\n     * @param _id Node's id\\n     * @return the previous node (with a larger NICR) in the list for a given node\\n     */\\n    function getPrev(address _id) external view returns (address);\\n\\n    /**\\n     * @notice Check if a pair of nodes is a valid insertion point for a new node with the given NICR\\n     * @param _ICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n    function validInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Find the insert position for a new node with the given NICR\\n     * @param _ICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n    function findInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0x7328ad009da6230ddea1559564428464a5c3ace2258fb534dfbba5b5a8c7c60d\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Dependencies/Mynt/IMassetManager.sol\\\";\\n\\n/*\\n * The Stability Pool holds ZUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its ZUSD debt gets offset with\\n * ZUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of ZUSD tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a ZUSD loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an ETH gain, as the ETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total ZUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / ETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- SOV ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * An SOV issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued SOV in proportion to the deposit as a share of total deposits. The SOV earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#zero-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolETHBalanceUpdated(uint _newBalance);\\n    event StabilityPoolZUSDBalanceUpdated(uint _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event ZUSDTokenAddressChanged(address _newZUSDTokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint _P);\\n    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event FrontEndRegistered(address indexed _frontEnd, uint _kickbackRate);\\n    event FrontEndTagSet(address indexed _depositor, address indexed _frontEnd);\\n\\n    event DepositSnapshotUpdated(address indexed _depositor, uint _P, uint _S, uint _G);\\n    event FrontEndSnapshotUpdated(address indexed _frontEnd, uint _P, uint _G);\\n    event UserDepositChanged(address indexed _depositor, uint _newDeposit);\\n    event FrontEndStakeChanged(\\n        address indexed _frontEnd,\\n        uint _newFrontEndStake,\\n        address _depositor\\n    );\\n\\n    event ETHGainWithdrawn(address indexed _depositor, uint _ETH, uint _ZUSDLoss);\\n    event SOVPaidToDepositor(address indexed _depositor, uint _SOV);\\n    event SOVPaidToFrontEnd(address indexed _frontEnd, uint _SOV);\\n    event EtherSent(address _to, uint _amount);\\n\\n    event WithdrawFromSpAndConvertToDLLR(\\n        address _depositor,\\n        uint256 _zusdAmountRequested,\\n        uint256 _dllrAmountReceived\\n    );\\n\\n    // --- Functions ---\\n\\n    /**\\n     * @notice Called only once on init, to set addresses of other Liquity contracts. Callable only by owner\\n     * @dev initializer function, checks addresses are contracts\\n     * @param _liquityBaseParamsAddress LiquidityBaseParams contract address\\n     * @param _borrowerOperationsAddress BorrowerOperations contract address\\n     * @param _troveManagerAddress TroveManager contract address\\n     * @param _activePoolAddress ActivePool contract address\\n     * @param _zusdTokenAddress ZUSDToken contract address\\n     * @param _sortedTrovesAddress SortedTroves contract address\\n     * @param _priceFeedAddress PriceFeed contract address\\n     * @param _communityIssuanceAddress CommunityIssuanceAddress\\n     */\\n    function setAddresses(\\n        address _liquityBaseParamsAddress,\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _zusdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _communityIssuanceAddress\\n    ) external;\\n\\n    /**\\n     * @notice Initial checks:\\n     *  - Frontend is registered or zero address\\n     *  - Sender is not a registered frontend\\n     *  - _amount is not zero\\n     *  ---\\n     *  - Triggers a SOV issuance, based on time passed since the last issuance. The SOV issuance is shared between *all* depositors and front ends\\n     *  - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     *  - Sends depositor's accumulated gains (SOV, ETH) to depositor\\n     *  - Sends the tagged front end's accumulated SOV gains to the tagged front end\\n     *  - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     * @param _amount amount to provide\\n     * @param _frontEndTag frontend address to receive accumulated SOV gains\\n     */\\n    function provideToSP(uint _amount, address _frontEndTag) external;\\n\\n    /**\\n     * @notice Initial checks:\\n     *    - _amount is zero or there are no under collateralized troves left in the system\\n     *    - User has a non zero deposit\\n     *    ---\\n     *    - Triggers a SOV issuance, based on time passed since the last issuance. The SOV issuance is shared between *all* depositors and front ends\\n     *    - Removes the deposit's front end tag if it is a full withdrawal\\n     *    - Sends all depositor's accumulated gains (SOV, ETH) to depositor\\n     *    - Sends the tagged front end's accumulated SOV gains to the tagged front end\\n     *    - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     *    If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     * @param _amount amount to withdraw\\n     */\\n    function withdrawFromSP(uint _amount) external;\\n\\n    /**\\n     * @notice Initial checks:\\n     *    - User has a non zero deposit\\n     *    - User has an open trove\\n     *    - User has some ETH gain\\n     *    ---\\n     *    - Triggers a SOV issuance, based on time passed since the last issuance. The SOV issuance is shared between *all* depositors and front ends\\n     *    - Sends all depositor's SOV gain to  depositor\\n     *    - Sends all tagged front end's SOV gain to the tagged front end\\n     *    - Transfers the depositor's entire ETH gain from the Stability Pool to the caller's trove\\n     *    - Leaves their compounded deposit in the Stability Pool\\n     *    - Updates snapshots for deposit and tagged front end stake\\n     * @param _upperHint upper trove id hint\\n     * @param _lowerHint lower trove id hint\\n     */\\n    function withdrawETHGainToTrove(address _upperHint, address _lowerHint) external;\\n\\n    /**\\n     * @notice Initial checks:\\n     *    - Frontend (sender) not already registered\\n     *    - User (sender) has no deposit\\n     *    - _kickbackRate is in the range [0, 100%]\\n     *    ---\\n     *    Front end makes a one-time selection of kickback rate upon registering\\n     * @param _kickbackRate kickback rate selected by frontend\\n     */\\n    function registerFrontEnd(uint _kickbackRate) external;\\n\\n    /**\\n     * @notice Initial checks:\\n     *    - Caller is TroveManager\\n     *    ---\\n     *    Cancels out the specified debt against the ZUSD contained in the Stability Pool (as far as possible)\\n     *    and transfers the Trove's ETH collateral from ActivePool to StabilityPool.\\n     *    Only called by liquidation functions in the TroveManager.\\n     * @param _debt debt to cancel\\n     * @param _coll collateral to transfer\\n     */\\n    function offset(uint _debt, uint _coll) external;\\n\\n    /**\\n     * @return the total amount of ETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like ETH received from a self-destruct.\\n     */\\n    function getETH() external view returns (uint);\\n\\n    /**\\n     * @return ZUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalZUSDDeposits() external view returns (uint);\\n\\n    /**\\n     * @notice Calculates the ETH gain earned by the deposit since its last snapshots were taken.\\n     * @param _depositor address to calculate ETH gain\\n     * @return ETH gain from given depositor\\n     */\\n    function getDepositorETHGain(address _depositor) external view returns (uint);\\n\\n    /**\\n     * @notice Calculate the SOV gain earned by a deposit since its last snapshots were taken.\\n     *    If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     *    Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     *    which they made their deposit.\\n     * @param _depositor address to calculate ETH gain\\n     * @return SOV gain from given depositor\\n     */\\n    function getDepositorSOVGain(address _depositor) external view returns (uint);\\n\\n    /**\\n     * @param _frontEnd front end address\\n     * @return the SOV gain earned by the front end.\\n     */\\n    function getFrontEndSOVGain(address _frontEnd) external view returns (uint);\\n\\n    /**\\n     * @param _depositor depositor address\\n     * @return the user's compounded deposit.\\n     */\\n    function getCompoundedZUSDDeposit(address _depositor) external view returns (uint);\\n\\n    /**\\n     * @notice The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\n     * @param _frontEnd front end address\\n     * @return the front end's compounded stake.\\n     */\\n    function getCompoundedFrontEndStake(address _frontEnd) external view returns (uint);\\n\\n    //DLLR _owner or _spender can convert a specified amount of DLLR into ZUSD via Sovryn Mynt and deposit the ZUSD into the Zero Stability Pool, all in a single transaction\\n    function provideToSpFromDLLR(\\n        uint _dllrAmount,\\n        IMassetManager.PermitParams calldata _permitParams\\n    ) external;\\n\\n    /// Stability Pool depositor can withdraw a specified amount of ZUSD from the Zero Stability Pool and optionally convert the ZUSD to DLLR via Sovryn Mynt, all in a single transaction\\n    function withdrawFromSpAndConvertToDLLR(uint256 _zusdAmount) external;\\n\\n    /**\\n     * Fallback function\\n     * Only callable by Active Pool, it just accounts for ETH received\\n     * receive() external payable;\\n     */\\n}\\n\",\"keccak256\":\"0xe39e6323197a04f5ec836a54eafcee840d2ae089f1bbad3e6b4543b61be033bc\",\"license\":\"MIT\"},\"contracts/Interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ILiquityBase.sol\\\";\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IZUSDToken.sol\\\";\\nimport \\\"./IZEROToken.sol\\\";\\nimport \\\"./IZEROStaking.sol\\\";\\nimport \\\"../Dependencies/Mynt/IMassetManager.sol\\\";\\n\\n/// Common interface for the Trove Manager.\\ninterface ITroveManager is ILiquityBase {\\n    // --- Events ---\\n\\n    event FeeDistributorAddressChanged(address _feeDistributorAddress);\\n    event TroveManagerRedeemOpsAddressChanged(address _troveManagerRedeemOps);\\n    event LiquityBaseParamsAddressChanges(address _borrowerOperationsAddress);\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event ZUSDTokenAddressChanged(address _newZUSDTokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event ZEROTokenAddressChanged(address _zeroTokenAddress);\\n    event ZEROStakingAddressChanged(address _zeroStakingAddress);\\n\\n    event Liquidation(\\n        uint256 _liquidatedDebt,\\n        uint256 _liquidatedColl,\\n        uint256 _collGasCompensation,\\n        uint256 _ZUSDGasCompensation\\n    );\\n    event Redemption(\\n        uint256 _attemptedZUSDAmount,\\n        uint256 _actualZUSDAmount,\\n        uint256 _ETHSent,\\n        uint256 _ETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 stake,\\n        uint8 operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint8 operation\\n    );\\n    event BaseRateUpdated(uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\\n    event LTermsUpdated(uint256 _L_ETH, uint256 _L_ZUSDDebt);\\n    event TroveSnapshotsUpdated(uint256 _L_ETH, uint256 _L_ZUSDDebt);\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n    struct TroveManagerInitAddressesParams {\\n        address _feeDistributorAddress;\\n        address _troveManagerRedeemOps;\\n        address _liquityBaseParamsAddress;\\n        address _borrowerOperationsAddress;\\n        address _activePoolAddress;\\n        address _defaultPoolAddress;\\n        address _stabilityPoolAddress;\\n        address _gasPoolAddress;\\n        address _collSurplusPoolAddress;\\n        address _priceFeedAddress;\\n        address _zusdTokenAddress;\\n        address _sortedTrovesAddress;\\n        address _zeroTokenAddress;\\n        address _zeroStakingAddress;\\n    }\\n\\n    // --- Functions ---\\n    /**\\n     * @notice Called only once on init, to set addresses of other Zero contracts. Callable only by owner\\n     * @dev initializer function, checks addresses are contracts\\n     * @param _troveManagerInitAddresses addresses list to intialize TroveManager with _\\n     *        _feeDistributorAddress feeDistributor contract address\\n     *        _troveManagerRedeemOps TroveManagerRedeemOps contract address\\n     *        _liquityBaseParamsAddress LiquityBaseParams contract address\\n     *        _borrowerOperationsAddress BorrowerOperations contract address\\n     *        _activePoolAddress ActivePool contract address\\n     *        _defaultPoolAddress DefaultPool contract address\\n     *        _stabilityPoolAddress StabilityPool contract address\\n     *        _gasPoolAddress GasPool contract address\\n     *        _collSurplusPoolAddress CollSurplusPool contract address\\n     *        _priceFeedAddress PriceFeed contract address\\n     *        _zusdTokenAddress ZUSDToken contract address\\n     *        _sortedTrovesAddress SortedTroves contract address\\n     *        _zeroTokenAddress ZEROToken contract address\\n     *        _zeroStakingAddress ZEROStaking contract address\\n     */\\n    function setAddresses(\\n        TroveManagerInitAddressesParams memory _troveManagerInitAddresses\\n    ) external;\\n\\n    function setTroveManagerRedeemOps(address _troveManagerRedeemOps) external;\\n\\n    /// @return Trove owners count\\n    function getTroveOwnersCount() external view returns (uint256);\\n\\n    /// @param _index Trove owner index\\n    /// @return Trove from TroveOwners array in given index\\n    function getTroveFromTroveOwnersArray(uint256 _index) external view returns (address);\\n\\n    /// @param _borrower borrower address\\n    /// @return the nominal collateral ratio (ICR) of a given Trove, without the price. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getNominalICR(address _borrower) external view returns (uint256);\\n\\n    /// @notice computes the user\\u2019s individual collateralization ratio (ICR) based on their total collateral and total ZUSD debt. Returns 2^256 -1 if they have 0 debt.\\n    /// @param _borrower borrower address\\n    /// @param _price ETH price\\n    /// @return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getCurrentICR(address _borrower, uint256 _price) external view returns (uint256);\\n\\n    /// @notice Closes the trove if its ICR is lower than the minimum collateral ratio.\\n    /// @param _borrower borrower address\\n    function liquidate(address _borrower) external;\\n\\n    /**\\n     * @notice Liquidate a sequence of troves. Closes a maximum number of n under-collateralized Troves,\\n     * starting from the one with the lowest collateral ratio in the system, and moving upwards\\n     * @param _n max number of under-collateralized Troves to liquidate\\n     */\\n    function liquidateTroves(uint256 _n) external;\\n\\n    /**\\n     * @notice Attempt to liquidate a custom list of troves provided by the caller.\\n     * @param _troveArray list of trove addresses\\n     */\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    /**\\n     * @notice Send _ZUSDamount ZUSD to the system and redeem the corresponding amount of collateral from as many Troves as are needed to fill the redemption\\n     * request.  Applies pending rewards to a Trove before reducing its debt and coll.\\n     *\\n     * Note that if _amount is very large, this function can run out of gas, specially if traversed troves are small. This can be easily avoided by\\n     * splitting the total _amount in appropriate chunks and calling the function multiple times.\\n     *\\n     * Param `_maxIterations` can also be provided, so the loop through Troves is capped (if it\\u2019s zero, it will be ignored).This makes it easier to\\n     * avoid OOG for the frontend, as only knowing approximately the average cost of an iteration is enough, without needing to know the \\u201ctopology\\u201d\\n     * of the trove list. It also avoids the need to set the cap in stone in the contract, nor doing gas calculations, as both gas price and opcode\\n     * costs can vary.\\n     *\\n     * All Troves that are redeemed from -- with the likely exception of the last one -- will end up with no debt left, therefore they will be closed.\\n     * If the last Trove does have some remaining debt, it has a finite ICR, and the reinsertion could be anywhere in the list, therefore it requires a hint.\\n     * A frontend should use getRedemptionHints() to calculate what the ICR of this Trove will be after redemption, and pass a hint for its position\\n     * in the sortedTroves list along with the ICR value that the hint was found for.\\n     *\\n     * If another transaction modifies the list between calling getRedemptionHints() and passing the hints to redeemCollateral(), it\\n     * is very likely that the last (partially) redeemed Trove would end up with a different ICR than what the hint is for. In this case the\\n     * redemption will stop after the last completely redeemed Trove and the sender will keep the remaining ZUSD amount, which they can attempt\\n     * to redeem later.\\n     *\\n     * @param _ZUSDAmount ZUSD amount to send to the system\\n     * @param _firstRedemptionHint calculated ICR hint of first trove after redemption\\n     * @param _maxIterations max Troves iterations (can be 0)\\n     * @param _maxFee max fee percentage to accept\\n     */\\n    function redeemCollateral(\\n        uint256 _ZUSDAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFee\\n    ) external;\\n\\n    function redeemCollateralViaDLLR(\\n        uint256 _dllrAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFeePercentage,\\n        IMassetManager.PermitParams calldata _permitParams\\n    ) external;\\n\\n    /// @notice Update borrower's stake based on their latest collateral value\\n    /// @param _borrower borrower address\\n    function updateStakeAndTotalStakes(address _borrower) external returns (uint256);\\n\\n    /// @notice Update borrower's snapshots of L_ETH and L_ZUSDDebt to reflect the current values\\n    /// @param _borrower borrower address\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    /// @notice Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\\n    /// @param _borrower borrower address\\n    /// @return index where Trove was inserted\\n    function addTroveOwnerToArray(address _borrower) external returns (uint256 index);\\n\\n    /// @notice Add the borrowers's coll and debt rewards earned from redistributions, to their Trove\\n    /// @param _borrower borrower address\\n    function applyPendingRewards(address _borrower) external;\\n\\n    /// @param _borrower borrower address\\n    /// @return the borrower's pending accumulated ETH reward, earned by their stake\\n    function getPendingETHReward(address _borrower) external view returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @return the borrower's pending accumulated ZUSD reward, earned by their stake\\n    function getPendingZUSDDebtReward(address _borrower) external view returns (uint256);\\n\\n    /*\\n     * @notice A Trove has pending rewards if its snapshot is less than the current rewards per-unit-staked sum:\\n     * this indicates that rewards have occured since the snapshot was made, and the user therefore has\\n     * pending rewards\\n     *\\n     * @param _borrower borrower address\\n     * @return true if has pending rewards\\n     */\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    /// @notice returns the Troves entire debt and coll, including pending rewards from redistributions.\\n    /// @param _borrower borrower address\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 debt,\\n            uint256 coll,\\n            uint256 pendingZUSDDebtReward,\\n            uint256 pendingETHReward\\n        );\\n\\n    /// @notice Close given trove. Called by BorrowerOperations.\\n    /// @param _borrower borrower address\\n    function closeTrove(address _borrower) external;\\n\\n    /// @notice Remove borrower's stake from the totalStakes sum, and set their stake to 0\\n    /// @param _borrower borrower address\\n    function removeStake(address _borrower) external;\\n\\n    /// @return calculated redemption rate using baseRate\\n    function getRedemptionRate() external view returns (uint256);\\n\\n    /// @return calculated redemption rate using calculated decayed as base rate\\n    function getRedemptionRateWithDecay() external view returns (uint256);\\n\\n    /// @notice The redemption fee is taken as a cut of the total ETH drawn from the system in a redemption. It is based on the current redemption rate.\\n    /// @param _ETHDrawn ETH drawn\\n    function getRedemptionFeeWithDecay(uint256 _ETHDrawn) external view returns (uint256);\\n\\n    /// @return borrowing rate\\n    function getBorrowingRate() external view returns (uint256);\\n\\n    /// @return borrowing rate calculated using decayed as base rate\\n    function getBorrowingRateWithDecay() external view returns (uint256);\\n\\n    /// @param ZUSDDebt ZUSD debt amount to calculate fee\\n    /// @return borrowing fee using borrowing rate\\n    function getBorrowingFee(uint256 ZUSDDebt) external view returns (uint256);\\n\\n    /// @param _ZUSDDebt ZUSD debt amount to calculate fee\\n    /// @return borrowing fee using borrowing rate with decay\\n    function getBorrowingFeeWithDecay(uint256 _ZUSDDebt) external view returns (uint256);\\n\\n    /// @notice Updates the baseRate state variable based on time elapsed since the last redemption or ZUSD borrowing operation.\\n    function decayBaseRateFromBorrowing() external;\\n\\n    /// @param _borrower borrower address\\n    /// @return Trove status from given trove\\n    function getTroveStatus(address _borrower) external view returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @return Trove stake from given trove\\n    function getTroveStake(address _borrower) external view returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @return Trove debt from given trove\\n    function getTroveDebt(address _borrower) external view returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @return Trove collateral from given trove\\n    function getTroveColl(address _borrower) external view returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @param num status to set\\n    function setTroveStatus(address _borrower, uint256 num) external;\\n\\n    /// @param _borrower borrower address\\n    /// @param _collIncrease amount of collateral to increase\\n    /// @return new trove collateral\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint256 _collIncrease\\n    ) external returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @param _collDecrease amount of collateral to decrease\\n    /// @return new trove collateral\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint256 _collDecrease\\n    ) external returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @param _debtIncrease amount of debt to increase\\n    /// @return new trove debt\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtIncrease\\n    ) external returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @param _debtDecrease amount of debt to decrease\\n    /// @return new trove debt\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtDecrease\\n    ) external returns (uint256);\\n\\n    /**\\n     * @param _price ETH price\\n     * @return the total collateralization ratio (TCR) of the system.\\n     * The TCR is based on the the entire system debt and collateral (including pending rewards).\\n     */\\n    function getTCR(uint256 _price) external view returns (uint256);\\n\\n    function MCR() external view returns (uint256);\\n\\n    function CCR() external view returns (uint256);\\n\\n    /// @notice reveals whether or not the system is in Recovery Mode (i.e. whether the Total Collateralization Ratio (TCR) is below the Critical Collateralization Ratio (CCR)).\\n    function checkRecoveryMode(uint256 _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1445e257dac83d4a0f1181178591f03df2846f7273914ff620ce616e30578231\",\"license\":\"MIT\"},\"contracts/Interfaces/IZEROStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface IZEROStaking {\\n    // --- Events --\\n\\n    event ZEROTokenAddressSet(address _zeroTokenAddress);\\n    event ZUSDTokenAddressSet(address _zusdTokenAddress);\\n    event FeeDistributorAddressAddressSet(address _feeDistributorAddress);\\n    event ActivePoolAddressSet(address _activePoolAddress);\\n\\n    event StakeChanged(address indexed staker, uint256 newStake);\\n    event StakingGainsWithdrawn(address indexed staker, uint256 ZUSDGain, uint256 ETHGain);\\n    event F_ETHUpdated(uint256 _F_ETH);\\n    event F_ZUSDUpdated(uint256 _F_ZUSD);\\n    event TotalZEROStakedUpdated(uint256 _totalZEROStaked);\\n    event EtherSent(address _account, uint256 _amount);\\n    event StakerSnapshotsUpdated(address _staker, uint256 _F_ETH, uint256 _F_ZUSD);\\n\\n    // --- Functions ---\\n\\n    /**\\n     * @notice Called only once on init, to set addresses of other Zero contracts. Callable only by owner\\n     * @dev initializer function, checks addresses are contracts\\n     * @param _zeroTokenAddress ZEROToken contract address\\n     * @param _zusdTokenAddress ZUSDToken contract address\\n     * @param _feeDistributorAddress FeeDistributorAddress contract address\\n     * @param _activePoolAddress ActivePool contract address\\n     */\\n    function setAddresses(\\n        address _zeroTokenAddress,\\n        address _zusdTokenAddress,\\n        address _feeDistributorAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    /// @notice If caller has a pre-existing stake, send any accumulated ETH and ZUSD gains to them.\\n    /// @param _ZEROamount ZERO tokens to stake\\n    function stake(uint256 _ZEROamount) external;\\n\\n    /**\\n     * @notice Unstake the ZERO and send the it back to the caller, along with their accumulated ZUSD & ETH gains.\\n     * If requested amount > stake, send their entire stake.\\n     * @param _ZEROamount ZERO tokens to unstake\\n     */\\n    function unstake(uint256 _ZEROamount) external;\\n\\n    /// @param _ETHFee ETH fee\\n    /// @notice increase ETH fee\\n    function increaseF_ETH(uint256 _ETHFee) external;\\n\\n    /// @param _ZEROFee ZUSD fee\\n    /// @notice increase ZUSD fee\\n    function increaseF_ZUSD(uint256 _ZEROFee) external;\\n\\n    /// @param _user user address\\n    /// @return pending ETH gain of given user\\n    function getPendingETHGain(address _user) external view returns (uint256);\\n\\n    /// @param _user user address\\n    /// @return pending ZUSD gain of given user\\n    function getPendingZUSDGain(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4c7948ce7dff9ea9b8495054e511eabcf44a91c7db8520ec58ff2a002327e0c5\",\"license\":\"MIT\"},\"contracts/Interfaces/IZEROToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"../Dependencies/IERC20.sol\\\";\\nimport \\\"../Dependencies/IERC2612.sol\\\";\\n\\ninterface IZEROToken is IERC20, IERC2612 { \\n\\n    // --- Functions ---\\n\\n    /// @notice send zero tokens to ZEROStaking contract\\n    /// @param _sender sender address\\n    /// @param _amount amount to send\\n    function sendToZEROStaking(address _sender, uint256 _amount) external;\\n\\n    /// @return deployment start time\\n    function getDeploymentStartTime() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xbcc0baabe4c4686563a09cf1486f2d152b70404996676a89d525691f69637f66\",\"license\":\"MIT\"},\"contracts/Interfaces/IZUSDToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"../Dependencies/IERC20.sol\\\";\\nimport \\\"../Dependencies/IERC2612.sol\\\";\\n\\ninterface IZUSDToken is IERC20, IERC2612 { \\n    \\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n\\n    event ZUSDTokenBalanceUpdated(address _user, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(address _sender,  address poolAddress, uint256 _amount) external;\\n\\n    function returnFromPool(address poolAddress, address user, uint256 _amount ) external;\\n}\\n\",\"keccak256\":\"0xe52df063aa08f709640c28888edd27310c820f6d08564855538ae245eb2f5a8c\",\"license\":\"MIT\"},\"contracts/TroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Interfaces/ITroveManager.sol\\\";\\nimport \\\"./Interfaces/IStabilityPool.sol\\\";\\nimport \\\"./Interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./Interfaces/IZUSDToken.sol\\\";\\nimport \\\"./Interfaces/ISortedTroves.sol\\\";\\nimport \\\"./Interfaces/IZEROToken.sol\\\";\\nimport \\\"./Interfaces/IZEROStaking.sol\\\";\\nimport \\\"./Interfaces/IFeeDistributor.sol\\\";\\nimport \\\"./Dependencies/LiquityBase.sol\\\";\\nimport \\\"./Dependencies/CheckContract.sol\\\";\\nimport \\\"./Dependencies/console.sol\\\";\\nimport \\\"./Dependencies/TroveManagerBase.sol\\\";\\nimport \\\"./TroveManagerStorage.sol\\\";\\n\\ncontract TroveManager is TroveManagerBase, CheckContract, ITroveManager {\\n    event FeeDistributorAddressChanged(address _feeDistributorAddress);\\n    event TroveManagerRedeemOpsAddressChanged(address _troveManagerRedeemOps);\\n    event LiquityBaseParamsAddressChanges(address _borrowerOperationsAddress);\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event ZUSDTokenAddressChanged(address _newZUSDTokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event ZEROTokenAddressChanged(address _zeroTokenAddress);\\n    event ZEROStakingAddressChanged(address _zeroStakingAddress);\\n\\n    ///@param _bootstrapPeriod During bootsrap period redemptions are not allowed\\n    constructor(uint256 _bootstrapPeriod) public TroveManagerBase(_bootstrapPeriod) {}\\n\\n    // --- Dependency setter ---\\n    function setAddresses(\\n        TroveManagerInitAddressesParams memory _troveManagerInitAddressesParams\\n    ) external override onlyOwner {\\n        {\\n            checkContract(_troveManagerInitAddressesParams._feeDistributorAddress);\\n            checkContract(_troveManagerInitAddressesParams._troveManagerRedeemOps);\\n            checkContract(_troveManagerInitAddressesParams._liquityBaseParamsAddress);\\n            checkContract(_troveManagerInitAddressesParams._borrowerOperationsAddress);\\n            checkContract(_troveManagerInitAddressesParams._activePoolAddress);\\n            checkContract(_troveManagerInitAddressesParams._defaultPoolAddress);\\n            checkContract(_troveManagerInitAddressesParams._stabilityPoolAddress);\\n            checkContract(_troveManagerInitAddressesParams._gasPoolAddress);\\n            checkContract(_troveManagerInitAddressesParams._collSurplusPoolAddress);\\n            checkContract(_troveManagerInitAddressesParams._priceFeedAddress);\\n            checkContract(_troveManagerInitAddressesParams._zusdTokenAddress);\\n            checkContract(_troveManagerInitAddressesParams._sortedTrovesAddress);\\n            checkContract(_troveManagerInitAddressesParams._zeroTokenAddress);\\n            checkContract(_troveManagerInitAddressesParams._zeroStakingAddress);\\n        }\\n\\n        feeDistributor = IFeeDistributor(_troveManagerInitAddressesParams._feeDistributorAddress);\\n        troveManagerRedeemOps = _troveManagerInitAddressesParams._troveManagerRedeemOps;\\n        liquityBaseParams = ILiquityBaseParams(\\n            _troveManagerInitAddressesParams._liquityBaseParamsAddress\\n        );\\n        {\\n            borrowerOperationsAddress = _troveManagerInitAddressesParams\\n                ._borrowerOperationsAddress;\\n            activePool = IActivePool(_troveManagerInitAddressesParams._activePoolAddress);\\n            defaultPool = IDefaultPool(_troveManagerInitAddressesParams._defaultPoolAddress);\\n            _stabilityPool = IStabilityPool(\\n                _troveManagerInitAddressesParams._stabilityPoolAddress\\n            );\\n            gasPoolAddress = _troveManagerInitAddressesParams._gasPoolAddress;\\n            collSurplusPool = ICollSurplusPool(\\n                _troveManagerInitAddressesParams._collSurplusPoolAddress\\n            );\\n            priceFeed = IPriceFeed(_troveManagerInitAddressesParams._priceFeedAddress);\\n            _zusdToken = IZUSDToken(_troveManagerInitAddressesParams._zusdTokenAddress);\\n            sortedTroves = ISortedTroves(_troveManagerInitAddressesParams._sortedTrovesAddress);\\n            _zeroToken = IZEROToken(_troveManagerInitAddressesParams._zeroTokenAddress);\\n            _zeroStaking = IZEROStaking(_troveManagerInitAddressesParams._zeroStakingAddress);\\n        }\\n\\n        emit FeeDistributorAddressChanged(_troveManagerInitAddressesParams._feeDistributorAddress);\\n        emit TroveManagerRedeemOpsAddressChanged(\\n            _troveManagerInitAddressesParams._troveManagerRedeemOps\\n        );\\n        emit LiquityBaseParamsAddressChanges(\\n            _troveManagerInitAddressesParams._borrowerOperationsAddress\\n        );\\n        emit BorrowerOperationsAddressChanged(\\n            _troveManagerInitAddressesParams._borrowerOperationsAddress\\n        );\\n        emit ActivePoolAddressChanged(_troveManagerInitAddressesParams._activePoolAddress);\\n        emit DefaultPoolAddressChanged(_troveManagerInitAddressesParams._defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_troveManagerInitAddressesParams._stabilityPoolAddress);\\n        emit GasPoolAddressChanged(_troveManagerInitAddressesParams._gasPoolAddress);\\n        emit CollSurplusPoolAddressChanged(\\n            _troveManagerInitAddressesParams._collSurplusPoolAddress\\n        );\\n        emit PriceFeedAddressChanged(_troveManagerInitAddressesParams._priceFeedAddress);\\n        emit ZUSDTokenAddressChanged(_troveManagerInitAddressesParams._zusdTokenAddress);\\n        emit SortedTrovesAddressChanged(_troveManagerInitAddressesParams._sortedTrovesAddress);\\n        emit ZEROTokenAddressChanged(_troveManagerInitAddressesParams._zeroTokenAddress);\\n        emit ZEROStakingAddressChanged(_troveManagerInitAddressesParams._zeroStakingAddress);\\n    }\\n\\n    function setTroveManagerRedeemOps(address _troveManagerRedeemOps) external override onlyOwner {\\n        checkContract(_troveManagerRedeemOps);\\n        troveManagerRedeemOps = _troveManagerRedeemOps;\\n        emit TroveManagerRedeemOpsAddressChanged(_troveManagerRedeemOps);\\n    }\\n\\n    // --- Getters ---\\n\\n    function getTroveOwnersCount() external view override returns (uint256) {\\n        return TroveOwners.length;\\n    }\\n\\n    function getTroveFromTroveOwnersArray(\\n        uint256 _index\\n    ) external view override returns (address) {\\n        return TroveOwners[_index];\\n    }\\n\\n    // --- Trove Liquidation functions ---\\n\\n    /// Single liquidation function. Closes the trove if its ICR is lower than the minimum collateral ratio.\\n    function liquidate(address _borrower) external override {\\n        _requireTroveIsActive(_borrower);\\n\\n        address[] memory borrowers = new address[](1);\\n        borrowers[0] = _borrower;\\n        batchLiquidateTroves(borrowers);\\n    }\\n\\n    // --- Inner single liquidation functions ---\\n\\n    /// Liquidate one trove, in Normal Mode.\\n    function _liquidateNormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint256 _ZUSDInStabPool\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n\\n        (\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        _movePendingTroveRewardsToActivePool(\\n            _activePool,\\n            _defaultPool,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        );\\n        _removeStake(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n        singleLiquidation.ZUSDGasCompensation = ZUSD_GAS_COMPENSATION;\\n        uint256 collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n\\n        (\\n            singleLiquidation.debtToOffset,\\n            singleLiquidation.collToSendToSP,\\n            singleLiquidation.debtToRedistribute,\\n            singleLiquidation.collToRedistribute\\n        ) = _getOffsetAndRedistributionVals(\\n            singleLiquidation.entireTroveDebt,\\n            collToLiquidate,\\n            _ZUSDInStabPool\\n        );\\n\\n        _closeTrove(_borrower, Status.closedByLiquidation);\\n        emit TroveLiquidated(\\n            _borrower,\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            TroveManagerOperation.liquidateInNormalMode\\n        );\\n        emit TroveUpdated(_borrower, 0, 0, 0, TroveManagerOperation.liquidateInNormalMode);\\n        return singleLiquidation;\\n    }\\n\\n    /// Liquidate one trove, in Recovery Mode.\\n    function _liquidateRecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        address _borrower,\\n        uint256 _ICR,\\n        uint256 _ZUSDInStabPool,\\n        uint256 _TCR,\\n        uint256 _price\\n    ) internal returns (LiquidationValues memory singleLiquidation) {\\n        LocalVariables_InnerSingleLiquidateFunction memory vars;\\n        if (TroveOwners.length <= 1) {\\n            return singleLiquidation;\\n        } // don't liquidate if last trove\\n        (\\n            singleLiquidation.entireTroveDebt,\\n            singleLiquidation.entireTroveColl,\\n            vars.pendingDebtReward,\\n            vars.pendingCollReward\\n        ) = getEntireDebtAndColl(_borrower);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(\\n            singleLiquidation.entireTroveColl\\n        );\\n        singleLiquidation.ZUSDGasCompensation = ZUSD_GAS_COMPENSATION;\\n        vars.collToLiquidate = singleLiquidation.entireTroveColl.sub(\\n            singleLiquidation.collGasCompensation\\n        );\\n\\n        // If ICR <= 100%, purely redistribute the Trove across all active Troves\\n        if (_ICR <= _100pct) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            _removeStake(_borrower);\\n\\n            singleLiquidation.debtToOffset = 0;\\n            singleLiquidation.collToSendToSP = 0;\\n            singleLiquidation.debtToRedistribute = singleLiquidation.entireTroveDebt;\\n            singleLiquidation.collToRedistribute = vars.collToLiquidate;\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(_borrower, 0, 0, 0, TroveManagerOperation.liquidateInRecoveryMode);\\n\\n            // If 100% < ICR < MCR, offset as much as possible, and redistribute the remainder\\n        } else if ((_ICR > _100pct) && (_ICR < liquityBaseParams.MCR())) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            _removeStake(_borrower);\\n\\n            (\\n                singleLiquidation.debtToOffset,\\n                singleLiquidation.collToSendToSP,\\n                singleLiquidation.debtToRedistribute,\\n                singleLiquidation.collToRedistribute\\n            ) = _getOffsetAndRedistributionVals(\\n                singleLiquidation.entireTroveDebt,\\n                vars.collToLiquidate,\\n                _ZUSDInStabPool\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(_borrower, 0, 0, 0, TroveManagerOperation.liquidateInRecoveryMode);\\n            /*\\n             * If 110% <= ICR < current TCR (accounting for the preceding liquidations in the current sequence)\\n             * and there is ZUSD in the Stability Pool, only offset, with no redistribution,\\n             * but at a capped rate of 1.1 and only if the whole debt can be liquidated.\\n             * The remainder due to the capped rate will be claimable as collateral surplus.\\n             */\\n        } else if (\\n            (_ICR >= liquityBaseParams.MCR()) &&\\n            (_ICR < _TCR) &&\\n            (singleLiquidation.entireTroveDebt <= _ZUSDInStabPool)\\n        ) {\\n            _movePendingTroveRewardsToActivePool(\\n                _activePool,\\n                _defaultPool,\\n                vars.pendingDebtReward,\\n                vars.pendingCollReward\\n            );\\n            assert(_ZUSDInStabPool != 0);\\n\\n            _removeStake(_borrower);\\n            singleLiquidation = _getCappedOffsetVals(\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.entireTroveColl,\\n                _price\\n            );\\n\\n            _closeTrove(_borrower, Status.closedByLiquidation);\\n            if (singleLiquidation.collSurplus > 0) {\\n                collSurplusPool.accountSurplus(_borrower, singleLiquidation.collSurplus);\\n            }\\n\\n            emit TroveLiquidated(\\n                _borrower,\\n                singleLiquidation.entireTroveDebt,\\n                singleLiquidation.collToSendToSP,\\n                TroveManagerOperation.liquidateInRecoveryMode\\n            );\\n            emit TroveUpdated(_borrower, 0, 0, 0, TroveManagerOperation.liquidateInRecoveryMode);\\n        } else {\\n            // if (_ICR >= liquityBaseParams.MCR() && ( _ICR >= _TCR || singleLiquidation.entireTroveDebt > _ZUSDInStabPool))\\n            LiquidationValues memory zeroVals;\\n            return zeroVals;\\n        }\\n\\n        return singleLiquidation;\\n    }\\n\\n    /** In a full liquidation, returns the values for a trove's coll and debt to be offset, and coll and debt to be\\n     * redistributed to active troves.\\n     */\\n    function _getOffsetAndRedistributionVals(\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _ZUSDInStabPool\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 debtToOffset,\\n            uint256 collToSendToSP,\\n            uint256 debtToRedistribute,\\n            uint256 collToRedistribute\\n        )\\n    {\\n        if (_ZUSDInStabPool > 0) {\\n            /*\\n             * Offset as much debt & collateral as possible against the Stability Pool, and redistribute the remainder\\n             * between all active troves.\\n             *\\n             *  If the trove's debt is larger than the deposited ZUSD in the Stability Pool:\\n             *\\n             *  - Offset an amount of the trove's debt equal to the ZUSD in the Stability Pool\\n             *  - Send a fraction of the trove's collateral to the Stability Pool, equal to the fraction of its offset debt\\n             *\\n             */\\n            debtToOffset = LiquityMath._min(_debt, _ZUSDInStabPool);\\n            collToSendToSP = _coll.mul(debtToOffset).div(_debt);\\n            debtToRedistribute = _debt.sub(debtToOffset);\\n            collToRedistribute = _coll.sub(collToSendToSP);\\n        } else {\\n            debtToOffset = 0;\\n            collToSendToSP = 0;\\n            debtToRedistribute = _debt;\\n            collToRedistribute = _coll;\\n        }\\n    }\\n\\n    /**\\n     *  Get its offset coll/debt and ETH gas comp, and close the trove.\\n     */\\n    function _getCappedOffsetVals(\\n        uint256 _entireTroveDebt,\\n        uint256 _entireTroveColl,\\n        uint256 _price\\n    ) internal view returns (LiquidationValues memory singleLiquidation) {\\n        singleLiquidation.entireTroveDebt = _entireTroveDebt;\\n        singleLiquidation.entireTroveColl = _entireTroveColl;\\n        uint256 collToOffset = _entireTroveDebt.mul(liquityBaseParams.MCR()).div(_price);\\n\\n        singleLiquidation.collGasCompensation = _getCollGasCompensation(collToOffset);\\n        singleLiquidation.ZUSDGasCompensation = ZUSD_GAS_COMPENSATION;\\n\\n        singleLiquidation.debtToOffset = _entireTroveDebt;\\n        singleLiquidation.collToSendToSP = collToOffset.sub(singleLiquidation.collGasCompensation);\\n        singleLiquidation.collSurplus = _entireTroveColl.sub(collToOffset);\\n        singleLiquidation.debtToRedistribute = 0;\\n        singleLiquidation.collToRedistribute = 0;\\n    }\\n\\n    /**\\n     * Liquidate a sequence of troves. Closes a maximum number of n under-collateralized Troves,\\n     * starting from the one with the lowest collateral ratio in the system, and moving upwards\\n     */\\n    function liquidateTroves(uint256 _n) external override {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            activePool,\\n            defaultPool,\\n            IZUSDToken(address(0)),\\n            IZEROStaking(address(0)),\\n            sortedTroves,\\n            ICollSurplusPool(address(0)),\\n            address(0)\\n        );\\n        IStabilityPool stabilityPoolCached = _stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n\\n        LiquidationTotals memory totals;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        vars.ZUSDInStabPool = stabilityPoolCached.getTotalZUSDDeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally the values, and obtain their totals\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\n                contractsCache,\\n                vars.price,\\n                vars.ZUSDInStabPool,\\n                _n\\n            );\\n        } else {\\n            // if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromLiquidateTrovesSequence_NormalMode(\\n                contractsCache.activePool,\\n                contractsCache.defaultPool,\\n                vars.price,\\n                vars.ZUSDInStabPool,\\n                _n\\n            );\\n        }\\n\\n        require(totals.totalDebtInSequence > 0, \\\"TroveManager: nothing to liquidate\\\");\\n\\n        // Move liquidated ETH and ZUSD to the appropriate pools\\n        stabilityPoolCached.offset(totals.totalDebtToOffset, totals.totalCollToSendToSP);\\n        _redistributeDebtAndColl(\\n            contractsCache.activePool,\\n            contractsCache.defaultPool,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute\\n        );\\n        if (totals.totalCollSurplus > 0) {\\n            contractsCache.activePool.sendETH(address(collSurplusPool), totals.totalCollSurplus);\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(\\n            contractsCache.activePool,\\n            totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n        vars.liquidatedColl = totals.totalCollInSequence.sub(totals.totalCollGasCompensation).sub(\\n            totals.totalCollSurplus\\n        );\\n        emit Liquidation(\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalZUSDGasCompensation\\n        );\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(\\n            contractsCache.activePool,\\n            msg.sender,\\n            totals.totalZUSDGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    /**\\n     * This function is used when the liquidateTroves sequence starts during Recovery Mode. However, it\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n     */\\n    function _getTotalsFromLiquidateTrovesSequence_RecoveryMode(\\n        ContractsCache memory _contractsCache,\\n        uint256 _price,\\n        uint256 _ZUSDInStabPool,\\n        uint256 _n\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingZUSDInStabPool = _ZUSDInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        vars.user = _contractsCache.sortedTroves.getLast();\\n        address firstUser = _contractsCache.sortedTroves.getFirst();\\n        for (vars.i = 0; vars.i < _n && vars.user != firstUser; vars.i++) {\\n            // we need to cache it, because current user is likely going to be deleted\\n            address nextUser = _contractsCache.sortedTroves.getPrev(vars.user);\\n\\n            vars.ICR = _getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Break the loop if ICR is greater than liquityBaseParams.MCR() and Stability Pool is empty\\n                if (vars.ICR >= liquityBaseParams.MCR() && vars.remainingZUSDInStabPool == 0) {\\n                    break;\\n                }\\n\\n                uint256 TCR = LiquityMath._computeCR(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _contractsCache.activePool,\\n                    _contractsCache.defaultPool,\\n                    vars.user,\\n                    vars.ICR,\\n                    vars.remainingZUSDInStabPool,\\n                    TCR,\\n                    _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingZUSDInStabPool = vars.remainingZUSDInStabPool.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(singleLiquidation.debtToOffset);\\n                vars.entireSystemColl = vars\\n                    .entireSystemColl\\n                    .sub(singleLiquidation.collToSendToSP)\\n                    .sub(singleLiquidation.collSurplus);\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n            } else if (vars.backToNormalMode && vars.ICR < liquityBaseParams.MCR()) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _contractsCache.activePool,\\n                    _contractsCache.defaultPool,\\n                    vars.user,\\n                    vars.remainingZUSDInStabPool\\n                );\\n\\n                vars.remainingZUSDInStabPool = vars.remainingZUSDInStabPool.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\n\\n            vars.user = nextUser;\\n        }\\n    }\\n\\n    function _getTotalsFromLiquidateTrovesSequence_NormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint256 _price,\\n        uint256 _ZUSDInStabPool,\\n        uint256 _n\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n        ISortedTroves sortedTrovesCached = sortedTroves;\\n\\n        vars.remainingZUSDInStabPool = _ZUSDInStabPool;\\n\\n        for (vars.i = 0; vars.i < _n; vars.i++) {\\n            vars.user = sortedTrovesCached.getLast();\\n            vars.ICR = _getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < liquityBaseParams.MCR()) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingZUSDInStabPool\\n                );\\n\\n                vars.remainingZUSDInStabPool = vars.remainingZUSDInStabPool.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n            } else break; // break if the loop reaches a Trove with ICR >= MCR\\n        }\\n    }\\n\\n    /**\\n     * Attempt to liquidate a custom list of troves provided by the caller.\\n     */\\n    function batchLiquidateTroves(address[] memory _troveArray) public override {\\n        require(_troveArray.length != 0, \\\"TroveManager: Calldata address array must not be empty\\\");\\n\\n        IActivePool activePoolCached = activePool;\\n        IDefaultPool defaultPoolCached = defaultPool;\\n        IStabilityPool stabilityPoolCached = _stabilityPool;\\n\\n        LocalVariables_OuterLiquidationFunction memory vars;\\n        LiquidationTotals memory totals;\\n\\n        vars.price = priceFeed.fetchPrice();\\n        vars.ZUSDInStabPool = stabilityPoolCached.getTotalZUSDDeposits();\\n        vars.recoveryModeAtStart = _checkRecoveryMode(vars.price);\\n\\n        // Perform the appropriate liquidation sequence - tally values and obtain their totals.\\n        if (vars.recoveryModeAtStart) {\\n            totals = _getTotalFromBatchLiquidate_RecoveryMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.ZUSDInStabPool,\\n                _troveArray\\n            );\\n        } else {\\n            //  if !vars.recoveryModeAtStart\\n            totals = _getTotalsFromBatchLiquidate_NormalMode(\\n                activePoolCached,\\n                defaultPoolCached,\\n                vars.price,\\n                vars.ZUSDInStabPool,\\n                _troveArray\\n            );\\n        }\\n\\n        require(totals.totalDebtInSequence > 0, \\\"TroveManager: nothing to liquidate\\\");\\n\\n        // Move liquidated ETH and ZUSD to the appropriate pools\\n        stabilityPoolCached.offset(totals.totalDebtToOffset, totals.totalCollToSendToSP);\\n        _redistributeDebtAndColl(\\n            activePoolCached,\\n            defaultPoolCached,\\n            totals.totalDebtToRedistribute,\\n            totals.totalCollToRedistribute\\n        );\\n        if (totals.totalCollSurplus > 0) {\\n            activePoolCached.sendETH(address(collSurplusPool), totals.totalCollSurplus);\\n        }\\n\\n        // Update system snapshots\\n        _updateSystemSnapshots_excludeCollRemainder(\\n            activePoolCached,\\n            totals.totalCollGasCompensation\\n        );\\n\\n        vars.liquidatedDebt = totals.totalDebtInSequence;\\n        vars.liquidatedColl = totals.totalCollInSequence.sub(totals.totalCollGasCompensation).sub(\\n            totals.totalCollSurplus\\n        );\\n        emit Liquidation(\\n            vars.liquidatedDebt,\\n            vars.liquidatedColl,\\n            totals.totalCollGasCompensation,\\n            totals.totalZUSDGasCompensation\\n        );\\n\\n        // Send gas compensation to caller\\n        _sendGasCompensation(\\n            activePoolCached,\\n            msg.sender,\\n            totals.totalZUSDGasCompensation,\\n            totals.totalCollGasCompensation\\n        );\\n    }\\n\\n    /**\\n     * This function is used when the batch liquidation sequence starts during Recovery Mode. However, it\\n     * handle the case where the system *leaves* Recovery Mode, part way through the liquidation sequence\\n     */\\n    function _getTotalFromBatchLiquidate_RecoveryMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint256 _price,\\n        uint256 _ZUSDInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingZUSDInStabPool = _ZUSDInStabPool;\\n        vars.backToNormalMode = false;\\n        vars.entireSystemDebt = getEntireSystemDebt();\\n        vars.entireSystemColl = getEntireSystemColl();\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            // Skip non-active troves\\n            if (Troves[vars.user].status != Status.active) {\\n                continue;\\n            }\\n            vars.ICR = _getCurrentICR(vars.user, _price);\\n\\n            if (!vars.backToNormalMode) {\\n                // Skip this trove if ICR is greater than liquityBaseParams.MCR() and Stability Pool is empty\\n                if (vars.ICR >= liquityBaseParams.MCR() && vars.remainingZUSDInStabPool == 0) {\\n                    continue;\\n                }\\n\\n                uint256 TCR = LiquityMath._computeCR(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n\\n                singleLiquidation = _liquidateRecoveryMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.ICR,\\n                    vars.remainingZUSDInStabPool,\\n                    TCR,\\n                    _price\\n                );\\n\\n                // Update aggregate trackers\\n                vars.remainingZUSDInStabPool = vars.remainingZUSDInStabPool.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n                vars.entireSystemDebt = vars.entireSystemDebt.sub(singleLiquidation.debtToOffset);\\n                vars.entireSystemColl = vars.entireSystemColl.sub(\\n                    singleLiquidation.collToSendToSP\\n                );\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n\\n                vars.backToNormalMode = !_checkPotentialRecoveryMode(\\n                    vars.entireSystemColl,\\n                    vars.entireSystemDebt,\\n                    _price\\n                );\\n            } else if (vars.backToNormalMode && vars.ICR < liquityBaseParams.MCR()) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingZUSDInStabPool\\n                );\\n                vars.remainingZUSDInStabPool = vars.remainingZUSDInStabPool.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n            } else continue; // In Normal Mode skip troves with ICR >= MCR\\n        }\\n    }\\n\\n    function _getTotalsFromBatchLiquidate_NormalMode(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint256 _price,\\n        uint256 _ZUSDInStabPool,\\n        address[] memory _troveArray\\n    ) internal returns (LiquidationTotals memory totals) {\\n        LocalVariables_LiquidationSequence memory vars;\\n        LiquidationValues memory singleLiquidation;\\n\\n        vars.remainingZUSDInStabPool = _ZUSDInStabPool;\\n\\n        for (vars.i = 0; vars.i < _troveArray.length; vars.i++) {\\n            vars.user = _troveArray[vars.i];\\n            vars.ICR = _getCurrentICR(vars.user, _price);\\n\\n            if (vars.ICR < liquityBaseParams.MCR()) {\\n                singleLiquidation = _liquidateNormalMode(\\n                    _activePool,\\n                    _defaultPool,\\n                    vars.user,\\n                    vars.remainingZUSDInStabPool\\n                );\\n                vars.remainingZUSDInStabPool = vars.remainingZUSDInStabPool.sub(\\n                    singleLiquidation.debtToOffset\\n                );\\n\\n                // Add liquidation values to their respective running totals\\n                totals = _addLiquidationValuesToTotals(totals, singleLiquidation);\\n            }\\n        }\\n    }\\n\\n    // --- Liquidation helper functions ---\\n\\n    function _addLiquidationValuesToTotals(\\n        LiquidationTotals memory oldTotals,\\n        LiquidationValues memory singleLiquidation\\n    ) internal pure returns (LiquidationTotals memory newTotals) {\\n        // Tally all the values with their respective running totals\\n        newTotals.totalCollGasCompensation = oldTotals.totalCollGasCompensation.add(\\n            singleLiquidation.collGasCompensation\\n        );\\n        newTotals.totalZUSDGasCompensation = oldTotals.totalZUSDGasCompensation.add(\\n            singleLiquidation.ZUSDGasCompensation\\n        );\\n        newTotals.totalDebtInSequence = oldTotals.totalDebtInSequence.add(\\n            singleLiquidation.entireTroveDebt\\n        );\\n        newTotals.totalCollInSequence = oldTotals.totalCollInSequence.add(\\n            singleLiquidation.entireTroveColl\\n        );\\n        newTotals.totalDebtToOffset = oldTotals.totalDebtToOffset.add(\\n            singleLiquidation.debtToOffset\\n        );\\n        newTotals.totalCollToSendToSP = oldTotals.totalCollToSendToSP.add(\\n            singleLiquidation.collToSendToSP\\n        );\\n        newTotals.totalDebtToRedistribute = oldTotals.totalDebtToRedistribute.add(\\n            singleLiquidation.debtToRedistribute\\n        );\\n        newTotals.totalCollToRedistribute = oldTotals.totalCollToRedistribute.add(\\n            singleLiquidation.collToRedistribute\\n        );\\n        newTotals.totalCollSurplus = oldTotals.totalCollSurplus.add(singleLiquidation.collSurplus);\\n\\n        return newTotals;\\n    }\\n\\n    function _sendGasCompensation(\\n        IActivePool _activePool,\\n        address _liquidator,\\n        uint256 _ZUSD,\\n        uint256 _ETH\\n    ) internal {\\n        if (_ZUSD > 0) {\\n            _zusdToken.returnFromPool(gasPoolAddress, _liquidator, _ZUSD);\\n        }\\n\\n        if (_ETH > 0) {\\n            _activePool.sendETH(_liquidator, _ETH);\\n        }\\n    }\\n\\n    // --- Helper functions ---\\n\\n    /// @return the nominal collateral ratio (ICR) of a given Trove, without the price. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getNominalICR(address _borrower) public view override returns (uint256) {\\n        (uint256 currentETH, uint256 currentZUSDDebt) = _getCurrentTroveAmounts(_borrower);\\n\\n        uint256 NICR = LiquityMath._computeNominalCR(currentETH, currentZUSDDebt);\\n        return NICR;\\n    }\\n\\n    function applyPendingRewards(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _applyPendingRewards(activePool, defaultPool, _borrower);\\n    }\\n\\n    /// Update borrower's snapshots of L_ETH and L_ZUSDDebt to reflect the current values\\n    function updateTroveRewardSnapshots(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateTroveRewardSnapshots(_borrower);\\n    }\\n\\n    /// Return the Troves entire debt and coll, including pending rewards from redistributions.\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 debt,\\n            uint256 coll,\\n            uint256 pendingZUSDDebtReward,\\n            uint256 pendingETHReward\\n        )\\n    {\\n        debt = Troves[_borrower].debt;\\n        coll = Troves[_borrower].coll;\\n\\n        pendingZUSDDebtReward = getPendingZUSDDebtReward(_borrower);\\n        pendingETHReward = getPendingETHReward(_borrower);\\n\\n        debt = debt.add(pendingZUSDDebtReward);\\n        coll = coll.add(pendingETHReward);\\n    }\\n\\n    function removeStake(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _removeStake(_borrower);\\n    }\\n\\n    function updateStakeAndTotalStakes(address _borrower) external override returns (uint256) {\\n        _requireCallerIsBorrowerOperations();\\n        return _updateStakeAndTotalStakes(_borrower);\\n    }\\n\\n    function _redistributeDebtAndColl(\\n        IActivePool _activePool,\\n        IDefaultPool _defaultPool,\\n        uint256 _debt,\\n        uint256 _coll\\n    ) internal {\\n        if (_debt == 0) {\\n            return;\\n        }\\n\\n        /*\\n         * Add distributed coll and debt rewards-per-unit-staked to the running totals. Division uses a \\\"feedback\\\"\\n         * error correction, to keep the cumulative error low in the running totals L_ETH and L_ZUSDDebt:\\n         *\\n         * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\n         * function was called.\\n         * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n         * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n         * 4) Store these errors for use in the next correction when this function is called.\\n         * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n         */\\n        uint256 ETHNumerator = _coll.mul(DECIMAL_PRECISION).add(lastETHError_Redistribution);\\n        uint256 ZUSDDebtNumerator = _debt.mul(DECIMAL_PRECISION).add(\\n            lastZUSDDebtError_Redistribution\\n        );\\n\\n        // Get the per-unit-staked terms\\n        uint256 ETHRewardPerUnitStaked = ETHNumerator.div(totalStakes);\\n        uint256 ZUSDDebtRewardPerUnitStaked = ZUSDDebtNumerator.div(totalStakes);\\n\\n        lastETHError_Redistribution = ETHNumerator.sub(ETHRewardPerUnitStaked.mul(totalStakes));\\n        lastZUSDDebtError_Redistribution = ZUSDDebtNumerator.sub(\\n            ZUSDDebtRewardPerUnitStaked.mul(totalStakes)\\n        );\\n\\n        // Add per-unit-staked terms to the running totals\\n        L_ETH = L_ETH.add(ETHRewardPerUnitStaked);\\n        L_ZUSDDebt = L_ZUSDDebt.add(ZUSDDebtRewardPerUnitStaked);\\n\\n        emit LTermsUpdated(L_ETH, L_ZUSDDebt);\\n\\n        // Transfer coll and debt from ActivePool to DefaultPool\\n        _activePool.decreaseZUSDDebt(_debt);\\n        _defaultPool.increaseZUSDDebt(_debt);\\n        _activePool.sendETH(address(_defaultPool), _coll);\\n    }\\n\\n    function closeTrove(address _borrower) external override {\\n        _requireCallerIsBorrowerOperations();\\n        return _closeTrove(_borrower, Status.closedByOwner);\\n    }\\n\\n    /**\\n     * Updates snapshots of system total stakes and total collateral, excluding a given collateral remainder from the calculation.\\n     * Used in a liquidation sequence.\\n     *\\n     * The calculation excludes a portion of collateral that is in the ActivePool:\\n     *\\n     * the total ETH gas compensation from the liquidation sequence\\n     *\\n     * The ETH as compensation must be excluded as it is always sent out at the very end of the liquidation sequence.\\n     */\\n    function _updateSystemSnapshots_excludeCollRemainder(\\n        IActivePool _activePool,\\n        uint256 _collRemainder\\n    ) internal {\\n        totalStakesSnapshot = totalStakes;\\n\\n        uint256 activeColl = _activePool.getETH();\\n        uint256 liquidatedColl = defaultPool.getETH();\\n        totalCollateralSnapshot = activeColl.sub(_collRemainder).add(liquidatedColl);\\n\\n        emit SystemSnapshotsUpdated(totalStakesSnapshot, totalCollateralSnapshot);\\n    }\\n\\n    /// Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\\n    function addTroveOwnerToArray(address _borrower) external override returns (uint256 index) {\\n        _requireCallerIsBorrowerOperations();\\n        return _addTroveOwnerToArray(_borrower);\\n    }\\n\\n    function _addTroveOwnerToArray(address _borrower) internal returns (uint128 index) {\\n        /* Max array size is 2**128 - 1, i.e. ~3e30 troves. No risk of overflow, since troves have minimum ZUSD\\n        debt of liquidation reserve plus MIN_NET_DEBT. 3e30 ZUSD dwarfs the value of all wealth in the world ( which is < 1e15 USD). */\\n\\n        // Push the Troveowner to the array\\n        TroveOwners.push(_borrower);\\n\\n        // Record the index of the new Troveowner on their Trove struct\\n        index = uint128(TroveOwners.length.sub(1));\\n        Troves[_borrower].arrayIndex = index;\\n\\n        return index;\\n    }\\n\\n    // --- Recovery Mode and TCR functions ---\\n\\n    function getTCR(uint256 _price) external view override returns (uint256) {\\n        return _getTCR(_price);\\n    }\\n\\n    function MCR() external view override returns (uint256) {\\n        return liquityBaseParams.MCR();\\n    }\\n\\n    function CCR() external view override returns (uint256) {\\n        return liquityBaseParams.CCR();\\n    }\\n\\n    function checkRecoveryMode(uint256 _price) external view override returns (bool) {\\n        return _checkRecoveryMode(_price);\\n    }\\n\\n    // Check whether or not the system *would be* in Recovery Mode, given an ETH:USD price, and the entire system coll and debt.\\n    function _checkPotentialRecoveryMode(\\n        uint256 _entireSystemColl,\\n        uint256 _entireSystemDebt,\\n        uint256 _price\\n    ) internal view returns (bool) {\\n        uint256 TCR = LiquityMath._computeCR(_entireSystemColl, _entireSystemDebt, _price);\\n\\n        return TCR < liquityBaseParams.CCR();\\n    }\\n\\n    function getRedemptionRateWithDecay() public view override returns (uint256) {\\n        return _calcRedemptionRate(_calcDecayedBaseRate());\\n    }\\n\\n    function getRedemptionFeeWithDecay(\\n        uint256 _ETHDrawn\\n    ) external view override returns (uint256) {\\n        return _calcRedemptionFee(getRedemptionRateWithDecay(), _ETHDrawn);\\n    }\\n\\n    // --- Borrowing fee functions ---\\n\\n    function getBorrowingRate() public view override returns (uint256) {\\n        return _calcBorrowingRate(baseRate);\\n    }\\n\\n    function getBorrowingRateWithDecay() public view override returns (uint256) {\\n        return _calcBorrowingRate(_calcDecayedBaseRate());\\n    }\\n\\n    function _calcBorrowingRate(uint256 _baseRate) internal view returns (uint256) {\\n        return\\n            LiquityMath._min(\\n                liquityBaseParams.BORROWING_FEE_FLOOR().add(_baseRate),\\n                liquityBaseParams.MAX_BORROWING_FEE()\\n            );\\n    }\\n\\n    function getBorrowingFee(uint256 _ZUSDDebt) external view override returns (uint256) {\\n        return _calcBorrowingFee(getBorrowingRate(), _ZUSDDebt);\\n    }\\n\\n    function getBorrowingFeeWithDecay(uint256 _ZUSDDebt) external view override returns (uint256) {\\n        return _calcBorrowingFee(getBorrowingRateWithDecay(), _ZUSDDebt);\\n    }\\n\\n    function _calcBorrowingFee(\\n        uint256 _borrowingRate,\\n        uint256 _ZUSDDebt\\n    ) internal pure returns (uint256) {\\n        return _borrowingRate.mul(_ZUSDDebt).div(DECIMAL_PRECISION);\\n    }\\n\\n    /// Updates the baseRate state variable based on time elapsed since the last redemption or ZUSD borrowing operation.\\n    function decayBaseRateFromBorrowing() external override {\\n        _requireCallerIsBorrowerOperations();\\n\\n        uint256 decayedBaseRate = _calcDecayedBaseRate();\\n        assert(decayedBaseRate <= DECIMAL_PRECISION); // The baseRate can decay to 0\\n\\n        baseRate = decayedBaseRate;\\n        emit BaseRateUpdated(decayedBaseRate);\\n\\n        _updateLastFeeOpTime();\\n    }\\n\\n    // --- Internal fee functions ---\\n\\n    // --- Trove property getters ---\\n\\n    function getTroveStatus(address _borrower) external view override returns (uint256) {\\n        return uint256(Troves[_borrower].status);\\n    }\\n\\n    function getTroveStake(address _borrower) external view override returns (uint256) {\\n        return Troves[_borrower].stake;\\n    }\\n\\n    function getTroveDebt(address _borrower) external view override returns (uint256) {\\n        return Troves[_borrower].debt;\\n    }\\n\\n    function getTroveColl(address _borrower) external view override returns (uint256) {\\n        return Troves[_borrower].coll;\\n    }\\n\\n    // --- Trove property setters, called by BorrowerOperations ---\\n\\n    function setTroveStatus(address _borrower, uint256 _num) external override {\\n        _requireCallerIsBorrowerOperations();\\n        Troves[_borrower].status = Status(_num);\\n    }\\n\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint256 _collIncrease\\n    ) external override returns (uint256) {\\n        _requireCallerIsBorrowerOperations();\\n        uint256 newColl = Troves[_borrower].coll.add(_collIncrease);\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint256 _collDecrease\\n    ) external override returns (uint256) {\\n        _requireCallerIsBorrowerOperations();\\n        uint256 newColl = Troves[_borrower].coll.sub(_collDecrease);\\n        Troves[_borrower].coll = newColl;\\n        return newColl;\\n    }\\n\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtIncrease\\n    ) external override returns (uint256) {\\n        _requireCallerIsBorrowerOperations();\\n        uint256 newDebt = Troves[_borrower].debt.add(_debtIncrease);\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtDecrease\\n    ) external override returns (uint256) {\\n        _requireCallerIsBorrowerOperations();\\n        uint256 newDebt = Troves[_borrower].debt.sub(_debtDecrease);\\n        Troves[_borrower].debt = newDebt;\\n        return newDebt;\\n    }\\n\\n    function getCurrentICR(\\n        address _borrower,\\n        uint256 _price\\n    ) external view override returns (uint256) {\\n        return _getCurrentICR(_borrower, _price);\\n    }\\n\\n    function getPendingETHReward(address _borrower) public view override returns (uint256) {\\n        return _getPendingETHReward(_borrower);\\n    }\\n\\n    function getPendingZUSDDebtReward(address _borrower) public view override returns (uint256) {\\n        return _getPendingZUSDDebtReward(_borrower);\\n    }\\n\\n    function hasPendingRewards(address _borrower) public view override returns (bool) {\\n        return _hasPendingRewards(_borrower);\\n    }\\n\\n    function getRedemptionRate() public view override returns (uint256) {\\n        return _getRedemptionRate();\\n    }\\n\\n    /// @dev    this function forwards the call to the troveManagerRedeemOps in a delegate call fashion\\n    ///         so the parameters are not needed\\n    function redeemCollateral(\\n        uint256 _ZUSDamount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFeePercentage\\n    ) external override {\\n        (bool success, bytes memory returndata) = troveManagerRedeemOps.delegatecall(msg.data);\\n        require(success, string(returndata));\\n    }\\n\\n    /// @dev    this function forwards the call to the troveManagerRedeemOps in a delegate call fashion\\n    ///         so the parameters are not needed\\n    ///DLLR _owner or _spender can use Sovryn Mynt to convert DLLR to ZUSD, then use the Zero redemption mechanism to redeem ZUSD for RBTC, all in a single transaction\\n    function redeemCollateralViaDLLR(\\n        uint256 _dllrAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFeePercentage,\\n        IMassetManager.PermitParams calldata _permitParams\\n    ) external override {\\n        (bool success, bytes memory returndata) = troveManagerRedeemOps.delegatecall(msg.data);\\n        require(success, string(returndata));\\n    }\\n}\\n\",\"keccak256\":\"0x31ea5eefd63a801fb204930f7945f5bff036c58286ec6f8353783d79ab56166a\",\"license\":\"MIT\"},\"contracts/TroveManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./Interfaces/IStabilityPool.sol\\\";\\nimport \\\"./Interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./Interfaces/IZUSDToken.sol\\\";\\nimport \\\"./Interfaces/ISortedTroves.sol\\\";\\nimport \\\"./Interfaces/IZEROToken.sol\\\";\\nimport \\\"./Interfaces/IZEROStaking.sol\\\";\\nimport \\\"./Interfaces/IFeeDistributor.sol\\\";\\nimport \\\"./Dependencies/Ownable.sol\\\";\\nimport \\\"./Dependencies/BaseMath.sol\\\";\\nimport \\\"./Dependencies/console.sol\\\";\\n\\ncontract TroveManagerStorage is Ownable, BaseMath {\\n    string public constant NAME = \\\"TroveManager\\\";\\n\\n    // --- Connected contract declarations ---\\n\\n    address public troveManagerRedeemOps;\\n\\n    address public borrowerOperationsAddress;\\n\\n    IStabilityPool public _stabilityPool;\\n\\n    address gasPoolAddress;\\n\\n    ICollSurplusPool collSurplusPool;\\n\\n    IZUSDToken public _zusdToken;\\n\\n    IZEROToken public _zeroToken;\\n\\n    IZEROStaking public _zeroStaking;\\n\\n    IFeeDistributor public feeDistributor;\\n\\n    // A doubly linked list of Troves, sorted by their sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    // --- Data structures ---\\n\\n    uint256 public baseRate;\\n\\n    // The timestamp of the latest fee operation (redemption or new ZUSD issuance)\\n    uint256 public lastFeeOperationTime;\\n\\n    enum Status {\\n        nonExistent,\\n        active,\\n        closedByOwner,\\n        closedByLiquidation,\\n        closedByRedemption\\n    }\\n\\n    // Store the necessary data for a trove\\n    struct Trove {\\n        uint256 debt;\\n        uint256 coll;\\n        uint256 stake;\\n        Status status;\\n        uint128 arrayIndex;\\n    }\\n\\n    mapping(address => Trove) public Troves;\\n\\n    uint256 public totalStakes;\\n\\n    // Snapshot of the value of totalStakes, taken immediately after the latest liquidation\\n    uint256 public totalStakesSnapshot;\\n\\n    // Snapshot of the total collateral across the ActivePool and DefaultPool, immediately after the latest liquidation.\\n    uint256 public totalCollateralSnapshot;\\n\\n    /*\\n     * L_ETH and L_ZUSDDebt track the sums of accumulated liquidation rewards per unit staked. During its lifetime, each stake earns:\\n     *\\n     * An ETH gain of ( stake * [L_ETH - L_ETH(0)] )\\n     * A ZUSDDebt increase  of ( stake * [L_ZUSDDebt - L_ZUSDDebt(0)] )\\n     *\\n     * Where L_ETH(0) and L_ZUSDDebt(0) are snapshots of L_ETH and L_ZUSDDebt for the active Trove taken at the instant the stake was made\\n     */\\n    uint256 public L_ETH;\\n    uint256 public L_ZUSDDebt;\\n\\n    // Map addresses with active troves to their RewardSnapshot\\n    mapping(address => RewardSnapshot) public rewardSnapshots;\\n\\n    // Object containing the ETH and ZUSD snapshots for a given active trove\\n    struct RewardSnapshot {\\n        uint256 ETH;\\n        uint256 ZUSDDebt;\\n    }\\n\\n    // Array of all active trove addresses - used to to compute an approximate hint off-chain, for the sorted list insertion\\n    address[] public TroveOwners;\\n\\n    // Error trackers for the trove redistribution calculation\\n    uint256 public lastETHError_Redistribution;\\n    uint256 public lastZUSDDebtError_Redistribution;\\n}\\n\",\"keccak256\":\"0x979836e7db9988074cd7cbbaaa94d67a297a078a8f93ceb14430ffe548545145\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b506040516200563938038062005639833981016040819052620000349162000118565b8062000049336001600160e01b036200005316565b6080525062000190565b6001600160a01b038116620000855760405162461bcd60e51b81526004016200007c906200014e565b60405180910390fd5b6001600160a01b038116620000a26001600160e01b03620000f716565b6001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000604051620000e79062000131565b6040519081900390209190915550565b600080604051620001089062000131565b6040519081900390205492915050565b6000602082840312156200012a578081fd5b5051919050565b7035b2bc9737bbb730b136329737bbb732b960791b815260110190565b60208082526022908201527f4f776e61626c653a3a7365744f776e65723a20696e76616c6964206164647265604082015261737360f01b606082015260800190565b60805161548e620001ab60003980612144525061548e6000f3fe608060405234801561001057600080fd5b50600436106104ac5760003560e01c8063756b253e1161026d578063b7f8cf9b11610151578063d293c710116100ce578063d815e8e911610092578063d815e8e914610929578063d9a7244414610931578063e056e91814610944578063e2ac77b014610957578063f36b24251461096a578063fe2ba84814610972576104ac565b8063d293c710146108d5578063d380a37c146108e8578063d3d6f843146108f0578063d5b3563514610903578063d66a255314610916576104ac565b8063bf9befb111610115578063bf9befb1146108a2578063c35bc550146108aa578063c52861f2146108b2578063c7b55481146108ba578063cbd138ae146108c2576104ac565b8063b7f8cf9b14610849578063b82f263d14610851578063b91af97c14610864578063bcd3752614610887578063be4b03341461089a576104ac565b8063887105d3116101ea5780639f070670116101ae5780639f07067014610809578063a20baee614610755578063a3f4df7e14610811578063ae7bec1914610826578063ae9187541461082e578063b0d8e18114610836576104ac565b8063887105d3146107d6578063893d20e8146107de57806396d711ff146107e65780639976cf45146107ee5780639dd233d214610801576104ac565b80637cf54e40116102315780637cf54e40146107985780637f7dde4a146107a0578063807d138d146107a857806382fe3eb9146107b057806387436936146107c3576104ac565b8063756b253e14610765578063759b303414610778578063794e572414610780578063795d26c314610788578063797250e314610790576104ac565b806342ccf1e41161039457806361ec893d116103115780636b444952116102d55780636b4449521461070e5780636ef6433814610716578063716c47e61461073a57806372423c171461074257806372fe25aa14610755578063741bef1a1461075d576104ac565b806361ec893d146106c5578063631203b0146106cd57806364cee260146106e0578063653d46e7146106f357806366ca4a2114610706576104ac565b80634e443d9e116103585780634e443d9e1461066f5780635733d58f1461068f5780635d6b480f146106975780635d8c9609146106aa5780635dba4c4a146106bd576104ac565b806342ccf1e41461061b578063477d66cf1461062e578063480cd5781461064157806349eefeee146106545780634a767d681461065c576104ac565b806318f2817a1161042d57806321e37801116103f157806321e37801146105d55780632b11551a146105e85780632f865568146105f057806331c903b0146106035780633a1285951461060b5780633cc7422514610613576104ac565b806318f2817a1461058c5780631a59a50e1461059f5780631bf43555146105b25780631e8b1c2b146105ba5780631f68f20a146105cd576104ac565b806312610e921161047457806312610e921461051f57806313af40351461053257806315d549f1146105455780631673c79a1461055857806317c62b1714610579576104ac565b806301f16e18146104b157806305b6f5ca146104c6578063071a7541146104d95780630b076557146104f75780630d43e8ad1461050a575b600080fd5b6104c46104bf366004614c61565b610985565b005b6104c46104d4366004614e2c565b610eeb565b6104e1610f82565b6040516104ee919061531b565b60405180910390f35b6104c4610505366004614b6a565b610f87565b610512610faf565b6040516104ee9190614ee3565b6104e161052d366004614ba2565b610fbe565b6104c4610540366004614b6a565b611016565b6104e1610553366004614b6a565b611057565b61056b610566366004614b6a565b61107b565b6040516104ee929190615324565b6104e1610587366004614b6a565b611094565b6104e161059a366004614b6a565b61109f565b6104e16105ad366004614b6a565b6110b2565b6104e1611178565b6104c46105c8366004614bcd565b611185565b6104e16114e6565b6104e16105e3366004614b6a565b6114ec565b6104e1611516565b6104c46105fe366004614b6a565b611525565b6104e161158b565b610512611598565b6105126115a7565b6104e1610629366004614b6a565b6115b6565b6104e161063c366004614d8f565b6115e7565b6104e161064f366004614b6a565b6115fa565b6104e1611618565b6104e161066a366004614ba2565b61161e565b61068261067d366004614d8f565b61163d565b6040516104ee9190614f56565b6104e1611648565b6104c46106a5366004614ba2565b6116c5565b6104e16106b8366004614b6a565b611711565b6104c461171c565b6104e1611787565b6104e16106db366004614d8f565b61178c565b6104e16106ee366004614b6a565b611799565b6104c4610701366004614d8f565b6117b7565b6104e1611b41565b6104e1611b53565b610729610724366004614b6a565b611b59565b6040516104ee959493929190615356565b610512611b93565b6104e1610750366004614ba2565b611ba2565b6104e1611bff565b610512611c0b565b610512610773366004614d8f565b611c1a565b6104e1611c41565b6104e1611c4e565b6104e1611c93565b6104e1611db2565b610512611db8565b610512611dc7565b6104e1611dd6565b6104c46107be366004614b6a565b611ddc565b6104c46107d1366004614b6a565b611ded565b6104e1611e79565b610512611f48565b6104e1611f67565b6104e16107fc366004614ba2565b611f6d565b6104e1611fa0565b610512611fa6565b610819611fb5565b6040516104ee9190614f8d565b610512611fdd565b610512611fec565b6104e1610844366004614b6a565b611ffb565b610512612022565b6104e161085f366004614d8f565b612031565b610877610872366004614b6a565b61203c565b6040516104ee9493929190615396565b6104c4610895366004614dbf565b6120a0565b6104e1612136565b6104e161213c565b6104e1612142565b6104e1612166565b6104e1612178565b6104c46108d0366004614b6a565b612184565b6104e16108e3366004614ba2565b612197565b6104e16121aa565b6104e16108fe366004614ba2565b6121b0565b6104e1610911366004614d8f565b6121e6565b6104e1610924366004614b6a565b6121f9565b610512612214565b61051261093f366004614d8f565b612223565b610682610952366004614b6a565b61224d565b610682610965366004614b6a565b6122ab565b6104e16122b6565b6104c4610980366004614b6a565b6122c3565b61098d611f48565b6001600160a01b0316336001600160a01b0316146109c65760405162461bcd60e51b81526004016109bd90615178565b60405180910390fd5b80516109d1906122d4565b6109de81602001516122d4565b6109eb81604001516122d4565b6109f881606001516122d4565b610a0581608001516122d4565b610a128160a001516122d4565b610a1f8160c001516122d4565b610a2c8160e001516122d4565b610a3a8161010001516122d4565b610a488161012001516122d4565b610a568161014001516122d4565b610a648161016001516122d4565b610a728161018001516122d4565b610a80816101a001516122d4565b8051600c80546001600160a01b03199081166001600160a01b038085169190911790925560208401516004805483169184169190911790556040808501516003805484169185169190911790556060850151600580548416918516919091179055608085015160008054841691851691909117905560a085015160018054841691851691909117905560c085015160068054841691851691909117905560e0850151600780548416918516919091179055610100850151600880548416918516919091179055610120850151600280548416918516919091179055610140850151600980548416918516919091179055610160850151600d80548416918516919091179055610180850151600a805484169185169190911790556101a0850151600b80549093169316929092179055517f84861842e6a98dd759145eb5e7b48279d0f02ebeabc8a69e5196b2f4c5023db991610bdb91614ee3565b60405180910390a17f6493041f605f233753d9b16dd158c9f297b8eaca22b2d0dc402a454f5683a5b18160200151604051610c169190614ee3565b60405180910390a17fbf65195e6d5213f6fcbce65b1454c925197a45e616dabd2e243542b039b050928160600151604051610c519190614ee3565b60405180910390a17f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed9858160600151604051610c8c9190614ee3565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828160800151604051610cc79190614ee3565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b8160a00151604051610d029190614ee3565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f8160c00151604051610d3d9190614ee3565b60405180910390a17fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa08160e00151604051610d789190614ee3565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d816101000151604051610db49190614ee3565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db264816101200151604051610df09190614ee3565b60405180910390a17fcdf33850c44a1a874b5fefb51dae615ac6afebd581ef90d571f81b06541d8e9d816101400151604051610e2c9190614ee3565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe78800816101600151604051610e689190614ee3565b60405180910390a17f61e0c29d5028a9e4facaa476a46e78912e99f1ba945c9560b86b82ebe36ee52d816101800151604051610ea49190614ee3565b60405180910390a17f7624075ed781e3aa34b0f492d70d1bb5a6fcde04534165e20f990d2e546be4dd816101a00151604051610ee09190614ee3565b60405180910390a150565b6004546040516000916060916001600160a01b0390911690610f109084903690614eb6565b600060405180830381855af49150503d8060008114610f4b576040519150601f19603f3d011682016040523d82523d6000602084013e610f50565b606091505b5091509150818190610f755760405162461bcd60e51b81526004016109bd9190614f8d565b5050505050505050505050565b600281565b610f8f612319565b600054600154610fac916001600160a01b03908116911683612345565b50565b600c546001600160a01b031681565b6000610fc8612319565b6001600160a01b038316600090815260106020526040812054610ff1908463ffffffff61245716565b6001600160a01b03851660009081526010602052604090208190559150505b92915050565b61101e611f48565b6001600160a01b0316336001600160a01b03161461104e5760405162461bcd60e51b81526004016109bd90615178565b610fac81612499565b6000611061612319565b61106a82612524565b6001600160801b031690505b919050565b6016602052600090815260409020805460019091015482565b6000611010826115b6565b60006110a9612319565b611010826125be565b6001600160a01b03811660009081526016602052604081205460145482906110e0908363ffffffff61245716565b9050801580611119575060016001600160a01b03851660009081526010602052604090206003015460ff16600481111561111657fe5b14155b1561112957600092505050611076565b6001600160a01b0384166000908152601060205260408120600201549061116e670de0b6b3a7640000611162848663ffffffff61267116565b9063ffffffff6126ab16565b9695505050505050565b6809c2007651b250000081565b80516111a35760405162461bcd60e51b81526004016109bd906151a9565b6000546001546006546001600160a01b039283169291821691166111c5614a3d565b6111cd614a6e565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561121d57600080fd5b505af1158015611231573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112559190614da7565b826000018181525050826001600160a01b031663bdaf37ea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561129757600080fd5b505afa1580156112ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cf9190614da7565b602083015281516112df906126ed565b1580156040840152611307576113008585846000015185602001518a612788565b905061131f565b61131c8585846000015185602001518a612a9d565b90505b60008160200151116113435760405162461bcd60e51b81526004016109bd9061528a565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad9261137792600401615324565b600060405180830381600087803b15801561139157600080fd5b505af11580156113a5573d6000803e3d6000fd5b505050506113bd85858360c001518460e00151612bdd565b61010081015115611434576008546101008201516040516364a197f360e01b81526001600160a01b03888116936364a197f393611401939290911691600401614f3d565b600060405180830381600087803b15801561141b57600080fd5b505af115801561142f573d6000803e3d6000fd5b505050505b611442858260400151612e41565b602081015160608301526101008101516040820151825161147a929161146e919063ffffffff61245716565b9063ffffffff61245716565b608083018190526060808401516040808501519285015190517f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda9403946114c29490929091615396565b60405180910390a16114de853383606001518460400151612fa2565b505050505050565b600e5481565b6001600160a01b03811660009081526010602052604081206003015460ff16600481111561101057fe5b600061152061158b565b905090565b61152e8161307f565b60408051600180825281830190925260609160208083019080368337019050509050818160008151811061155e57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505061158781611185565b5050565b6000611520600e546130c8565b600b546001600160a01b031681565b6001546001600160a01b031681565b6001600160a01b03811660009081526016602052604081206001015460155482906110e0908363ffffffff61245716565b60006110106115f4611b41565b83613165565b6001600160a01b031660009081526010602052604090206001015490565b60175490565b600080600061162c85613183565b91509150600061116e838387613209565b6000611010826126ed565b60035460408051635733d58f60e01b815290516000926001600160a01b031691635733d58f916004808301926020929190829003018186803b15801561168d57600080fd5b505afa1580156116a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115209190614da7565b6116cd612319565b8060048111156116d957fe5b6001600160a01b0383166000908152601060205260409020600301805460ff1916600183600481111561170857fe5b02179055505050565b6000611010826110b2565b611724612319565b600061172e61323b565b9050670de0b6b3a764000081111561174257fe5b600e8190556040517fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c9061177790839061531b565b60405180910390a1610fac61327f565b603c81565b60006110106115f46122b6565b6001600160a01b031660009081526010602052604090206002015490565b6117bf614aba565b506040805160e081018252600080546001600160a01b0390811683526001548116602084015292820181905260608201819052600d548316608083015260a0820181905260c0820152600654909116611816614a3d565b61181e614a6e565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561186e57600080fd5b505af1158015611882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a69190614da7565b826000018181525050826001600160a01b031663bdaf37ea6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e857600080fd5b505afa1580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119209190614da7565b60208301528151611930906126ed565b1580156040840152611957576119508483600001518460200151886132d4565b9050611977565b61197484600001518560200151846000015185602001518961377b565b90505b600081602001511161199b5760405162461bcd60e51b81526004016109bd9061528a565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad926119cf92600401615324565b600060405180830381600087803b1580156119e957600080fd5b505af11580156119fd573d6000803e3d6000fd5b50505050611a1d846000015185602001518360c001518460e00151612bdd565b61010081015115611a945783516008546101008301516040516364a197f360e01b81526001600160a01b03938416936364a197f393611a6193911691600401614f3d565b600060405180830381600087803b158015611a7b57600080fd5b505af1158015611a8f573d6000803e3d6000fd5b505050505b611aa684600001518260400151612e41565b6020810151606083015261010081015160408201518251611ad2929161146e919063ffffffff61245716565b608083018190526060808401516040808501519285015190517f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda940394611b1a9490929091615396565b60405180910390a1611b3a84600001513383606001518460400151612fa2565b5050505050565b6000611520611b4e61323b565b613931565b60195481565b60106020526000908152604090208054600182015460028301546003909301549192909160ff81169061010090046001600160801b031685565b6004546001600160a01b031681565b6000611bac612319565b6001600160a01b038316600090815260106020526040812060010154611bd8908463ffffffff613a1316565b6001600160a01b038516600090815260106020526040902060010181905591505092915050565b670de0b6b3a764000081565b6002546001600160a01b031681565b60178181548110611c2757fe5b6000918252602090912001546001600160a01b0316905081565b6801158e460913d0000081565b60035460408051631e5395c960e21b815290516000926001600160a01b03169163794e5724916004808301926020929190829003018186803b15801561168d57600080fd5b60008054604080516272c7d360e71b8152905183926001600160a01b031691633963e980916004808301926020929190829003018186803b158015611cd757600080fd5b505afa158015611ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0f9190614da7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316633963e9806040518163ffffffff1660e01b815260040160206040518083038186803b158015611d6157600080fd5b505afa158015611d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d999190614da7565b9050611dab828263ffffffff613a1316565b9250505090565b60185481565b600a546001600160a01b031681565b6000546001600160a01b031681565b60125481565b611de4612319565b610fac81613a38565b611df5611f48565b6001600160a01b0316336001600160a01b031614611e255760405162461bcd60e51b81526004016109bd90615178565b611e2e816122d4565b600480546001600160a01b0319166001600160a01b0383161790556040517f6493041f605f233753d9b16dd158c9f297b8eaca22b2d0dc402a454f5683a5b190610ee0908390614ee3565b6000805460408051630a7b61df60e11b8152905183926001600160a01b0316916314f6c3be916004808301926020929190829003018186803b158015611ebe57600080fd5b505afa158015611ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef69190614da7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d6157600080fd5b600080604051611f5790614ec6565b6040519081900390205492915050565b60135481565b6000611f77612319565b6001600160a01b038316600090815260106020526040812054610ff1908463ffffffff613a1316565b60145481565b6003546001600160a01b031681565b6040518060400160405280600c81526020016b2a3937bb32a6b0b730b3b2b960a11b81525081565b6006546001600160a01b031681565b600d546001600160a01b031681565b600080600061200984613183565b9150915060006120198383613a95565b95945050505050565b6005546001600160a01b031681565b600061101082613aca565b6001600160a01b0381166000908152601060205260408120805460019091015490918061206885611094565b915061207385611711565b9050612085848363ffffffff613a1316565b9350612097838263ffffffff613a1316565b92509193509193565b6004546040516000916060916001600160a01b03909116906120c59084903690614eb6565b600060405180830381855af49150503d8060008114612100576040519150601f19603f3d011682016040523d82523d6000602084013e612105565b606091505b509150915081819061212a5760405162461bcd60e51b81526004016109bd9190614f8d565b50505050505050505050565b60155481565b60115481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061152061217361323b565b6130c8565b670ddd4b8c6c7d70d881565b61218c612319565b610fac816002613af6565b60006121a3838361161e565b9392505050565b600f5481565b60006121ba612319565b6001600160a01b038316600090815260106020526040812060010154611bd8908463ffffffff61245716565b60006110106121f3612166565b83613c0b565b6001600160a01b031660009081526010602052604090205490565b6009546001600160a01b031681565b60006017828154811061223257fe5b6000918252602090912001546001600160a01b031692915050565b600060016001600160a01b03831660009081526010602052604090206003015460ff16600481111561227b57fe5b1461228857506000611076565b506014546001600160a01b03821660009081526016602052604090205410919050565b60006110108261224d565b6000611520600e54613931565b6122cb612319565b610fac81613c4b565b6001600160a01b0381166122fa5760405162461bcd60e51b81526004016109bd90615059565b803b806115875760405162461bcd60e51b81526004016109bd906151ff565b6005546001600160a01b031633146123435760405162461bcd60e51b81526004016109bd9061511b565b565b61234e8161224d565b156124525761235c8161307f565b6000612367826110b2565b90506000612374836115b6565b6001600160a01b0384166000908152601060205260409020600101549091506123a3908363ffffffff613a1316565b6001600160a01b03841660009081526010602052604090206001810191909155546123d4908263ffffffff613a1316565b6001600160a01b0384166000908152601060205260409020556123f683613a38565b61240285858385613c9b565b6001600160a01b038316600081815260106020526040808220805460018201546002909201549251600080516020615439833981519152946124479492939291614f61565b60405180910390a250505b505050565b60006121a383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613d83565b6001600160a01b0381166124bf5760405162461bcd60e51b81526004016109bd90615017565b806001600160a01b03166124d1611f48565b6001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600060405161251490614ec6565b6040519081900390209190915550565b601780546001808201835560008381527fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1590920180546001600160a01b0319166001600160a01b0386161790559154909161257f9190612457565b6001600160a01b039290921660009081526010602052604090206003018054610100600160881b0319166101006001600160801b038516021790555090565b6001600160a01b03811660009081526010602052604081206001015481906125e590613daf565b6001600160a01b03841660009081526010602052604090206002018054908290556011549192509061262f908390612623908463ffffffff61245716565b9063ffffffff613a1316565b60118190556040517f6bac5e0eb3c44eb03a60ab11ec3a2c051771616aecadbcfff2630aabae520382916126629161531b565b60405180910390a15092915050565b60008261268057506000611010565b8282028284828161268d57fe5b04146121a35760405162461bcd60e51b81526004016109bd906150da565b60006121a383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613deb565b6000806126f983613aca565b9050600360009054906101000a90046001600160a01b03166001600160a01b0316635733d58f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561274957600080fd5b505afa15801561275d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127819190614da7565b1192915050565b612790614a6e565b612798614af6565b6127a0614a6e565b848252600060808301526127b2611c93565b60a08301526127bf611e79565b60c0830152600060208301525b835182602001511015612a9257838260200151815181106127e957fe5b6020908102919091018101516001600160a01b03166060840181905260009081526010909152604090206003015460019060ff16600481111561282857fe5b1461283257612a82565b61284082606001518761161e565b604083015260808201516129a757600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b15801561289c57600080fd5b505afa1580156128b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d49190614da7565b8260400151101580156128e657508151155b156128f057612a82565b60006129058360c001518460a0015189613209565b90506129228989856060015186604001518760000151868d613e22565b6080810151845191935061293c919063ffffffff61245716565b8352608082015160a08401516129579163ffffffff61245716565b60a08085019190915282015160c08401516129779163ffffffff61245716565b60c084015261298684836141f8565b935061299b8360c001518460a001518961430f565b15608084015250612a82565b81608001518015612a405750600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b158015612a0157600080fd5b505afa158015612a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a399190614da7565b8260400151105b15612a8257612a598888846060015185600001516143ae565b60808101518351919250612a73919063ffffffff61245716565b8252612a7f83826141f8565b92505b60208201805160010190526127cc565b505095945050505050565b612aa5614a6e565b612aad614af6565b612ab5614a6e565b848252600060208301525b835182602001511015612a925783826020015181518110612add57fe5b60209081029190910101516001600160a01b031660608301819052612b02908761161e565b6040808401919091526003548151631e5395c960e21b815291516001600160a01b039091169163794e5724916004808301926020929190829003018186803b158015612b4d57600080fd5b505afa158015612b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b859190614da7565b82604001511015612bcd57612ba48888846060015185600001516143ae565b60808101518351919250612bbe919063ffffffff61245716565b8252612bca83826141f8565b92505b6020820180516001019052612ac0565b81612be757612e3b565b601854600090612c099061262384670de0b6b3a764000063ffffffff61267116565b90506000612c2e601954612623670de0b6b3a76400008761267190919063ffffffff16565b90506000612c47601154846126ab90919063ffffffff16565b90506000612c60601154846126ab90919063ffffffff16565b9050612c87612c7a6011548461267190919063ffffffff16565b859063ffffffff61245716565b601855601154612caf90612ca290839063ffffffff61267116565b849063ffffffff61245716565b601955601454612cc5908363ffffffff613a1316565b601455601554612cdb908263ffffffff613a1316565b60158190556014546040517f9f8bc8ab0daf5bceef75ecfd2085d1fcc6548c657ea970d9a23a60610d0737e392612d129291615324565b60405180910390a160405163121cbc4d60e11b81526001600160a01b03891690632439789a90612d4690899060040161531b565b600060405180830381600087803b158015612d6057600080fd5b505af1158015612d74573d6000803e3d6000fd5b505060405163f2e91d7160e01b81526001600160a01b038a16925063f2e91d719150612da490899060040161531b565b600060405180830381600087803b158015612dbe57600080fd5b505af1158015612dd2573d6000803e3d6000fd5b50506040516364a197f360e01b81526001600160a01b038b1692506364a197f39150612e04908a908990600401614f3d565b600060405180830381600087803b158015612e1e57600080fd5b505af1158015612e32573d6000803e3d6000fd5b50505050505050505b50505050565b6011546012819055506000826001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e8557600080fd5b505afa158015612e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ebd9190614da7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f0f57600080fd5b505afa158015612f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f479190614da7565b9050612f5d81612623848663ffffffff61245716565b60138190556012546040517f51bf4c63ec3cba9d03d43238abbdd979dd91bd16d9895c74ceea9118c7baaf6092612f949291615324565b60405180910390a150505050565b811561301357600954600754604051631062c15f60e11b81526001600160a01b03928316926320c582be92612fe09291169087908790600401614ef7565b600060405180830381600087803b158015612ffa57600080fd5b505af115801561300e573d6000803e3d6000fd5b505050505b8015612e3b576040516364a197f360e01b81526001600160a01b038516906364a197f3906130479086908590600401614f3d565b600060405180830381600087803b15801561306157600080fd5b505af1158015613075573d6000803e3d6000fd5b5050505050505050565b60016001600160a01b03821660009081526010602052604090206003015460ff1660048111156130ab57fe5b14610fac5760405162461bcd60e51b81526004016109bd906152cc565b600061101061315783600360009054906101000a90046001600160a01b03166001600160a01b03166328d28b5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561311f57600080fd5b505afa158015613133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126239190614da7565b670de0b6b3a76400006144e0565b60006121a3670de0b6b3a7640000611162858563ffffffff61267116565b6000806000613191846110b2565b9050600061319e856115b6565b6001600160a01b038616600090815260106020526040812060010154919250906131ce908463ffffffff613a1316565b6001600160a01b038716600090815260106020526040812054919250906131fb908463ffffffff613a1316565b919550909350505050915091565b6000821561323057600061322784611162878663ffffffff61267116565b91506121a39050565b506000199392505050565b6000806132466144f6565b9050600061325c670ddd4b8c6c7d70d883614512565b9050611dab670de0b6b3a764000061116283600e5461267190919063ffffffff16565b6000613296600f544261245790919063ffffffff16565b9050603c8110610fac5742600f8190556040517f860f8d2f0c74dd487e89e2883e3b25b8159ce1e1b3433a291cba7b82c508f3bc91610ee09161531b565b6132dc614a6e565b6132e4614af6565b6132ec614a6e565b848252600060808301526132fe611c93565b60a083015261330b611e79565b8260c001818152505086608001516001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b15801561335157600080fd5b505afa158015613365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133899190614b86565b82606001906001600160a01b031690816001600160a01b031681525050600087608001516001600160a01b0316631e2231436040518163ffffffff1660e01b815260040160206040518083038186803b1580156133e557600080fd5b505afa1580156133f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061341d9190614b86565b6000602085015290505b8483602001511080156134505750806001600160a01b031683606001516001600160a01b031614155b156137705760808801516060840151604051632dc9c0eb60e21b81526000926001600160a01b03169163b72703ac9161348c9190600401614ee3565b60206040518083038186803b1580156134a457600080fd5b505afa1580156134b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134dc9190614b86565b90506134ec84606001518961161e565b6040850152608084015161366557600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b15801561354857600080fd5b505afa15801561355c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135809190614da7565b84604001511015801561359257508351155b1561359d5750613770565b60006135b28560c001518660a001518b613209565b8a5160208c01516060880151604089015189519495506135d394868f613e22565b608081015186519195506135ed919063ffffffff61245716565b8552608084015160a08601516136089163ffffffff61245716565b8560a001818152505061363584610100015161146e8660a001518860c0015161245790919063ffffffff16565b60c086015261364486856141f8565b95506136598560c001518660a001518b61430f565b15608086015250613752565b836080015180156136fe5750600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b1580156136bf57600080fd5b505afa1580156136d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f79190614da7565b8460400151105b1561374c5761371f89600001518a60200151866060015187600001516143ae565b60808101518551919450613739919063ffffffff61245716565b845261374585846141f8565b9450613752565b50613770565b6001600160a01b031660608401526020830180516001019052613427565b505050949350505050565b613783614a6e565b61378b614af6565b613793614a6e565b600d54858352600060208401526001600160a01b03165b848360200151101561392557806001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b1580156137ef57600080fd5b505afa158015613803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138279190614b86565b6001600160a01b031660608401819052613841908861161e565b6040808501919091526003548151631e5395c960e21b815291516001600160a01b039091169163794e5724916004808301926020929190829003018186803b15801561388c57600080fd5b505afa1580156138a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c49190614da7565b83604001511015613910576138e38989856060015186600001516143ae565b608081015184519193506138fd919063ffffffff61245716565b835261390984836141f8565b9350613915565b613925565b60208301805160010190526137aa565b50505095945050505050565b600061101061398883600360009054906101000a90046001600160a01b03166001600160a01b031663f92d34336040518163ffffffff1660e01b815260040160206040518083038186803b15801561311f57600080fd5b600360009054906101000a90046001600160a01b03166001600160a01b031663240926696040518163ffffffff1660e01b815260040160206040518083038186803b1580156139d657600080fd5b505afa1580156139ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a0e9190614da7565b6144e0565b6000828201838110156121a35760405162461bcd60e51b81526004016109bd90614fe0565b601480546001600160a01b038316600090815260166020526040908190209182556015546001909201829055915491517fc437f324d85e369394148dd9d62f98f534b382e01ed3dd2eb98138fb6d3ab49a92610ee0929091615324565b60008115613ac157613aba826111628568056bc75e2d6310000063ffffffff61267116565b9050611010565b50600019611010565b600080613ad5611e79565b90506000613ae1611c93565b9050613aee828286613209565b949350505050565b6000816004811115613b0457fe5b14158015613b1e57506001816004811115613b1b57fe5b14155b613b2457fe5b601754613b30816145bd565b6001600160a01b0383166000908152601060205260409020600301805483919060ff19166001836004811115613b6257fe5b02179055506001600160a01b0383166000908152601060209081526040808320600180820185905590849055601690925282208281550155613ba48382614663565b600d54604051631484968760e11b81526001600160a01b03909116906329092d0e90613bd4908690600401614ee3565b600060405180830381600087803b158015613bee57600080fd5b505af1158015613c02573d6000803e3d6000fd5b50505050505050565b600080613c2a670de0b6b3a7640000611162868663ffffffff61267116565b90508281106121a35760405162461bcd60e51b81526004016109bd90615234565b6001600160a01b038116600090815260106020526040902060020154601154613c7a908263ffffffff61245716565b601155506001600160a01b0316600090815260106020526040812060020155565b60405163121cbc4d60e11b81526001600160a01b03841690632439789a90613cc790859060040161531b565b600060405180830381600087803b158015613ce157600080fd5b505af1158015613cf5573d6000803e3d6000fd5b505060405163f2e91d7160e01b81526001600160a01b038716925063f2e91d719150613d2590859060040161531b565b600060405180830381600087803b158015613d3f57600080fd5b505af1158015613d53573d6000803e3d6000fd5b505060405163be41205f60e01b81526001600160a01b038616925063be41205f915061304790849060040161531b565b60008184841115613da75760405162461bcd60e51b81526004016109bd9190614f8d565b505050900390565b60008060135460001415613dc4575081611010565b600060125411613dd057fe5b6121a36013546111626012548661267190919063ffffffff16565b60008183613e0c5760405162461bcd60e51b81526004016109bd9190614f8d565b506000838581613e1857fe5b0495945050505050565b613e2a614a6e565b613e32614b3e565b601754600110613e4257506141ed565b613e4b8761203c565b60408501526020848101919091528401819052908352613e6a90614804565b604083018190526801158e460913d0000060608401526020830151613e949163ffffffff61245716565b8152670de0b6b3a76400008611613f5f57613eb9898983602001518460400151613c9b565b613ec287613c4b565b60006080830181905260a0830152815160c0830152805160e0830152613ee9876003613af6565b815160208301516040516001600160a01b038a169260008051602061541983398151915292613f1a92600290615332565b60405180910390a2866001600160a01b031660008051602061543983398151915260008060006002604051613f529493929190614f61565b60405180910390a26141eb565b670de0b6b3a764000086118015613ffa5750600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b158015613fbf57600080fd5b505afa158015613fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ff79190614da7565b86105b1561404a57614013898983602001518460400151613c9b565b61401c87613c4b565b8151815161402b919087614890565b60e086015260c085015260a08401526080830152613ee9876003613af6565b600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b15801561409857600080fd5b505afa1580156140ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140d09190614da7565b86101580156140de57508386105b80156140eb575081518510155b156141da57614104898983602001518460400151613c9b565b8461410b57fe5b61411487613c4b565b61412782600001518360200151856148fc565b9150614134876003613af6565b610100820151156141a957600854610100830151604051633f10abab60e01b81526001600160a01b0390921691633f10abab91614176918b9190600401614f3d565b600060405180830381600087803b15801561419057600080fd5b505af11580156141a4573d6000803e3d6000fd5b505050505b815160a08301516040516001600160a01b038a169260008051602061541983398151915292613f1a92600290615332565b6141e2614a6e565b91506141ed9050565b505b979650505050505050565b614200614a6e565b604080830151908401516142199163ffffffff613a1316565b6040820152606080830151908401516142379163ffffffff613a1316565b6060820152815160208401516142529163ffffffff613a1316565b602080830191909152820151835161426f9163ffffffff613a1316565b81526080808301519084015161428a9163ffffffff613a1316565b608082015260a080830151908401516142a89163ffffffff613a1316565b60a082015260c080830151908401516142c69163ffffffff613a1316565b60c082015260e080830151908401516142e49163ffffffff613a1316565b60e082015261010080830151908401516143039163ffffffff613a1316565b61010082015292915050565b60008061431d858585613209565b9050600360009054906101000a90046001600160a01b03166001600160a01b0316635733d58f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561436d57600080fd5b505afa158015614381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143a59190614da7565b11949350505050565b6143b6614a6e565b6143be614b3e565b6143c78461203c565b604085019081526020858101928352860192909252918452905190516143f1918891889190613c9b565b6143fa84613c4b565b6144078260200151614804565b604083018190526801158e460913d0000060608401526020830151600091614435919063ffffffff61245716565b905061444683600001518286614890565b60e087015260c086015260a08501526080840152614465856003613af6565b825160208401516040516001600160a01b038816926000805160206154198339815191529261449692600190615332565b60405180910390a2846001600160a01b0316600080516020615439833981519152600080600060016040516144ce9493929190614f61565b60405180910390a25050949350505050565b60008183106144ef57816121a3565b5090919050565b6000611520603c611162600f544261245790919063ffffffff16565b6000631f54050082111561452857631f54050091505b8161453c5750670de0b6b3a7640000611010565b670de0b6b3a764000083835b60018111156145b3576002810661457d576145638283614a0a565b915061457681600263ffffffff6126ab16565b90506145ae565b6145878284614a0a565b92506145938283614a0a565b91506145ab600261116283600163ffffffff61245716565b90505b614548565b61116e8284614a0a565b6001811180156146475750600d546040805163de8fa43160e01b815290516001926001600160a01b03169163de8fa431916004808301926020929190829003018186803b15801561460d57600080fd5b505afa158015614621573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146459190614da7565b115b610fac5760405162461bcd60e51b81526004016109bd90615090565b6001600160a01b03821660009081526010602052604081206003015460ff169081600481111561468f57fe5b141580156146a9575060018160048111156146a657fe5b14155b6146af57fe5b6001600160a01b03831660009081526010602052604081206003015461010090046001600160801b03169083906146e7826001612457565b905080836001600160801b031611156146fc57fe5b60006017828154811061470b57fe5b600091825260209091200154601780546001600160a01b03909216925082916001600160801b03871690811061473d57fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316815260109091526040908190206003018054610100600160881b0319166101006001600160801b03881602179055517f02b04ae5f7be9ca7c103293a2aa15f3c339d15d6eda53b721fef7b0e609c831a906147c69083908790614f1b565b60405180910390a160178054806147d957fe5b600082815260209020810160001990810180546001600160a01b031916905501905550505050505050565b600354604080516324386ecd60e11b815290516000926001600160a01b031691634870dd9a916004808301926020929190829003018186803b15801561484957600080fd5b505afa15801561485d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148819190614da7565b828161488957fe5b0492915050565b600080808084156148e6576148a587866144e0565b93506148bb87611162888763ffffffff61267116565b92506148cd878563ffffffff61245716565b91506148df868463ffffffff61245716565b90506148f3565b5060009250829150859050845b93509350935093565b614904614a6e565b838152602080820184905260035460408051631e5395c960e21b815290516000936149a0938793611162936001600160a01b039092169263794e572492600480840193829003018186803b15801561495b57600080fd5b505afa15801561496f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149939190614da7565b889063ffffffff61267116565b90506149ab81614804565b604083018190526801158e460913d000006060840152608083018690526149d990829063ffffffff61245716565b60a08301526149ee848263ffffffff61245716565b61010083015250600060c0820181905260e08201529392505050565b600080614a1d848463ffffffff61267116565b9050613aee670de0b6b3a7640000611162836706f05b59d3b20000613a13565b6040518060a00160405280600081526020016000815260200160001515815260200160008152602001600081525090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040518060e0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160001515815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b803561101081615403565b600060208284031215614b7b578081fd5b81356121a381615403565b600060208284031215614b97578081fd5b81516121a381615403565b60008060408385031215614bb4578081fd5b8235614bbf81615403565b946020939093013593505050565b60006020808385031215614bdf578182fd5b823567ffffffffffffffff811115614bf5578283fd5b80840185601f820112614c06578384fd5b80359150614c1b614c16836153d8565b6153b1565b8281528381019082850185850284018601891015614c37578687fd5b8693505b848410156141eb57614c4d8982614b5f565b835260019390930192918501918501614c3b565b60006101c0808385031215614c74578182fd5b614c7d816153b1565b614c878585614b5f565b8152614c968560208601614b5f565b6020820152614ca88560408601614b5f565b6040820152614cba8560608601614b5f565b6060820152614ccc8560808601614b5f565b6080820152614cde8560a08601614b5f565b60a0820152614cf08560c08601614b5f565b60c0820152614d028560e08601614b5f565b60e08201526101009150614d1885838601614b5f565b828201526101209150614d2d85838601614b5f565b828201526101409150614d4285838601614b5f565b828201526101609150614d5785838601614b5f565b828201526101809150614d6c85838601614b5f565b828201526101a09150614d8185838601614b5f565b918101919091529392505050565b600060208284031215614da0578081fd5b5035919050565b600060208284031215614db8578081fd5b5051919050565b600080600080600080600060e0888a031215614dd9578283fd5b873596506020880135614deb81615403565b95506040880135614dfb81615403565b94506060880135614e0b81615403565b9699959850939660808101359560a0820135955060c0909101359350915050565b600080600080600080600080888a03610160811215614e49578182fd5b8935985060208a0135614e5b81615403565b975060408a0135614e6b81615403565b965060608a0135614e7b81615403565b955060808a810135955060a08b0135945060c08b0135935060df1982011215614ea2578182fd5b5060e0890190509295985092959890939650565b6000828483379101908152919050565b7035b2bc9737bbb730b136329737bbb732b960791b815260110190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039290921682526001600160801b0316602082015260400190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b848152602081018490526040810183905260808101614f7f836153f8565b606083015295945050505050565b6000602080835283518082850152825b81811015614fb957858101830151858201604001528201614f9d565b81811115614fca5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526022908201527f4f776e61626c653a3a7365744f776e65723a20696e76616c6964206164647265604082015261737360f01b606082015260800190565b6020808252601e908201527f4163636f756e742063616e6e6f74206265207a65726f20616464726573730000604082015260600190565b6020808252602a908201527f54726f76654d616e616765723a204f6e6c79206f6e652074726f766520696e206040820152697468652073797374656d60b01b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252603b908201527f54726f76654d616e616765723a2043616c6c6572206973206e6f74207468652060408201527f426f72726f7765724f7065726174696f6e7320636f6e74726163740000000000606082015260800190565b60208082526017908201527613dddb98589b194e8e881858d8d95cdcc819195b9a5959604a1b604082015260600190565b60208082526036908201527f54726f76654d616e616765723a2043616c6c646174612061646472657373206160408201527572726179206d757374206e6f7420626520656d70747960501b606082015260800190565b6020808252818101527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f604082015260600190565b60208082526036908201527f54726f76654d616e616765723a2046656520776f756c642065617420757020616040820152751b1b081c995d1d5c9b99590818dbdb1b185d195c985b60521b606082015260800190565b60208082526022908201527f54726f76654d616e616765723a206e6f7468696e6720746f206c697175696461604082015261746560f01b606082015260800190565b6020808252602f908201527f54726f76654d616e616765723a2054726f766520646f6573206e6f742065786960408201526e1cdd081bdc881a5cc818db1bdcd959608a1b606082015260800190565b90815260200190565b918252602082015260400190565b8381526020810183905260608101615349836153f8565b6040830152949350505050565b858152602081018590526040810184905260a081016005841061537557fe5b60608201939093526001600160801b03919091166080909101529392505050565b93845260208401929092526040830152606082015260800190565b60405181810167ffffffffffffffff811182821017156153d057600080fd5b604052919050565b600067ffffffffffffffff8211156153ee578081fd5b5060209081020190565b806004811061107657fe5b6001600160a01b0381168114610fac57600080fdfeea67486ed7ebe3eea8ab3390efd4a3c8aae48be5bea27df104a8af786c408434c3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8ba2646970667358221220abdacda95a9369d546c97acea8b73cca5ff282f0acc3b1c21c045e565965142564736f6c634300060b0033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104ac5760003560e01c8063756b253e1161026d578063b7f8cf9b11610151578063d293c710116100ce578063d815e8e911610092578063d815e8e914610929578063d9a7244414610931578063e056e91814610944578063e2ac77b014610957578063f36b24251461096a578063fe2ba84814610972576104ac565b8063d293c710146108d5578063d380a37c146108e8578063d3d6f843146108f0578063d5b3563514610903578063d66a255314610916576104ac565b8063bf9befb111610115578063bf9befb1146108a2578063c35bc550146108aa578063c52861f2146108b2578063c7b55481146108ba578063cbd138ae146108c2576104ac565b8063b7f8cf9b14610849578063b82f263d14610851578063b91af97c14610864578063bcd3752614610887578063be4b03341461089a576104ac565b8063887105d3116101ea5780639f070670116101ae5780639f07067014610809578063a20baee614610755578063a3f4df7e14610811578063ae7bec1914610826578063ae9187541461082e578063b0d8e18114610836576104ac565b8063887105d3146107d6578063893d20e8146107de57806396d711ff146107e65780639976cf45146107ee5780639dd233d214610801576104ac565b80637cf54e40116102315780637cf54e40146107985780637f7dde4a146107a0578063807d138d146107a857806382fe3eb9146107b057806387436936146107c3576104ac565b8063756b253e14610765578063759b303414610778578063794e572414610780578063795d26c314610788578063797250e314610790576104ac565b806342ccf1e41161039457806361ec893d116103115780636b444952116102d55780636b4449521461070e5780636ef6433814610716578063716c47e61461073a57806372423c171461074257806372fe25aa14610755578063741bef1a1461075d576104ac565b806361ec893d146106c5578063631203b0146106cd57806364cee260146106e0578063653d46e7146106f357806366ca4a2114610706576104ac565b80634e443d9e116103585780634e443d9e1461066f5780635733d58f1461068f5780635d6b480f146106975780635d8c9609146106aa5780635dba4c4a146106bd576104ac565b806342ccf1e41461061b578063477d66cf1461062e578063480cd5781461064157806349eefeee146106545780634a767d681461065c576104ac565b806318f2817a1161042d57806321e37801116103f157806321e37801146105d55780632b11551a146105e85780632f865568146105f057806331c903b0146106035780633a1285951461060b5780633cc7422514610613576104ac565b806318f2817a1461058c5780631a59a50e1461059f5780631bf43555146105b25780631e8b1c2b146105ba5780631f68f20a146105cd576104ac565b806312610e921161047457806312610e921461051f57806313af40351461053257806315d549f1146105455780631673c79a1461055857806317c62b1714610579576104ac565b806301f16e18146104b157806305b6f5ca146104c6578063071a7541146104d95780630b076557146104f75780630d43e8ad1461050a575b600080fd5b6104c46104bf366004614c61565b610985565b005b6104c46104d4366004614e2c565b610eeb565b6104e1610f82565b6040516104ee919061531b565b60405180910390f35b6104c4610505366004614b6a565b610f87565b610512610faf565b6040516104ee9190614ee3565b6104e161052d366004614ba2565b610fbe565b6104c4610540366004614b6a565b611016565b6104e1610553366004614b6a565b611057565b61056b610566366004614b6a565b61107b565b6040516104ee929190615324565b6104e1610587366004614b6a565b611094565b6104e161059a366004614b6a565b61109f565b6104e16105ad366004614b6a565b6110b2565b6104e1611178565b6104c46105c8366004614bcd565b611185565b6104e16114e6565b6104e16105e3366004614b6a565b6114ec565b6104e1611516565b6104c46105fe366004614b6a565b611525565b6104e161158b565b610512611598565b6105126115a7565b6104e1610629366004614b6a565b6115b6565b6104e161063c366004614d8f565b6115e7565b6104e161064f366004614b6a565b6115fa565b6104e1611618565b6104e161066a366004614ba2565b61161e565b61068261067d366004614d8f565b61163d565b6040516104ee9190614f56565b6104e1611648565b6104c46106a5366004614ba2565b6116c5565b6104e16106b8366004614b6a565b611711565b6104c461171c565b6104e1611787565b6104e16106db366004614d8f565b61178c565b6104e16106ee366004614b6a565b611799565b6104c4610701366004614d8f565b6117b7565b6104e1611b41565b6104e1611b53565b610729610724366004614b6a565b611b59565b6040516104ee959493929190615356565b610512611b93565b6104e1610750366004614ba2565b611ba2565b6104e1611bff565b610512611c0b565b610512610773366004614d8f565b611c1a565b6104e1611c41565b6104e1611c4e565b6104e1611c93565b6104e1611db2565b610512611db8565b610512611dc7565b6104e1611dd6565b6104c46107be366004614b6a565b611ddc565b6104c46107d1366004614b6a565b611ded565b6104e1611e79565b610512611f48565b6104e1611f67565b6104e16107fc366004614ba2565b611f6d565b6104e1611fa0565b610512611fa6565b610819611fb5565b6040516104ee9190614f8d565b610512611fdd565b610512611fec565b6104e1610844366004614b6a565b611ffb565b610512612022565b6104e161085f366004614d8f565b612031565b610877610872366004614b6a565b61203c565b6040516104ee9493929190615396565b6104c4610895366004614dbf565b6120a0565b6104e1612136565b6104e161213c565b6104e1612142565b6104e1612166565b6104e1612178565b6104c46108d0366004614b6a565b612184565b6104e16108e3366004614ba2565b612197565b6104e16121aa565b6104e16108fe366004614ba2565b6121b0565b6104e1610911366004614d8f565b6121e6565b6104e1610924366004614b6a565b6121f9565b610512612214565b61051261093f366004614d8f565b612223565b610682610952366004614b6a565b61224d565b610682610965366004614b6a565b6122ab565b6104e16122b6565b6104c4610980366004614b6a565b6122c3565b61098d611f48565b6001600160a01b0316336001600160a01b0316146109c65760405162461bcd60e51b81526004016109bd90615178565b60405180910390fd5b80516109d1906122d4565b6109de81602001516122d4565b6109eb81604001516122d4565b6109f881606001516122d4565b610a0581608001516122d4565b610a128160a001516122d4565b610a1f8160c001516122d4565b610a2c8160e001516122d4565b610a3a8161010001516122d4565b610a488161012001516122d4565b610a568161014001516122d4565b610a648161016001516122d4565b610a728161018001516122d4565b610a80816101a001516122d4565b8051600c80546001600160a01b03199081166001600160a01b038085169190911790925560208401516004805483169184169190911790556040808501516003805484169185169190911790556060850151600580548416918516919091179055608085015160008054841691851691909117905560a085015160018054841691851691909117905560c085015160068054841691851691909117905560e0850151600780548416918516919091179055610100850151600880548416918516919091179055610120850151600280548416918516919091179055610140850151600980548416918516919091179055610160850151600d80548416918516919091179055610180850151600a805484169185169190911790556101a0850151600b80549093169316929092179055517f84861842e6a98dd759145eb5e7b48279d0f02ebeabc8a69e5196b2f4c5023db991610bdb91614ee3565b60405180910390a17f6493041f605f233753d9b16dd158c9f297b8eaca22b2d0dc402a454f5683a5b18160200151604051610c169190614ee3565b60405180910390a17fbf65195e6d5213f6fcbce65b1454c925197a45e616dabd2e243542b039b050928160600151604051610c519190614ee3565b60405180910390a17f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed9858160600151604051610c8c9190614ee3565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd8828160800151604051610cc79190614ee3565b60405180910390a17f5ee0cae2f063ed938bb55046f6a932fb6ae792bf43624806bb90abe68a50be9b8160a00151604051610d029190614ee3565b60405180910390a17f82966d27eea39b038ee0fa30cd16532bb24f6e65d31cb58fb227aa5766cdcc7f8160c00151604051610d3d9190614ee3565b60405180910390a17fcfb07d791fcafc032b35837b50eb84b74df518cf4cc287e8084f47630fa70fa08160e00151604051610d789190614ee3565b60405180910390a17fe67f36a6e961157d6eff83b91f3af5a62131ceb6f04954ef74f51c1c05e7f88d816101000151604051610db49190614ee3565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db264816101200151604051610df09190614ee3565b60405180910390a17fcdf33850c44a1a874b5fefb51dae615ac6afebd581ef90d571f81b06541d8e9d816101400151604051610e2c9190614ee3565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe78800816101600151604051610e689190614ee3565b60405180910390a17f61e0c29d5028a9e4facaa476a46e78912e99f1ba945c9560b86b82ebe36ee52d816101800151604051610ea49190614ee3565b60405180910390a17f7624075ed781e3aa34b0f492d70d1bb5a6fcde04534165e20f990d2e546be4dd816101a00151604051610ee09190614ee3565b60405180910390a150565b6004546040516000916060916001600160a01b0390911690610f109084903690614eb6565b600060405180830381855af49150503d8060008114610f4b576040519150601f19603f3d011682016040523d82523d6000602084013e610f50565b606091505b5091509150818190610f755760405162461bcd60e51b81526004016109bd9190614f8d565b5050505050505050505050565b600281565b610f8f612319565b600054600154610fac916001600160a01b03908116911683612345565b50565b600c546001600160a01b031681565b6000610fc8612319565b6001600160a01b038316600090815260106020526040812054610ff1908463ffffffff61245716565b6001600160a01b03851660009081526010602052604090208190559150505b92915050565b61101e611f48565b6001600160a01b0316336001600160a01b03161461104e5760405162461bcd60e51b81526004016109bd90615178565b610fac81612499565b6000611061612319565b61106a82612524565b6001600160801b031690505b919050565b6016602052600090815260409020805460019091015482565b6000611010826115b6565b60006110a9612319565b611010826125be565b6001600160a01b03811660009081526016602052604081205460145482906110e0908363ffffffff61245716565b9050801580611119575060016001600160a01b03851660009081526010602052604090206003015460ff16600481111561111657fe5b14155b1561112957600092505050611076565b6001600160a01b0384166000908152601060205260408120600201549061116e670de0b6b3a7640000611162848663ffffffff61267116565b9063ffffffff6126ab16565b9695505050505050565b6809c2007651b250000081565b80516111a35760405162461bcd60e51b81526004016109bd906151a9565b6000546001546006546001600160a01b039283169291821691166111c5614a3d565b6111cd614a6e565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561121d57600080fd5b505af1158015611231573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112559190614da7565b826000018181525050826001600160a01b031663bdaf37ea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561129757600080fd5b505afa1580156112ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cf9190614da7565b602083015281516112df906126ed565b1580156040840152611307576113008585846000015185602001518a612788565b905061131f565b61131c8585846000015185602001518a612a9d565b90505b60008160200151116113435760405162461bcd60e51b81526004016109bd9061528a565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad9261137792600401615324565b600060405180830381600087803b15801561139157600080fd5b505af11580156113a5573d6000803e3d6000fd5b505050506113bd85858360c001518460e00151612bdd565b61010081015115611434576008546101008201516040516364a197f360e01b81526001600160a01b03888116936364a197f393611401939290911691600401614f3d565b600060405180830381600087803b15801561141b57600080fd5b505af115801561142f573d6000803e3d6000fd5b505050505b611442858260400151612e41565b602081015160608301526101008101516040820151825161147a929161146e919063ffffffff61245716565b9063ffffffff61245716565b608083018190526060808401516040808501519285015190517f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda9403946114c29490929091615396565b60405180910390a16114de853383606001518460400151612fa2565b505050505050565b600e5481565b6001600160a01b03811660009081526010602052604081206003015460ff16600481111561101057fe5b600061152061158b565b905090565b61152e8161307f565b60408051600180825281830190925260609160208083019080368337019050509050818160008151811061155e57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505061158781611185565b5050565b6000611520600e546130c8565b600b546001600160a01b031681565b6001546001600160a01b031681565b6001600160a01b03811660009081526016602052604081206001015460155482906110e0908363ffffffff61245716565b60006110106115f4611b41565b83613165565b6001600160a01b031660009081526010602052604090206001015490565b60175490565b600080600061162c85613183565b91509150600061116e838387613209565b6000611010826126ed565b60035460408051635733d58f60e01b815290516000926001600160a01b031691635733d58f916004808301926020929190829003018186803b15801561168d57600080fd5b505afa1580156116a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115209190614da7565b6116cd612319565b8060048111156116d957fe5b6001600160a01b0383166000908152601060205260409020600301805460ff1916600183600481111561170857fe5b02179055505050565b6000611010826110b2565b611724612319565b600061172e61323b565b9050670de0b6b3a764000081111561174257fe5b600e8190556040517fc454ee9b76c52f782a256af821b857ca6e125d1e3333bcede402fec2bed9600c9061177790839061531b565b60405180910390a1610fac61327f565b603c81565b60006110106115f46122b6565b6001600160a01b031660009081526010602052604090206002015490565b6117bf614aba565b506040805160e081018252600080546001600160a01b0390811683526001548116602084015292820181905260608201819052600d548316608083015260a0820181905260c0820152600654909116611816614a3d565b61181e614a6e565b600260009054906101000a90046001600160a01b03166001600160a01b0316630fdb11cf6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561186e57600080fd5b505af1158015611882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a69190614da7565b826000018181525050826001600160a01b031663bdaf37ea6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e857600080fd5b505afa1580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119209190614da7565b60208301528151611930906126ed565b1580156040840152611957576119508483600001518460200151886132d4565b9050611977565b61197484600001518560200151846000015185602001518961377b565b90505b600081602001511161199b5760405162461bcd60e51b81526004016109bd9061528a565b608081015160a082015160405163335525ad60e01b81526001600160a01b0386169263335525ad926119cf92600401615324565b600060405180830381600087803b1580156119e957600080fd5b505af11580156119fd573d6000803e3d6000fd5b50505050611a1d846000015185602001518360c001518460e00151612bdd565b61010081015115611a945783516008546101008301516040516364a197f360e01b81526001600160a01b03938416936364a197f393611a6193911691600401614f3d565b600060405180830381600087803b158015611a7b57600080fd5b505af1158015611a8f573d6000803e3d6000fd5b505050505b611aa684600001518260400151612e41565b6020810151606083015261010081015160408201518251611ad2929161146e919063ffffffff61245716565b608083018190526060808401516040808501519285015190517f4152c73dd2614c4f9fc35e8c9cf16013cd588c75b49a4c1673ecffdcbcda940394611b1a9490929091615396565b60405180910390a1611b3a84600001513383606001518460400151612fa2565b5050505050565b6000611520611b4e61323b565b613931565b60195481565b60106020526000908152604090208054600182015460028301546003909301549192909160ff81169061010090046001600160801b031685565b6004546001600160a01b031681565b6000611bac612319565b6001600160a01b038316600090815260106020526040812060010154611bd8908463ffffffff613a1316565b6001600160a01b038516600090815260106020526040902060010181905591505092915050565b670de0b6b3a764000081565b6002546001600160a01b031681565b60178181548110611c2757fe5b6000918252602090912001546001600160a01b0316905081565b6801158e460913d0000081565b60035460408051631e5395c960e21b815290516000926001600160a01b03169163794e5724916004808301926020929190829003018186803b15801561168d57600080fd5b60008054604080516272c7d360e71b8152905183926001600160a01b031691633963e980916004808301926020929190829003018186803b158015611cd757600080fd5b505afa158015611ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0f9190614da7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316633963e9806040518163ffffffff1660e01b815260040160206040518083038186803b158015611d6157600080fd5b505afa158015611d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d999190614da7565b9050611dab828263ffffffff613a1316565b9250505090565b60185481565b600a546001600160a01b031681565b6000546001600160a01b031681565b60125481565b611de4612319565b610fac81613a38565b611df5611f48565b6001600160a01b0316336001600160a01b031614611e255760405162461bcd60e51b81526004016109bd90615178565b611e2e816122d4565b600480546001600160a01b0319166001600160a01b0383161790556040517f6493041f605f233753d9b16dd158c9f297b8eaca22b2d0dc402a454f5683a5b190610ee0908390614ee3565b6000805460408051630a7b61df60e11b8152905183926001600160a01b0316916314f6c3be916004808301926020929190829003018186803b158015611ebe57600080fd5b505afa158015611ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef69190614da7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d6157600080fd5b600080604051611f5790614ec6565b6040519081900390205492915050565b60135481565b6000611f77612319565b6001600160a01b038316600090815260106020526040812054610ff1908463ffffffff613a1316565b60145481565b6003546001600160a01b031681565b6040518060400160405280600c81526020016b2a3937bb32a6b0b730b3b2b960a11b81525081565b6006546001600160a01b031681565b600d546001600160a01b031681565b600080600061200984613183565b9150915060006120198383613a95565b95945050505050565b6005546001600160a01b031681565b600061101082613aca565b6001600160a01b0381166000908152601060205260408120805460019091015490918061206885611094565b915061207385611711565b9050612085848363ffffffff613a1316565b9350612097838263ffffffff613a1316565b92509193509193565b6004546040516000916060916001600160a01b03909116906120c59084903690614eb6565b600060405180830381855af49150503d8060008114612100576040519150601f19603f3d011682016040523d82523d6000602084013e612105565b606091505b509150915081819061212a5760405162461bcd60e51b81526004016109bd9190614f8d565b50505050505050505050565b60155481565b60115481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061152061217361323b565b6130c8565b670ddd4b8c6c7d70d881565b61218c612319565b610fac816002613af6565b60006121a3838361161e565b9392505050565b600f5481565b60006121ba612319565b6001600160a01b038316600090815260106020526040812060010154611bd8908463ffffffff61245716565b60006110106121f3612166565b83613c0b565b6001600160a01b031660009081526010602052604090205490565b6009546001600160a01b031681565b60006017828154811061223257fe5b6000918252602090912001546001600160a01b031692915050565b600060016001600160a01b03831660009081526010602052604090206003015460ff16600481111561227b57fe5b1461228857506000611076565b506014546001600160a01b03821660009081526016602052604090205410919050565b60006110108261224d565b6000611520600e54613931565b6122cb612319565b610fac81613c4b565b6001600160a01b0381166122fa5760405162461bcd60e51b81526004016109bd90615059565b803b806115875760405162461bcd60e51b81526004016109bd906151ff565b6005546001600160a01b031633146123435760405162461bcd60e51b81526004016109bd9061511b565b565b61234e8161224d565b156124525761235c8161307f565b6000612367826110b2565b90506000612374836115b6565b6001600160a01b0384166000908152601060205260409020600101549091506123a3908363ffffffff613a1316565b6001600160a01b03841660009081526010602052604090206001810191909155546123d4908263ffffffff613a1316565b6001600160a01b0384166000908152601060205260409020556123f683613a38565b61240285858385613c9b565b6001600160a01b038316600081815260106020526040808220805460018201546002909201549251600080516020615439833981519152946124479492939291614f61565b60405180910390a250505b505050565b60006121a383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613d83565b6001600160a01b0381166124bf5760405162461bcd60e51b81526004016109bd90615017565b806001600160a01b03166124d1611f48565b6001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600060405161251490614ec6565b6040519081900390209190915550565b601780546001808201835560008381527fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1590920180546001600160a01b0319166001600160a01b0386161790559154909161257f9190612457565b6001600160a01b039290921660009081526010602052604090206003018054610100600160881b0319166101006001600160801b038516021790555090565b6001600160a01b03811660009081526010602052604081206001015481906125e590613daf565b6001600160a01b03841660009081526010602052604090206002018054908290556011549192509061262f908390612623908463ffffffff61245716565b9063ffffffff613a1316565b60118190556040517f6bac5e0eb3c44eb03a60ab11ec3a2c051771616aecadbcfff2630aabae520382916126629161531b565b60405180910390a15092915050565b60008261268057506000611010565b8282028284828161268d57fe5b04146121a35760405162461bcd60e51b81526004016109bd906150da565b60006121a383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613deb565b6000806126f983613aca565b9050600360009054906101000a90046001600160a01b03166001600160a01b0316635733d58f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561274957600080fd5b505afa15801561275d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127819190614da7565b1192915050565b612790614a6e565b612798614af6565b6127a0614a6e565b848252600060808301526127b2611c93565b60a08301526127bf611e79565b60c0830152600060208301525b835182602001511015612a9257838260200151815181106127e957fe5b6020908102919091018101516001600160a01b03166060840181905260009081526010909152604090206003015460019060ff16600481111561282857fe5b1461283257612a82565b61284082606001518761161e565b604083015260808201516129a757600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b15801561289c57600080fd5b505afa1580156128b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d49190614da7565b8260400151101580156128e657508151155b156128f057612a82565b60006129058360c001518460a0015189613209565b90506129228989856060015186604001518760000151868d613e22565b6080810151845191935061293c919063ffffffff61245716565b8352608082015160a08401516129579163ffffffff61245716565b60a08085019190915282015160c08401516129779163ffffffff61245716565b60c084015261298684836141f8565b935061299b8360c001518460a001518961430f565b15608084015250612a82565b81608001518015612a405750600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b158015612a0157600080fd5b505afa158015612a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a399190614da7565b8260400151105b15612a8257612a598888846060015185600001516143ae565b60808101518351919250612a73919063ffffffff61245716565b8252612a7f83826141f8565b92505b60208201805160010190526127cc565b505095945050505050565b612aa5614a6e565b612aad614af6565b612ab5614a6e565b848252600060208301525b835182602001511015612a925783826020015181518110612add57fe5b60209081029190910101516001600160a01b031660608301819052612b02908761161e565b6040808401919091526003548151631e5395c960e21b815291516001600160a01b039091169163794e5724916004808301926020929190829003018186803b158015612b4d57600080fd5b505afa158015612b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b859190614da7565b82604001511015612bcd57612ba48888846060015185600001516143ae565b60808101518351919250612bbe919063ffffffff61245716565b8252612bca83826141f8565b92505b6020820180516001019052612ac0565b81612be757612e3b565b601854600090612c099061262384670de0b6b3a764000063ffffffff61267116565b90506000612c2e601954612623670de0b6b3a76400008761267190919063ffffffff16565b90506000612c47601154846126ab90919063ffffffff16565b90506000612c60601154846126ab90919063ffffffff16565b9050612c87612c7a6011548461267190919063ffffffff16565b859063ffffffff61245716565b601855601154612caf90612ca290839063ffffffff61267116565b849063ffffffff61245716565b601955601454612cc5908363ffffffff613a1316565b601455601554612cdb908263ffffffff613a1316565b60158190556014546040517f9f8bc8ab0daf5bceef75ecfd2085d1fcc6548c657ea970d9a23a60610d0737e392612d129291615324565b60405180910390a160405163121cbc4d60e11b81526001600160a01b03891690632439789a90612d4690899060040161531b565b600060405180830381600087803b158015612d6057600080fd5b505af1158015612d74573d6000803e3d6000fd5b505060405163f2e91d7160e01b81526001600160a01b038a16925063f2e91d719150612da490899060040161531b565b600060405180830381600087803b158015612dbe57600080fd5b505af1158015612dd2573d6000803e3d6000fd5b50506040516364a197f360e01b81526001600160a01b038b1692506364a197f39150612e04908a908990600401614f3d565b600060405180830381600087803b158015612e1e57600080fd5b505af1158015612e32573d6000803e3d6000fd5b50505050505050505b50505050565b6011546012819055506000826001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e8557600080fd5b505afa158015612e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ebd9190614da7565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f0f57600080fd5b505afa158015612f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f479190614da7565b9050612f5d81612623848663ffffffff61245716565b60138190556012546040517f51bf4c63ec3cba9d03d43238abbdd979dd91bd16d9895c74ceea9118c7baaf6092612f949291615324565b60405180910390a150505050565b811561301357600954600754604051631062c15f60e11b81526001600160a01b03928316926320c582be92612fe09291169087908790600401614ef7565b600060405180830381600087803b158015612ffa57600080fd5b505af115801561300e573d6000803e3d6000fd5b505050505b8015612e3b576040516364a197f360e01b81526001600160a01b038516906364a197f3906130479086908590600401614f3d565b600060405180830381600087803b15801561306157600080fd5b505af1158015613075573d6000803e3d6000fd5b5050505050505050565b60016001600160a01b03821660009081526010602052604090206003015460ff1660048111156130ab57fe5b14610fac5760405162461bcd60e51b81526004016109bd906152cc565b600061101061315783600360009054906101000a90046001600160a01b03166001600160a01b03166328d28b5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561311f57600080fd5b505afa158015613133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126239190614da7565b670de0b6b3a76400006144e0565b60006121a3670de0b6b3a7640000611162858563ffffffff61267116565b6000806000613191846110b2565b9050600061319e856115b6565b6001600160a01b038616600090815260106020526040812060010154919250906131ce908463ffffffff613a1316565b6001600160a01b038716600090815260106020526040812054919250906131fb908463ffffffff613a1316565b919550909350505050915091565b6000821561323057600061322784611162878663ffffffff61267116565b91506121a39050565b506000199392505050565b6000806132466144f6565b9050600061325c670ddd4b8c6c7d70d883614512565b9050611dab670de0b6b3a764000061116283600e5461267190919063ffffffff16565b6000613296600f544261245790919063ffffffff16565b9050603c8110610fac5742600f8190556040517f860f8d2f0c74dd487e89e2883e3b25b8159ce1e1b3433a291cba7b82c508f3bc91610ee09161531b565b6132dc614a6e565b6132e4614af6565b6132ec614a6e565b848252600060808301526132fe611c93565b60a083015261330b611e79565b8260c001818152505086608001516001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b15801561335157600080fd5b505afa158015613365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133899190614b86565b82606001906001600160a01b031690816001600160a01b031681525050600087608001516001600160a01b0316631e2231436040518163ffffffff1660e01b815260040160206040518083038186803b1580156133e557600080fd5b505afa1580156133f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061341d9190614b86565b6000602085015290505b8483602001511080156134505750806001600160a01b031683606001516001600160a01b031614155b156137705760808801516060840151604051632dc9c0eb60e21b81526000926001600160a01b03169163b72703ac9161348c9190600401614ee3565b60206040518083038186803b1580156134a457600080fd5b505afa1580156134b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134dc9190614b86565b90506134ec84606001518961161e565b6040850152608084015161366557600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b15801561354857600080fd5b505afa15801561355c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135809190614da7565b84604001511015801561359257508351155b1561359d5750613770565b60006135b28560c001518660a001518b613209565b8a5160208c01516060880151604089015189519495506135d394868f613e22565b608081015186519195506135ed919063ffffffff61245716565b8552608084015160a08601516136089163ffffffff61245716565b8560a001818152505061363584610100015161146e8660a001518860c0015161245790919063ffffffff16565b60c086015261364486856141f8565b95506136598560c001518660a001518b61430f565b15608086015250613752565b836080015180156136fe5750600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b1580156136bf57600080fd5b505afa1580156136d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f79190614da7565b8460400151105b1561374c5761371f89600001518a60200151866060015187600001516143ae565b60808101518551919450613739919063ffffffff61245716565b845261374585846141f8565b9450613752565b50613770565b6001600160a01b031660608401526020830180516001019052613427565b505050949350505050565b613783614a6e565b61378b614af6565b613793614a6e565b600d54858352600060208401526001600160a01b03165b848360200151101561392557806001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b1580156137ef57600080fd5b505afa158015613803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138279190614b86565b6001600160a01b031660608401819052613841908861161e565b6040808501919091526003548151631e5395c960e21b815291516001600160a01b039091169163794e5724916004808301926020929190829003018186803b15801561388c57600080fd5b505afa1580156138a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c49190614da7565b83604001511015613910576138e38989856060015186600001516143ae565b608081015184519193506138fd919063ffffffff61245716565b835261390984836141f8565b9350613915565b613925565b60208301805160010190526137aa565b50505095945050505050565b600061101061398883600360009054906101000a90046001600160a01b03166001600160a01b031663f92d34336040518163ffffffff1660e01b815260040160206040518083038186803b15801561311f57600080fd5b600360009054906101000a90046001600160a01b03166001600160a01b031663240926696040518163ffffffff1660e01b815260040160206040518083038186803b1580156139d657600080fd5b505afa1580156139ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a0e9190614da7565b6144e0565b6000828201838110156121a35760405162461bcd60e51b81526004016109bd90614fe0565b601480546001600160a01b038316600090815260166020526040908190209182556015546001909201829055915491517fc437f324d85e369394148dd9d62f98f534b382e01ed3dd2eb98138fb6d3ab49a92610ee0929091615324565b60008115613ac157613aba826111628568056bc75e2d6310000063ffffffff61267116565b9050611010565b50600019611010565b600080613ad5611e79565b90506000613ae1611c93565b9050613aee828286613209565b949350505050565b6000816004811115613b0457fe5b14158015613b1e57506001816004811115613b1b57fe5b14155b613b2457fe5b601754613b30816145bd565b6001600160a01b0383166000908152601060205260409020600301805483919060ff19166001836004811115613b6257fe5b02179055506001600160a01b0383166000908152601060209081526040808320600180820185905590849055601690925282208281550155613ba48382614663565b600d54604051631484968760e11b81526001600160a01b03909116906329092d0e90613bd4908690600401614ee3565b600060405180830381600087803b158015613bee57600080fd5b505af1158015613c02573d6000803e3d6000fd5b50505050505050565b600080613c2a670de0b6b3a7640000611162868663ffffffff61267116565b90508281106121a35760405162461bcd60e51b81526004016109bd90615234565b6001600160a01b038116600090815260106020526040902060020154601154613c7a908263ffffffff61245716565b601155506001600160a01b0316600090815260106020526040812060020155565b60405163121cbc4d60e11b81526001600160a01b03841690632439789a90613cc790859060040161531b565b600060405180830381600087803b158015613ce157600080fd5b505af1158015613cf5573d6000803e3d6000fd5b505060405163f2e91d7160e01b81526001600160a01b038716925063f2e91d719150613d2590859060040161531b565b600060405180830381600087803b158015613d3f57600080fd5b505af1158015613d53573d6000803e3d6000fd5b505060405163be41205f60e01b81526001600160a01b038616925063be41205f915061304790849060040161531b565b60008184841115613da75760405162461bcd60e51b81526004016109bd9190614f8d565b505050900390565b60008060135460001415613dc4575081611010565b600060125411613dd057fe5b6121a36013546111626012548661267190919063ffffffff16565b60008183613e0c5760405162461bcd60e51b81526004016109bd9190614f8d565b506000838581613e1857fe5b0495945050505050565b613e2a614a6e565b613e32614b3e565b601754600110613e4257506141ed565b613e4b8761203c565b60408501526020848101919091528401819052908352613e6a90614804565b604083018190526801158e460913d0000060608401526020830151613e949163ffffffff61245716565b8152670de0b6b3a76400008611613f5f57613eb9898983602001518460400151613c9b565b613ec287613c4b565b60006080830181905260a0830152815160c0830152805160e0830152613ee9876003613af6565b815160208301516040516001600160a01b038a169260008051602061541983398151915292613f1a92600290615332565b60405180910390a2866001600160a01b031660008051602061543983398151915260008060006002604051613f529493929190614f61565b60405180910390a26141eb565b670de0b6b3a764000086118015613ffa5750600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b158015613fbf57600080fd5b505afa158015613fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ff79190614da7565b86105b1561404a57614013898983602001518460400151613c9b565b61401c87613c4b565b8151815161402b919087614890565b60e086015260c085015260a08401526080830152613ee9876003613af6565b600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b15801561409857600080fd5b505afa1580156140ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140d09190614da7565b86101580156140de57508386105b80156140eb575081518510155b156141da57614104898983602001518460400151613c9b565b8461410b57fe5b61411487613c4b565b61412782600001518360200151856148fc565b9150614134876003613af6565b610100820151156141a957600854610100830151604051633f10abab60e01b81526001600160a01b0390921691633f10abab91614176918b9190600401614f3d565b600060405180830381600087803b15801561419057600080fd5b505af11580156141a4573d6000803e3d6000fd5b505050505b815160a08301516040516001600160a01b038a169260008051602061541983398151915292613f1a92600290615332565b6141e2614a6e565b91506141ed9050565b505b979650505050505050565b614200614a6e565b604080830151908401516142199163ffffffff613a1316565b6040820152606080830151908401516142379163ffffffff613a1316565b6060820152815160208401516142529163ffffffff613a1316565b602080830191909152820151835161426f9163ffffffff613a1316565b81526080808301519084015161428a9163ffffffff613a1316565b608082015260a080830151908401516142a89163ffffffff613a1316565b60a082015260c080830151908401516142c69163ffffffff613a1316565b60c082015260e080830151908401516142e49163ffffffff613a1316565b60e082015261010080830151908401516143039163ffffffff613a1316565b61010082015292915050565b60008061431d858585613209565b9050600360009054906101000a90046001600160a01b03166001600160a01b0316635733d58f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561436d57600080fd5b505afa158015614381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143a59190614da7565b11949350505050565b6143b6614a6e565b6143be614b3e565b6143c78461203c565b604085019081526020858101928352860192909252918452905190516143f1918891889190613c9b565b6143fa84613c4b565b6144078260200151614804565b604083018190526801158e460913d0000060608401526020830151600091614435919063ffffffff61245716565b905061444683600001518286614890565b60e087015260c086015260a08501526080840152614465856003613af6565b825160208401516040516001600160a01b038816926000805160206154198339815191529261449692600190615332565b60405180910390a2846001600160a01b0316600080516020615439833981519152600080600060016040516144ce9493929190614f61565b60405180910390a25050949350505050565b60008183106144ef57816121a3565b5090919050565b6000611520603c611162600f544261245790919063ffffffff16565b6000631f54050082111561452857631f54050091505b8161453c5750670de0b6b3a7640000611010565b670de0b6b3a764000083835b60018111156145b3576002810661457d576145638283614a0a565b915061457681600263ffffffff6126ab16565b90506145ae565b6145878284614a0a565b92506145938283614a0a565b91506145ab600261116283600163ffffffff61245716565b90505b614548565b61116e8284614a0a565b6001811180156146475750600d546040805163de8fa43160e01b815290516001926001600160a01b03169163de8fa431916004808301926020929190829003018186803b15801561460d57600080fd5b505afa158015614621573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146459190614da7565b115b610fac5760405162461bcd60e51b81526004016109bd90615090565b6001600160a01b03821660009081526010602052604081206003015460ff169081600481111561468f57fe5b141580156146a9575060018160048111156146a657fe5b14155b6146af57fe5b6001600160a01b03831660009081526010602052604081206003015461010090046001600160801b03169083906146e7826001612457565b905080836001600160801b031611156146fc57fe5b60006017828154811061470b57fe5b600091825260209091200154601780546001600160a01b03909216925082916001600160801b03871690811061473d57fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055918316815260109091526040908190206003018054610100600160881b0319166101006001600160801b03881602179055517f02b04ae5f7be9ca7c103293a2aa15f3c339d15d6eda53b721fef7b0e609c831a906147c69083908790614f1b565b60405180910390a160178054806147d957fe5b600082815260209020810160001990810180546001600160a01b031916905501905550505050505050565b600354604080516324386ecd60e11b815290516000926001600160a01b031691634870dd9a916004808301926020929190829003018186803b15801561484957600080fd5b505afa15801561485d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148819190614da7565b828161488957fe5b0492915050565b600080808084156148e6576148a587866144e0565b93506148bb87611162888763ffffffff61267116565b92506148cd878563ffffffff61245716565b91506148df868463ffffffff61245716565b90506148f3565b5060009250829150859050845b93509350935093565b614904614a6e565b838152602080820184905260035460408051631e5395c960e21b815290516000936149a0938793611162936001600160a01b039092169263794e572492600480840193829003018186803b15801561495b57600080fd5b505afa15801561496f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149939190614da7565b889063ffffffff61267116565b90506149ab81614804565b604083018190526801158e460913d000006060840152608083018690526149d990829063ffffffff61245716565b60a08301526149ee848263ffffffff61245716565b61010083015250600060c0820181905260e08201529392505050565b600080614a1d848463ffffffff61267116565b9050613aee670de0b6b3a7640000611162836706f05b59d3b20000613a13565b6040518060a00160405280600081526020016000815260200160001515815260200160008152602001600081525090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040518060e0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160001515815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b803561101081615403565b600060208284031215614b7b578081fd5b81356121a381615403565b600060208284031215614b97578081fd5b81516121a381615403565b60008060408385031215614bb4578081fd5b8235614bbf81615403565b946020939093013593505050565b60006020808385031215614bdf578182fd5b823567ffffffffffffffff811115614bf5578283fd5b80840185601f820112614c06578384fd5b80359150614c1b614c16836153d8565b6153b1565b8281528381019082850185850284018601891015614c37578687fd5b8693505b848410156141eb57614c4d8982614b5f565b835260019390930192918501918501614c3b565b60006101c0808385031215614c74578182fd5b614c7d816153b1565b614c878585614b5f565b8152614c968560208601614b5f565b6020820152614ca88560408601614b5f565b6040820152614cba8560608601614b5f565b6060820152614ccc8560808601614b5f565b6080820152614cde8560a08601614b5f565b60a0820152614cf08560c08601614b5f565b60c0820152614d028560e08601614b5f565b60e08201526101009150614d1885838601614b5f565b828201526101209150614d2d85838601614b5f565b828201526101409150614d4285838601614b5f565b828201526101609150614d5785838601614b5f565b828201526101809150614d6c85838601614b5f565b828201526101a09150614d8185838601614b5f565b918101919091529392505050565b600060208284031215614da0578081fd5b5035919050565b600060208284031215614db8578081fd5b5051919050565b600080600080600080600060e0888a031215614dd9578283fd5b873596506020880135614deb81615403565b95506040880135614dfb81615403565b94506060880135614e0b81615403565b9699959850939660808101359560a0820135955060c0909101359350915050565b600080600080600080600080888a03610160811215614e49578182fd5b8935985060208a0135614e5b81615403565b975060408a0135614e6b81615403565b965060608a0135614e7b81615403565b955060808a810135955060a08b0135945060c08b0135935060df1982011215614ea2578182fd5b5060e0890190509295985092959890939650565b6000828483379101908152919050565b7035b2bc9737bbb730b136329737bbb732b960791b815260110190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039290921682526001600160801b0316602082015260400190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b848152602081018490526040810183905260808101614f7f836153f8565b606083015295945050505050565b6000602080835283518082850152825b81811015614fb957858101830151858201604001528201614f9d565b81811115614fca5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526022908201527f4f776e61626c653a3a7365744f776e65723a20696e76616c6964206164647265604082015261737360f01b606082015260800190565b6020808252601e908201527f4163636f756e742063616e6e6f74206265207a65726f20616464726573730000604082015260600190565b6020808252602a908201527f54726f76654d616e616765723a204f6e6c79206f6e652074726f766520696e206040820152697468652073797374656d60b01b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252603b908201527f54726f76654d616e616765723a2043616c6c6572206973206e6f74207468652060408201527f426f72726f7765724f7065726174696f6e7320636f6e74726163740000000000606082015260800190565b60208082526017908201527613dddb98589b194e8e881858d8d95cdcc819195b9a5959604a1b604082015260600190565b60208082526036908201527f54726f76654d616e616765723a2043616c6c646174612061646472657373206160408201527572726179206d757374206e6f7420626520656d70747960501b606082015260800190565b6020808252818101527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f604082015260600190565b60208082526036908201527f54726f76654d616e616765723a2046656520776f756c642065617420757020616040820152751b1b081c995d1d5c9b99590818dbdb1b185d195c985b60521b606082015260800190565b60208082526022908201527f54726f76654d616e616765723a206e6f7468696e6720746f206c697175696461604082015261746560f01b606082015260800190565b6020808252602f908201527f54726f76654d616e616765723a2054726f766520646f6573206e6f742065786960408201526e1cdd081bdc881a5cc818db1bdcd959608a1b606082015260800190565b90815260200190565b918252602082015260400190565b8381526020810183905260608101615349836153f8565b6040830152949350505050565b858152602081018590526040810184905260a081016005841061537557fe5b60608201939093526001600160801b03919091166080909101529392505050565b93845260208401929092526040830152606082015260800190565b60405181810167ffffffffffffffff811182821017156153d057600080fd5b604052919050565b600067ffffffffffffffff8211156153ee578081fd5b5060209081020190565b806004811061107657fe5b6001600160a01b0381168114610fac57600080fdfeea67486ed7ebe3eea8ab3390efd4a3c8aae48be5bea27df104a8af786c408434c3770d654ed33aeea6bf11ac8ef05d02a6a04ed4686dd2f624d853bbec43cc8ba2646970667358221220abdacda95a9369d546c97acea8b73cca5ff282f0acc3b1c21c045e565965142564736f6c634300060b0033",
    "devdoc": {
        "kind": "dev",
        "methods": {
            "applyPendingRewards(address)": {
                "params": {
                    "_borrower": "borrower address"
                }
            },
            "closeTrove(address)": {
                "params": {
                    "_borrower": "borrower address"
                }
            },
            "constructor": {
                "params": {
                    "_bootstrapPeriod": "During bootsrap period redemptions are not allowed"
                }
            },
            "decreaseTroveColl(address,uint256)": {
                "params": {
                    "_borrower": "borrower address",
                    "_collDecrease": "amount of collateral to decrease"
                },
                "returns": {
                    "_0": "new trove collateral"
                }
            },
            "decreaseTroveDebt(address,uint256)": {
                "params": {
                    "_borrower": "borrower address",
                    "_debtDecrease": "amount of debt to decrease"
                },
                "returns": {
                    "_0": "new trove debt"
                }
            },
            "getBorrowingFeeWithDecay(uint256)": {
                "params": {
                    "_ZUSDDebt": "ZUSD debt amount to calculate fee"
                },
                "returns": {
                    "_0": "borrowing fee using borrowing rate with decay"
                }
            },
            "getBorrowingRate()": {
                "returns": {
                    "_0": "borrowing rate"
                }
            },
            "getBorrowingRateWithDecay()": {
                "returns": {
                    "_0": "borrowing rate calculated using decayed as base rate"
                }
            },
            "getCurrentICR(address,uint256)": {
                "params": {
                    "_borrower": "borrower address",
                    "_price": "ETH price"
                },
                "returns": {
                    "_0": "the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account."
                }
            },
            "getNominalICR(address)": {
                "returns": {
                    "_0": "the nominal collateral ratio (ICR) of a given Trove, without the price. Takes a trove's pending coll and debt rewards from redistributions into account."
                }
            },
            "getOwner()": {
                "returns": {
                    "_owner": "Address of the owner. "
                }
            },
            "getPendingETHReward(address)": {
                "params": {
                    "_borrower": "borrower address"
                },
                "returns": {
                    "_0": "the borrower's pending accumulated ETH reward, earned by their stake"
                }
            },
            "getPendingZUSDDebtReward(address)": {
                "params": {
                    "_borrower": "borrower address"
                },
                "returns": {
                    "_0": "the borrower's pending accumulated ZUSD reward, earned by their stake"
                }
            },
            "getRedemptionFeeWithDecay(uint256)": {
                "params": {
                    "_ETHDrawn": "ETH drawn"
                }
            },
            "getRedemptionRate()": {
                "returns": {
                    "_0": "calculated redemption rate using baseRate"
                }
            },
            "getRedemptionRateWithDecay()": {
                "returns": {
                    "_0": "calculated redemption rate using calculated decayed as base rate"
                }
            },
            "getTCR(uint256)": {
                "params": {
                    "_price": "ETH price"
                },
                "returns": {
                    "_0": "the total collateralization ratio (TCR) of the system. The TCR is based on the the entire system debt and collateral (including pending rewards)."
                }
            },
            "getTroveColl(address)": {
                "params": {
                    "_borrower": "borrower address"
                },
                "returns": {
                    "_0": "Trove collateral from given trove"
                }
            },
            "getTroveDebt(address)": {
                "params": {
                    "_borrower": "borrower address"
                },
                "returns": {
                    "_0": "Trove debt from given trove"
                }
            },
            "getTroveFromTroveOwnersArray(uint256)": {
                "params": {
                    "_index": "Trove owner index"
                },
                "returns": {
                    "_0": "Trove from TroveOwners array in given index"
                }
            },
            "getTroveOwnersCount()": {
                "returns": {
                    "_0": "Trove owners count"
                }
            },
            "getTroveStake(address)": {
                "params": {
                    "_borrower": "borrower address"
                },
                "returns": {
                    "_0": "Trove stake from given trove"
                }
            },
            "getTroveStatus(address)": {
                "params": {
                    "_borrower": "borrower address"
                },
                "returns": {
                    "_0": "Trove status from given trove"
                }
            },
            "increaseTroveColl(address,uint256)": {
                "params": {
                    "_borrower": "borrower address",
                    "_collIncrease": "amount of collateral to increase"
                },
                "returns": {
                    "_0": "new trove collateral"
                }
            },
            "increaseTroveDebt(address,uint256)": {
                "params": {
                    "_borrower": "borrower address",
                    "_debtIncrease": "amount of debt to increase"
                },
                "returns": {
                    "_0": "new trove debt"
                }
            },
            "redeemCollateral(uint256,address,address,address,uint256,uint256,uint256)": {
                "details": "this function forwards the call to the troveManagerRedeemOps in a delegate call fashion         so the parameters are not needed"
            },
            "redeemCollateralViaDLLR(uint256,address,address,address,uint256,uint256,uint256,(uint256,uint8,bytes32,bytes32))": {
                "details": "this function forwards the call to the troveManagerRedeemOps in a delegate call fashion         so the parameters are not needed DLLR _owner or _spender can use Sovryn Mynt to convert DLLR to ZUSD, then use the Zero redemption mechanism to redeem ZUSD for RBTC, all in a single transaction"
            },
            "removeStake(address)": {
                "params": {
                    "_borrower": "borrower address"
                }
            },
            "setOwner(address)": {
                "params": {
                    "_owner": "Address of the owner. "
                }
            },
            "updateStakeAndTotalStakes(address)": {
                "params": {
                    "_borrower": "borrower address"
                }
            }
        },
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "BETA()": {
                "notice": "BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction, in order to calc the new base rate from a redemption. Corresponds to (1 / ALPHA) in the white paper."
            },
            "BOOTSTRAP_PERIOD()": {
                "notice": "During bootsrap period redemptions are not allowed"
            },
            "MIN_NET_DEBT()": {
                "notice": "Minimum amount of net ZUSD debt a trove must have"
            },
            "ZUSD_GAS_COMPENSATION()": {
                "notice": "Amount of ZUSD to be locked in gas pool on opening troves"
            },
            "_getCurrentICR(address,uint256)": {
                "notice": "Return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account."
            },
            "_getPendingETHReward(address)": {
                "notice": "Get the borrower's pending accumulated ETH reward, earned by their stake"
            },
            "_getPendingZUSDDebtReward(address)": {
                "notice": "Get the borrower's pending accumulated ZUSD reward, earned by their stake"
            },
            "addTroveOwnerToArray(address)": {
                "notice": "Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct"
            },
            "applyPendingRewards(address)": {
                "notice": "Add the borrowers's coll and debt rewards earned from redistributions, to their Trove"
            },
            "batchLiquidateTroves(address[])": {
                "notice": "Attempt to liquidate a custom list of troves provided by the caller."
            },
            "checkRecoveryMode(uint256)": {
                "notice": "reveals whether or not the system is in Recovery Mode (i.e. whether the Total Collateralization Ratio (TCR) is below the Critical Collateralization Ratio (CCR))."
            },
            "closeTrove(address)": {
                "notice": "Close given trove. Called by BorrowerOperations."
            },
            "decayBaseRateFromBorrowing()": {
                "notice": "Updates the baseRate state variable based on time elapsed since the last redemption or ZUSD borrowing operation."
            },
            "getCurrentICR(address,uint256)": {
                "notice": "computes the user’s individual collateralization ratio (ICR) based on their total collateral and total ZUSD debt. Returns 2^256 -1 if they have 0 debt."
            },
            "getEntireDebtAndColl(address)": {
                "notice": "Return the Troves entire debt and coll, including pending rewards from redistributions."
            },
            "getOwner()": {
                "notice": "Return address of the owner."
            },
            "getRedemptionFeeWithDecay(uint256)": {
                "notice": "The redemption fee is taken as a cut of the total ETH drawn from the system in a redemption. It is based on the current redemption rate."
            },
            "liquidate(address)": {
                "notice": "Single liquidation function. Closes the trove if its ICR is lower than the minimum collateral ratio."
            },
            "liquidateTroves(uint256)": {
                "notice": "Liquidate a sequence of troves. Closes a maximum number of n under-collateralized Troves, starting from the one with the lowest collateral ratio in the system, and moving upwards"
            },
            "removeStake(address)": {
                "notice": "Remove borrower's stake from the totalStakes sum, and set their stake to 0"
            },
            "setOwner(address)": {
                "notice": "Set address of the owner (only owner can call this function)"
            },
            "updateStakeAndTotalStakes(address)": {
                "notice": "Update borrower's stake based on their latest collateral value"
            },
            "updateTroveRewardSnapshots(address)": {
                "notice": "Update borrower's snapshots of L_ETH and L_ZUSDDebt to reflect the current values"
            }
        },
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 5224,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "activePool",
                "offset": 0,
                "slot": "0",
                "type": "t_contract(IActivePool)19165"
            },
            {
                "astId": 5226,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "defaultPool",
                "offset": 0,
                "slot": "1",
                "type": "t_contract(IDefaultPool)19604"
            },
            {
                "astId": 5229,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(IPriceFeed)19812"
            },
            {
                "astId": 5232,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "liquityBaseParams",
                "offset": 0,
                "slot": "3",
                "type": "t_contract(ILiquityBaseParams)19746"
            },
            {
                "astId": 34451,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "troveManagerRedeemOps",
                "offset": 0,
                "slot": "4",
                "type": "t_address"
            },
            {
                "astId": 34453,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "borrowerOperationsAddress",
                "offset": 0,
                "slot": "5",
                "type": "t_address"
            },
            {
                "astId": 34455,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "_stabilityPool",
                "offset": 0,
                "slot": "6",
                "type": "t_contract(IStabilityPool)20357"
            },
            {
                "astId": 34457,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "gasPoolAddress",
                "offset": 0,
                "slot": "7",
                "type": "t_address"
            },
            {
                "astId": 34459,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "collSurplusPool",
                "offset": 0,
                "slot": "8",
                "type": "t_contract(ICollSurplusPool)19505"
            },
            {
                "astId": 34461,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "_zusdToken",
                "offset": 0,
                "slot": "9",
                "type": "t_contract(IZUSDToken)21074"
            },
            {
                "astId": 34463,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "_zeroToken",
                "offset": 0,
                "slot": "10",
                "type": "t_contract(IZEROToken)21015"
            },
            {
                "astId": 34465,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "_zeroStaking",
                "offset": 0,
                "slot": "11",
                "type": "t_contract(IZEROStaking)20992"
            },
            {
                "astId": 34467,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "feeDistributor",
                "offset": 0,
                "slot": "12",
                "type": "t_contract(IFeeDistributor)19665"
            },
            {
                "astId": 34469,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "sortedTroves",
                "offset": 0,
                "slot": "13",
                "type": "t_contract(ISortedTroves)20085"
            },
            {
                "astId": 34471,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "baseRate",
                "offset": 0,
                "slot": "14",
                "type": "t_uint256"
            },
            {
                "astId": 34473,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "lastFeeOperationTime",
                "offset": 0,
                "slot": "15",
                "type": "t_uint256"
            },
            {
                "astId": 34494,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "Troves",
                "offset": 0,
                "slot": "16",
                "type": "t_mapping(t_address,t_struct(Trove)34490_storage)"
            },
            {
                "astId": 34496,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "totalStakes",
                "offset": 0,
                "slot": "17",
                "type": "t_uint256"
            },
            {
                "astId": 34498,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "totalStakesSnapshot",
                "offset": 0,
                "slot": "18",
                "type": "t_uint256"
            },
            {
                "astId": 34500,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "totalCollateralSnapshot",
                "offset": 0,
                "slot": "19",
                "type": "t_uint256"
            },
            {
                "astId": 34502,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "L_ETH",
                "offset": 0,
                "slot": "20",
                "type": "t_uint256"
            },
            {
                "astId": 34504,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "L_ZUSDDebt",
                "offset": 0,
                "slot": "21",
                "type": "t_uint256"
            },
            {
                "astId": 34508,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "rewardSnapshots",
                "offset": 0,
                "slot": "22",
                "type": "t_mapping(t_address,t_struct(RewardSnapshot)34513_storage)"
            },
            {
                "astId": 34516,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "TroveOwners",
                "offset": 0,
                "slot": "23",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 34518,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "lastETHError_Redistribution",
                "offset": 0,
                "slot": "24",
                "type": "t_uint256"
            },
            {
                "astId": 34520,
                "contract": "contracts/TroveManager.sol:TroveManager",
                "label": "lastZUSDDebtError_Redistribution",
                "offset": 0,
                "slot": "25",
                "type": "t_uint256"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(IActivePool)19165": {
                "encoding": "inplace",
                "label": "contract IActivePool",
                "numberOfBytes": "20"
            },
            "t_contract(ICollSurplusPool)19505": {
                "encoding": "inplace",
                "label": "contract ICollSurplusPool",
                "numberOfBytes": "20"
            },
            "t_contract(IDefaultPool)19604": {
                "encoding": "inplace",
                "label": "contract IDefaultPool",
                "numberOfBytes": "20"
            },
            "t_contract(IFeeDistributor)19665": {
                "encoding": "inplace",
                "label": "contract IFeeDistributor",
                "numberOfBytes": "20"
            },
            "t_contract(ILiquityBaseParams)19746": {
                "encoding": "inplace",
                "label": "contract ILiquityBaseParams",
                "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)19812": {
                "encoding": "inplace",
                "label": "contract IPriceFeed",
                "numberOfBytes": "20"
            },
            "t_contract(ISortedTroves)20085": {
                "encoding": "inplace",
                "label": "contract ISortedTroves",
                "numberOfBytes": "20"
            },
            "t_contract(IStabilityPool)20357": {
                "encoding": "inplace",
                "label": "contract IStabilityPool",
                "numberOfBytes": "20"
            },
            "t_contract(IZEROStaking)20992": {
                "encoding": "inplace",
                "label": "contract IZEROStaking",
                "numberOfBytes": "20"
            },
            "t_contract(IZEROToken)21015": {
                "encoding": "inplace",
                "label": "contract IZEROToken",
                "numberOfBytes": "20"
            },
            "t_contract(IZUSDToken)21074": {
                "encoding": "inplace",
                "label": "contract IZUSDToken",
                "numberOfBytes": "20"
            },
            "t_enum(Status)34479": {
                "encoding": "inplace",
                "label": "enum TroveManagerStorage.Status",
                "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(RewardSnapshot)34513_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct TroveManagerStorage.RewardSnapshot)",
                "numberOfBytes": "32",
                "value": "t_struct(RewardSnapshot)34513_storage"
            },
            "t_mapping(t_address,t_struct(Trove)34490_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct TroveManagerStorage.Trove)",
                "numberOfBytes": "32",
                "value": "t_struct(Trove)34490_storage"
            },
            "t_struct(RewardSnapshot)34513_storage": {
                "encoding": "inplace",
                "label": "struct TroveManagerStorage.RewardSnapshot",
                "members": [
                    {
                        "astId": 34510,
                        "contract": "contracts/TroveManager.sol:TroveManager",
                        "label": "ETH",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 34512,
                        "contract": "contracts/TroveManager.sol:TroveManager",
                        "label": "ZUSDDebt",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint256"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(Trove)34490_storage": {
                "encoding": "inplace",
                "label": "struct TroveManagerStorage.Trove",
                "members": [
                    {
                        "astId": 34481,
                        "contract": "contracts/TroveManager.sol:TroveManager",
                        "label": "debt",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 34483,
                        "contract": "contracts/TroveManager.sol:TroveManager",
                        "label": "coll",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 34485,
                        "contract": "contracts/TroveManager.sol:TroveManager",
                        "label": "stake",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 34487,
                        "contract": "contracts/TroveManager.sol:TroveManager",
                        "label": "status",
                        "offset": 0,
                        "slot": "3",
                        "type": "t_enum(Status)34479"
                    },
                    {
                        "astId": 34489,
                        "contract": "contracts/TroveManager.sol:TroveManager",
                        "label": "arrayIndex",
                        "offset": 1,
                        "slot": "3",
                        "type": "t_uint128"
                    }
                ],
                "numberOfBytes": "128"
            },
            "t_uint128": {
                "encoding": "inplace",
                "label": "uint128",
                "numberOfBytes": "16"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
