{
  "address": "0x7cA151dc569fa88701f149fc81e960376C111203",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueBefore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueAfter",
          "type": "uint256"
        }
      ],
      "name": "AllowanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "burner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "loanToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        }
      ],
      "name": "FlashBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "limits",
          "type": "uint256[]"
        }
      ],
      "name": "SetTransactionLimits",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "functionId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "prevFlag",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newFlag",
          "type": "bool"
        }
      ],
      "name": "ToggledFunctionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawRBTCTo",
      "type": "event"
    },
    {
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "TINY_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "baseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "changeLoanTokenNameAndSymbol",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "string",
          "name": "funcId",
          "type": "string"
        }
      ],
      "name": "checkPause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "checkpointSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collateralTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "isTorqueLoans",
          "type": "bool[]"
        }
      ],
      "name": "disableLoanParams",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "earlyAccessToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getLiquidityMiningAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getListFunctionSignatures",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "functionSignatures",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes32",
          "name": "moduleName",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getStakingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kinkLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "liquidityMiningAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loanParamsIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "loanTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lowUtilBaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lowUtilRateMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxScaleRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rateMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_baseRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rateMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lowUtilBaseRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lowUtilRateMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_kinkLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxScaleRate",
          "type": "uint256"
        }
      ],
      "name": "setDemandCurve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "LMAddress",
          "type": "address"
        }
      ],
      "name": "setLiquidityMiningAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_pauser",
          "type": "address"
        }
      ],
      "name": "setPauser",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContractAddress",
          "type": "address"
        }
      ],
      "name": "setStakingContractAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "limits",
          "type": "uint256[]"
        }
      ],
      "name": "setTransactionLimits",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "loanToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minInitialMargin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maintenanceMargin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLoanTerm",
              "type": "uint256"
            }
          ],
          "internalType": "struct LoanParamsStruct.LoanParams[]",
          "name": "loanParamsList",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "areTorqueLoans",
          "type": "bool"
        }
      ],
      "name": "setupLoanParams",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sovrynContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stakingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "string",
          "name": "source",
          "type": "string"
        }
      ],
      "name": "stringToBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "result",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "targetLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "target_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "string",
          "name": "funcId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        }
      ],
      "name": "toggleFunctionPause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "transactionLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_receiverAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawRBTCTo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "wrbtcTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x080f1a825348a9482ed48b711e0f54c339ddfa80af2a15fc7d537559c75e5277",
  "receipt": {
    "to": null,
    "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
    "contractAddress": "0x7cA151dc569fa88701f149fc81e960376C111203",
    "transactionIndex": 1,
    "gasUsed": "2785457",
    "logsBloom": "0x
    "blockHash": "0x3c622734e0802ee6b8c88933a8804ddecd7b02ddbfe71d557fc6298aeddc7ca9",
    "transactionHash": "0x080f1a825348a9482ed48b711e0f54c339ddfa80af2a15fc7d537559c75e5277",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 4322363,
        "transactionHash": "0x080f1a825348a9482ed48b711e0f54c339ddfa80af2a15fc7d537559c75e5277",
        "address": "0x7cA151dc569fa88701f149fc81e960376C111203",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000013be55487d37fe3c66ee7305e1e9c1ac85de75ae"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3c622734e0802ee6b8c88933a8804ddecd7b02ddbfe71d557fc6298aeddc7ca9"
      }
    ],
    "blockNumber": 4322363,
    "cumulativeGasUsed": "2840562",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "893704ca31180002ea7e9ca57c4eb6c1",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueAfter\",\"type\":\"uint256\"}],\"name\":\"AllowanceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"}],\"name\":\"FlashBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"limits\",\"type\":\"uint256[]\"}],\"name\":\"SetTransactionLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"functionId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"prevFlag\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newFlag\",\"type\":\"bool\"}],\"name\":\"ToggledFunctionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawRBTCTo\",\"type\":\"event\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"TINY_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"changeLoanTokenNameAndSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"funcId\",\"type\":\"string\"}],\"name\":\"checkPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkpointSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collateralTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isTorqueLoans\",\"type\":\"bool[]\"}],\"name\":\"disableLoanParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyAccessToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLiquidityMiningAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getListFunctionSignatures\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"functionSignatures\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes32\",\"name\":\"moduleName\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStakingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kinkLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityMiningAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loanParamsIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowUtilBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowUtilRateMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxScaleRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowUtilBaseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowUtilRateMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_kinkLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxScaleRate\",\"type\":\"uint256\"}],\"name\":\"setDemandCurve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"LMAddress\",\"type\":\"address\"}],\"name\":\"setLiquidityMiningAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"}],\"name\":\"setPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContractAddress\",\"type\":\"address\"}],\"name\":\"setStakingContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"limits\",\"type\":\"uint256[]\"}],\"name\":\"setTransactionLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintenanceMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"}],\"internalType\":\"struct LoanParamsStruct.LoanParams[]\",\"name\":\"loanParamsList\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"areTorqueLoans\",\"type\":\"bool\"}],\"name\":\"setupLoanParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sovrynContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"funcId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"toggleFunctionPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transactionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRBTCTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wrbtcTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"params\":{\"_owner\":\"The account owner of the iTokens.\",\"_spender\":\"The account allowed to send the iTokens.\"},\"return\":\"The number of iTokens an account is allowing the spender  to send on its behalf.\"},\"approve(address,uint256)\":{\"params\":{\"_spender\":\"The account address that will be able to spend the tokens.\",\"_value\":\"The amount of tokens allowed to spend.\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"The account owner of the iTokens.\"},\"return\":\"The number of iTokens an account owns.\"},\"changeLoanTokenNameAndSymbol(string,string)\":{\"params\":{\"_name\":\"The new name of the loan token.\",\"_symbol\":\"The new symbol of the loan token.\"}},\"checkPause(string)\":{\"details\":\"Used to read externally from the smart contract to see if a  function is paused.\",\"params\":{\"funcId\":\"The function ID, the selector.\"},\"return\":\"isPaused Whether the function is paused: true or false.\"},\"disableLoanParams(address[],bool[])\":{\"params\":{\"collateralTokens\":\"The array of collateral tokens.\",\"isTorqueLoans\":\"Whether the loan is a torque loan.\"}},\"getLiquidityMiningAddress()\":{\"return\":\"liquidityMiningAddress\"},\"getListFunctionSignatures()\":{\"details\":\"This function will return the list of function signature in this contract that are available for public call Then this function will be called by LoanTokenLogicBeacon, and the function signatures will be registred in LoanTokenLogicBeacon.To save the gas we can just directly return the list of function signature from this pure function. The other workaround (fancy way) is we can create a storage for the list of the function signature, and then we can store each function signature to that storage from the constructor. Then, in this function we just need to return that storage variable.\",\"return\":\"The list of function signatures (bytes4[])\"},\"getStakingContractAddress()\":{\"return\":\"stakingContractAddress\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"setAdmin(address)\":{\"params\":{\"_admin\":\"The address of the account to grant admin permissions.\"}},\"setDemandCurve(uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"These params should be percentages represented  like so: 5% = 5000000000000000000 /// 18 digits precision. rateMultiplier + baseRate can't exceed 100%     * To maintain a healthy credit score, it's important to keep your credit utilization rate (CUR) low (_lowUtilBaseRate). In general you don't want your CUR to exceed 30%, but increasingly financial experts are recommending that you don't want to go above 10% if you really want an excellent credit score.     * Interest rates tend to cluster around the kink level of a kinked interest rate model. More info at https://arxiv.org/pdf/2006.13922.pdf and https://compound.finance/governance/proposals/12\",\"params\":{\"_baseRate\":\"The interest rate.\",\"_kinkLevel\":\"The level that interest rates cluster on kinked model.\",\"_lowUtilBaseRate\":\"The credit utilization rate (CUR) low value.\",\"_lowUtilRateMultiplier\":\"The precision multiplier for low util base rate.\",\"_maxScaleRate\":\"The maximum rate of the scale.\",\"_rateMultiplier\":\"The precision multiplier for base rate.\",\"_targetLevel\":\"The target level.\"}},\"setLiquidityMiningAddress(address)\":{\"params\":{\"LMAddress\":\"the address of the liquidity mining contract\"}},\"setPauser(address)\":{\"params\":{\"_pauser\":\"The address of the account to grant pause permissions.\"}},\"setStakingContractAddress(address)\":{\"params\":{\"_stakingContractAddress\":\"the address of the staking contract\"}},\"setTransactionLimits(address[],uint256[])\":{\"params\":{\"addresses\":\"The token addresses.\",\"limits\":\"The limit denominated in the currency of the token address.\"}},\"setupLoanParams((bytes32,bool,address,address,address,uint256,uint256,uint256)[],bool)\":{\"params\":{\"areTorqueLoans\":\"Whether the loan is a torque loan.\",\"loanParamsList\":\"The array of loan parameters.\"}},\"toggleFunctionPause(string,bool)\":{\"details\":\"Combining the hash of \\\"iToken_FunctionPause\\\" string and a function  selector gets a slot to write a flag for pause state.\",\"params\":{\"funcId\":\"The ID of a function, the selector.\",\"isPaused\":\"true/false value of the flag.\"}},\"totalSupply()\":{\"return\":\"The total number of iTokens in existence as of now.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawRBTCTo(address,uint256)\":{\"params\":{\"_amount\":\"The amount of rBTC to be transferred.\",\"_receiverAddress\":\"The address where the rBTC has to be transferred.\"}}}},\"userdoc\":{\"methods\":{\"allowance(address,address)\":{\"notice\":\"Get the amount of iTokens allowed to be spent by a  given account on behalf of the owner.\"},\"approve(address,uint256)\":{\"notice\":\"Set an amount as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an {Approval} event.\"},\"balanceOf(address)\":{\"notice\":\"Get the amount of iTokens owned by an account.\"},\"changeLoanTokenNameAndSymbol(string,string)\":{\"notice\":\"Update the loan token parameters.\"},\"checkPause(string)\":{\"notice\":\"Check whether a function is paused.\"},\"disableLoanParams(address[],bool[])\":{\"notice\":\"Disable loan token parameters.\"},\"getLiquidityMiningAddress()\":{\"notice\":\"We need separate getter for newly added storage variableGetter for liquidityMiningAddress\"},\"getListFunctionSignatures()\":{\"notice\":\"This function is MANDATORY, which will be called by LoanTokenLogicBeacon and be registered. Every new public function, the signature needs to be included in this function.\"},\"getStakingContractAddress()\":{\"notice\":\"We need separate getter for newly added storage variableGetter for stakingContractAddress\"},\"setAdmin(address)\":{\"notice\":\"Set admin account.\"},\"setDemandCurve(uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Set loan token parameters about the demand curve.\"},\"setLiquidityMiningAddress(address)\":{\"notice\":\"sets the liquidity mining contract address\"},\"setPauser(address)\":{\"notice\":\"Set pauser account.\"},\"setStakingContractAddress(address)\":{\"notice\":\"sets the staking contract address\"},\"setTransactionLimits(address[],uint256[])\":{\"notice\":\"Set the transaction limit per token address.\"},\"setupLoanParams((bytes32,bool,address,address,address,uint256,uint256,uint256)[],bool)\":{\"notice\":\"Set loan token parameters.\"},\"toggleFunctionPause(string,bool)\":{\"notice\":\"Set the pause flag for a function to true or false.\"},\"totalSupply()\":{\"notice\":\"Get the total supply of iTokens.\"},\"withdrawRBTCTo(address,uint256)\":{\"notice\":\"Withdraws RBTC from the contract by Multisig.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol\":\"LoanTokenSettingsLowerAdmin\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/connectors/loantoken/AdvancedToken.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./AdvancedTokenStorage.sol\\\";\\n\\n/**\\n * @title Advanced Token contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized margin\\n * trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * AdvancedToken implements standard ERC-20 approval, mint and burn token functionality.\\n * Logic (AdvancedToken) is kept aside from storage (AdvancedTokenStorage).\\n *\\n * For example, LoanTokenLogicDai contract uses AdvancedToken::_mint() to mint\\n * its Loan Dai iTokens.\\n * */\\ncontract AdvancedToken is AdvancedTokenStorage {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Set an amount as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * @param _spender The account address that will be able to spend the tokens.\\n     * @param _value The amount of tokens allowed to spend.\\n     * */\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice The iToken minting process. Meant to issue Loan iTokens.\\n     * Lenders are able to open an iToken position, by minting them.\\n     * This function is called by LoanTokenLogicStandard::_mintToken\\n     * @param _to The recipient of the minted tTokens.\\n     * @param _tokenAmount The amount of iTokens to be minted.\\n     * @param _assetAmount The amount of lended tokens (asset to lend).\\n     * @param _price The price of the lended tokens.\\n     * @return The updated balance of the recipient.\\n     * */\\n    function _mint(\\n        address _to,\\n        uint256 _tokenAmount,\\n        uint256 _assetAmount,\\n        uint256 _price\\n    ) internal returns (uint256) {\\n        require(_to != address(0), \\\"15\\\");\\n\\n        uint256 _balance = balances[_to].add(_tokenAmount);\\n        balances[_to] = _balance;\\n\\n        totalSupply_ = totalSupply_.add(_tokenAmount);\\n\\n        emit Mint(_to, _tokenAmount, _assetAmount, _price);\\n        emit Transfer(address(0), _to, _tokenAmount);\\n\\n        return _balance;\\n    }\\n\\n    /**\\n     * @notice The iToken burning process. Meant to destroy Loan iTokens.\\n     * Lenders are able to close an iToken position, by burning them.\\n     * This function is called by LoanTokenLogicStandard::_burnToken\\n     * @param _who The owner of the iTokens to burn.\\n     * @param _tokenAmount The amount of iTokens to burn.\\n     * @param _assetAmount The amount of lended tokens.\\n     * @param _price The price of the lended tokens.\\n     * @return The updated balance of the iTokens owner.\\n     * */\\n    function _burn(\\n        address _who,\\n        uint256 _tokenAmount,\\n        uint256 _assetAmount,\\n        uint256 _price\\n    ) internal returns (uint256) {\\n        //bzx compare\\n        //TODO: Unit test\\n        uint256 _balance = balances[_who].sub(_tokenAmount, \\\"16\\\");\\n\\n        // a rounding error may leave dust behind, so we clear this out\\n        if (_balance <= 10) {\\n            // We can't leave such small balance quantities.\\n            _tokenAmount = _tokenAmount.add(_balance);\\n            _balance = 0;\\n        }\\n        balances[_who] = _balance;\\n\\n        totalSupply_ = totalSupply_.sub(_tokenAmount);\\n\\n        emit Burn(_who, _tokenAmount, _assetAmount, _price);\\n        emit Transfer(_who, address(0), _tokenAmount);\\n        return _balance;\\n    }\\n}\\n\",\"keccak256\":\"0x4e7606dcb24cd7f3a4e5c1a153975fd65156f7239cb281034c84d64b0dfc5dd0\"},\"contracts/connectors/loantoken/AdvancedTokenStorage.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./LoanTokenBase.sol\\\";\\n\\n/**\\n * @title Advanced Token Storage contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * AdvancedTokenStorage implements standard ERC-20 getters functionality:\\n * totalSupply, balanceOf, allowance and some events.\\n * iToken logic is divided into several contracts AdvancedToken,\\n * AdvancedTokenStorage and LoanTokenBase.\\n * */\\ncontract AdvancedTokenStorage is LoanTokenBase {\\n    using SafeMath for uint256;\\n\\n    /* Events */\\n\\n    /// topic: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// topic: 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// topic: 0x628e75c63c1873bcd3885f7aee9f58ee36f60dc789b2a6b3a978c4189bc548ba\\n    event AllowanceUpdate(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 valueBefore,\\n        uint256 valueAfter\\n    );\\n\\n    /// topic: 0xb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb\\n    event Mint(address indexed minter, uint256 tokenAmount, uint256 assetAmount, uint256 price);\\n\\n    /// topic: 0x743033787f4738ff4d6a7225ce2bd0977ee5f86b91a902a58f5e4d0b297b4644\\n    event Burn(address indexed burner, uint256 tokenAmount, uint256 assetAmount, uint256 price);\\n\\n    /// topic: 0xc688ff9bd4a1c369dd44c5cf64efa9db6652fb6b280aa765cd43f17d256b816e\\n    event FlashBorrow(address borrower, address target, address loanToken, uint256 loanAmount);\\n\\n    /* Storage */\\n\\n    mapping(address => uint256) internal balances;\\n    mapping(address => mapping(address => uint256)) internal allowed;\\n    uint256 internal totalSupply_;\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice Get the total supply of iTokens.\\n     * @return The total number of iTokens in existence as of now.\\n     * */\\n    function totalSupply() public view returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    /**\\n     * @notice Get the amount of iTokens owned by an account.\\n     * @param _owner The account owner of the iTokens.\\n     * @return The number of iTokens an account owns.\\n     * */\\n    function balanceOf(address _owner) public view returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n    /**\\n     * @notice Get the amount of iTokens allowed to be spent by a\\n     *   given account on behalf of the owner.\\n     * @param _owner The account owner of the iTokens.\\n     * @param _spender The account allowed to send the iTokens.\\n     * @return The number of iTokens an account is allowing the spender\\n     *   to send on its behalf.\\n     * */\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\n        return allowed[_owner][_spender];\\n    }\\n}\\n\",\"keccak256\":\"0x08afb0584442da1baf29938b6ff797e22fc8b7e493e51fd26358e7be3b73fa32\"},\"contracts/connectors/loantoken/LoanTokenBase.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"../../openzeppelin/SafeMath.sol\\\";\\nimport \\\"../../openzeppelin/SignedSafeMath.sol\\\";\\nimport \\\"../../openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../openzeppelin/Address.sol\\\";\\nimport \\\"../../interfaces/IWrbtcERC20.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"../../reentrancy/SharedReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Loan Token Base contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized margin\\n * trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * Specific loan related storage for iTokens.\\n *\\n * An loan token or iToken is a representation of a user funds in the pool and the\\n * interest they've earned. The redemption value of iTokens continually increase\\n * from the accretion of interest paid into the lending pool by borrowers. The user\\n * can sell iTokens to exit its position. The user might potentially use them as\\n * collateral wherever applicable.\\n *\\n * There are three main tokens in the bZx system, iTokens, pTokens, and BZRX tokens.\\n * The bZx system of lending and borrowing depends on iTokens and pTokens, and when\\n * users lend or borrow money on bZx, their crypto assets go into or come out of\\n * global liquidity pools, which are pools of funds shared between many different\\n * exchanges. When lenders supply funds into the global liquidity pools, they\\n * automatically receive iTokens; When users borrow money to open margin trading\\n * positions, they automatically receive pTokens. The system is also designed to\\n * use the BZRX tokens, which are only used to pay fees on the network currently.\\n * */\\ncontract LoanTokenBase is ReentrancyGuard, SharedReentrancyGuard, Ownable, Pausable {\\n    uint256 internal constant WEI_PRECISION = 10**18;\\n    uint256 internal constant WEI_PERCENT_PRECISION = 10**20;\\n\\n    int256 internal constant sWEI_PRECISION = 10**18;\\n\\n    /// @notice Standard ERC-20 properties\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    /// @notice The address of the loan token (asset to lend) instance.\\n    address public loanTokenAddress;\\n\\n    uint256 public baseRate;\\n    uint256 public rateMultiplier;\\n    uint256 public lowUtilBaseRate;\\n    uint256 public lowUtilRateMultiplier;\\n\\n    uint256 public targetLevel;\\n    uint256 public kinkLevel;\\n    uint256 public maxScaleRate;\\n\\n    uint256 internal _flTotalAssetSupply;\\n    uint256 public checkpointSupply;\\n    uint256 public initialPrice;\\n\\n    /// uint88 for tight packing -> 8 + 88 + 160 = 256\\n    uint88 internal lastSettleTime_;\\n\\n    /// Mapping of keccak256(collateralToken, isTorqueLoan) to loanParamsId.\\n    mapping(uint256 => bytes32) public loanParamsIds;\\n\\n    /// Price of token at last user checkpoint.\\n    mapping(address => uint256) internal checkpointPrices_;\\n\\n    // the maximum trading/borrowing/lending limit per token address\\n    mapping(address => uint256) public transactionLimit;\\n    // 0 -> no limit\\n}\\n\",\"keccak256\":\"0x9cb501d26d27b5bc143085b6d38261323426741857e49ff5dea0ea1325b5fab8\"},\"contracts/connectors/loantoken/LoanTokenLogicStorage.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./AdvancedToken.sol\\\";\\n\\ncontract LoanTokenLogicStorage is AdvancedToken {\\n    /// DO NOT ADD VARIABLES HERE - SEE BELOW\\n\\n    /// @dev It is important to maintain the variables order so the delegate\\n    /// calls can access sovrynContractAddress\\n\\n    /// ------------- MUST BE THE SAME AS IN LoanToken CONTRACT -------------------\\n    address public sovrynContractAddress;\\n    address public wrbtcTokenAddress;\\n    address public target_;\\n    address public admin;\\n    /// ------------- END MUST BE THE SAME AS IN LoanToken CONTRACT -------------------\\n\\n    /// @dev Add new variables here on the bottom.\\n    address public earlyAccessToken; //not used anymore, but staying for upgradability\\n    address public pauser;\\n    /** The address of the liquidity mining contract */\\n    address public liquidityMiningAddress;\\n\\n    /** The address of the staking contract */\\n    address public stakingContractAddress;\\n\\n    /// @dev Used by flashBorrow function.\\n    uint256 public constant VERSION = 6;\\n    /// @dev Used by flashBorrow function.\\n    address internal constant arbitraryCaller = 0x000F400e6818158D541C3EBE45FE3AA0d47372FF;\\n    bytes32 internal constant iToken_ProfitSoFar =\\n        0x37aa2b7d583612f016e4a4de4292cb015139b3d7762663d06a53964912ea2fb6; // keccak256(\\\"iToken_ProfitSoFar\\\")\\n    uint256 public constant TINY_AMOUNT = 25e13;\\n\\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\\n        bytes memory tempEmptyStringTest = bytes(source);\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n\\n    modifier onlyPauserOrOwner() {\\n        require(isOwner() || msg.sender == pauser, \\\"unauthorized\\\"); // SS02\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xaa4a1499c18053dfb193b312b029081c6e8f07c780600e5a37943ae9f7c6ddcb\"},\"contracts/connectors/loantoken/Pausable.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title Pausable contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized margin\\n * trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * The contract implements pausable functionality by reading on slots the\\n * pause state of contract functions.\\n * */\\ncontract Pausable {\\n    /// keccak256(\\\"Pausable_FunctionPause\\\")\\n    bytes32 internal constant Pausable_FunctionPause =\\n        0xa7143c84d793a15503da6f19bf9119a2dac94448ca45d77c8bf08f57b2e91047;\\n\\n    modifier pausable(bytes4 sig) {\\n        require(!_isPaused(sig), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check whether a function is paused.\\n     *\\n     * @dev Used to read externally from the smart contract to see if a\\n     *   function is paused.\\n     *\\n     * @param sig The function ID, the selector on bytes4.\\n     *\\n     * @return isPaused Whether the function is paused: true or false.\\n     * */\\n    function _isPaused(bytes4 sig) internal view returns (bool isPaused) {\\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\\n        assembly {\\n            isPaused := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x54f95b041e66fbcadb867bfba626373b681e0000ecea2b19f521de89c3020690\"},\"contracts/connectors/loantoken/interfaces/ProtocolSettingsLike.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../core/objects/LoanParamsStruct.sol\\\";\\n\\ninterface ProtocolSettingsLike {\\n    function setupLoanParams(LoanParamsStruct.LoanParams[] calldata loanParamsList)\\n        external\\n        returns (bytes32[] memory loanParamsIdList);\\n\\n    function disableLoanParams(bytes32[] calldata loanParamsIdList) external;\\n\\n    function minInitialMargin(bytes32 loanParamsId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3e1ea57320782c4f65c58d9f28aff15eda65eef1f8e76551b2da920dffbf0c1e\"},\"contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../AdvancedToken.sol\\\";\\nimport \\\"../../interfaces/ProtocolSettingsLike.sol\\\";\\nimport \\\"../../LoanTokenLogicStorage.sol\\\";\\n\\ncontract LoanTokenSettingsLowerAdmin is LoanTokenLogicStorage {\\n    using SafeMath for uint256;\\n\\n    /// @dev TODO: Check for restrictions in this contract.\\n    modifier onlyAdmin() {\\n        require(isOwner() || msg.sender == admin, \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /* Events */\\n\\n    event SetTransactionLimits(address[] addresses, uint256[] limits);\\n    event ToggledFunctionPaused(string functionId, bool prevFlag, bool newFlag);\\n    event WithdrawRBTCTo(address indexed to, uint256 amount);\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice This function is MANDATORY, which will be called by LoanTokenLogicBeacon and be registered.\\n     * Every new public function, the signature needs to be included in this function.\\n     *\\n     * @dev This function will return the list of function signature in this contract that are available for public call\\n     * Then this function will be called by LoanTokenLogicBeacon, and the function signatures will be registred in LoanTokenLogicBeacon.\\n     * @dev To save the gas we can just directly return the list of function signature from this pure function.\\n     * The other workaround (fancy way) is we can create a storage for the list of the function signature, and then we can store each function signature to that storage from the constructor.\\n     * Then, in this function we just need to return that storage variable.\\n     *\\n     * @return The list of function signatures (bytes4[])\\n     */\\n    function getListFunctionSignatures()\\n        external\\n        pure\\n        returns (bytes4[] memory functionSignatures, bytes32 moduleName)\\n    {\\n        bytes4[] memory res = new bytes4[](15);\\n        res[0] = this.setAdmin.selector;\\n        res[1] = this.setPauser.selector;\\n        res[2] = this.setupLoanParams.selector;\\n        res[3] = this.disableLoanParams.selector;\\n        res[4] = this.setDemandCurve.selector;\\n        res[5] = this.toggleFunctionPause.selector;\\n        res[6] = this.setTransactionLimits.selector;\\n        res[7] = this.changeLoanTokenNameAndSymbol.selector;\\n        res[8] = this.pauser.selector;\\n        res[9] = this.setLiquidityMiningAddress.selector;\\n        res[10] = this.withdrawRBTCTo.selector;\\n        res[11] = this.getLiquidityMiningAddress.selector;\\n        res[12] = this.checkPause.selector;\\n        res[13] = this.setStakingContractAddress.selector;\\n        res[14] = this.getStakingContractAddress.selector;\\n        return (res, stringToBytes32(\\\"LoanTokenSettingsLowerAdmin\\\"));\\n    }\\n\\n    /**\\n     * @notice Set admin account.\\n     * @param _admin The address of the account to grant admin permissions.\\n     * */\\n    function setAdmin(address _admin) public onlyOwner {\\n        admin = _admin;\\n    }\\n\\n    /**\\n     * @notice Set pauser account.\\n     * @param _pauser The address of the account to grant pause permissions.\\n     * */\\n    function setPauser(address _pauser) public onlyOwner {\\n        pauser = _pauser;\\n    }\\n\\n    /**\\n     * @notice Fallback function not allowed\\n     * */\\n    function() external {\\n        revert(\\\"LoanTokenSettingsLowerAdmin - fallback not allowed\\\");\\n    }\\n\\n    /**\\n     * @notice Set loan token parameters.\\n     *\\n     * @param loanParamsList The array of loan parameters.\\n     * @param areTorqueLoans Whether the loan is a torque loan.\\n     * */\\n    function setupLoanParams(\\n        LoanParamsStruct.LoanParams[] memory loanParamsList,\\n        bool areTorqueLoans\\n    ) public onlyAdmin {\\n        bytes32[] memory loanParamsIdList;\\n        address _loanTokenAddress = loanTokenAddress;\\n\\n        for (uint256 i = 0; i < loanParamsList.length; i++) {\\n            loanParamsList[i].loanToken = _loanTokenAddress;\\n            loanParamsList[i].maxLoanTerm = areTorqueLoans ? 0 : 28 days;\\n        }\\n\\n        loanParamsIdList = ProtocolSettingsLike(sovrynContractAddress).setupLoanParams(\\n            loanParamsList\\n        );\\n        for (uint256 i = 0; i < loanParamsIdList.length; i++) {\\n            loanParamsIds[\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            loanParamsList[i].collateralToken,\\n                            areTorqueLoans /// isTorqueLoan\\n                        )\\n                    )\\n                )\\n            ] = loanParamsIdList[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Disable loan token parameters.\\n     *\\n     * @param collateralTokens The array of collateral tokens.\\n     * @param isTorqueLoans Whether the loan is a torque loan.\\n     * */\\n    function disableLoanParams(address[] calldata collateralTokens, bool[] calldata isTorqueLoans)\\n        external\\n        onlyAdmin\\n    {\\n        require(collateralTokens.length == isTorqueLoans.length, \\\"count mismatch\\\");\\n\\n        bytes32[] memory loanParamsIdList = new bytes32[](collateralTokens.length);\\n        for (uint256 i = 0; i < collateralTokens.length; i++) {\\n            uint256 id =\\n                uint256(keccak256(abi.encodePacked(collateralTokens[i], isTorqueLoans[i])));\\n            loanParamsIdList[i] = loanParamsIds[id];\\n            delete loanParamsIds[id];\\n        }\\n\\n        ProtocolSettingsLike(sovrynContractAddress).disableLoanParams(loanParamsIdList);\\n    }\\n\\n    /**\\n     * @notice Set loan token parameters about the demand curve.\\n     *\\n     * @dev These params should be percentages represented\\n     *   like so: 5% = 5000000000000000000 /// 18 digits precision.\\n     * rateMultiplier + baseRate can't exceed 100%\\n     *\\n     * To maintain a healthy credit score, it's important to keep your\\n     * credit utilization rate (CUR) low (_lowUtilBaseRate). In general\\n     * you don't want your CUR to exceed 30%, but increasingly financial\\n     * experts are recommending that you don't want to go above 10% if you\\n     * really want an excellent credit score.\\n     *\\n     * Interest rates tend to cluster around the kink level of a kinked\\n     * interest rate model. More info at https://arxiv.org/pdf/2006.13922.pdf\\n     * and https://compound.finance/governance/proposals/12\\n     *\\n     * @param _baseRate The interest rate.\\n     * @param _rateMultiplier The precision multiplier for base rate.\\n     * @param _lowUtilBaseRate The credit utilization rate (CUR) low value.\\n     * @param _lowUtilRateMultiplier The precision multiplier for low util base rate.\\n     * @param _targetLevel The target level.\\n     * @param _kinkLevel The level that interest rates cluster on kinked model.\\n     * @param _maxScaleRate The maximum rate of the scale.\\n     * */\\n    function setDemandCurve(\\n        uint256 _baseRate,\\n        uint256 _rateMultiplier,\\n        uint256 _lowUtilBaseRate,\\n        uint256 _lowUtilRateMultiplier,\\n        uint256 _targetLevel,\\n        uint256 _kinkLevel,\\n        uint256 _maxScaleRate\\n    ) public onlyAdmin {\\n        require(_rateMultiplier.add(_baseRate) <= WEI_PERCENT_PRECISION, \\\"curve params too high\\\");\\n        require(\\n            _lowUtilRateMultiplier.add(_lowUtilBaseRate) <= WEI_PERCENT_PRECISION,\\n            \\\"curve params too high\\\"\\n        );\\n\\n        require(\\n            _targetLevel <= WEI_PERCENT_PRECISION && _kinkLevel <= WEI_PERCENT_PRECISION,\\n            \\\"levels too high\\\"\\n        );\\n\\n        baseRate = _baseRate;\\n        rateMultiplier = _rateMultiplier;\\n        lowUtilBaseRate = _lowUtilBaseRate;\\n        lowUtilRateMultiplier = _lowUtilRateMultiplier;\\n\\n        targetLevel = _targetLevel; /// 80 ether\\n        kinkLevel = _kinkLevel; /// 90 ether\\n        maxScaleRate = _maxScaleRate; /// 100 ether\\n    }\\n\\n    /**\\n     * @notice Set the pause flag for a function to true or false.\\n     *\\n     * @dev Combining the hash of \\\"iToken_FunctionPause\\\" string and a function\\n     *   selector gets a slot to write a flag for pause state.\\n     *\\n     * @param funcId The ID of a function, the selector.\\n     * @param isPaused true/false value of the flag.\\n     * */\\n    function toggleFunctionPause(\\n        string memory funcId, /// example: \\\"mint(uint256,uint256)\\\"\\n        bool isPaused\\n    ) public onlyPauserOrOwner {\\n        bool paused;\\n        /// keccak256(\\\"iToken_FunctionPause\\\")\\n        bytes32 slot =\\n            keccak256(\\n                abi.encodePacked(\\n                    bytes4(keccak256(abi.encodePacked(funcId))),\\n                    uint256(0xd46a704bc285dbd6ff5ad3863506260b1df02812f4f857c8cc852317a6ac64f2)\\n                )\\n            );\\n        assembly {\\n            paused := sload(slot)\\n        }\\n        require(paused != isPaused, \\\"isPaused is already set to that value\\\");\\n        assembly {\\n            sstore(slot, isPaused)\\n        }\\n        emit ToggledFunctionPaused(funcId, !isPaused, isPaused);\\n    }\\n\\n    /**\\n     * Set the transaction limit per token address.\\n     * @param addresses The token addresses.\\n     * @param limits The limit denominated in the currency of the token address.\\n     * */\\n    function setTransactionLimits(address[] memory addresses, uint256[] memory limits)\\n        public\\n        onlyAdmin\\n    {\\n        require(addresses.length == limits.length, \\\"mismatched array lengths\\\");\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            transactionLimit[addresses[i]] = limits[i];\\n        }\\n        emit SetTransactionLimits(addresses, limits);\\n    }\\n\\n    /**\\n     *\\t@notice Update the loan token parameters.\\n     *\\t@param _name The new name of the loan token.\\n     *\\t@param _symbol The new symbol of the loan token.\\n     * */\\n    function changeLoanTokenNameAndSymbol(string memory _name, string memory _symbol)\\n        public\\n        onlyAdmin\\n    {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /**\\n     * @notice Withdraws RBTC from the contract by Multisig.\\n     * @param _receiverAddress The address where the rBTC has to be transferred.\\n     * @param _amount The amount of rBTC to be transferred.\\n     */\\n    function withdrawRBTCTo(address payable _receiverAddress, uint256 _amount) external onlyOwner {\\n        require(_receiverAddress != address(0), \\\"receiver address invalid\\\");\\n        require(_amount > 0, \\\"non-zero withdraw amount expected\\\");\\n        require(_amount <= address(this).balance, \\\"withdraw amount cannot exceed balance\\\");\\n        _receiverAddress.transfer(_amount);\\n        emit WithdrawRBTCTo(_receiverAddress, _amount);\\n    }\\n\\n    /**\\n     * @notice sets the liquidity mining contract address\\n     * @param LMAddress the address of the liquidity mining contract\\n     */\\n    function setLiquidityMiningAddress(address LMAddress) external onlyOwner {\\n        liquidityMiningAddress = LMAddress;\\n    }\\n\\n    /**\\n\\t * @notice We need separate getter for newly added storage variable\\n\\t * @notice Getter for liquidityMiningAddress\\n\\n\\t * @return liquidityMiningAddress\\n\\t */\\n    function getLiquidityMiningAddress() public view returns (address) {\\n        return liquidityMiningAddress;\\n    }\\n\\n    /**\\n     * @notice sets the staking contract address\\n     * @param _stakingContractAddress the address of the staking contract\\n     */\\n    function setStakingContractAddress(address _stakingContractAddress) external onlyOwner {\\n        stakingContractAddress = _stakingContractAddress;\\n    }\\n\\n    /**\\n\\t * @notice We need separate getter for newly added storage variable\\n\\t * @notice Getter for stakingContractAddress\\n\\n\\t * @return stakingContractAddress\\n\\t */\\n    function getStakingContractAddress() public view returns (address) {\\n        return stakingContractAddress;\\n    }\\n\\n    /**\\n     * @notice Check whether a function is paused.\\n     *\\n     * @dev Used to read externally from the smart contract to see if a\\n     *   function is paused.\\n     *\\n     * @param funcId The function ID, the selector.\\n     *\\n     * @return isPaused Whether the function is paused: true or false.\\n     * */\\n    function checkPause(string memory funcId) public view returns (bool isPaused) {\\n        bytes4 sig = bytes4(keccak256(abi.encodePacked(funcId)));\\n        bytes32 slot =\\n            keccak256(\\n                abi.encodePacked(\\n                    sig,\\n                    uint256(0xd46a704bc285dbd6ff5ad3863506260b1df02812f4f857c8cc852317a6ac64f2)\\n                )\\n            );\\n        assembly {\\n            isPaused := sload(slot)\\n        }\\n        return isPaused;\\n    }\\n}\\n\",\"keccak256\":\"0xa33bae62ff9af9bf51b64a9775bd5e1614d5d87809f80fe69b7e2bc39c75e839\"},\"contracts/core/objects/LoanParamsStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Loan Parameters.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Loan Parameters.\\n * */\\ncontract LoanParamsStruct {\\n    struct LoanParams {\\n        /// @dev ID of loan params object.\\n        bytes32 id;\\n        /// @dev If false, this object has been disabled by the owner and can't\\n        ///   be used for future loans.\\n        bool active;\\n        /// @dev Owner of this object.\\n        address owner;\\n        /// @dev The token being loaned.\\n        address loanToken;\\n        /// @dev The required collateral token.\\n        address collateralToken;\\n        /// @dev The minimum allowed initial margin.\\n        uint256 minInitialMargin;\\n        /// @dev An unhealthy loan when current margin is at or below this value.\\n        uint256 maintenanceMargin;\\n        /// @dev The maximum term for new loans (0 means there's no max term).\\n        uint256 maxLoanTerm;\\n    }\\n}\\n\",\"keccak256\":\"0xe15aa97713521da7f501e5225af9d92cf34bd68d286dbfed86aa75aabb323945\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _who) external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbc0c9bb48f19651930ec9aff366b2e11a1abf89c846e4b2d52d8102b15ce6721\"},\"contracts/interfaces/IWrbtc.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ninterface IWrbtc {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x20fdfe4b5e32fd7f863b3fa128e3c80bd4ccf090a4ffba56186ef3b7f2a80492\"},\"contracts/interfaces/IWrbtcERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./IWrbtc.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract IWrbtcERC20 is IWrbtc, IERC20 {}\\n\",\"keccak256\":\"0x7301a8c8ca7aa016ec94268a16d07366875f2e406442e929968dd745b1ee5be5\"},\"contracts/openzeppelin/Address.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html\\n     *   #use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x23df48a01dbac9b25e86c9131174fb7752bbc7e741e63f1aa982de22e055ad54\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen <remco@2\\u03c0.com>, Eenae <alexey@mixbytes.io>\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard {\\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\\n\\n    /// @dev Constant for locked guard state\\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\\n\\n    /**\\n     * @dev We use a single lock for the whole contract.\\n     */\\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * If you mark a function `nonReentrant`, you should also\\n     * mark it `external`. Calling one `nonReentrant` function from\\n     * another is not supported. Instead, you can implement a\\n     * `private` function doing the actual work, and an `external`\\n     * wrapper marked as `nonReentrant`.\\n     */\\n    modifier nonReentrant() {\\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \\\"nonReentrant\\\");\\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\\n        _;\\n        reentrancyLock = REENTRANCY_GUARD_FREE;\\n    }\\n}\\n\",\"keccak256\":\"0xd347de96ad57d1e45b07a2efe3050c1bd4b809236bbf354acb593de56d21a5c9\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"},\"contracts/openzeppelin/SignedSafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 private constant _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x449606d22a41bbeaeee8775d66b2bd179b6964b65fd3380b22ef837634e7523b\"},\"contracts/reentrancy/Mutex.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/*\\n * @title Global Mutex contract\\n *\\n * @notice A mutex contract that allows only one function to be called at a time out\\n * of a large set of functions. *Anyone* in the network can freely use any instance\\n * of this contract to add a universal mutex to any function in any contract.\\n */\\ncontract Mutex {\\n    /*\\n     * We use an uint to store the mutex state.\\n     */\\n    uint256 public value;\\n\\n    /*\\n     * @notice Increment the mutex state and return the new value.\\n     *\\n     * @dev This is the function that will be called by anyone to change the mutex\\n     * state. It is purposely not protected by any access control\\n     */\\n    function incrementAndGetValue() external returns (uint256) {\\n        /*\\n         * increment value using unsafe math. This is safe because we are\\n         * pretty certain no one will ever increment the value 2^256 times\\n         * in a single transaction.\\n         */\\n        return ++value;\\n    }\\n}\\n\",\"keccak256\":\"0xd10b0fd07d5fed1ae1237e7c87e6501970fce2a86e2b8862e502258b0d3aeb2c\"},\"contracts/reentrancy/SharedReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"./Mutex.sol\\\";\\n\\n/*\\n * @title Abstract contract for shared reentrancy guards\\n *\\n * @notice Exposes a single modifier `globallyNonReentrant` that can be used to ensure\\n * that there's no reentrancy between *any* functions marked with the modifier.\\n *\\n * @dev The Mutex contract address is hardcoded because the address is deployed using a\\n * special deployment method (similar to ERC1820Registry). This contract therefore has no\\n * state and is thus safe to add to the inheritance chain of upgradeable contracts.\\n */\\ncontract SharedReentrancyGuard {\\n    /*\\n     * This is the address of the mutex contract that will be used as the\\n     * reentrancy guard.\\n     *\\n     * The address is hardcoded to avoid changing the memory layout of\\n     * derived contracts (possibly upgradable). Hardcoding the address is possible,\\n     * because the Mutex contract is always deployed to the same address, with the\\n     * same method used in the deployment of ERC1820Registry.\\n     */\\n    Mutex private constant MUTEX = Mutex(0xba10edD6ABC7696Eae685839217BdcC42139612b);\\n\\n    /*\\n     * This is the modifier that will be used to protect functions from\\n     * reentrancy. It will call the mutex contract to increment the mutex\\n     * state and then revert if the mutex state was changed by another\\n     * nested call.\\n     */\\n    modifier globallyNonReentrant() {\\n        uint256 previous = MUTEX.incrementAndGetValue();\\n\\n        _;\\n\\n        /*\\n         * If the mutex state was changed by a nested function call, then\\n         * the value of the state variable will be different from the previous value.\\n         */\\n        require(previous == MUTEX.value(), \\\"reentrancy violation\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2d0e61b104b91c1764f20fbeb381ba0f8a8889934ba7f6e8a167ed542ec2c124\"}},\"version\":1}",
  "bytecode": "0x60806040526001600090815561001c6001600160e01b0361006f16565b600180546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610073565b3390565b612747806100826000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80638f32d59b11610167578063d97206a4116100ce578063ee60c93311610087578063ee60c93314610526578063ef2b0b3914610539578063f2fde38b14610541578063f851a44014610554578063f8dd4f0e1461055c578063ffa1ad7414610564576102a0565b8063d97206a4146104bf578063dd62ed3e146104d2578063e3cded61146104e5578063e41b07e3146104f8578063e697d2ee1461050b578063e6d7cfb71461051e576102a0565b8063be19421711610120578063be19421714610463578063ca37e66614610476578063cb926cb31461047e578063cfb5192814610491578063d759dbeb146104a4578063d8f06c83146104ac576102a0565b80638f32d59b1461042557806390967de51461042d57806395d89b41146104435780639bda3a981461044b5780639fd0506d14610453578063ba0e43bf1461045b576102a0565b8063330691ac1161020b57806370a08231116101c457806370a08231146103ea578063797bf385146103fd5780637b7933b4146104055780637e37c08c1461040d5780638da5cb5b146104155780638ee6c4e61461041d576102a0565b8063330691ac146103a45780633535f48b146103ac578063471896d3146103b457806356e07d70146103c75780636afe5795146103cf578063704b6c02146103d7576102a0565b80631f68f20a1161025d5780631f68f20a146103465780632d88af4a1461034e5780632f013051146103615780632f6b600d14610374578063313ce5671461037c5780633291c11a14610391576102a0565b806306947a3a146102c157806306fdde03146102df578063095ea7b3146102f457806318160ddd146103145780631c1f8aa3146103295780631d0806ae1461033e575b60405162461bcd60e51b81526004016102b890612517565b60405180910390fd5b6102c961056c565b6040516102d69190612418565b60405180910390f35b6102e761057b565b6040516102d691906124a9565b610307610302366004611a65565b610606565b6040516102d6919061248d565b61031c610671565b6040516102d6919061249b565b61033c610337366004611a3f565b610678565b005b61031c6106be565b61031c6106c4565b61033c61035c366004611a3f565b6106ca565b61033c61036f366004611a65565b610710565b6102c9610816565b610384610825565b6040516102d691906125a7565b61031c61039f366004611cf8565b61082e565b61031c610840565b6102c9610846565b61033c6103c2366004611c9b565b610855565b61031c6108ba565b6102c96108c0565b61033c6103e5366004611a3f565b6108cf565b61031c6103f8366004611a3f565b610915565b6102c9610934565b61031c610948565b61031c61094e565b6102c9610954565b6102c9610963565b610307610972565b610435610998565b6040516102d692919061245c565b6102e7610cef565b6102c9610d4a565b6102c9610d59565b61031c610d68565b610307610471366004611c32565b610d6e565b6102c9610df0565b61033c61048c366004611a3f565b610dff565b61031c61049f366004611c32565b610e45565b61031c610e63565b61033c6104ba366004611bce565b610e69565b61033c6104cd366004611d16565b611038565b61031c6104e0366004611a9f565b61113f565b61033c6104f3366004611c66565b61116a565b61031c610506366004611a3f565b611284565b61033c610519366004611acf565b611296565b6102c9611447565b61033c610534366004611b3d565b611456565b61031c61154a565b61033c61054f366004611a3f565b611550565b6102c9611580565b61031c61158f565b61031c611599565b6016546001600160a01b031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156105fe5780601f106105d3576101008083540402835291602001916105fe565b820191906000526020600020905b8154815290600101906020018083116105e157829003601f168201915b505050505081565b3360008181526014602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061065f90869061249b565b60405180910390a35060015b92915050565b6015545b90565b610680610972565b61069c5760405162461bcd60e51b81526004016102b890612547565b601d80546001600160a01b0319166001600160a01b0392909216919091179055565b600e5481565b60055481565b6106d2610972565b6106ee5760405162461bcd60e51b81526004016102b890612547565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b610718610972565b6107345760405162461bcd60e51b81526004016102b890612547565b6001600160a01b03821661075a5760405162461bcd60e51b81526004016102b890612567565b6000811161077a5760405162461bcd60e51b81526004016102b890612597565b4781111561079a5760405162461bcd60e51b81526004016102b890612557565b6040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156107d0573d6000803e3d6000fd5b50816001600160a01b03167f55100b4746402202e9160e60d295f578f4b06bf4c28788b3ba637daa21c574768260405161080a919061249b565b60405180910390a25050565b6017546001600160a01b031681565b60045460ff1681565b60106020526000908152604090205481565b60065481565b601d546001600160a01b031681565b61085d610972565b8061087257506019546001600160a01b031633145b61088e5760405162461bcd60e51b81526004016102b890612547565b81516108a1906002906020850190611650565b5080516108b5906003906020840190611650565b505050565b600a5481565b601d546001600160a01b031690565b6108d7610972565b6108f35760405162461bcd60e51b81526004016102b890612547565b601980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152601360205260409020545b919050565b60045461010090046001600160a01b031681565b600d5481565b60085481565b6001546001600160a01b031690565b601c546001600160a01b031681565b6001546000906001600160a01b031661098961159e565b6001600160a01b031614905090565b60408051600f80825261020082019092526060916000918391602082016101e08038833901905050905063704b6c0260e01b816000815181106109d757fe5b6001600160e01b03199092166020928302919091019091015280516316c457a560e11b9082906001908110610a0857fe5b6001600160e01b031990921660209283029190910190910152805163d8f06c8360e01b9082906002908110610a3957fe5b6001600160e01b031990921660209283029190910190910152805163734be97760e11b9082906003908110610a6a57fe5b6001600160e01b031990921660209283029190910190910152805163365c81a960e21b9082906004908110610a9b57fe5b6001600160e01b031990921660209283029190910190910152805163e3cded6160e01b9082906005908110610acc57fe5b6001600160e01b031990921660209283029190910190910152805163ee60c93360e01b9082906006908110610afd57fe5b6001600160e01b031990921660209283029190910190910152805163471896d360e01b9082906007908110610b2e57fe5b6001600160e01b0319909216602092830291909101909101528051639fd0506d60e01b9082906008908110610b5f57fe5b6001600160e01b031990921660209283029190910190910152805163cb926cb360e01b9082906009908110610b9057fe5b6001600160e01b0319909216602092830291909101909101528051632f01305160e01b908290600a908110610bc157fe5b6001600160e01b031990921660209283029190910190910152805163e6d7cfb760e01b908290600b908110610bf257fe5b6001600160e01b031990921660209283029190910190910152805163be19421760e01b908290600c908110610c2357fe5b6001600160e01b0319909216602092830291909101909101528051631c1f8aa360e01b908290600d908110610c5457fe5b6001600160e01b0319909216602092830291909101909101528051636afe579560e01b908290600e908110610c8557fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505080610ce66040518060400160405280601b81526020017f4c6f616e546f6b656e53657474696e67734c6f77657241646d696e0000000000815250610e45565b92509250509091565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105fe5780601f106105d3576101008083540402835291602001916105fe565b6018546001600160a01b031681565b601b546001600160a01b031681565b60095481565b60008082604051602001610d82919061240c565b6040516020818303038152906040528051906020012090506000817fd46a704bc285dbd6ff5ad3863506260b1df02812f4f857c8cc852317a6ac64f2604051602001610dcf9291906123e6565b60408051808303601f19018152919052805160209091012054949350505050565b601a546001600160a01b031681565b610e07610972565b610e235760405162461bcd60e51b81526004016102b890612547565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b80516000908290610e5a57506000905061092f565b50506020015190565b60075481565b610e71610972565b80610e8657506019546001600160a01b031633145b610ea25760405162461bcd60e51b81526004016102b890612547565b60045460609061010090046001600160a01b031660005b8451811015610f2c5781858281518110610ecf57fe5b6020026020010151606001906001600160a01b031690816001600160a01b03168152505083610f01576224ea00610f04565b60005b62ffffff16858281518110610f1557fe5b602090810291909101015160e00152600101610eb9565b506016546040516350d713af60e11b81526001600160a01b039091169063a1ae275e90610f5d90879060040161247c565b600060405180830381600087803b158015610f7757600080fd5b505af1158015610f8b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fb39190810190611b9a565b915060005b825181101561103157828181518110610fcd57fe5b602002602001015160106000878481518110610fe557fe5b602002602001015160800151876040516020016110039291906123c0565b60408051601f1981840301815291815281516020928301208352908201929092520160002055600101610fb8565b5050505050565b611040610972565b8061105557506019546001600160a01b031633145b6110715760405162461bcd60e51b81526004016102b890612547565b68056bc75e2d6310000061108b878963ffffffff6115a216565b11156110a95760405162461bcd60e51b81526004016102b890612527565b68056bc75e2d631000006110c3858763ffffffff6115a216565b11156110e15760405162461bcd60e51b81526004016102b890612527565b68056bc75e2d631000008311158015611103575068056bc75e2d631000008211155b61111f5760405162461bcd60e51b81526004016102b890612537565b600596909655600694909455600792909255600855600955600a55600b55565b6001600160a01b03918216600090815260146020908152604080832093909416825291909152205490565b611172610972565b806111875750601b546001600160a01b031633145b6111a35760405162461bcd60e51b81526004016102b890612547565b600080836040516020016111b7919061240c565b604051602081830303815290604052805190602001207fd46a704bc285dbd6ff5ad3863506260b1df02812f4f857c8cc852317a6ac64f26040516020016111ff9291906123e6565b60405160208183030381529060405280519060200120905080549150821515821515141561123f5760405162461bcd60e51b81526004016102b890612577565b8281557f7b39aec601a1c777e911479834ee24b7c3ef8a0f8e74bdf4cf095e6d3e74e74f84841585604051611276939291906124ba565b60405180910390a150505050565b60126020526000908152604090205481565b61129e610972565b806112b357506019546001600160a01b031633145b6112cf5760405162461bcd60e51b81526004016102b890612547565b8281146112ee5760405162461bcd60e51b81526004016102b890612507565b60408051848152602080860282010190915260609084801561131a578160200160208202803883390190505b50905060005b848110156113dd57600086868381811061133657fe5b905060200201602061134b9190810190611a3f565b85858481811061135757fe5b905060200201602061136c9190810190611c14565b60405160200161137d9291906123c0565b6040516020818303038152906040528051906020012060001c905060106000828152602001908152602001600020548383815181106113b857fe5b6020908102919091018101919091526000918252601090526040812055600101611320565b50601654604051637f187d3560e11b81526001600160a01b039091169063fe30fa6a9061140e90849060040161244b565b600060405180830381600087803b15801561142857600080fd5b505af115801561143c573d6000803e3d6000fd5b505050505050505050565b601c546001600160a01b031690565b61145e610972565b8061147357506019546001600160a01b031633145b61148f5760405162461bcd60e51b81526004016102b890612547565b80518251146114b05760405162461bcd60e51b81526004016102b890612587565b60005b825181101561150c578181815181106114c857fe5b6020026020010151601260008584815181106114e057fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020556001016114b3565b507f9bbd2de400810774339120e2f8a2b517ed748595e944529bba8ebabf314d0591828260405161153e929190612426565b60405180910390a15050565b600b5481565b611558610972565b6115745760405162461bcd60e51b81526004016102b890612547565b61157d816115ce565b50565b6019546001600160a01b031681565b65e35fa931a00081565b600681565b3390565b6000828201838110156115c75760405162461bcd60e51b81526004016102b8906124f7565b9392505050565b6001600160a01b0381166115f45760405162461bcd60e51b81526004016102b8906124e7565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061169157805160ff19168380011785556116be565b828001600101855582156116be579182015b828111156116be5782518255916020019190600101906116a3565b506116ca9291506116ce565b5090565b61067591905b808211156116ca57600081556001016116d4565b803561066b816126de565b60008083601f84011261170557600080fd5b5081356001600160401b0381111561171c57600080fd5b60208301915083602082028301111561173457600080fd5b9250929050565b600082601f83011261174c57600080fd5b813561175f61175a826125db565b6125b5565b9150818183526020840193506020810190508385602084028201111561178457600080fd5b60005b838110156117b0578161179a88826116e8565b8452506020928301929190910190600101611787565b5050505092915050565b600082601f8301126117cb57600080fd5b81516117d961175a826125db565b915081818352602084019350602081019050838560208402820111156117fe57600080fd5b60005b838110156117b057816118148882611924565b8452506020928301929190910190600101611801565b600082601f83011261183b57600080fd5b813561184961175a826125db565b915081818352602084019350602081019050838561010084028201111561186f57600080fd5b60005b838110156117b05781611885888261197e565b8452506020909201916101009190910190600101611872565b600082601f8301126118af57600080fd5b81356118bd61175a826125db565b915081818352602084019350602081019050838560208402820111156118e257600080fd5b60005b838110156117b057816118f88882611919565b84525060209283019291909101906001016118e5565b803561066b816126f2565b803561066b816126fb565b805161066b816126fb565b600082601f83011261194057600080fd5b813561194e61175a826125fb565b9150808252602083016020830185838301111561196a57600080fd5b611975838284612664565b50505092915050565b6000610100828403121561199157600080fd5b61199c6101006125b5565b905060006119aa8484611919565b82525060206119bb8484830161190e565b60208301525060406119cf848285016116e8565b60408301525060606119e3848285016116e8565b60608301525060806119f7848285016116e8565b60808301525060a0611a0b84828501611919565b60a08301525060c0611a1f84828501611919565b60c08301525060e0611a3384828501611919565b60e08301525092915050565b600060208284031215611a5157600080fd5b6000611a5d84846116e8565b949350505050565b60008060408385031215611a7857600080fd5b6000611a8485856116e8565b9250506020611a9585828601611919565b9150509250929050565b60008060408385031215611ab257600080fd5b6000611abe85856116e8565b9250506020611a95858286016116e8565b60008060008060408587031215611ae557600080fd5b84356001600160401b03811115611afb57600080fd5b611b07878288016116f3565b945094505060208501356001600160401b03811115611b2557600080fd5b611b31878288016116f3565b95989497509550505050565b60008060408385031215611b5057600080fd5b82356001600160401b03811115611b6657600080fd5b611b728582860161173b565b92505060208301356001600160401b03811115611b8e57600080fd5b611a958582860161189e565b600060208284031215611bac57600080fd5b81516001600160401b03811115611bc257600080fd5b611a5d848285016117ba565b60008060408385031215611be157600080fd5b82356001600160401b03811115611bf757600080fd5b611c038582860161182a565b9250506020611a958582860161190e565b600060208284031215611c2657600080fd5b6000611a5d848461190e565b600060208284031215611c4457600080fd5b81356001600160401b03811115611c5a57600080fd5b611a5d8482850161192f565b60008060408385031215611c7957600080fd5b82356001600160401b03811115611c8f57600080fd5b611c038582860161192f565b60008060408385031215611cae57600080fd5b82356001600160401b03811115611cc457600080fd5b611cd08582860161192f565b92505060208301356001600160401b03811115611cec57600080fd5b611a958582860161192f565b600060208284031215611d0a57600080fd5b6000611a5d8484611919565b600080600080600080600060e0888a031215611d3157600080fd5b6000611d3d8a8a611919565b9750506020611d4e8a828b01611919565b9650506040611d5f8a828b01611919565b9550506060611d708a828b01611919565b9450506080611d818a828b01611919565b93505060a0611d928a828b01611919565b92505060c0611da38a828b01611919565b91505092959891949750929550565b6000611dbe8383611df3565b505060200190565b6000611dbe8383611fbe565b6000611dbe8383611fc7565b6000611dea838361230e565b50506101000190565b611dfc81612635565b82525050565b611dfc611e0e82612635565b61269c565b6000611e1e82612628565b611e28818561262c565b9350611e3383612622565b8060005b83811015611e61578151611e4b8882611db2565b9750611e5683612622565b925050600101611e37565b509495945050505050565b6000611e7782612628565b611e81818561262c565b9350611e8c83612622565b8060005b83811015611e61578151611ea48882611dc6565b9750611eaf83612622565b925050600101611e90565b6000611ec582612628565b611ecf818561262c565b9350611eda83612622565b8060005b83811015611e61578151611ef28882611dd2565b9750611efd83612622565b925050600101611ede565b6000611f1382612628565b611f1d818561262c565b9350611f2883612622565b8060005b83811015611e61578151611f408882611dde565b9750611f4b83612622565b925050600101611f2c565b6000611f6182612628565b611f6b818561262c565b9350611f7683612622565b8060005b83811015611e61578151611f8e8882611dc6565b9750611f9983612622565b925050600101611f7a565b611dfc81612640565b611dfc611fb982612640565b6126a7565b611dfc81610675565b611dfc81612645565b611dfc611fdc82612645565b610675565b6000611fec82612628565b611ff6818561262c565b9350612006818560208601612670565b61200f816126c8565b9093019392505050565b600061202482612628565b61202e818561092f565b935061203e818560208601612670565b9290920192915050565b600061205560268361262c565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b600061209d601b8361262c565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006120d6600e8361262c565b6d0c6deeadce840dad2e6dac2e8c6d60931b815260200192915050565b600061210060328361262c565b7f4c6f616e546f6b656e53657474696e67734c6f77657241646d696e202d2066618152711b1b189858dac81b9bdd08185b1b1bddd95960721b602082015260400192915050565b600061215460158361262c565b740c6eae4ecca40e0c2e4c2dae640e8dede40d0d2ced605b1b815260200192915050565b6000612185600f8361262c565b6e0d8caeccad8e640e8dede40d0d2ced608b1b815260200192915050565b60006121b0600c8361262c565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b60006121d860258361262c565b7f776974686472617720616d6f756e742063616e6e6f74206578636565642062618152646c616e636560d81b602082015260400192915050565b600061221f60188361262c565b7f7265636569766572206164647265737320696e76616c69640000000000000000815260200192915050565b600061225860258361262c565b7f697350617573656420697320616c72656164792073657420746f20746861742081526476616c756560d81b602082015260400192915050565b600061229f60188361262c565b7f6d69736d617463686564206172726179206c656e677468730000000000000000815260200192915050565b60006122d860218361262c565b7f6e6f6e2d7a65726f20776974686472617720616d6f756e7420657870656374658152601960fa1b602082015260400192915050565b80516101008301906123208482611fbe565b5060208201516123336020850182611fa4565b5060408201516123466040850182611df3565b5060608201516123596060850182611df3565b50608082015161236c6080850182611df3565b5060a082015161237f60a0850182611fbe565b5060c082015161239260c0850182611fbe565b5060e08201516123a560e0850182611fbe565b50505050565b611dfc611fdc82610675565b611dfc8161265e565b60006123cc8285611e02565b6014820191506123dc8284611fad565b5060010192915050565b60006123f28285611fd0565b60048201915061240282846123ab565b5060200192915050565b60006115c78284612019565b6020810161066b8284611df3565b604080825281016124378185611e13565b90508181036020830152611a5d8184611f56565b602080825281016115c78184611e6c565b6040808252810161246d8185611eba565b90506115c76020830184611fbe565b602080825281016115c78184611f08565b6020810161066b8284611fa4565b6020810161066b8284611fbe565b602080825281016115c78184611fe1565b606080825281016124cb8186611fe1565b90506124da6020830185611fa4565b611a5d6040830184611fa4565b6020808252810161066b81612048565b6020808252810161066b81612090565b6020808252810161066b816120c9565b6020808252810161066b816120f3565b6020808252810161066b81612147565b6020808252810161066b81612178565b6020808252810161066b816121a3565b6020808252810161066b816121cb565b6020808252810161066b81612212565b6020808252810161066b8161224b565b6020808252810161066b81612292565b6020808252810161066b816122cb565b6020810161066b82846123b7565b6040518181016001600160401b03811182821017156125d357600080fd5b604052919050565b60006001600160401b038211156125f157600080fd5b5060209081020190565b60006001600160401b0382111561261157600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b600061066b82612652565b151590565b6001600160e01b03191690565b6001600160a01b031690565b60ff1690565b82818337506000910152565b60005b8381101561268b578181015183820152602001612673565b838111156123a55750506000910152565b600061066b826126b2565b600061066b826126bd565b600061066b826126d8565b600061066b826126d2565b601f01601f191690565b60f81b90565b60601b90565b6126e781612635565b811461157d57600080fd5b6126e781612640565b6126e78161067556fea365627a7a723158205cd010acf2462f8f882532277109026aa40b6fc5b205ef0e4b08046c17b7a2596c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102a05760003560e01c80638f32d59b11610167578063d97206a4116100ce578063ee60c93311610087578063ee60c93314610526578063ef2b0b3914610539578063f2fde38b14610541578063f851a44014610554578063f8dd4f0e1461055c578063ffa1ad7414610564576102a0565b8063d97206a4146104bf578063dd62ed3e146104d2578063e3cded61146104e5578063e41b07e3146104f8578063e697d2ee1461050b578063e6d7cfb71461051e576102a0565b8063be19421711610120578063be19421714610463578063ca37e66614610476578063cb926cb31461047e578063cfb5192814610491578063d759dbeb146104a4578063d8f06c83146104ac576102a0565b80638f32d59b1461042557806390967de51461042d57806395d89b41146104435780639bda3a981461044b5780639fd0506d14610453578063ba0e43bf1461045b576102a0565b8063330691ac1161020b57806370a08231116101c457806370a08231146103ea578063797bf385146103fd5780637b7933b4146104055780637e37c08c1461040d5780638da5cb5b146104155780638ee6c4e61461041d576102a0565b8063330691ac146103a45780633535f48b146103ac578063471896d3146103b457806356e07d70146103c75780636afe5795146103cf578063704b6c02146103d7576102a0565b80631f68f20a1161025d5780631f68f20a146103465780632d88af4a1461034e5780632f013051146103615780632f6b600d14610374578063313ce5671461037c5780633291c11a14610391576102a0565b806306947a3a146102c157806306fdde03146102df578063095ea7b3146102f457806318160ddd146103145780631c1f8aa3146103295780631d0806ae1461033e575b60405162461bcd60e51b81526004016102b890612517565b60405180910390fd5b6102c961056c565b6040516102d69190612418565b60405180910390f35b6102e761057b565b6040516102d691906124a9565b610307610302366004611a65565b610606565b6040516102d6919061248d565b61031c610671565b6040516102d6919061249b565b61033c610337366004611a3f565b610678565b005b61031c6106be565b61031c6106c4565b61033c61035c366004611a3f565b6106ca565b61033c61036f366004611a65565b610710565b6102c9610816565b610384610825565b6040516102d691906125a7565b61031c61039f366004611cf8565b61082e565b61031c610840565b6102c9610846565b61033c6103c2366004611c9b565b610855565b61031c6108ba565b6102c96108c0565b61033c6103e5366004611a3f565b6108cf565b61031c6103f8366004611a3f565b610915565b6102c9610934565b61031c610948565b61031c61094e565b6102c9610954565b6102c9610963565b610307610972565b610435610998565b6040516102d692919061245c565b6102e7610cef565b6102c9610d4a565b6102c9610d59565b61031c610d68565b610307610471366004611c32565b610d6e565b6102c9610df0565b61033c61048c366004611a3f565b610dff565b61031c61049f366004611c32565b610e45565b61031c610e63565b61033c6104ba366004611bce565b610e69565b61033c6104cd366004611d16565b611038565b61031c6104e0366004611a9f565b61113f565b61033c6104f3366004611c66565b61116a565b61031c610506366004611a3f565b611284565b61033c610519366004611acf565b611296565b6102c9611447565b61033c610534366004611b3d565b611456565b61031c61154a565b61033c61054f366004611a3f565b611550565b6102c9611580565b61031c61158f565b61031c611599565b6016546001600160a01b031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156105fe5780601f106105d3576101008083540402835291602001916105fe565b820191906000526020600020905b8154815290600101906020018083116105e157829003601f168201915b505050505081565b3360008181526014602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061065f90869061249b565b60405180910390a35060015b92915050565b6015545b90565b610680610972565b61069c5760405162461bcd60e51b81526004016102b890612547565b601d80546001600160a01b0319166001600160a01b0392909216919091179055565b600e5481565b60055481565b6106d2610972565b6106ee5760405162461bcd60e51b81526004016102b890612547565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b610718610972565b6107345760405162461bcd60e51b81526004016102b890612547565b6001600160a01b03821661075a5760405162461bcd60e51b81526004016102b890612567565b6000811161077a5760405162461bcd60e51b81526004016102b890612597565b4781111561079a5760405162461bcd60e51b81526004016102b890612557565b6040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156107d0573d6000803e3d6000fd5b50816001600160a01b03167f55100b4746402202e9160e60d295f578f4b06bf4c28788b3ba637daa21c574768260405161080a919061249b565b60405180910390a25050565b6017546001600160a01b031681565b60045460ff1681565b60106020526000908152604090205481565b60065481565b601d546001600160a01b031681565b61085d610972565b8061087257506019546001600160a01b031633145b61088e5760405162461bcd60e51b81526004016102b890612547565b81516108a1906002906020850190611650565b5080516108b5906003906020840190611650565b505050565b600a5481565b601d546001600160a01b031690565b6108d7610972565b6108f35760405162461bcd60e51b81526004016102b890612547565b601980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152601360205260409020545b919050565b60045461010090046001600160a01b031681565b600d5481565b60085481565b6001546001600160a01b031690565b601c546001600160a01b031681565b6001546000906001600160a01b031661098961159e565b6001600160a01b031614905090565b60408051600f80825261020082019092526060916000918391602082016101e08038833901905050905063704b6c0260e01b816000815181106109d757fe5b6001600160e01b03199092166020928302919091019091015280516316c457a560e11b9082906001908110610a0857fe5b6001600160e01b031990921660209283029190910190910152805163d8f06c8360e01b9082906002908110610a3957fe5b6001600160e01b031990921660209283029190910190910152805163734be97760e11b9082906003908110610a6a57fe5b6001600160e01b031990921660209283029190910190910152805163365c81a960e21b9082906004908110610a9b57fe5b6001600160e01b031990921660209283029190910190910152805163e3cded6160e01b9082906005908110610acc57fe5b6001600160e01b031990921660209283029190910190910152805163ee60c93360e01b9082906006908110610afd57fe5b6001600160e01b031990921660209283029190910190910152805163471896d360e01b9082906007908110610b2e57fe5b6001600160e01b0319909216602092830291909101909101528051639fd0506d60e01b9082906008908110610b5f57fe5b6001600160e01b031990921660209283029190910190910152805163cb926cb360e01b9082906009908110610b9057fe5b6001600160e01b0319909216602092830291909101909101528051632f01305160e01b908290600a908110610bc157fe5b6001600160e01b031990921660209283029190910190910152805163e6d7cfb760e01b908290600b908110610bf257fe5b6001600160e01b031990921660209283029190910190910152805163be19421760e01b908290600c908110610c2357fe5b6001600160e01b0319909216602092830291909101909101528051631c1f8aa360e01b908290600d908110610c5457fe5b6001600160e01b0319909216602092830291909101909101528051636afe579560e01b908290600e908110610c8557fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505080610ce66040518060400160405280601b81526020017f4c6f616e546f6b656e53657474696e67734c6f77657241646d696e0000000000815250610e45565b92509250509091565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105fe5780601f106105d3576101008083540402835291602001916105fe565b6018546001600160a01b031681565b601b546001600160a01b031681565b60095481565b60008082604051602001610d82919061240c565b6040516020818303038152906040528051906020012090506000817fd46a704bc285dbd6ff5ad3863506260b1df02812f4f857c8cc852317a6ac64f2604051602001610dcf9291906123e6565b60408051808303601f19018152919052805160209091012054949350505050565b601a546001600160a01b031681565b610e07610972565b610e235760405162461bcd60e51b81526004016102b890612547565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b80516000908290610e5a57506000905061092f565b50506020015190565b60075481565b610e71610972565b80610e8657506019546001600160a01b031633145b610ea25760405162461bcd60e51b81526004016102b890612547565b60045460609061010090046001600160a01b031660005b8451811015610f2c5781858281518110610ecf57fe5b6020026020010151606001906001600160a01b031690816001600160a01b03168152505083610f01576224ea00610f04565b60005b62ffffff16858281518110610f1557fe5b602090810291909101015160e00152600101610eb9565b506016546040516350d713af60e11b81526001600160a01b039091169063a1ae275e90610f5d90879060040161247c565b600060405180830381600087803b158015610f7757600080fd5b505af1158015610f8b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fb39190810190611b9a565b915060005b825181101561103157828181518110610fcd57fe5b602002602001015160106000878481518110610fe557fe5b602002602001015160800151876040516020016110039291906123c0565b60408051601f1981840301815291815281516020928301208352908201929092520160002055600101610fb8565b5050505050565b611040610972565b8061105557506019546001600160a01b031633145b6110715760405162461bcd60e51b81526004016102b890612547565b68056bc75e2d6310000061108b878963ffffffff6115a216565b11156110a95760405162461bcd60e51b81526004016102b890612527565b68056bc75e2d631000006110c3858763ffffffff6115a216565b11156110e15760405162461bcd60e51b81526004016102b890612527565b68056bc75e2d631000008311158015611103575068056bc75e2d631000008211155b61111f5760405162461bcd60e51b81526004016102b890612537565b600596909655600694909455600792909255600855600955600a55600b55565b6001600160a01b03918216600090815260146020908152604080832093909416825291909152205490565b611172610972565b806111875750601b546001600160a01b031633145b6111a35760405162461bcd60e51b81526004016102b890612547565b600080836040516020016111b7919061240c565b604051602081830303815290604052805190602001207fd46a704bc285dbd6ff5ad3863506260b1df02812f4f857c8cc852317a6ac64f26040516020016111ff9291906123e6565b60405160208183030381529060405280519060200120905080549150821515821515141561123f5760405162461bcd60e51b81526004016102b890612577565b8281557f7b39aec601a1c777e911479834ee24b7c3ef8a0f8e74bdf4cf095e6d3e74e74f84841585604051611276939291906124ba565b60405180910390a150505050565b60126020526000908152604090205481565b61129e610972565b806112b357506019546001600160a01b031633145b6112cf5760405162461bcd60e51b81526004016102b890612547565b8281146112ee5760405162461bcd60e51b81526004016102b890612507565b60408051848152602080860282010190915260609084801561131a578160200160208202803883390190505b50905060005b848110156113dd57600086868381811061133657fe5b905060200201602061134b9190810190611a3f565b85858481811061135757fe5b905060200201602061136c9190810190611c14565b60405160200161137d9291906123c0565b6040516020818303038152906040528051906020012060001c905060106000828152602001908152602001600020548383815181106113b857fe5b6020908102919091018101919091526000918252601090526040812055600101611320565b50601654604051637f187d3560e11b81526001600160a01b039091169063fe30fa6a9061140e90849060040161244b565b600060405180830381600087803b15801561142857600080fd5b505af115801561143c573d6000803e3d6000fd5b505050505050505050565b601c546001600160a01b031690565b61145e610972565b8061147357506019546001600160a01b031633145b61148f5760405162461bcd60e51b81526004016102b890612547565b80518251146114b05760405162461bcd60e51b81526004016102b890612587565b60005b825181101561150c578181815181106114c857fe5b6020026020010151601260008584815181106114e057fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020556001016114b3565b507f9bbd2de400810774339120e2f8a2b517ed748595e944529bba8ebabf314d0591828260405161153e929190612426565b60405180910390a15050565b600b5481565b611558610972565b6115745760405162461bcd60e51b81526004016102b890612547565b61157d816115ce565b50565b6019546001600160a01b031681565b65e35fa931a00081565b600681565b3390565b6000828201838110156115c75760405162461bcd60e51b81526004016102b8906124f7565b9392505050565b6001600160a01b0381166115f45760405162461bcd60e51b81526004016102b8906124e7565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061169157805160ff19168380011785556116be565b828001600101855582156116be579182015b828111156116be5782518255916020019190600101906116a3565b506116ca9291506116ce565b5090565b61067591905b808211156116ca57600081556001016116d4565b803561066b816126de565b60008083601f84011261170557600080fd5b5081356001600160401b0381111561171c57600080fd5b60208301915083602082028301111561173457600080fd5b9250929050565b600082601f83011261174c57600080fd5b813561175f61175a826125db565b6125b5565b9150818183526020840193506020810190508385602084028201111561178457600080fd5b60005b838110156117b0578161179a88826116e8565b8452506020928301929190910190600101611787565b5050505092915050565b600082601f8301126117cb57600080fd5b81516117d961175a826125db565b915081818352602084019350602081019050838560208402820111156117fe57600080fd5b60005b838110156117b057816118148882611924565b8452506020928301929190910190600101611801565b600082601f83011261183b57600080fd5b813561184961175a826125db565b915081818352602084019350602081019050838561010084028201111561186f57600080fd5b60005b838110156117b05781611885888261197e565b8452506020909201916101009190910190600101611872565b600082601f8301126118af57600080fd5b81356118bd61175a826125db565b915081818352602084019350602081019050838560208402820111156118e257600080fd5b60005b838110156117b057816118f88882611919565b84525060209283019291909101906001016118e5565b803561066b816126f2565b803561066b816126fb565b805161066b816126fb565b600082601f83011261194057600080fd5b813561194e61175a826125fb565b9150808252602083016020830185838301111561196a57600080fd5b611975838284612664565b50505092915050565b6000610100828403121561199157600080fd5b61199c6101006125b5565b905060006119aa8484611919565b82525060206119bb8484830161190e565b60208301525060406119cf848285016116e8565b60408301525060606119e3848285016116e8565b60608301525060806119f7848285016116e8565b60808301525060a0611a0b84828501611919565b60a08301525060c0611a1f84828501611919565b60c08301525060e0611a3384828501611919565b60e08301525092915050565b600060208284031215611a5157600080fd5b6000611a5d84846116e8565b949350505050565b60008060408385031215611a7857600080fd5b6000611a8485856116e8565b9250506020611a9585828601611919565b9150509250929050565b60008060408385031215611ab257600080fd5b6000611abe85856116e8565b9250506020611a95858286016116e8565b60008060008060408587031215611ae557600080fd5b84356001600160401b03811115611afb57600080fd5b611b07878288016116f3565b945094505060208501356001600160401b03811115611b2557600080fd5b611b31878288016116f3565b95989497509550505050565b60008060408385031215611b5057600080fd5b82356001600160401b03811115611b6657600080fd5b611b728582860161173b565b92505060208301356001600160401b03811115611b8e57600080fd5b611a958582860161189e565b600060208284031215611bac57600080fd5b81516001600160401b03811115611bc257600080fd5b611a5d848285016117ba565b60008060408385031215611be157600080fd5b82356001600160401b03811115611bf757600080fd5b611c038582860161182a565b9250506020611a958582860161190e565b600060208284031215611c2657600080fd5b6000611a5d848461190e565b600060208284031215611c4457600080fd5b81356001600160401b03811115611c5a57600080fd5b611a5d8482850161192f565b60008060408385031215611c7957600080fd5b82356001600160401b03811115611c8f57600080fd5b611c038582860161192f565b60008060408385031215611cae57600080fd5b82356001600160401b03811115611cc457600080fd5b611cd08582860161192f565b92505060208301356001600160401b03811115611cec57600080fd5b611a958582860161192f565b600060208284031215611d0a57600080fd5b6000611a5d8484611919565b600080600080600080600060e0888a031215611d3157600080fd5b6000611d3d8a8a611919565b9750506020611d4e8a828b01611919565b9650506040611d5f8a828b01611919565b9550506060611d708a828b01611919565b9450506080611d818a828b01611919565b93505060a0611d928a828b01611919565b92505060c0611da38a828b01611919565b91505092959891949750929550565b6000611dbe8383611df3565b505060200190565b6000611dbe8383611fbe565b6000611dbe8383611fc7565b6000611dea838361230e565b50506101000190565b611dfc81612635565b82525050565b611dfc611e0e82612635565b61269c565b6000611e1e82612628565b611e28818561262c565b9350611e3383612622565b8060005b83811015611e61578151611e4b8882611db2565b9750611e5683612622565b925050600101611e37565b509495945050505050565b6000611e7782612628565b611e81818561262c565b9350611e8c83612622565b8060005b83811015611e61578151611ea48882611dc6565b9750611eaf83612622565b925050600101611e90565b6000611ec582612628565b611ecf818561262c565b9350611eda83612622565b8060005b83811015611e61578151611ef28882611dd2565b9750611efd83612622565b925050600101611ede565b6000611f1382612628565b611f1d818561262c565b9350611f2883612622565b8060005b83811015611e61578151611f408882611dde565b9750611f4b83612622565b925050600101611f2c565b6000611f6182612628565b611f6b818561262c565b9350611f7683612622565b8060005b83811015611e61578151611f8e8882611dc6565b9750611f9983612622565b925050600101611f7a565b611dfc81612640565b611dfc611fb982612640565b6126a7565b611dfc81610675565b611dfc81612645565b611dfc611fdc82612645565b610675565b6000611fec82612628565b611ff6818561262c565b9350612006818560208601612670565b61200f816126c8565b9093019392505050565b600061202482612628565b61202e818561092f565b935061203e818560208601612670565b9290920192915050565b600061205560268361262c565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b600061209d601b8361262c565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006120d6600e8361262c565b6d0c6deeadce840dad2e6dac2e8c6d60931b815260200192915050565b600061210060328361262c565b7f4c6f616e546f6b656e53657474696e67734c6f77657241646d696e202d2066618152711b1b189858dac81b9bdd08185b1b1bddd95960721b602082015260400192915050565b600061215460158361262c565b740c6eae4ecca40e0c2e4c2dae640e8dede40d0d2ced605b1b815260200192915050565b6000612185600f8361262c565b6e0d8caeccad8e640e8dede40d0d2ced608b1b815260200192915050565b60006121b0600c8361262c565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b60006121d860258361262c565b7f776974686472617720616d6f756e742063616e6e6f74206578636565642062618152646c616e636560d81b602082015260400192915050565b600061221f60188361262c565b7f7265636569766572206164647265737320696e76616c69640000000000000000815260200192915050565b600061225860258361262c565b7f697350617573656420697320616c72656164792073657420746f20746861742081526476616c756560d81b602082015260400192915050565b600061229f60188361262c565b7f6d69736d617463686564206172726179206c656e677468730000000000000000815260200192915050565b60006122d860218361262c565b7f6e6f6e2d7a65726f20776974686472617720616d6f756e7420657870656374658152601960fa1b602082015260400192915050565b80516101008301906123208482611fbe565b5060208201516123336020850182611fa4565b5060408201516123466040850182611df3565b5060608201516123596060850182611df3565b50608082015161236c6080850182611df3565b5060a082015161237f60a0850182611fbe565b5060c082015161239260c0850182611fbe565b5060e08201516123a560e0850182611fbe565b50505050565b611dfc611fdc82610675565b611dfc8161265e565b60006123cc8285611e02565b6014820191506123dc8284611fad565b5060010192915050565b60006123f28285611fd0565b60048201915061240282846123ab565b5060200192915050565b60006115c78284612019565b6020810161066b8284611df3565b604080825281016124378185611e13565b90508181036020830152611a5d8184611f56565b602080825281016115c78184611e6c565b6040808252810161246d8185611eba565b90506115c76020830184611fbe565b602080825281016115c78184611f08565b6020810161066b8284611fa4565b6020810161066b8284611fbe565b602080825281016115c78184611fe1565b606080825281016124cb8186611fe1565b90506124da6020830185611fa4565b611a5d6040830184611fa4565b6020808252810161066b81612048565b6020808252810161066b81612090565b6020808252810161066b816120c9565b6020808252810161066b816120f3565b6020808252810161066b81612147565b6020808252810161066b81612178565b6020808252810161066b816121a3565b6020808252810161066b816121cb565b6020808252810161066b81612212565b6020808252810161066b8161224b565b6020808252810161066b81612292565b6020808252810161066b816122cb565b6020810161066b82846123b7565b6040518181016001600160401b03811182821017156125d357600080fd5b604052919050565b60006001600160401b038211156125f157600080fd5b5060209081020190565b60006001600160401b0382111561261157600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b600061066b82612652565b151590565b6001600160e01b03191690565b6001600160a01b031690565b60ff1690565b82818337506000910152565b60005b8381101561268b578181015183820152602001612673565b838111156123a55750506000910152565b600061066b826126b2565b600061066b826126bd565b600061066b826126d8565b600061066b826126d2565b601f01601f191690565b60f81b90565b60601b90565b6126e781612635565b811461157d57600080fd5b6126e781612640565b6126e78161067556fea365627a7a723158205cd010acf2462f8f882532277109026aa40b6fc5b205ef0e4b08046c17b7a2596c6578706572696d656e74616cf564736f6c63430005110040",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "params": {
          "_owner": "The account owner of the iTokens.",
          "_spender": "The account allowed to send the iTokens."
        },
        "return": "The number of iTokens an account is allowing the spender  to send on its behalf."
      },
      "approve(address,uint256)": {
        "params": {
          "_spender": "The account address that will be able to spend the tokens.",
          "_value": "The amount of tokens allowed to spend."
        }
      },
      "balanceOf(address)": {
        "params": {
          "_owner": "The account owner of the iTokens."
        },
        "return": "The number of iTokens an account owns."
      },
      "changeLoanTokenNameAndSymbol(string,string)": {
        "params": {
          "_name": "The new name of the loan token.",
          "_symbol": "The new symbol of the loan token."
        }
      },
      "checkPause(string)": {
        "details": "Used to read externally from the smart contract to see if a  function is paused.",
        "params": {
          "funcId": "The function ID, the selector."
        },
        "return": "isPaused Whether the function is paused: true or false."
      },
      "disableLoanParams(address[],bool[])": {
        "params": {
          "collateralTokens": "The array of collateral tokens.",
          "isTorqueLoans": "Whether the loan is a torque loan."
        }
      },
      "getLiquidityMiningAddress()": {
        "return": "liquidityMiningAddress"
      },
      "getListFunctionSignatures()": {
        "details": "This function will return the list of function signature in this contract that are available for public call Then this function will be called by LoanTokenLogicBeacon, and the function signatures will be registred in LoanTokenLogicBeacon.To save the gas we can just directly return the list of function signature from this pure function. The other workaround (fancy way) is we can create a storage for the list of the function signature, and then we can store each function signature to that storage from the constructor. Then, in this function we just need to return that storage variable.",
        "return": "The list of function signatures (bytes4[])"
      },
      "getStakingContractAddress()": {
        "return": "stakingContractAddress"
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "setAdmin(address)": {
        "params": {
          "_admin": "The address of the account to grant admin permissions."
        }
      },
      "setDemandCurve(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "These params should be percentages represented  like so: 5% = 5000000000000000000 /// 18 digits precision. rateMultiplier + baseRate can't exceed 100%     * To maintain a healthy credit score, it's important to keep your credit utilization rate (CUR) low (_lowUtilBaseRate). In general you don't want your CUR to exceed 30%, but increasingly financial experts are recommending that you don't want to go above 10% if you really want an excellent credit score.     * Interest rates tend to cluster around the kink level of a kinked interest rate model. More info at https://arxiv.org/pdf/2006.13922.pdf and https://compound.finance/governance/proposals/12",
        "params": {
          "_baseRate": "The interest rate.",
          "_kinkLevel": "The level that interest rates cluster on kinked model.",
          "_lowUtilBaseRate": "The credit utilization rate (CUR) low value.",
          "_lowUtilRateMultiplier": "The precision multiplier for low util base rate.",
          "_maxScaleRate": "The maximum rate of the scale.",
          "_rateMultiplier": "The precision multiplier for base rate.",
          "_targetLevel": "The target level."
        }
      },
      "setLiquidityMiningAddress(address)": {
        "params": {
          "LMAddress": "the address of the liquidity mining contract"
        }
      },
      "setPauser(address)": {
        "params": {
          "_pauser": "The address of the account to grant pause permissions."
        }
      },
      "setStakingContractAddress(address)": {
        "params": {
          "_stakingContractAddress": "the address of the staking contract"
        }
      },
      "setTransactionLimits(address[],uint256[])": {
        "params": {
          "addresses": "The token addresses.",
          "limits": "The limit denominated in the currency of the token address."
        }
      },
      "setupLoanParams((bytes32,bool,address,address,address,uint256,uint256,uint256)[],bool)": {
        "params": {
          "areTorqueLoans": "Whether the loan is a torque loan.",
          "loanParamsList": "The array of loan parameters."
        }
      },
      "toggleFunctionPause(string,bool)": {
        "details": "Combining the hash of \"iToken_FunctionPause\" string and a function  selector gets a slot to write a flag for pause state.",
        "params": {
          "funcId": "The ID of a function, the selector.",
          "isPaused": "true/false value of the flag."
        }
      },
      "totalSupply()": {
        "return": "The total number of iTokens in existence as of now."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawRBTCTo(address,uint256)": {
        "params": {
          "_amount": "The amount of rBTC to be transferred.",
          "_receiverAddress": "The address where the rBTC has to be transferred."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "allowance(address,address)": {
        "notice": "Get the amount of iTokens allowed to be spent by a  given account on behalf of the owner."
      },
      "approve(address,uint256)": {
        "notice": "Set an amount as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "notice": "Get the amount of iTokens owned by an account."
      },
      "changeLoanTokenNameAndSymbol(string,string)": {
        "notice": "Update the loan token parameters."
      },
      "checkPause(string)": {
        "notice": "Check whether a function is paused."
      },
      "disableLoanParams(address[],bool[])": {
        "notice": "Disable loan token parameters."
      },
      "getLiquidityMiningAddress()": {
        "notice": "We need separate getter for newly added storage variableGetter for liquidityMiningAddress"
      },
      "getListFunctionSignatures()": {
        "notice": "This function is MANDATORY, which will be called by LoanTokenLogicBeacon and be registered. Every new public function, the signature needs to be included in this function."
      },
      "getStakingContractAddress()": {
        "notice": "We need separate getter for newly added storage variableGetter for stakingContractAddress"
      },
      "setAdmin(address)": {
        "notice": "Set admin account."
      },
      "setDemandCurve(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Set loan token parameters about the demand curve."
      },
      "setLiquidityMiningAddress(address)": {
        "notice": "sets the liquidity mining contract address"
      },
      "setPauser(address)": {
        "notice": "Set pauser account."
      },
      "setStakingContractAddress(address)": {
        "notice": "sets the staking contract address"
      },
      "setTransactionLimits(address[],uint256[])": {
        "notice": "Set the transaction limit per token address."
      },
      "setupLoanParams((bytes32,bool,address,address,address,uint256,uint256,uint256)[],bool)": {
        "notice": "Set loan token parameters."
      },
      "toggleFunctionPause(string,bool)": {
        "notice": "Set the pause flag for a function to true or false."
      },
      "totalSupply()": {
        "notice": "Get the total supply of iTokens."
      },
      "withdrawRBTCTo(address,uint256)": {
        "notice": "Withdraws RBTC from the contract by Multisig."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54500,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "reentrancyLock",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 54316,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 483,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 485,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 487,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "decimals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 489,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "loanTokenAddress",
        "offset": 1,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 491,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "baseRate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 493,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "rateMultiplier",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 495,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "lowUtilBaseRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 497,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "lowUtilRateMultiplier",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 499,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "targetLevel",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 501,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "kinkLevel",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 503,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "maxScaleRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 505,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "_flTotalAssetSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 507,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "checkpointSupply",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 509,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "initialPrice",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 511,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "lastSettleTime_",
        "offset": 0,
        "slot": "15",
        "type": "t_uint88"
      },
      {
        "astId": 515,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "loanParamsIds",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 519,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "checkpointPrices_",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 523,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "transactionLimit",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 236,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "balances",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 242,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "allowed",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 244,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "totalSupply_",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 3991,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "sovrynContractAddress",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 3993,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "wrbtcTokenAddress",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 3995,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "target_",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 3997,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "admin",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      },
      {
        "astId": 3999,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "earlyAccessToken",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 4001,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "pauser",
        "offset": 0,
        "slot": "27",
        "type": "t_address"
      },
      {
        "astId": 4003,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "liquidityMiningAddress",
        "offset": 0,
        "slot": "28",
        "type": "t_address"
      },
      {
        "astId": 4005,
        "contract": "contracts/connectors/loantoken/modules/shared/LoanTokenSettingsLowerAdmin.sol:LoanTokenSettingsLowerAdmin",
        "label": "stakingContractAddress",
        "offset": 0,
        "slot": "29",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint88": {
        "encoding": "inplace",
        "label": "uint88",
        "numberOfBytes": "11"
      }
    }
  }
}