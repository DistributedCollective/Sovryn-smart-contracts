{
  "address": "0xE4fD0AAe96eA6C06d74CfDaf57C74Fc796a4accC",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeRebatePercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basisPoint",
          "type": "uint256"
        }
      ],
      "name": "EarnReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeRebatePercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basisPoint",
          "type": "uint256"
        }
      ],
      "name": "EarnRewardFail",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destAmount",
          "type": "uint256"
        }
      ],
      "name": "ExternalSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destAmount",
          "type": "uint256"
        }
      ],
      "name": "LoanSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayBorrowingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayLendingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayTradingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevModuleContractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newModuleContractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "module",
          "type": "bytes32"
        }
      ],
      "name": "ProtocolModuleContractReplaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VaultDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VaultWithdraw",
      "type": "event"
    },
    {
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "affiliateFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "affiliateRewardsHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "affiliateTradingTokenFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "affiliatesReferrerBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "affiliatesUserReferrer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowerNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "borrowerOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLoanTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLoanTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationTimestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "borrowingFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowingFeeTokensHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowingFeeTokensPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sourceTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        }
      ],
      "name": "checkPriceDivergence",
      "outputs": [],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegatedManagers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeRebatePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feesController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sourceTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "getSwapExpectedReturn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lenderInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principalTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "owedPerDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "owedTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paidTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedTimestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "lenderOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLoanTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLoanTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationTimestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lendingFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lendingFeeTokensHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lendingFeeTokensPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "liquidationIncentivePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "loanInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "owedPerDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedTimestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "loanParams",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "loanToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minInitialMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maintenanceMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLoanTerm",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loanPoolToUnderlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "loanParamsId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "pendingTradesId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lockedSOVAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "logicTargets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxDisagreement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxSwapSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minReferralsToPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "priceFeeds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolTokenHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rolloverBaseReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rolloverFlexFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sourceBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sovTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sovrynSwapContractRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "specialRebates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "returnToSender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sourceTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredDestTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "swapExternal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "destTokenAmountReceived",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sourceTokenAmountUsed",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "swapsImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tradingFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tradingFeeTokensHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tradingFeeTokensPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "underlyingToLoanPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userNotFirstTradeFlag",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "wrbtcToken",
      "outputs": [
        {
          "internalType": "contract IWrbtcERC20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x762ad255a70888c2093f6341fb29b007835e44b1a26c5b7a75513774d1df3f88",
  "receipt": {
    "to": null,
    "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
    "contractAddress": "0xE4fD0AAe96eA6C06d74CfDaf57C74Fc796a4accC",
    "transactionIndex": 0,
    "gasUsed": "3650056",
    "logsBloom": "0x
    "blockHash": "0xa9d1b05ff5e816e3a2e5157704bb393d28451e5b9322e211f5f779e9e51645a4",
    "transactionHash": "0x762ad255a70888c2093f6341fb29b007835e44b1a26c5b7a75513774d1df3f88",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4578765,
        "transactionHash": "0x762ad255a70888c2093f6341fb29b007835e44b1a26c5b7a75513774d1df3f88",
        "address": "0xE4fD0AAe96eA6C06d74CfDaf57C74Fc796a4accC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000013be55487d37fe3c66ee7305e1e9c1ac85de75ae"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa9d1b05ff5e816e3a2e5157704bb393d28451e5b9322e211f5f779e9e51645a4"
      }
    ],
    "blockNumber": 4578765,
    "cumulativeGasUsed": "3650056",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9310031b42d2950fea7a6220c73f2cc4",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRebatePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"}],\"name\":\"EarnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRebatePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"}],\"name\":\"EarnRewardFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"}],\"name\":\"ExternalSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"}],\"name\":\"LoanSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayBorrowingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayLendingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayTradingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevModuleContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newModuleContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"module\",\"type\":\"bytes32\"}],\"name\":\"ProtocolModuleContractReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VaultDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VaultWithdraw\",\"type\":\"event\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateRewardsHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateTradingTokenFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliatesReferrerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliatesUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowerNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"borrowerOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"checkPriceDivergence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRebatePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceTokenAmount\",\"type\":\"uint256\"}],\"name\":\"getSwapExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lenderInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principalTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lenderOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationIncentivePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owedPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanParams\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintenanceMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loanPoolToUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"loanParamsId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pendingTradesId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedSOVAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"logicTargets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDisagreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSwapSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minReferralsToPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rolloverBaseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rolloverFlexFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sourceBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sovTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sovrynSwapContractRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"specialRebates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"returnToSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredDestTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"swapExternal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"destTokenAmountReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceTokenAmountUsed\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapsImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underlyingToLoanPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNotFirstTradeFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wrbtcToken\",\"outputs\":[{\"internalType\":\"contract IWrbtcERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"checkPriceDivergence(address,address,uint256,uint256)\":{\"params\":{\"destToken\":\"The address of the destiny token instance.\",\"minReturn\":\"The amount (max slippage) that will be compared to the swapsExpectedReturn.     \",\"sourceToken\":\"The address of the source token instance.\",\"sourceTokenAmount\":\"The amount of source tokens.\"}},\"getSwapExpectedReturn(address,address,uint256)\":{\"details\":\"External wrapper that calls SwapsUser::_swapsExpectedReturn\",\"params\":{\"destToken\":\"The address of the destiny token instance.\",\"sourceToken\":\"The address of the source token instance.\",\"sourceTokenAmount\":\"The amount of source tokens.\"},\"return\":\"The expected return value.\"},\"initialize(address)\":{\"params\":{\"target\":\"The address of the target contract.\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"swapExternal(address,address,address,address,uint256,uint256,uint256,bytes)\":{\"details\":\"External wrapper that calls SwapsUser::_swapsCall after turning potential incoming rBTC into wrBTC tokens.\",\"params\":{\"destToken\":\"The address of the destiny token instance.\",\"minReturn\":\"Minimum amount (position size) in the collateral tokens.\",\"receiver\":\"The address of the recipient account.\",\"requiredDestTokenAmount\":\"The amount of required destiny tokens.\",\"returnToSender\":\"The address of the sender account.\",\"sourceToken\":\"The address of the source token instance.\",\"sourceTokenAmount\":\"The amount of source tokens.\",\"swapData\":\"Additional swap data (not in use yet).\"},\"return\":\"destTokenAmountReceived The amount of destiny tokens sent.sourceTokenAmountUsed The amount of source tokens spent.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Swaps External contract.\"},\"userdoc\":{\"methods\":{\"checkPriceDivergence(address,address,uint256,uint256)\":{\"notice\":\"Check the slippage based on the swapExpectedReturn.\"},\"constructor\":\"Empty public constructor.\",\"getSwapExpectedReturn(address,address,uint256)\":{\"notice\":\"Get the swap expected return value.\"},\"initialize(address)\":{\"notice\":\"Set function selectors on target contract.\"},\"swapExternal(address,address,address,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Perform a swap w/ tokens or rBTC as source currency.\"}},\"notice\":\"This contract code comes from bZx. bZx is a protocol for tokenized margin trading and lending https://bzx.network similar to the dYdX protocol. * This contract contains functions to calculate and execute swaps.\"}},\"settings\":{\"compilationTarget\":{\"contracts/modules/SwapsExternal.sol\":\"SwapsExternal\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/connectors/loantoken/lib/MarginTradeStructHelpers.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nlibrary MarginTradeStructHelpers {\\n    struct SentAddresses {\\n        address lender;\\n        address borrower;\\n        address receiver;\\n        address manager;\\n    }\\n\\n    struct SentAmounts {\\n        uint256 interestRate;\\n        uint256 newPrincipal;\\n        uint256 interestInitialAmount;\\n        uint256 loanTokenSent;\\n        uint256 collateralTokenSent;\\n        uint256 minEntryPrice;\\n        uint256 loanToCollateralSwapRate;\\n        uint256 interestDuration;\\n        uint256 entryLeverage;\\n    }\\n}\\n\",\"keccak256\":\"0xf0612e2c0d13604a67c3d55efe88810c089f0b84ca63bd3ce82c1e09b0938973\"},\"contracts/core/Objects.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./objects/LoanStruct.sol\\\";\\nimport \\\"./objects/LoanParamsStruct.sol\\\";\\nimport \\\"./objects/OrderStruct.sol\\\";\\nimport \\\"./objects/LenderInterestStruct.sol\\\";\\nimport \\\"./objects/LoanInterestStruct.sol\\\";\\n\\n/**\\n * @title Objects contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract inherints and aggregates several structures needed to handle\\n * loans on the protocol.\\n * */\\ncontract Objects is\\n    LoanStruct,\\n    LoanParamsStruct,\\n    OrderStruct,\\n    LenderInterestStruct,\\n    LoanInterestStruct\\n{\\n\\n}\\n\",\"keccak256\":\"0xa30b8887af813997ebb480f0aa296245f9f3bd728382060059aa087cd9ee332c\"},\"contracts/core/State.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./Objects.sol\\\";\\nimport \\\"../mixins/EnumerableAddressSet.sol\\\";\\nimport \\\"../mixins/EnumerableBytes32Set.sol\\\";\\nimport \\\"../openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"../openzeppelin/Ownable.sol\\\";\\nimport \\\"../openzeppelin/SafeMath.sol\\\";\\nimport \\\"../interfaces/IWrbtcERC20.sol\\\";\\nimport \\\"../reentrancy/SharedReentrancyGuard.sol\\\";\\n\\n/**\\n * @title State contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage values of the Protocol.\\n * */\\ncontract State is Objects, ReentrancyGuard, SharedReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n    using EnumerableAddressSet for EnumerableAddressSet.AddressSet; // enumerable map of addresses\\n    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set; // enumerable map of bytes32 or addresses\\n\\n    /// Handles asset reference price lookups.\\n    address public priceFeeds;\\n\\n    /// Handles asset swaps using dex liquidity.\\n    address public swapsImpl;\\n\\n    /// Contract registry address of the Sovryn swap network.\\n    address public sovrynSwapContractRegistryAddress;\\n\\n    /// Implementations of protocol functions.\\n    mapping(bytes4 => address) public logicTargets;\\n\\n    /// Loans: loanId => Loan\\n    mapping(bytes32 => Loan) public loans;\\n\\n    /// Loan parameters: loanParamsId => LoanParams\\n    mapping(bytes32 => LoanParams) public loanParams;\\n\\n    /// lender => orderParamsId => Order\\n    mapping(address => mapping(bytes32 => Order)) public lenderOrders;\\n\\n    /// borrower => orderParamsId => Order\\n    mapping(address => mapping(bytes32 => Order)) public borrowerOrders;\\n\\n    /// loanId => delegated => approved\\n    mapping(bytes32 => mapping(address => bool)) public delegatedManagers;\\n\\n    /**\\n     *** Interest ***\\n     **/\\n\\n    /// lender => loanToken => LenderInterest object\\n    mapping(address => mapping(address => LenderInterest)) public lenderInterest;\\n\\n    /// loanId => LoanInterest object\\n    mapping(bytes32 => LoanInterest) public loanInterest;\\n\\n    /**\\n     *** Internals ***\\n     **/\\n\\n    /// Implementations set.\\n    EnumerableBytes32Set.Bytes32Set internal logicTargetsSet;\\n\\n    /// Active loans set.\\n    EnumerableBytes32Set.Bytes32Set internal activeLoansSet;\\n\\n    /// Lender loans set.\\n    mapping(address => EnumerableBytes32Set.Bytes32Set) internal lenderLoanSets;\\n\\n    /// Borrow loans set.\\n    mapping(address => EnumerableBytes32Set.Bytes32Set) internal borrowerLoanSets;\\n\\n    /// User loan params set.\\n    mapping(address => EnumerableBytes32Set.Bytes32Set) internal userLoanParamSets;\\n\\n    /// Address controlling fee withdrawals.\\n    address public feesController;\\n\\n    /// 10% fee /// Fee taken from lender interest payments.\\n    uint256 public lendingFeePercent = 10**19;\\n\\n    /// Total interest fees received and not withdrawn per asset.\\n    mapping(address => uint256) public lendingFeeTokensHeld;\\n\\n    /// Total interest fees withdraw per asset.\\n    /// lifetime fees = lendingFeeTokensHeld + lendingFeeTokensPaid\\n    mapping(address => uint256) public lendingFeeTokensPaid;\\n\\n    /// 0.15% fee /// Fee paid for each trade.\\n    uint256 public tradingFeePercent = 15 * 10**16;\\n\\n    /// Total trading fees received and not withdrawn per asset.\\n    mapping(address => uint256) public tradingFeeTokensHeld;\\n\\n    /// Total trading fees withdraw per asset\\n    /// lifetime fees = tradingFeeTokensHeld + tradingFeeTokensPaid\\n    mapping(address => uint256) public tradingFeeTokensPaid;\\n\\n    /// 0.09% fee /// Origination fee paid for each loan.\\n    uint256 public borrowingFeePercent = 9 * 10**16;\\n\\n    /// Total borrowing fees received and not withdrawn per asset.\\n    mapping(address => uint256) public borrowingFeeTokensHeld;\\n\\n    /// Total borrowing fees withdraw per asset.\\n    /// lifetime fees = borrowingFeeTokensHeld + borrowingFeeTokensPaid\\n    mapping(address => uint256) public borrowingFeeTokensPaid;\\n\\n    /// Current protocol token deposit balance.\\n    uint256 public protocolTokenHeld;\\n\\n    /// Lifetime total payout of protocol token.\\n    uint256 public protocolTokenPaid;\\n\\n    /// 5% fee share in form of SOV /// Fee share for affiliate program.\\n    uint256 public affiliateFeePercent = 5 * 10**18;\\n\\n    /// 5% collateral discount /// Discount on collateral for liquidators.\\n    uint256 public liquidationIncentivePercent = 5 * 10**18;\\n\\n    /// loanPool => underlying\\n    mapping(address => address) public loanPoolToUnderlying;\\n\\n    /// underlying => loanPool\\n    mapping(address => address) public underlyingToLoanPool;\\n\\n    /// Loan pools set.\\n    EnumerableBytes32Set.Bytes32Set internal loanPoolsSet;\\n\\n    /// Supported tokens for swaps.\\n    mapping(address => bool) public supportedTokens;\\n\\n    /// % disagreement between swap rate and reference rate.\\n    uint256 public maxDisagreement = 5 * 10**18;\\n\\n    /// Used as buffer for swap source amount estimations.\\n    uint256 public sourceBuffer = 10000;\\n\\n    /// Maximum support swap size in rBTC\\n    uint256 public maxSwapSize = 50 ether;\\n\\n    /// Nonce per borrower. Used for loan id creation.\\n    mapping(address => uint256) public borrowerNonce;\\n\\n    /// Rollover transaction costs around 0.0000168 rBTC, it is denominated in wrBTC.\\n    uint256 public rolloverBaseReward = 16800000000000;\\n    uint256 public rolloverFlexFeePercent = 0.1 ether; /// 0.1%\\n\\n    IWrbtcERC20 public wrbtcToken;\\n    address public protocolTokenAddress;\\n\\n    /// 50% fee rebate\\n    /// potocolToken reward to user, it is worth % of trading/borrowing fee.\\n    uint256 public feeRebatePercent = 50 * 10**18;\\n\\n    address public admin;\\n\\n    /// For modules interaction.\\n    address public protocolAddress;\\n\\n    /**\\n     *** Affiliates ***\\n     **/\\n\\n    /// The flag is set on the user's first trade.\\n    mapping(address => bool) public userNotFirstTradeFlag;\\n\\n    /// User => referrer (affiliate).\\n    mapping(address => address) public affiliatesUserReferrer;\\n\\n    /// List of referral addresses affiliated to the referrer.\\n    mapping(address => EnumerableAddressSet.AddressSet) internal referralsList;\\n\\n    /// @dev Referral threshold for paying out to the referrer.\\n    ///   The referrer reward is being accumulated and locked until the threshold is passed.\\n    uint256 public minReferralsToPayout = 3;\\n\\n    /// @dev Total affiliate SOV rewards that held in the protocol\\n    ///   (Because the minimum referrals is less than the rule)\\n    mapping(address => uint256) public affiliateRewardsHeld;\\n\\n    /// @dev For affiliates SOV Bonus proccess.\\n    address public sovTokenAddress;\\n    address public lockedSOVAddress;\\n\\n    /// @dev 20% fee share of trading token fee.\\n    ///   Fee share of trading token fee for affiliate program.\\n    uint256 public affiliateTradingTokenFeePercent = 20 * 10**18;\\n\\n    /// @dev Addresses of tokens in which commissions were paid to referrers.\\n    mapping(address => EnumerableAddressSet.AddressSet) internal affiliatesReferrerTokensList;\\n\\n    /// @dev [referrerAddress][tokenAddress] is a referrer's token balance of accrued fees.\\n    mapping(address => mapping(address => uint256)) public affiliatesReferrerBalances;\\n\\n    mapping(address => mapping(address => uint256)) public specialRebates; // Special rate rebates for spesific pair -- if not set, then use the default one\\n    bool public pause; //Flag to pause all protocol modules\\n\\n    uint256 internal swapExtrernalFeePercent; /// Fee percentage for protocol swap\\n\\n    /// @dev Defines the portion of the trading rebate rewards (SOV) which is to be paid out in a liquid form in basis points. The rest is vested. The max value is 9999 (means 99.99% liquid, 0.01% vested)\\n    uint256 internal tradingRebateRewardsBasisPoint;\\n\\n    /// @dev Defines the defaultPath of conversion swap. This is created to prevent the non-rbtc pairs returning the shortest path which will not give the best rate.\\n    /// Will be used in internal swap.\\n    mapping(address => mapping(address => IERC20[])) internal defaultPathConversion;\\n\\n    address internal pauser;\\n\\n    /**\\n     * @notice Add signature and target to storage.\\n     * @dev Protocol is a proxy and requires a way to add every\\n     *   module function dynamically during deployment.\\n     * */\\n    function _setTarget(bytes4 sig, address target) internal {\\n        logicTargets[sig] = target;\\n\\n        if (target != address(0)) {\\n            logicTargetsSet.addBytes32(bytes32(sig));\\n        } else {\\n            logicTargetsSet.removeBytes32(bytes32(sig));\\n        }\\n    }\\n\\n    modifier onlyAdminOrOwner() {\\n        require(isOwner() || admin == (msg.sender), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyPauserOrOwner() {\\n        require(isOwner() || pauser == (msg.sender), \\\"unauthorized\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf8dfc02f3dc790c73b390a69898d0281c4473487bc91fec1f28fbebceacd3b3c\"},\"contracts/core/objects/LenderInterestStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Lender Interest.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Lender Interest.\\n * */\\ncontract LenderInterestStruct {\\n    struct LenderInterest {\\n        uint256 principalTotal; /// Total borrowed amount outstanding of asset.\\n        uint256 owedPerDay; /// Interest owed per day for all loans of asset.\\n        uint256 owedTotal; /// Total interest owed for all loans of asset (assuming they go to full term).\\n        uint256 paidTotal; /// Total interest paid so far for asset.\\n        uint256 updatedTimestamp; /// Last update.\\n    }\\n}\\n\",\"keccak256\":\"0x6583baadddded384836cec469980e7973ec09310ae505b4a2ec67fb7bc19e452\"},\"contracts/core/objects/LoanInterestStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Loan Interest.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Loan Interest.\\n * */\\ncontract LoanInterestStruct {\\n    struct LoanInterest {\\n        uint256 owedPerDay; /// Interest owed per day for loan.\\n        uint256 depositTotal; /// Total escrowed interest for loan.\\n        uint256 updatedTimestamp; /// Last update.\\n    }\\n}\\n\",\"keccak256\":\"0xd9034c6adb1b72e1593589dca024dc4730a1ee8bf6b2dca9d22283f2e7159590\"},\"contracts/core/objects/LoanParamsStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Loan Parameters.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Loan Parameters.\\n * */\\ncontract LoanParamsStruct {\\n    struct LoanParams {\\n        /// @dev ID of loan params object.\\n        bytes32 id;\\n        /// @dev If false, this object has been disabled by the owner and can't\\n        ///   be used for future loans.\\n        bool active;\\n        /// @dev Owner of this object.\\n        address owner;\\n        /// @dev The token being loaned.\\n        address loanToken;\\n        /// @dev The required collateral token.\\n        address collateralToken;\\n        /// @dev The minimum allowed initial margin.\\n        uint256 minInitialMargin;\\n        /// @dev An unhealthy loan when current margin is at or below this value.\\n        uint256 maintenanceMargin;\\n        /// @dev The maximum term for new loans (0 means there's no max term).\\n        uint256 maxLoanTerm;\\n    }\\n}\\n\",\"keccak256\":\"0xe15aa97713521da7f501e5225af9d92cf34bd68d286dbfed86aa75aabb323945\"},\"contracts/core/objects/LoanStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Loan Object.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Loan Object.\\n * */\\ncontract LoanStruct {\\n    struct Loan {\\n        bytes32 id; /// ID of the loan.\\n        bytes32 loanParamsId; /// The linked loan params ID.\\n        bytes32 pendingTradesId; /// The linked pending trades ID.\\n        bool active; /// If false, the loan has been fully closed.\\n        uint256 principal; /// Total borrowed amount outstanding.\\n        uint256 collateral; /// Total collateral escrowed for the loan.\\n        uint256 startTimestamp; /// Loan start time.\\n        uint256 endTimestamp; /// For active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time.\\n        uint256 startMargin; /// Initial margin when the loan opened.\\n        uint256 startRate; /// Reference rate when the loan opened for converting collateralToken to loanToken.\\n        address borrower; /// Borrower of this loan.\\n        address lender; /// Lender of this loan.\\n    }\\n}\\n\",\"keccak256\":\"0x7d05c3096a86d5892e4e72f3a01a5a806f13a5ac90ca6339c611e75c603637b4\"},\"contracts/core/objects/OrderStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Loan Order.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Loan Order.\\n * */\\ncontract OrderStruct {\\n    struct Order {\\n        uint256 lockedAmount; /// Escrowed amount waiting for a counterparty.\\n        uint256 interestRate; /// Interest rate defined by the creator of this order.\\n        uint256 minLoanTerm; /// Minimum loan term allowed.\\n        uint256 maxLoanTerm; /// Maximum loan term allowed.\\n        uint256 createdTimestamp; /// Timestamp when this order was created.\\n        uint256 expirationTimestamp; /// Timestamp when this order expires.\\n    }\\n}\\n\",\"keccak256\":\"0xcc053c5da34a5927041162259bf856ba913f3524ca03e63ad0c5877777d17e0f\"},\"contracts/events/AffiliatesEvents.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./ModulesCommonEvents.sol\\\";\\n\\ncontract AffiliatesEvents is ModulesCommonEvents {\\n    event SetAffiliatesReferrer(address indexed user, address indexed referrer);\\n\\n    event SetAffiliatesReferrerFail(\\n        address indexed user,\\n        address indexed referrer,\\n        bool alreadySet,\\n        bool userNotFirstTrade\\n    );\\n\\n    event SetUserNotFirstTradeFlag(address indexed user);\\n\\n    event PayTradingFeeToAffiliate(\\n        address indexed referrer,\\n        address trader,\\n        address indexed token,\\n        bool indexed isHeld,\\n        uint256 tradingFeeTokenAmount,\\n        uint256 tokenBonusAmount,\\n        uint256 sovBonusAmount,\\n        uint256 sovBonusAmountPaid\\n    );\\n\\n    event PayTradingFeeToAffiliateFail(\\n        address indexed referrer,\\n        address trader,\\n        address indexed token,\\n        uint256 tradingFeeTokenAmount,\\n        uint256 tokenBonusAmount,\\n        uint256 sovBonusAmount,\\n        uint256 sovBonusAmountTryingToPaid\\n    );\\n\\n    event WithdrawAffiliatesReferrerTokenFees(\\n        address indexed referrer,\\n        address indexed receiver,\\n        address indexed tokenAddress,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0xf72cf23e90db3c49589ddc4e1796680ebfb69a9b146db89f9b61f5fcf6dd95ba\"},\"contracts/events/FeesEvents.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Fees Events contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the events for fee payments.\\n * */\\ncontract FeesEvents {\\n    event PayLendingFee(address indexed payer, address indexed token, uint256 amount);\\n\\n    event PayTradingFee(\\n        address indexed payer,\\n        address indexed token,\\n        bytes32 indexed loanId,\\n        uint256 amount\\n    );\\n\\n    event PayBorrowingFee(\\n        address indexed payer,\\n        address indexed token,\\n        bytes32 indexed loanId,\\n        uint256 amount\\n    );\\n\\n    event EarnReward(\\n        address indexed receiver,\\n        address indexed token,\\n        bytes32 indexed loanId,\\n        uint256 feeRebatePercent,\\n        uint256 amount,\\n        uint256 basisPoint\\n    );\\n\\n    event EarnRewardFail(\\n        address indexed receiver,\\n        address indexed token,\\n        bytes32 indexed loanId,\\n        uint256 feeRebatePercent,\\n        uint256 amount,\\n        uint256 basisPoint\\n    );\\n}\\n\",\"keccak256\":\"0xe69bf53e15479be5fde1cbaadaf0c004ee038e8a6a37c99f7769bf5d8387015f\"},\"contracts/events/LoanClosingsEvents.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./ModulesCommonEvents.sol\\\";\\n\\n/**\\n * @title The Loan Closing Events contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the events for loan closing operations.\\n * */\\ncontract LoanClosingsEvents is ModulesCommonEvents {\\n    /// topic0: 0x6349c1a02ec126f7f4fc6e6837e1859006e90e9901635c442d29271e77b96fb6\\n    event CloseWithDeposit(\\n        address indexed user,\\n        address indexed lender,\\n        bytes32 indexed loanId,\\n        address closer,\\n        address loanToken,\\n        address collateralToken,\\n        uint256 repayAmount,\\n        uint256 collateralWithdrawAmount,\\n        uint256 collateralToLoanRate,\\n        uint256 currentMargin\\n    );\\n\\n    /// topic0: 0x2ed7b29b4ca95cf3bb9a44f703872a66e6aa5e8f07b675fa9a5c124a1e5d7352\\n    event CloseWithSwap(\\n        address indexed user,\\n        address indexed lender,\\n        bytes32 indexed loanId,\\n        address collateralToken,\\n        address loanToken,\\n        address closer,\\n        uint256 positionCloseSize,\\n        uint256 loanCloseAmount,\\n        uint256 exitPrice, // one unit of collateralToken, denominated in loanToken\\n        uint256 currentLeverage\\n    );\\n\\n    /// topic0: 0x46fa03303782eb2f686515f6c0100f9a62dabe587b0d3f5a4fc0c822d6e532d3\\n    event Liquidate(\\n        address indexed user,\\n        address indexed liquidator,\\n        bytes32 indexed loanId,\\n        address lender,\\n        address loanToken,\\n        address collateralToken,\\n        uint256 repayAmount,\\n        uint256 collateralWithdrawAmount,\\n        uint256 collateralToLoanRate,\\n        uint256 currentMargin\\n    );\\n\\n    event Rollover(\\n        address indexed user,\\n        address indexed lender,\\n        bytes32 indexed loanId,\\n        uint256 principal,\\n        uint256 collateral,\\n        uint256 endTimestamp,\\n        address rewardReceiver,\\n        uint256 reward\\n    );\\n\\n    event swapExcess(bool shouldRefund, uint256 amount, uint256 amountInRbtc, uint256 threshold);\\n}\\n\",\"keccak256\":\"0x1ea325b9a213012865a52f38941ce6c1e8c29dce919215b5bdcc63a8a5980be1\"},\"contracts/events/LoanMaintenanceEvents.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./ModulesCommonEvents.sol\\\";\\n\\n/**\\n * @title The Loan Maintenance Events contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the events for loan maintenance operations.\\n * */\\ncontract LoanMaintenanceEvents is ModulesCommonEvents {\\n    event DepositCollateral(bytes32 indexed loanId, uint256 depositAmount, uint256 rate);\\n}\\n\",\"keccak256\":\"0xdee5098b947c22bcef6e38ecaf62bae6941572d1c245d2065ad41ea4f494c61d\"},\"contracts/events/LoanOpeningsEvents.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./ModulesCommonEvents.sol\\\";\\n\\n/**\\n * @title The Loan Openings Events contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the events for loan openings operations.\\n * */\\ncontract LoanOpeningsEvents is ModulesCommonEvents {\\n    /// topic0: 0x7bd8cbb7ba34b33004f3deda0fd36c92fc0360acbd97843360037b467a538f90\\n    event Borrow(\\n        address indexed user,\\n        address indexed lender,\\n        bytes32 indexed loanId,\\n        address loanToken,\\n        address collateralToken,\\n        uint256 newPrincipal,\\n        uint256 newCollateral,\\n        uint256 interestRate,\\n        uint256 interestDuration,\\n        uint256 collateralToLoanRate,\\n        uint256 currentMargin\\n    );\\n\\n    /// topic0: 0xf640c1cfe1a912a0b0152b5a542e5c2403142eed75b06cde526cee54b1580e5c\\n    event Trade(\\n        address indexed user,\\n        address indexed lender,\\n        bytes32 indexed loanId,\\n        address collateralToken,\\n        address loanToken,\\n        uint256 positionSize,\\n        uint256 borrowedAmount,\\n        uint256 interestRate,\\n        uint256 settlementDate,\\n        uint256 entryPrice, /// one unit of collateralToken, denominated in loanToken\\n        uint256 entryLeverage,\\n        uint256 currentLeverage\\n    );\\n\\n    /// topic0: 0x0eef4f90457a741c97d76fcf13fa231fefdcc7649bdb3cb49157c37111c98433\\n    event DelegatedManagerSet(\\n        bytes32 indexed loanId,\\n        address indexed delegator,\\n        address indexed delegated,\\n        bool isActive\\n    );\\n}\\n\",\"keccak256\":\"0x585710ce6c570c6dbd1b8daf43b63a54b1d60ad01ee1dc3cae407d74d78f3093\"},\"contracts/events/LoanSettingsEvents.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./ModulesCommonEvents.sol\\\";\\n\\n/**\\n * @title The Loan Settings Events contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the events for loan settings operations.\\n * */\\ncontract LoanSettingsEvents is ModulesCommonEvents {\\n    event LoanParamsSetup(\\n        bytes32 indexed id,\\n        address owner,\\n        address indexed loanToken,\\n        address indexed collateralToken,\\n        uint256 minInitialMargin,\\n        uint256 maintenanceMargin,\\n        uint256 maxLoanTerm\\n    );\\n    event LoanParamsIdSetup(bytes32 indexed id, address indexed owner);\\n\\n    event LoanParamsDisabled(\\n        bytes32 indexed id,\\n        address owner,\\n        address indexed loanToken,\\n        address indexed collateralToken,\\n        uint256 minInitialMargin,\\n        uint256 maintenanceMargin,\\n        uint256 maxLoanTerm\\n    );\\n    event LoanParamsIdDisabled(bytes32 indexed id, address indexed owner);\\n}\\n\",\"keccak256\":\"0xae9c49678a7bc02c2283648939c474c8bfd33781506e05c635c8334c5bf8682f\"},\"contracts/events/ModulesCommonEvents.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n/**\\n * @title The common events for all modules\\n * @notice This contract contains the events which will be used by all modules\\n **/\\n\\ncontract ModulesCommonEvents {\\n    event ProtocolModuleContractReplaced(\\n        address indexed prevModuleContractAddress,\\n        address indexed newModuleContractAddress,\\n        bytes32 indexed module\\n    );\\n}\\n\",\"keccak256\":\"0xb07af42d7e6b0fe983889b883691b662a58d2ef8d75b3f32f17faff1871c8b8f\"},\"contracts/events/ProtocolSettingsEvents.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./ModulesCommonEvents.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title The Protocol Settings Events contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the events for protocol settings operations.\\n * */\\ncontract ProtocolSettingsEvents is ModulesCommonEvents {\\n    event SetPriceFeedContract(address indexed sender, address oldValue, address newValue);\\n\\n    event SetSwapsImplContract(address indexed sender, address oldValue, address newValue);\\n\\n    event SetLoanPool(\\n        address indexed sender,\\n        address indexed loanPool,\\n        address indexed underlying\\n    );\\n\\n    event SetSupportedTokens(address indexed sender, address indexed token, bool isActive);\\n\\n    event SetLendingFeePercent(address indexed sender, uint256 oldValue, uint256 newValue);\\n\\n    event SetTradingFeePercent(address indexed sender, uint256 oldValue, uint256 newValue);\\n\\n    event SetBorrowingFeePercent(address indexed sender, uint256 oldValue, uint256 newValue);\\n\\n    event SetSwapExternalFeePercent(address indexed sender, uint256 oldValue, uint256 newValue);\\n\\n    event SetAffiliateFeePercent(address indexed sender, uint256 oldValue, uint256 newValue);\\n\\n    event SetAffiliateTradingTokenFeePercent(\\n        address indexed sender,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    event SetLiquidationIncentivePercent(\\n        address indexed sender,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    event SetMaxSwapSize(address indexed sender, uint256 oldValue, uint256 newValue);\\n\\n    event SetFeesController(\\n        address indexed sender,\\n        address indexed oldController,\\n        address indexed newController\\n    );\\n\\n    event SetWrbtcToken(\\n        address indexed sender,\\n        address indexed oldWethToken,\\n        address indexed newWethToken\\n    );\\n\\n    event SetSovrynSwapContractRegistryAddress(\\n        address indexed sender,\\n        address indexed oldSovrynSwapContractRegistryAddress,\\n        address indexed newSovrynSwapContractRegistryAddress\\n    );\\n\\n    event SetProtocolTokenAddress(\\n        address indexed sender,\\n        address indexed oldProtocolToken,\\n        address indexed newProtocolToken\\n    );\\n\\n    event WithdrawFees(\\n        address indexed sender,\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 lendingAmount,\\n        uint256 tradingAmount,\\n        uint256 borrowingAmount,\\n        uint256 wRBTCConverted\\n    );\\n\\n    event WithdrawLendingFees(\\n        address indexed sender,\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    event WithdrawTradingFees(\\n        address indexed sender,\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    event WithdrawBorrowingFees(\\n        address indexed sender,\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    event SetRolloverBaseReward(address indexed sender, uint256 oldValue, uint256 newValue);\\n\\n    event SetRebatePercent(\\n        address indexed sender,\\n        uint256 oldRebatePercent,\\n        uint256 newRebatePercent\\n    );\\n\\n    event SetSpecialRebates(\\n        address indexed sender,\\n        address indexed sourceToken,\\n        address indexed destToken,\\n        uint256 oldSpecialRebatesPercent,\\n        uint256 newSpecialRebatesPercent\\n    );\\n\\n    event SetProtocolAddress(\\n        address indexed sender,\\n        address indexed oldProtocol,\\n        address indexed newProtocol\\n    );\\n\\n    event SetMinReferralsToPayoutAffiliates(\\n        address indexed sender,\\n        uint256 oldMinReferrals,\\n        uint256 newMinReferrals\\n    );\\n\\n    event SetSOVTokenAddress(\\n        address indexed sender,\\n        address indexed oldTokenAddress,\\n        address indexed newTokenAddress\\n    );\\n\\n    event SetLockedSOVAddress(\\n        address indexed sender,\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event TogglePaused(address indexed sender, bool indexed oldFlag, bool indexed newFlag);\\n\\n    event SetTradingRebateRewardsBasisPoint(\\n        address indexed sender,\\n        uint256 oldBasisPoint,\\n        uint256 newBasisPoint\\n    );\\n\\n    event SetRolloverFlexFeePercent(\\n        address indexed sender,\\n        uint256 oldRolloverFlexFeePercent,\\n        uint256 newRolloverFlexFeePercent\\n    );\\n\\n    event SetDefaultPathConversion(\\n        address indexed sender,\\n        address indexed sourceTokenAddress,\\n        address indexed destTokenAddress,\\n        IERC20[] defaultPath\\n    );\\n\\n    event RemoveDefaultPathConversion(\\n        address indexed sender,\\n        address indexed sourceTokenAddress,\\n        address indexed destTokenAddress,\\n        IERC20[] defaultPath\\n    );\\n\\n    event SetAdmin(address indexed sender, address indexed oldAdmin, address indexed newAdmin);\\n\\n    event SetPauser(address indexed sender, address indexed oldPauser, address indexed newPauser);\\n}\\n\",\"keccak256\":\"0x20ca66a2c53669aa33379bf5233e3bcdddbba3504cd430a0143f0ee3ce1c2641\"},\"contracts/events/SwapsEvents.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./ModulesCommonEvents.sol\\\";\\n\\n/**\\n * @title The Swaps Events contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the events for swap operations.\\n * */\\ncontract SwapsEvents is ModulesCommonEvents {\\n    event LoanSwap(\\n        bytes32 indexed loanId,\\n        address indexed sourceToken,\\n        address indexed destToken,\\n        address borrower,\\n        uint256 sourceAmount,\\n        uint256 destAmount\\n    );\\n\\n    event ExternalSwap(\\n        address indexed user,\\n        address indexed sourceToken,\\n        address indexed destToken,\\n        uint256 sourceAmount,\\n        uint256 destAmount\\n    );\\n}\\n\",\"keccak256\":\"0x0a1cd289076675980b916941ed923146160d34a8669fc3fb4a06610f285dfbd1\"},\"contracts/feeds/IPriceFeeds.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\ninterface IPriceFeeds {\\n    function queryRate(address sourceToken, address destToken)\\n        external\\n        view\\n        returns (uint256 rate, uint256 precision);\\n\\n    function queryPrecision(address sourceToken, address destToken)\\n        external\\n        view\\n        returns (uint256 precision);\\n\\n    function queryReturn(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceAmount\\n    ) external view returns (uint256 destAmount);\\n\\n    function checkPriceDisagreement(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceAmount,\\n        uint256 destAmount,\\n        uint256 maxSlippage\\n    ) external view returns (uint256 sourceToDestSwapRate);\\n\\n    function amountInEth(address Token, uint256 amount) external view returns (uint256 ethAmount);\\n\\n    function getMaxDrawdown(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount,\\n        uint256 maintenanceMargin\\n    ) external view returns (uint256);\\n\\n    function getCurrentMarginAndCollateralSize(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount\\n    ) external view returns (uint256 currentMargin, uint256 collateralInEthAmount);\\n\\n    function getCurrentMargin(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount\\n    ) external view returns (uint256 currentMargin, uint256 collateralToLoanRate);\\n\\n    function shouldLiquidate(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount,\\n        uint256 maintenanceMargin\\n    ) external view returns (bool);\\n\\n    function getFastGasPrice(address payToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e2c2b393336efedb97659a2fc21c8dfb75b70e15d2422a3bcbf7ebd5fc83c82\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _who) external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbc0c9bb48f19651930ec9aff366b2e11a1abf89c846e4b2d52d8102b15ce6721\"},\"contracts/interfaces/ISovryn.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\npragma experimental ABIEncoderV2;\\n//TODO: stored in ./interfaces only while brownie isn't removed\\n//TODO: move to contracts/interfaces after with brownie is removed\\n\\nimport \\\"../core/State.sol\\\";\\nimport \\\"../events/ProtocolSettingsEvents.sol\\\";\\nimport \\\"../events/LoanSettingsEvents.sol\\\";\\nimport \\\"../events/LoanOpeningsEvents.sol\\\";\\nimport \\\"../events/LoanMaintenanceEvents.sol\\\";\\nimport \\\"../events/LoanClosingsEvents.sol\\\";\\nimport \\\"../events/FeesEvents.sol\\\";\\nimport \\\"../events/SwapsEvents.sol\\\";\\nimport \\\"../events/AffiliatesEvents.sol\\\";\\nimport \\\"../connectors/loantoken/lib/MarginTradeStructHelpers.sol\\\";\\n\\ncontract ISovryn is\\n    State,\\n    ProtocolSettingsEvents,\\n    LoanSettingsEvents,\\n    LoanOpeningsEvents,\\n    LoanMaintenanceEvents,\\n    LoanClosingsEvents,\\n    SwapsEvents,\\n    AffiliatesEvents,\\n    FeesEvents\\n{\\n    /// Triggered whenever interest is paid to lender.\\n    event PayInterestTransfer(\\n        address indexed interestToken,\\n        address indexed lender,\\n        uint256 effectiveInterest\\n    );\\n\\n    ////// Protocol //////\\n\\n    function replaceContract(address target) external;\\n\\n    function setTargets(string[] calldata sigsArr, address[] calldata targetsArr) external;\\n\\n    function getTarget(string calldata sig) external view returns (address);\\n\\n    ////// Protocol Settings //////\\n\\n    function setSovrynProtocolAddress(address newProtocolAddress) external;\\n\\n    function setSOVTokenAddress(address newSovTokenAddress) external;\\n\\n    function setLockedSOVAddress(address newSOVLockedAddress) external;\\n\\n    function setMinReferralsToPayoutAffiliates(uint256 newMinReferrals) external;\\n\\n    function setPriceFeedContract(address newContract) external;\\n\\n    function setSwapsImplContract(address newContract) external;\\n\\n    function setLoanPool(address[] calldata pools, address[] calldata assets) external;\\n\\n    function setSupportedTokens(address[] calldata addrs, bool[] calldata toggles) external;\\n\\n    function setLendingFeePercent(uint256 newValue) external;\\n\\n    function setTradingFeePercent(uint256 newValue) external;\\n\\n    function setBorrowingFeePercent(uint256 newValue) external;\\n\\n    function setSwapExternalFeePercent(uint256 newValue) external;\\n\\n    function setAffiliateFeePercent(uint256 newValue) external;\\n\\n    function setAffiliateTradingTokenFeePercent(uint256 newValue) external;\\n\\n    function setLiquidationIncentivePercent(uint256 newAmount) external;\\n\\n    function setMaxDisagreement(uint256 newAmount) external;\\n\\n    function setSourceBuffer(uint256 newAmount) external;\\n\\n    function setMaxSwapSize(uint256 newAmount) external;\\n\\n    function setFeesController(address newController) external;\\n\\n    function withdrawFees(address[] calldata tokens, address receiver)\\n        external\\n        returns (uint256 totalWRBTCWithdrawn);\\n\\n    function withdrawLendingFees(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function withdrawTradingFees(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function withdrawBorrowingFees(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function withdrawProtocolToken(address receiver, uint256 amount)\\n        external\\n        returns (address, bool);\\n\\n    function depositProtocolToken(uint256 amount) external;\\n\\n    function getLoanPoolsList(uint256 start, uint256 count)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function isLoanPool(address loanPool) external view returns (bool);\\n\\n    function setWrbtcToken(address wrbtcTokenAddress) external;\\n\\n    function setSovrynSwapContractRegistryAddress(address registryAddress) external;\\n\\n    function setProtocolTokenAddress(address _protocolTokenAddress) external;\\n\\n    function setRolloverBaseReward(uint256 transactionCost) external;\\n\\n    function setRebatePercent(uint256 rebatePercent) external;\\n\\n    function setSpecialRebates(\\n        address sourceToken,\\n        address destToken,\\n        uint256 specialRebatesPercent\\n    ) external;\\n\\n    function getSpecialRebates(address sourceToken, address destToken)\\n        external\\n        view\\n        returns (uint256 specialRebatesPercent);\\n\\n    function togglePaused(bool paused) external;\\n\\n    function isProtocolPaused() external view returns (bool);\\n\\n    ////// SwapsImplSovrynSwapModule //////\\n    function getSovrynSwapNetworkContract(address sovrynSwapRegistryAddress)\\n        public\\n        view\\n        returns (address);\\n\\n    function getContractHexName(string calldata source) external pure returns (bytes32 result);\\n\\n    function swapsImplExpectedRate(\\n        address sourceTokenAddress,\\n        address destTokenAddress,\\n        uint256 sourceTokenAmount\\n    ) external view returns (uint256);\\n\\n    function swapsImplExpectedReturn(\\n        address sourceTokenAddress,\\n        address destTokenAddress,\\n        uint256 sourceTokenAmount\\n    ) external view returns (uint256 expectedReturn);\\n\\n    ////// Loan Settings //////\\n\\n    function setupLoanParams(LoanParams[] calldata loanParamsList)\\n        external\\n        returns (bytes32[] memory loanParamsIdList);\\n\\n    // Deactivates LoanParams for future loans. Active loans using it are unaffected.\\n    function disableLoanParams(bytes32[] calldata loanParamsIdList) external;\\n\\n    function getLoanParams(bytes32[] calldata loanParamsIdList)\\n        external\\n        view\\n        returns (LoanParams[] memory loanParamsList);\\n\\n    function getLoanParamsList(\\n        address owner,\\n        uint256 start,\\n        uint256 count\\n    ) external view returns (bytes32[] memory loanParamsList);\\n\\n    function getTotalPrincipal(address lender, address loanToken) external view returns (uint256);\\n\\n    function minInitialMargin(bytes32 loanParamsId) external view returns (uint256);\\n\\n    ////// Loan Openings //////\\n\\n    function borrowOrTradeFromPool(\\n        bytes32 loanParamsId,\\n        bytes32 loanId, // if 0, start a new loan\\n        bool isTorqueLoan,\\n        uint256 initialMargin,\\n        MarginTradeStructHelpers.SentAddresses calldata sentAddresses,\\n        // lender: must match loan if loanId provided\\n        // borrower: must match loan if loanId provided\\n        // receiver: receiver of funds (address(0) assumes borrower address)\\n        // manager: delegated manager of loan unless address(0)\\n        MarginTradeStructHelpers.SentAmounts calldata sentValues,\\n        // newRate: new loan interest rate\\n        // newPrincipal: new loan size (borrowAmount + any borrowed interest)\\n        // torqueInterest: new amount of interest to escrow for Torque loan (determines initial loan length)\\n        // loanTokenReceived: total loanToken deposit (amount not sent to borrower in the case of Torque loans)\\n        // collateralTokenReceived: total collateralToken deposit\\n        bytes calldata loanDataBytes\\n    ) external payable returns (uint256 newPrincipal, uint256 newCollateral);\\n\\n    function setDelegatedManager(\\n        bytes32 loanId,\\n        address delegated,\\n        bool toggle\\n    ) external;\\n\\n    function getEstimatedMarginExposure(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanTokenSent,\\n        uint256 collateralTokenSent,\\n        uint256 interestRate,\\n        uint256 newPrincipal\\n    ) external view returns (uint256);\\n\\n    function getRequiredCollateral(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 newPrincipal,\\n        uint256 marginAmount,\\n        bool isTorqueLoan\\n    ) external view returns (uint256 collateralAmountRequired);\\n\\n    function getBorrowAmount(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 collateralTokenAmount,\\n        uint256 marginAmount,\\n        bool isTorqueLoan\\n    ) external view returns (uint256 borrowAmount);\\n\\n    ////// Loan Closings //////\\n\\n    function liquidate(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 closeAmount // denominated in loanToken\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 seizedAmount,\\n            address seizedToken\\n        );\\n\\n    function rollover(bytes32 loanId, bytes calldata loanDataBytes) external;\\n\\n    function closeWithDeposit(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 depositAmount // denominated in loanToken\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n\\n    function closeWithSwap(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 swapAmount, // denominated in collateralToken\\n        bool returnTokenIsCollateral, // true: withdraws collateralToken, false: withdraws loanToken\\n        bytes calldata loanDataBytes\\n    )\\n        external\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n\\n    ////// Loan Maintenance //////\\n\\n    function depositCollateral(\\n        bytes32 loanId,\\n        uint256 depositAmount // must match msg.value if ether is sent\\n    ) external payable;\\n\\n    function withdrawCollateral(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 withdrawAmount\\n    ) external returns (uint256 actualWithdrawAmount);\\n\\n    function withdrawAccruedInterest(address loanToken) external;\\n\\n    function getLenderInterestData(address lender, address loanToken)\\n        external\\n        view\\n        returns (\\n            uint256 interestPaid,\\n            uint256 interestPaidDate,\\n            uint256 interestOwedPerDay,\\n            uint256 interestUnPaid,\\n            uint256 interestFeePercent,\\n            uint256 principalTotal\\n        );\\n\\n    function getLoanInterestData(bytes32 loanId)\\n        external\\n        view\\n        returns (\\n            address loanToken,\\n            uint256 interestOwedPerDay,\\n            uint256 interestDepositTotal,\\n            uint256 interestDepositRemaining\\n        );\\n\\n    struct LoanReturnData {\\n        bytes32 loanId;\\n        address loanToken;\\n        address collateralToken;\\n        uint256 principal;\\n        uint256 collateral;\\n        uint256 interestOwedPerDay;\\n        uint256 interestDepositRemaining;\\n        uint256 startRate; // collateralToLoanRate\\n        uint256 startMargin;\\n        uint256 maintenanceMargin;\\n        uint256 currentMargin;\\n        uint256 maxLoanTerm;\\n        uint256 endTimestamp;\\n        uint256 maxLiquidatable;\\n        uint256 maxSeizable;\\n    }\\n\\n    struct LoanReturnDataV2 {\\n        bytes32 loanId;\\n        address loanToken;\\n        address collateralToken;\\n        address borrower;\\n        uint256 principal;\\n        uint256 collateral;\\n        uint256 interestOwedPerDay;\\n        uint256 interestDepositRemaining;\\n        uint256 startRate; /// collateralToLoanRate\\n        uint256 startMargin;\\n        uint256 maintenanceMargin;\\n        uint256 currentMargin;\\n        uint256 maxLoanTerm;\\n        uint256 endTimestamp;\\n        uint256 maxLiquidatable;\\n        uint256 maxSeizable;\\n        uint256 creationTimestamp;\\n    }\\n\\n    function getUserLoans(\\n        address user,\\n        uint256 start,\\n        uint256 count,\\n        uint256 loanType,\\n        bool isLender,\\n        bool unsafeOnly\\n    ) external view returns (LoanReturnData[] memory loansData);\\n\\n    function getUserLoansV2(\\n        address user,\\n        uint256 start,\\n        uint256 count,\\n        uint256 loanType,\\n        bool isLender,\\n        bool unsafeOnly\\n    ) external view returns (LoanReturnDataV2[] memory loansDataV2);\\n\\n    function getLoan(bytes32 loanId) external view returns (LoanReturnData memory loanData);\\n\\n    function getLoanV2(bytes32 loanId) external view returns (LoanReturnDataV2 memory loanDataV2);\\n\\n    function getActiveLoans(\\n        uint256 start,\\n        uint256 count,\\n        bool unsafeOnly\\n    ) external view returns (LoanReturnData[] memory loansData);\\n\\n    function getActiveLoansV2(\\n        uint256 start,\\n        uint256 count,\\n        bool unsafeOnly\\n    ) external view returns (LoanReturnDataV2[] memory loansDataV2);\\n\\n    function extendLoanDuration(\\n        bytes32 loanId,\\n        uint256 depositAmount,\\n        bool useCollateral,\\n        bytes calldata /// loanDataBytes, for future use.\\n    ) external returns (uint256 secondsExtended);\\n\\n    function reduceLoanDuration(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 withdrawAmount\\n    ) external returns (uint256 secondsReduced);\\n\\n    ////// Swaps External //////\\n    function swapExternal(\\n        address sourceToken,\\n        address destToken,\\n        address receiver,\\n        address returnToSender,\\n        uint256 sourceTokenAmount,\\n        uint256 requiredDestTokenAmount,\\n        uint256 minReturn,\\n        bytes calldata swapData\\n    ) external returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed);\\n\\n    function getSwapExpectedReturn(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceTokenAmount\\n    ) external view returns (uint256);\\n\\n    function checkPriceDivergence(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceTokenAmount,\\n        uint256 minReturn\\n    ) public view;\\n\\n    ////// Affiliates Module //////\\n\\n    function getUserNotFirstTradeFlag(address user) external view returns (bool);\\n\\n    function setUserNotFirstTradeFlag(address user) external;\\n\\n    function payTradingFeeToAffiliatesReferrer(\\n        address referrer,\\n        address trader,\\n        address token,\\n        uint256 tradingFeeTokenBaseAmount\\n    ) external returns (uint256 affiliatesBonusSOVAmount, uint256 affiliatesBonusTokenAmount);\\n\\n    function setAffiliatesReferrer(address user, address referrer) external; //onlyCallableByLoanPools\\n\\n    function getReferralsList(address referrer) external view returns (address[] memory refList);\\n\\n    function getAffiliatesReferrerBalances(address referrer)\\n        external\\n        view\\n        returns (address[] memory referrerTokensList, uint256[] memory referrerTokensBalances);\\n\\n    function getAffiliatesReferrerTokensList(address referrer)\\n        external\\n        view\\n        returns (address[] memory tokensList);\\n\\n    function getAffiliatesReferrerTokenBalance(address referrer, address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function withdrawAffiliatesReferrerTokenFees(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) external;\\n\\n    function withdrawAllAffiliatesReferrerTokenFees(address receiver) external;\\n\\n    function getProtocolAddress() external view returns (address);\\n\\n    function getSovTokenAddress() external view returns (address);\\n\\n    function getLockedSOVAddress() external view returns (address);\\n\\n    function getFeeRebatePercent() external view returns (uint256);\\n\\n    function getMinReferralsToPayout() external view returns (uint256);\\n\\n    function getAffiliatesUserReferrer(address user) external view returns (address referrer);\\n\\n    function getAffiliateRewardsHeld(address referrer) external view returns (uint256);\\n\\n    function getAffiliateTradingTokenFeePercent()\\n        external\\n        view\\n        returns (uint256 affiliateTradingTokenFeePercent);\\n\\n    function getAffiliatesTokenRewardsValueInRbtc(address referrer)\\n        external\\n        view\\n        returns (uint256 rbtcTotalAmount);\\n\\n    function getSwapExternalFeePercent() external view returns (uint256 swapExternalFeePercent);\\n\\n    function setTradingRebateRewardsBasisPoint(uint256 newBasisPoint) external;\\n\\n    function getTradingRebateRewardsBasisPoint() external view returns (uint256);\\n\\n    function getDedicatedSOVRebate() external view returns (uint256);\\n\\n    function setRolloverFlexFeePercent(uint256 newRolloverFlexFeePercent) external;\\n\\n    function getDefaultPathConversion(address sourceTokenAddress, address destTokenAddress)\\n        external\\n        view\\n        returns (IERC20[] memory);\\n\\n    function setDefaultPathConversion(IERC20[] calldata defaultPath) external;\\n\\n    function removeDefaultPathConversion(address sourceTokenAddress, address destTokenAddress)\\n        external;\\n\\n    function checkCloseWithDepositIsTinyPosition(bytes32 loanId, uint256 depositAmount)\\n        external\\n        view\\n        returns (bool isTinyPosition, uint256 tinyPositionAmount);\\n\\n    function setAdmin(address newAdmin) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function setPauser(address newPauser) external;\\n\\n    function getPauser() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4e470e1fe1719c2c58b0e44aedce3ee6a21191063b533ccb71c9219a192e8884\"},\"contracts/interfaces/IWrbtc.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ninterface IWrbtc {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x20fdfe4b5e32fd7f863b3fa128e3c80bd4ccf090a4ffba56186ef3b7f2a80492\"},\"contracts/interfaces/IWrbtcERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./IWrbtc.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract IWrbtcERC20 is IWrbtc, IERC20 {}\\n\",\"keccak256\":\"0x7301a8c8ca7aa016ec94268a16d07366875f2e406442e929968dd745b1ee5be5\"},\"contracts/mixins/EnumerableAddressSet.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Based on Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * As of v2.5.0, only `address` sets are supported.\\n *\\n * Include with `using EnumerableSet for EnumerableSet.AddressSet;`.\\n *\\n * _Available since v2.5.0._\\n */\\nlibrary EnumerableAddressSet {\\n    struct AddressSet {\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(address => uint256) index;\\n        address[] values;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     * Returns false if the value was already in the set.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set.index[value] = set.values.push(value);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     * Returns false if the value was not present in the set.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        if (contains(set, value)) {\\n            uint256 toDeleteIndex = set.index[value] - 1;\\n            uint256 lastIndex = set.values.length - 1;\\n\\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\\n            if (lastIndex != toDeleteIndex) {\\n                address lastValue = set.values[lastIndex];\\n\\n                // Move the last value to the index where the deleted value is\\n                set.values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the index entry for the deleted value\\n            delete set.index[value];\\n\\n            // Delete the old entry for the moved value\\n            set.values.pop();\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns an array with all values in the set. O(N).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     */\\n    function enumerate(AddressSet storage set) internal view returns (address[] memory) {\\n        address[] memory output = new address[](set.values.length);\\n        for (uint256 i; i < set.values.length; i++) {\\n            output[i] = set.values[i];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Returns a chunk of array as recommended in enumerate() to avoid running of gas.\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     \\n     * @param start start index of chunk\\n     * @param count num of element to return; if count == 0 then returns all the elements from the @param start\\n     */\\n    function enumerateChunk(\\n        AddressSet storage set,\\n        uint256 start,\\n        uint256 count\\n    ) internal view returns (address[] memory output) {\\n        uint256 end = start + count;\\n        require(end >= start, \\\"addition overflow\\\");\\n        end = (set.values.length < end || count == 0) ? set.values.length : end;\\n        if (end == 0 || start >= end) {\\n            return output;\\n        }\\n\\n        output = new address[](end - start);\\n        for (uint256 i; i < end - start; i++) {\\n            output[i] = set.values[i + start];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements on the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return set.values.length;\\n    }\\n\\n    /** @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function get(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return set.values[index];\\n    }\\n}\\n\",\"keccak256\":\"0xea6fba941ec8502aa11a7ab37e74b917d0dc47bb254e359a2870a87ef97d9872\"},\"contracts/mixins/EnumerableBytes32Set.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title Library for managing loan sets.\\n *\\n * @notice Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\\n * */\\nlibrary EnumerableBytes32Set {\\n    struct Bytes32Set {\\n        /// Position of the value in the `values` array, plus 1 because index 0\\n        /// means a value is not in the set.\\n        mapping(bytes32 => uint256) index;\\n        bytes32[] values;\\n    }\\n\\n    /**\\n     * @notice Add an address value to a set. O(1).\\n     *\\n     * @param set The set of values.\\n     * @param addrvalue The address to add.\\n     *\\n     * @return False if the value was already in the set.\\n     */\\n    function addAddress(Bytes32Set storage set, address addrvalue) internal returns (bool) {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return addBytes32(set, value);\\n    }\\n\\n    /**\\n     * @notice Add a value to a set. O(1).\\n     *\\n     * @param set The set of values.\\n     * @param value The new value to add.\\n     *\\n     * @return False if the value was already in the set.\\n     */\\n    function addBytes32(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set.index[value] = set.values.push(value);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove an address value from a set. O(1).\\n     *\\n     * @param set The set of values.\\n     * @param addrvalue The address to remove.\\n     *\\n     * @return False if the address was not present in the set.\\n     */\\n    function removeAddress(Bytes32Set storage set, address addrvalue) internal returns (bool) {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return removeBytes32(set, value);\\n    }\\n\\n    /**\\n     * @notice Remove a value from a set. O(1).\\n     *\\n     * @param set The set of values.\\n     * @param value The value to remove.\\n     *\\n     * @return False if the value was not present in the set.\\n     */\\n    function removeBytes32(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        if (contains(set, value)) {\\n            uint256 toDeleteIndex = set.index[value] - 1;\\n            uint256 lastIndex = set.values.length - 1;\\n\\n            /// If the element we're deleting is the last one,\\n            /// we can just remove it without doing a swap.\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set.values[lastIndex];\\n\\n                /// Move the last value to the index where the deleted value is.\\n                set.values[toDeleteIndex] = lastValue;\\n\\n                /// Update the index for the moved value.\\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            /// Delete the index entry for the deleted value.\\n            delete set.index[value];\\n\\n            /// Delete the old entry for the moved value.\\n            set.values.pop();\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Find out whether a value exists in the set.\\n     *\\n     * @param set The set of values.\\n     * @param value The value to find.\\n     *\\n     * @return True if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function containsAddress(Bytes32Set storage set, address addrvalue)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @notice Get all set values.\\n     *\\n     * @param set The set of values.\\n     * @param start The offset of the returning set.\\n     * @param count The limit of number of values to return.\\n     *\\n     * @return An array with all values in the set. O(N).\\n     *\\n     * @dev Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     */\\n    function enumerate(\\n        Bytes32Set storage set,\\n        uint256 start,\\n        uint256 count\\n    ) internal view returns (bytes32[] memory output) {\\n        uint256 end = start + count;\\n        require(end >= start, \\\"addition overflow\\\");\\n        end = set.values.length < end ? set.values.length : end;\\n        if (end == 0 || start >= end) {\\n            return output;\\n        }\\n\\n        output = new bytes32[](end - start);\\n        for (uint256 i; i < end - start; i++) {\\n            output[i] = set.values[i + start];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @notice Get the legth of the set.\\n     *\\n     * @param set The set of values.\\n     *\\n     * @return the number of elements on the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return set.values.length;\\n    }\\n\\n    /**\\n     * @notice Get an item from the set by its index.\\n     *\\n     * @dev Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     *\\n     * @param set The set of values.\\n     * @param index The index of the value to return.\\n     *\\n     * @return the element stored at position `index` in the set. O(1).\\n     */\\n    function get(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return set.values[index];\\n    }\\n}\\n\",\"keccak256\":\"0xa2801a585c566e07f21c1ebccd0cd0447dd5fd9fe6c1ff2b58d4d979d88a6db0\"},\"contracts/mixins/FeesHelper.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"../core/State.sol\\\";\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../feeds/IPriceFeeds.sol\\\";\\nimport \\\"../events/FeesEvents.sol\\\";\\nimport \\\"../modules/interfaces/ProtocolAffiliatesInterface.sol\\\";\\nimport \\\"../interfaces/ISovryn.sol\\\";\\nimport \\\"../core/objects/LoanParamsStruct.sol\\\";\\n\\n/**\\n * @title The Fees Helper contract.\\n *\\n * This contract calculates and pays lending/borrow fees and rewards.\\n * */\\ncontract FeesHelper is State, FeesEvents {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Calculate trading fee.\\n     * @param feeTokenAmount The amount of tokens to trade.\\n     * @return The fee of the trade.\\n     * */\\n    function _getTradingFee(uint256 feeTokenAmount) internal view returns (uint256) {\\n        return feeTokenAmount.mul(tradingFeePercent).divCeil(10**20);\\n    }\\n\\n    /**\\n     * @notice Calculate swap external fee.\\n     * @param feeTokenAmount The amount of token to swap.\\n     * @return The fee of the swap.\\n     */\\n    function _getSwapExternalFee(uint256 feeTokenAmount) internal view returns (uint256) {\\n        return feeTokenAmount.mul(swapExtrernalFeePercent).divCeil(10**20);\\n    }\\n\\n    /*\\n\\t// p3.9 from bzx peckshield-audit-report-bZxV2-v1.0rc1.pdf\\n\\t// cannot be applied solely nor with LoanOpenings.sol as it drives to some other tests failure\\n\\tfunction _getTradingFee(uint256 feeTokenAmount) internal view returns (uint256) {\\n\\t\\tuint256 collateralAmountRequired =\\n\\t\\t\\tfeeTokenAmount.mul(10**20).divCeil(\\n\\t\\t\\t\\t10**20 - tradingFeePercent // never will overflow\\n\\t\\t\\t);\\n\\t\\treturn collateralAmountRequired.sub(feeTokenAmount);\\n\\t}*/\\n\\n    /**\\n     * @notice Calculate the loan origination fee.\\n     * @param feeTokenAmount The amount of tokens to borrow.\\n     * @return The fee of the loan.\\n     * */\\n    function _getBorrowingFee(uint256 feeTokenAmount) internal view returns (uint256) {\\n        return feeTokenAmount.mul(borrowingFeePercent).divCeil(10**20);\\n        /*\\n\\t\\t// p3.9 from bzx peckshield-audit-report-bZxV2-v1.0rc1.pdf\\n\\t\\t// cannot be applied solely nor with LoanOpenings.sol as it drives to some other tests failure\\n\\t\\tuint256 collateralAmountRequired =\\n\\t\\t\\tfeeTokenAmount.mul(10**20).divCeil(\\n\\t\\t\\t\\t10**20 - borrowingFeePercent // never will overflow\\n\\t\\t\\t);\\n\\t\\treturn collateralAmountRequired.sub(feeTokenAmount);*/\\n    }\\n\\n    /**\\n     * @notice Settle the trading fee and pay the token reward to the affiliates referrer.\\n     *\\n     * @param referrer The affiliate referrer address to send the reward to.\\n     * @param trader The account that performs this trade.\\n     * @param feeToken The address of the token in which the trading fee is paid.\\n     * @param tradingFee The amount of tokens accrued as fees on the trading.\\n     *\\n     * @return affiliatesBonusSOVAmount the total SOV amount that is distributed to the referrer\\n     * @return affiliatesBonusTokenAmount the total Token Base on the trading fee pairs that is distributed to the referrer\\n     * */\\n    function _payTradingFeeToAffiliate(\\n        address referrer,\\n        address trader,\\n        address feeToken,\\n        uint256 tradingFee\\n    ) internal returns (uint256 affiliatesBonusSOVAmount, uint256 affiliatesBonusTokenAmount) {\\n        (affiliatesBonusSOVAmount, affiliatesBonusTokenAmount) = ProtocolAffiliatesInterface(\\n            address(this)\\n        )\\n            .payTradingFeeToAffiliatesReferrer(referrer, trader, feeToken, tradingFee);\\n    }\\n\\n    /**\\n     * @notice Settle the trading fee and pay the token reward to the user.\\n     * @param user The address to send the reward to.\\n     * @param loanId The Id of the associated loan - used for logging only.\\n     * @param feeToken The address of the token in which the trading fee is paid.\\n     * @param tradingFee The amount of tokens accrued as fees on the trading.\\n     * */\\n    function _payTradingFee(\\n        address user,\\n        bytes32 loanId,\\n        address feeToken,\\n        address feeTokenPair,\\n        uint256 tradingFee\\n    ) internal {\\n        uint256 protocolTradingFee = tradingFee; /// Trading fee paid to protocol.\\n        if (tradingFee != 0) {\\n            if (affiliatesUserReferrer[user] != address(0)) {\\n                _payTradingFeeToAffiliate(\\n                    affiliatesUserReferrer[user],\\n                    user,\\n                    feeToken,\\n                    protocolTradingFee\\n                );\\n                protocolTradingFee = (\\n                    protocolTradingFee.sub(protocolTradingFee.mul(affiliateFeePercent).div(10**20))\\n                )\\n                    .sub(protocolTradingFee.mul(affiliateTradingTokenFeePercent).div(10**20));\\n            }\\n\\n            /// Increase the storage variable keeping track of the accumulated fees.\\n            tradingFeeTokensHeld[feeToken] = tradingFeeTokensHeld[feeToken].add(\\n                protocolTradingFee\\n            );\\n\\n            emit PayTradingFee(user, feeToken, loanId, protocolTradingFee);\\n\\n            /// Pay the token reward to the user.\\n            _payFeeReward(user, loanId, feeToken, feeTokenPair, tradingFee);\\n        }\\n    }\\n\\n    /**\\n     * @notice Settle the borrowing fee and pay the token reward to the user.\\n     * @param user The address to send the reward to.\\n     * @param loanId The Id of the associated loan - used for logging only.\\n     * @param feeToken The address of the token in which the borrowig fee is paid.\\n     * @param borrowingFee The height of the fee.\\n     * */\\n    function _payBorrowingFee(\\n        address user,\\n        bytes32 loanId,\\n        address feeToken,\\n        address feeTokenPair,\\n        uint256 borrowingFee\\n    ) internal {\\n        if (borrowingFee != 0) {\\n            /// Increase the storage variable keeping track of the accumulated fees.\\n            borrowingFeeTokensHeld[feeToken] = borrowingFeeTokensHeld[feeToken].add(borrowingFee);\\n\\n            emit PayBorrowingFee(user, feeToken, loanId, borrowingFee);\\n\\n            /// Pay the token reward to the user.\\n            _payFeeReward(user, loanId, feeToken, feeTokenPair, borrowingFee);\\n        }\\n    }\\n\\n    /**\\n     * @notice Settle the lending fee (based on the interest). Pay no token reward to the user.\\n     * @param user The address to send the reward to.\\n     * @param feeToken The address of the token in which the lending fee is paid.\\n     * @param lendingFee The height of the fee.\\n     * */\\n    function _payLendingFee(\\n        address user,\\n        address feeToken,\\n        uint256 lendingFee\\n    ) internal {\\n        if (lendingFee != 0) {\\n            /// Increase the storage variable keeping track of the accumulated fees.\\n            lendingFeeTokensHeld[feeToken] = lendingFeeTokensHeld[feeToken].add(lendingFee);\\n\\n            emit PayLendingFee(user, feeToken, lendingFee);\\n\\n            //// NOTE: Lenders do not receive a fee reward ////\\n        }\\n    }\\n\\n    /// Settle and pay borrowers based on the fees generated by their interest payments.\\n    function _settleFeeRewardForInterestExpense(\\n        LoanInterest storage loanInterestLocal,\\n        bytes32 loanId,\\n        address feeToken,\\n        address feeTokenPair,\\n        address user,\\n        uint256 interestTime\\n    ) internal {\\n        /// This represents the fee generated by a borrower's interest payment.\\n        uint256 interestExpenseFee =\\n            interestTime\\n                .sub(loanInterestLocal.updatedTimestamp)\\n                .mul(loanInterestLocal.owedPerDay)\\n                .mul(lendingFeePercent)\\n                .div(1 days * 10**20);\\n\\n        loanInterestLocal.updatedTimestamp = interestTime;\\n\\n        if (interestExpenseFee != 0) {\\n            _payFeeReward(user, loanId, feeToken, feeTokenPair, interestExpenseFee);\\n        }\\n    }\\n\\n    /**\\n     * @notice Pay the potocolToken reward to user. The reward is worth 50% of the trading/borrowing fee.\\n     * @param user The address to send the reward to.\\n     * @param loanId The Id of the associeated loan - used for logging only.\\n     * @param feeToken The address of the token in which the trading/borrowing fee was paid.\\n     * @param feeAmount The height of the fee.\\n     * */\\n    function _payFeeReward(\\n        address user,\\n        bytes32 loanId,\\n        address feeToken,\\n        address feeTokenPair,\\n        uint256 feeAmount\\n    ) internal {\\n        uint256 rewardAmount;\\n        uint256 _feeRebatePercent = feeRebatePercent;\\n        address _priceFeeds = priceFeeds;\\n\\n        if (specialRebates[feeToken][feeTokenPair] > 0) {\\n            _feeRebatePercent = specialRebates[feeToken][feeTokenPair];\\n        }\\n\\n        /// Note: this should be refactored.\\n        /// Calculate the reward amount, querying the price feed.\\n        (bool success, bytes memory data) =\\n            _priceFeeds.staticcall(\\n                abi.encodeWithSelector(\\n                    IPriceFeeds(_priceFeeds).queryReturn.selector,\\n                    feeToken,\\n                    sovTokenAddress, /// Price rewards using BZRX price rather than vesting token price.\\n                    feeAmount.mul(_feeRebatePercent).div(10**20)\\n                )\\n            );\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if eq(success, 1) {\\n                rewardAmount := mload(add(data, 32))\\n            }\\n        }\\n\\n        // Check the dedicated SOV that is used to pay trading rebate rewards\\n        uint256 dedicatedSOV = ISovryn(address(this)).getDedicatedSOVRebate();\\n        if (rewardAmount != 0 && dedicatedSOV >= rewardAmount) {\\n            IERC20(sovTokenAddress).approve(lockedSOVAddress, rewardAmount);\\n\\n            (bool success, ) =\\n                lockedSOVAddress.call(\\n                    abi.encodeWithSignature(\\n                        \\\"deposit(address,uint256,uint256)\\\",\\n                        user,\\n                        rewardAmount,\\n                        tradingRebateRewardsBasisPoint\\n                    )\\n                );\\n\\n            if (success) {\\n                protocolTokenPaid = protocolTokenPaid.add(rewardAmount);\\n\\n                emit EarnReward(\\n                    user,\\n                    sovTokenAddress,\\n                    loanId,\\n                    _feeRebatePercent,\\n                    rewardAmount,\\n                    tradingRebateRewardsBasisPoint\\n                );\\n            } else {\\n                emit EarnRewardFail(\\n                    user,\\n                    sovTokenAddress,\\n                    loanId,\\n                    _feeRebatePercent,\\n                    rewardAmount,\\n                    tradingRebateRewardsBasisPoint\\n                );\\n            }\\n        } else if (rewardAmount != 0 && dedicatedSOV < rewardAmount) {\\n            emit EarnRewardFail(\\n                user,\\n                sovTokenAddress,\\n                loanId,\\n                _feeRebatePercent,\\n                rewardAmount,\\n                tradingRebateRewardsBasisPoint\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9094bce5eab7109594a795982a779641c951c2617a618f5eab1f651b3b945077\"},\"contracts/mixins/ModuleCommonFunctionalities.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"../core/State.sol\\\";\\n\\ncontract ModuleCommonFunctionalities is State {\\n    modifier whenNotPaused() {\\n        require(!pause, \\\"Paused\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9ed7a6a635ef960b53888b28a2a6bed8b071255cad8cd33f00386a634cbddb74\"},\"contracts/mixins/VaultController.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../core/State.sol\\\";\\n\\n/**\\n * @title The Vault Controller contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized margin\\n * trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract implements functionality to deposit and withdraw wrBTC and\\n * other tokens from the vault.\\n * */\\ncontract VaultController is State {\\n    using SafeERC20 for IERC20;\\n\\n    event VaultDeposit(address indexed asset, address indexed from, uint256 amount);\\n    event VaultWithdraw(address indexed asset, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Deposit wrBTC into the vault.\\n     *\\n     * @param from The address of the account paying the deposit.\\n     * @param value The amount of wrBTC tokens to transfer.\\n     */\\n    function vaultEtherDeposit(address from, uint256 value) internal {\\n        IWrbtcERC20 _wrbtcToken = wrbtcToken;\\n        _wrbtcToken.deposit.value(value)();\\n\\n        emit VaultDeposit(address(_wrbtcToken), from, value);\\n    }\\n\\n    /**\\n     * @notice Withdraw wrBTC from the vault.\\n     *\\n     * @param to The address of the recipient.\\n     * @param value The amount of wrBTC tokens to transfer.\\n     */\\n    function vaultEtherWithdraw(address to, uint256 value) internal {\\n        if (value != 0) {\\n            IWrbtcERC20 _wrbtcToken = wrbtcToken;\\n            uint256 balance = address(this).balance;\\n            if (value > balance) {\\n                _wrbtcToken.withdraw(value - balance);\\n            }\\n            Address.sendValue(to, value);\\n\\n            emit VaultWithdraw(address(_wrbtcToken), to, value);\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposit tokens into the vault.\\n     *\\n     * @param token The address of the token instance.\\n     * @param from The address of the account paying the deposit.\\n     * @param value The amount of tokens to transfer.\\n     */\\n    function vaultDeposit(\\n        address token,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            IERC20(token).safeTransferFrom(from, address(this), value);\\n\\n            emit VaultDeposit(token, from, value);\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw tokens from the vault.\\n     *\\n     * @param token The address of the token instance.\\n     * @param to The address of the recipient.\\n     * @param value The amount of tokens to transfer.\\n     */\\n    function vaultWithdraw(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            IERC20(token).safeTransfer(to, value);\\n\\n            emit VaultWithdraw(token, to, value);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer tokens from an account into another one.\\n     *\\n     * @param token The address of the token instance.\\n     * @param from The address of the account paying.\\n     * @param to The address of the recipient.\\n     * @param value The amount of tokens to transfer.\\n     */\\n    function vaultTransfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            if (from == address(this)) {\\n                IERC20(token).safeTransfer(to, value);\\n            } else {\\n                IERC20(token).safeTransferFrom(from, to, value);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Approve an allowance of tokens to be spent by an account.\\n     *\\n     * @param token The address of the token instance.\\n     * @param to The address of the spender.\\n     * @param value The amount of tokens to allow.\\n     */\\n    function vaultApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (value != 0 && IERC20(token).allowance(address(this), to) != 0) {\\n            IERC20(token).safeApprove(to, 0);\\n        }\\n        IERC20(token).safeApprove(to, value);\\n    }\\n}\\n\",\"keccak256\":\"0xdcde4eee041b77ec9b73378a4a75b4d20d62f2e76f96f759d55260cf6717d0f3\"},\"contracts/modules/SwapsExternal.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../core/State.sol\\\";\\nimport \\\"../mixins/VaultController.sol\\\";\\nimport \\\"../swaps/SwapsUser.sol\\\";\\nimport \\\"../mixins/ModuleCommonFunctionalities.sol\\\";\\n\\n/**\\n * @title Swaps External contract.\\n *\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains functions to calculate and execute swaps.\\n * */\\ncontract SwapsExternal is VaultController, SwapsUser, ModuleCommonFunctionalities {\\n    /**\\n     * @notice Empty public constructor.\\n     * */\\n    constructor() public {}\\n\\n    /**\\n     * @notice Fallback function is to react to receiving value (rBTC).\\n     * */\\n    function() external {\\n        revert(\\\"fallback not allowed\\\");\\n    }\\n\\n    /**\\n     * @notice Set function selectors on target contract.\\n     *\\n     * @param target The address of the target contract.\\n     * */\\n    function initialize(address target) external onlyOwner {\\n        address prevModuleContractAddress = logicTargets[this.swapExternal.selector];\\n        _setTarget(this.swapExternal.selector, target);\\n        _setTarget(this.getSwapExpectedReturn.selector, target);\\n        _setTarget(this.checkPriceDivergence.selector, target);\\n        emit ProtocolModuleContractReplaced(prevModuleContractAddress, target, \\\"SwapsExternal\\\");\\n    }\\n\\n    /**\\n     * @notice Perform a swap w/ tokens or rBTC as source currency.\\n     *\\n     * @dev External wrapper that calls SwapsUser::_swapsCall\\n     * after turning potential incoming rBTC into wrBTC tokens.\\n     *\\n     * @param sourceToken The address of the source token instance.\\n     * @param destToken The address of the destiny token instance.\\n     * @param receiver The address of the recipient account.\\n     * @param returnToSender The address of the sender account.\\n     * @param sourceTokenAmount The amount of source tokens.\\n     * @param requiredDestTokenAmount The amount of required destiny tokens.\\n     * @param minReturn Minimum amount (position size) in the collateral tokens.\\n     * @param swapData Additional swap data (not in use yet).\\n     *\\n     * @return destTokenAmountReceived The amount of destiny tokens sent.\\n     * @return sourceTokenAmountUsed The amount of source tokens spent.\\n     * */\\n    function swapExternal(\\n        address sourceToken,\\n        address destToken,\\n        address receiver,\\n        address returnToSender,\\n        uint256 sourceTokenAmount,\\n        uint256 requiredDestTokenAmount,\\n        uint256 minReturn,\\n        bytes memory swapData\\n    )\\n        public\\n        payable\\n        nonReentrant\\n        whenNotPaused\\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed)\\n    {\\n        require(sourceTokenAmount != 0, \\\"sourceTokenAmount == 0\\\");\\n        checkPriceDivergence(sourceToken, destToken, sourceTokenAmount, minReturn);\\n\\n        /// @dev Get payed value, be it rBTC or tokenized.\\n        if (msg.value != 0) {\\n            if (sourceToken == address(0)) {\\n                sourceToken = address(wrbtcToken);\\n            }\\n            require(sourceToken == address(wrbtcToken), \\\"sourceToken mismatch\\\");\\n            require(msg.value == sourceTokenAmount, \\\"sourceTokenAmount mismatch\\\");\\n\\n            /// @dev Update wrBTC balance for this contract.\\n            wrbtcToken.deposit.value(sourceTokenAmount)();\\n        } else {\\n            if (address(this) != msg.sender) {\\n                IERC20(sourceToken).safeTransferFrom(msg.sender, address(this), sourceTokenAmount);\\n            }\\n        }\\n\\n        /// @dev Perform the swap w/ tokens.\\n        (destTokenAmountReceived, sourceTokenAmountUsed) = _swapsCall(\\n            [\\n                sourceToken,\\n                destToken,\\n                receiver,\\n                returnToSender,\\n                msg.sender /// user\\n            ],\\n            [\\n                sourceTokenAmount, /// minSourceTokenAmount\\n                sourceTokenAmount, /// maxSourceTokenAmount\\n                requiredDestTokenAmount\\n            ],\\n            0, /// loanId (not tied to a specific loan)\\n            false, /// bypassFee\\n            swapData,\\n            true // the flag for swapExternal (so that it will use the swapExternalFeePercent)\\n        );\\n\\n        emit ExternalSwap(\\n            msg.sender, /// user\\n            sourceToken,\\n            destToken,\\n            sourceTokenAmountUsed,\\n            destTokenAmountReceived\\n        );\\n    }\\n\\n    /**\\n     * @notice Get the swap expected return value.\\n     *\\n     * @dev External wrapper that calls SwapsUser::_swapsExpectedReturn\\n     *\\n     * @param sourceToken The address of the source token instance.\\n     * @param destToken The address of the destiny token instance.\\n     * @param sourceTokenAmount The amount of source tokens.\\n     *\\n     * @return The expected return value.\\n     * */\\n    function getSwapExpectedReturn(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceTokenAmount\\n    ) external view returns (uint256) {\\n        return _swapsExpectedReturn(sourceToken, destToken, sourceTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Check the slippage based on the swapExpectedReturn.\\n     *\\n     * @param sourceToken The address of the source token instance.\\n     * @param destToken The address of the destiny token instance.\\n     * @param sourceTokenAmount The amount of source tokens.\\n     * @param minReturn The amount (max slippage) that will be compared to the swapsExpectedReturn.\\n     *\\n     */\\n    function checkPriceDivergence(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceTokenAmount,\\n        uint256 minReturn\\n    ) public view {\\n        uint256 destTokenAmount = _swapsExpectedReturn(sourceToken, destToken, sourceTokenAmount);\\n        require(destTokenAmount >= minReturn, \\\"destTokenAmountReceived too low\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x673d4a652e2132774ef5bac9e15839c39069cb60858fe3893930fc4f4a078b6f\"},\"contracts/modules/interfaces/ProtocolAffiliatesInterface.sol\":{\"content\":\"/**\\n * Copyright 2020, Denis Savelev. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\ninterface ProtocolAffiliatesInterface {\\n    function setAffiliatesReferrer(address user, address referrer) external;\\n\\n    function setUserNotFirstTradeFlag(address user_) external;\\n\\n    function getUserNotFirstTradeFlag(address user_) external returns (bool);\\n\\n    function payTradingFeeToAffiliatesReferrer(\\n        address affiliate,\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256 affiliatesBonusSOVAmount, uint256 affiliatesBonusTokenAmount);\\n}\\n\",\"keccak256\":\"0x42f259156db09a06e3dcdf0ab9c6774712616b35e6baff97999a2a534d1c9c64\"},\"contracts/openzeppelin/Address.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html\\n     *   #use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x23df48a01dbac9b25e86c9131174fb7752bbc7e741e63f1aa982de22e055ad54\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen <remco@2\\u03c0.com>, Eenae <alexey@mixbytes.io>\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard {\\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\\n\\n    /// @dev Constant for locked guard state\\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\\n\\n    /**\\n     * @dev We use a single lock for the whole contract.\\n     */\\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * If you mark a function `nonReentrant`, you should also\\n     * mark it `external`. Calling one `nonReentrant` function from\\n     * another is not supported. Instead, you can implement a\\n     * `private` function doing the actual work, and an `external`\\n     * wrapper marked as `nonReentrant`.\\n     */\\n    modifier nonReentrant() {\\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \\\"nonReentrant\\\");\\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\\n        _;\\n        reentrancyLock = REENTRANCY_GUARD_FREE;\\n    }\\n}\\n\",\"keccak256\":\"0xd347de96ad57d1e45b07a2efe3050c1bd4b809236bbf354acb593de56d21a5c9\"},\"contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).sub(\\n                value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe99b4d979cb976a6b70e297600242afe38b8cd8f1b1ba6ee373f39f7abb3ca79\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"},\"contracts/reentrancy/Mutex.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/*\\n * @title Global Mutex contract\\n *\\n * @notice A mutex contract that allows only one function to be called at a time out\\n * of a large set of functions. *Anyone* in the network can freely use any instance\\n * of this contract to add a universal mutex to any function in any contract.\\n */\\ncontract Mutex {\\n    /*\\n     * We use an uint to store the mutex state.\\n     */\\n    uint256 public value;\\n\\n    /*\\n     * @notice Increment the mutex state and return the new value.\\n     *\\n     * @dev This is the function that will be called by anyone to change the mutex\\n     * state. It is purposely not protected by any access control\\n     */\\n    function incrementAndGetValue() external returns (uint256) {\\n        /*\\n         * increment value using unsafe math. This is safe because we are\\n         * pretty certain no one will ever increment the value 2^256 times\\n         * in a single transaction.\\n         */\\n        return ++value;\\n    }\\n}\\n\",\"keccak256\":\"0xd10b0fd07d5fed1ae1237e7c87e6501970fce2a86e2b8862e502258b0d3aeb2c\"},\"contracts/reentrancy/SharedReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"./Mutex.sol\\\";\\n\\n/*\\n * @title Abstract contract for shared reentrancy guards\\n *\\n * @notice Exposes a single modifier `globallyNonReentrant` that can be used to ensure\\n * that there's no reentrancy between *any* functions marked with the modifier.\\n *\\n * @dev The Mutex contract address is hardcoded because the address is deployed using a\\n * special deployment method (similar to ERC1820Registry). This contract therefore has no\\n * state and is thus safe to add to the inheritance chain of upgradeable contracts.\\n */\\ncontract SharedReentrancyGuard {\\n    /*\\n     * This is the address of the mutex contract that will be used as the\\n     * reentrancy guard.\\n     *\\n     * The address is hardcoded to avoid changing the memory layout of\\n     * derived contracts (possibly upgradable). Hardcoding the address is possible,\\n     * because the Mutex contract is always deployed to the same address, with the\\n     * same method used in the deployment of ERC1820Registry.\\n     */\\n    Mutex private constant MUTEX = Mutex(0xba10edD6ABC7696Eae685839217BdcC42139612b);\\n\\n    /*\\n     * This is the modifier that will be used to protect functions from\\n     * reentrancy. It will call the mutex contract to increment the mutex\\n     * state and then revert if the mutex state was changed by another\\n     * nested call.\\n     */\\n    modifier globallyNonReentrant() {\\n        uint256 previous = MUTEX.incrementAndGetValue();\\n\\n        _;\\n\\n        /*\\n         * If the mutex state was changed by a nested function call, then\\n         * the value of the state variable will be different from the previous value.\\n         */\\n        require(previous == MUTEX.value(), \\\"reentrancy violation\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2d0e61b104b91c1764f20fbeb381ba0f8a8889934ba7f6e8a167ed542ec2c124\"},\"contracts/swaps/SwapsUser.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC <https://bzx.network/>. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"../core/State.sol\\\";\\nimport \\\"../feeds/IPriceFeeds.sol\\\";\\nimport \\\"../events/SwapsEvents.sol\\\";\\nimport \\\"../mixins/FeesHelper.sol\\\";\\nimport \\\"./connectors/SwapsImplSovrynSwapLib.sol\\\";\\n\\n/**\\n * @title Perform token swaps for loans and trades.\\n * */\\ncontract SwapsUser is State, SwapsEvents, FeesHelper {\\n    /**\\n     * @notice Internal loan swap.\\n     *\\n     * @param loanId The ID of the loan.\\n     * @param sourceToken The address of the source tokens.\\n     * @param destToken The address of destination tokens.\\n     * @param user The user address.\\n     * @param minSourceTokenAmount The minimum amount of source tokens to swap.\\n     * @param maxSourceTokenAmount The maximum amount of source tokens to swap.\\n     * @param requiredDestTokenAmount The required amount of destination tokens.\\n     * @param bypassFee To bypass or not the fee.\\n     * @param loanDataBytes The payload for the call. These loan DataBytes are\\n     *   additional loan data (not in use for token swaps).\\n     *\\n     * @return destTokenAmountReceived\\n     * @return sourceTokenAmountUsed\\n     * @return sourceToDestSwapRate\\n     * */\\n    function _loanSwap(\\n        bytes32 loanId,\\n        address sourceToken,\\n        address destToken,\\n        address user,\\n        uint256 minSourceTokenAmount,\\n        uint256 maxSourceTokenAmount,\\n        uint256 requiredDestTokenAmount,\\n        bool bypassFee,\\n        bytes memory loanDataBytes\\n    )\\n        internal\\n        returns (\\n            uint256 destTokenAmountReceived,\\n            uint256 sourceTokenAmountUsed,\\n            uint256 sourceToDestSwapRate\\n        )\\n    {\\n        (destTokenAmountReceived, sourceTokenAmountUsed) = _swapsCall(\\n            [\\n                sourceToken,\\n                destToken,\\n                address(this), // receiver\\n                address(this), // returnToSender\\n                user\\n            ],\\n            [minSourceTokenAmount, maxSourceTokenAmount, requiredDestTokenAmount],\\n            loanId,\\n            bypassFee,\\n            loanDataBytes,\\n            false // swap external flag, set to false so that it will use the tradingFeePercent\\n        );\\n\\n        /// Will revert if swap size too large.\\n        _checkSwapSize(sourceToken, sourceTokenAmountUsed);\\n\\n        /// Will revert if disagreement found.\\n        sourceToDestSwapRate = IPriceFeeds(priceFeeds).checkPriceDisagreement(\\n            sourceToken,\\n            destToken,\\n            sourceTokenAmountUsed,\\n            destTokenAmountReceived,\\n            maxDisagreement\\n        );\\n\\n        emit LoanSwap(\\n            loanId,\\n            sourceToken,\\n            destToken,\\n            user,\\n            sourceTokenAmountUsed,\\n            destTokenAmountReceived\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate amount of source and destination tokens.\\n     *\\n     * @dev Wrapper for _swapsCall_internal function.\\n     *\\n     * @param addrs The array of addresses.\\n     * @param vals The array of values.\\n     * @param loanId The Id of the associated loan.\\n     * @param miscBool True/false to bypassFee.\\n     * @param loanDataBytes Additional loan data (not in use yet).\\n     *\\n     * @return destTokenAmountReceived The amount of destination tokens received.\\n     * @return sourceTokenAmountUsed The amount of source tokens used.\\n     * */\\n    function _swapsCall(\\n        address[5] memory addrs,\\n        uint256[3] memory vals,\\n        bytes32 loanId,\\n        bool miscBool, /// bypassFee\\n        bytes memory loanDataBytes,\\n        bool isSwapExternal\\n    ) internal returns (uint256, uint256) {\\n        /// addrs[0]: sourceToken\\n        /// addrs[1]: destToken\\n        /// addrs[2]: receiver\\n        /// addrs[3]: returnToSender\\n        /// addrs[4]: user\\n        /// vals[0]:  minSourceTokenAmount\\n        /// vals[1]:  maxSourceTokenAmount\\n        /// vals[2]:  requiredDestTokenAmount\\n\\n        require(vals[0] != 0 || vals[1] != 0, \\\"min or max source token amount needs to be set\\\");\\n\\n        if (vals[1] == 0) {\\n            vals[1] = vals[0];\\n        }\\n        require(vals[0] <= vals[1], \\\"sourceAmount larger than max\\\");\\n\\n        uint256 destTokenAmountReceived;\\n        uint256 sourceTokenAmountUsed;\\n\\n        uint256 tradingFee;\\n        if (!miscBool) {\\n            /// bypassFee\\n            if (vals[2] == 0) {\\n                /// condition: vals[0] will always be used as sourceAmount\\n\\n                if (isSwapExternal) {\\n                    tradingFee = _getSwapExternalFee(vals[0]);\\n                } else {\\n                    tradingFee = _getTradingFee(vals[0]);\\n                }\\n\\n                if (tradingFee != 0) {\\n                    _payTradingFee(\\n                        addrs[4], /// user\\n                        loanId,\\n                        addrs[0], /// sourceToken (feeToken)\\n                        addrs[1], /// pairToken (used to check if there is any special rebates or not) -- to pay fee reward\\n                        tradingFee\\n                    );\\n\\n                    vals[0] = vals[0].sub(tradingFee);\\n                }\\n            } else {\\n                /// Condition: unknown sourceAmount will be used.\\n\\n                if (isSwapExternal) {\\n                    tradingFee = _getSwapExternalFee(vals[2]);\\n                } else {\\n                    tradingFee = _getTradingFee(vals[2]);\\n                }\\n\\n                if (tradingFee != 0) {\\n                    vals[2] = vals[2].add(tradingFee);\\n                }\\n            }\\n        }\\n\\n        require(loanDataBytes.length == 0, \\\"invalid state\\\");\\n\\n        (destTokenAmountReceived, sourceTokenAmountUsed) = _swapsCall_internal(addrs, vals);\\n\\n        if (vals[2] == 0) {\\n            /// There's no minimum destTokenAmount, but all of vals[0]\\n            /// (minSourceTokenAmount) must be spent.\\n            require(sourceTokenAmountUsed == vals[0], \\\"swap too large to fill\\\");\\n\\n            if (tradingFee != 0) {\\n                sourceTokenAmountUsed = sourceTokenAmountUsed.add(tradingFee);\\n            }\\n        } else {\\n            /// There's a minimum destTokenAmount required, but\\n            /// sourceTokenAmountUsed won't be greater\\n            /// than vals[1] (maxSourceTokenAmount)\\n            require(sourceTokenAmountUsed <= vals[1], \\\"swap fill too large\\\");\\n            require(destTokenAmountReceived >= vals[2], \\\"insufficient swap liquidity\\\");\\n\\n            if (tradingFee != 0) {\\n                _payTradingFee(\\n                    addrs[4], /// user\\n                    loanId, /// loanId,\\n                    addrs[1], /// destToken (feeToken)\\n                    addrs[0], /// pairToken (used to check if there is any special rebates or not) -- to pay fee reward\\n                    tradingFee\\n                );\\n\\n                destTokenAmountReceived = destTokenAmountReceived.sub(tradingFee);\\n            }\\n        }\\n\\n        return (destTokenAmountReceived, sourceTokenAmountUsed);\\n    }\\n\\n    /**\\n     * @notice Calculate amount of source and destination tokens.\\n     *\\n     * @dev Calls swapsImpl::internalSwap\\n     *\\n     * @param addrs The array of addresses.\\n     * @param vals The array of values.\\n     *\\n     * @return destTokenAmountReceived The amount of destination tokens received.\\n     * @return sourceTokenAmountUsed The amount of source tokens used.\\n     * */\\n    function _swapsCall_internal(address[5] memory addrs, uint256[3] memory vals)\\n        internal\\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed)\\n    {\\n        SwapsImplSovrynSwapLib.SwapParams memory swapParams;\\n\\n        swapParams.sourceTokenAddress = addrs[0];\\n        swapParams.destTokenAddress = addrs[1];\\n        swapParams.receiverAddress = addrs[2];\\n        swapParams.returnToSenderAddress = addrs[3];\\n        swapParams.minSourceTokenAmount = vals[0];\\n        swapParams.maxSourceTokenAmount = vals[1];\\n        swapParams.requiredDestTokenAmount = vals[2];\\n\\n        (destTokenAmountReceived, sourceTokenAmountUsed) = SwapsImplSovrynSwapLib.swap(swapParams);\\n    }\\n\\n    /**\\n     * @notice Calculate expected amount of destination tokens.\\n     *\\n     * @dev Calls swapsImpl::internalExpectedReturn\\n     *\\n     * @param sourceToken The address of the source tokens.\\n     * @param destToken The address of the destination tokens.\\n     * @param sourceTokenAmount The amount of the source tokens.\\n     *\\n     * @param destTokenAmount The amount of destination tokens.\\n     * */\\n    function _swapsExpectedReturn(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceTokenAmount\\n    ) internal view returns (uint256 destTokenAmount) {\\n        destTokenAmount = SwapsImplSovrynSwapLib.getExpectedReturn(\\n            sourceToken,\\n            destToken,\\n            sourceTokenAmount\\n        );\\n    }\\n\\n    /**\\n     * @notice Verify that the amount of tokens are under the swap limit.\\n     *\\n     * @dev Calls priceFeeds::amountInEth\\n     *\\n     * @param tokenAddress The address of the token to calculate price.\\n     * @param amount The amount of tokens to calculate price.\\n     * */\\n    function _checkSwapSize(address tokenAddress, uint256 amount) internal view {\\n        uint256 _maxSwapSize = maxSwapSize;\\n        if (_maxSwapSize != 0) {\\n            uint256 amountInEth;\\n            if (tokenAddress == address(wrbtcToken)) {\\n                amountInEth = amount;\\n            } else {\\n                amountInEth = IPriceFeeds(priceFeeds).amountInEth(tokenAddress, amount);\\n            }\\n            require(amountInEth <= _maxSwapSize, \\\"swap too large\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7dfc45e91455458caf886b49c96ad426de06cddffa442c16628eba4974f3d323\"},\"contracts/swaps/connectors/SwapsImplSovrynSwapLib.sol\":{\"content\":\"pragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../feeds/IPriceFeeds.sol\\\";\\nimport \\\"../../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ISovrynSwapNetwork.sol\\\";\\nimport \\\"./interfaces/IContractRegistry.sol\\\";\\nimport \\\"../../interfaces/ISovryn.sol\\\";\\n\\n/**\\n * @title Swaps Implementation Sovryn contract.\\n *\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the implementation of swap process and rate\\n * calculations for Sovryn network.\\n * */\\nlibrary SwapsImplSovrynSwapLib {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct SwapParams {\\n        address sourceTokenAddress;\\n        address destTokenAddress;\\n        address receiverAddress;\\n        address returnToSenderAddress;\\n        uint256 minSourceTokenAmount;\\n        uint256 maxSourceTokenAmount;\\n        uint256 requiredDestTokenAmount;\\n    }\\n\\n    /// bytes32 contractName = hex\\\"42616e636f724e6574776f726b\\\"; /// \\\"SovrynSwapNetwork\\\"\\n\\n    /**\\n     * Get the hex name of a contract.\\n     * @param source The name of the contract.\\n     * */\\n    function getContractHexName(string memory source) public pure returns (bytes32 result) {\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n\\n    /**\\n     * Look up the Sovryn swap network contract registered at the given address.\\n     * @param sovrynSwapRegistryAddress The address of the registry.\\n     * */\\n    function getSovrynSwapNetworkContract(address sovrynSwapRegistryAddress)\\n        public\\n        view\\n        returns (ISovrynSwapNetwork)\\n    {\\n        /// State variable sovrynSwapContractRegistryAddress is part of\\n        /// State.sol and set in ProtocolSettings.sol and this function\\n        /// needs to work without delegate call as well -> therefore pass it.\\n        IContractRegistry contractRegistry = IContractRegistry(sovrynSwapRegistryAddress);\\n        return\\n            ISovrynSwapNetwork(\\n                contractRegistry.addressOf(getContractHexName(\\\"SovrynSwapNetwork\\\"))\\n            );\\n    }\\n\\n    /**\\n     * Swap the source token for the destination token on the oracle based AMM.\\n     * On loan opening: minSourceTokenAmount = maxSourceTokenAmount and requiredDestTokenAmount = 0\\n     *      -> swap the minSourceTokenAmount\\n     * On loan rollover: (swap interest) minSourceTokenAmount = 0, maxSourceTokenAmount = complete collateral and requiredDestTokenAmount > 0\\n     *      -> amount of required source tokens to swap is estimated (want to fill requiredDestTokenAmount, not more). maxSourceTokenAMount is not exceeded.\\n     * On loan closure: minSourceTokenAmount <= maxSourceTokenAmount and requiredDestTokenAmount >= 0\\n     *      -> same as on rollover. minimum amount is not considered at all.\\n     *\\n     * @param params SwapParams struct\\n     * sourceTokenAddress The address of the source tokens.\\n     * destTokenAddress The address of the destination tokens.\\n     * receiverAddress The address who will received the swap token results\\n     * returnToSenderAddress The address to return unspent tokens to (when called by the protocol, it's always the protocol contract).\\n     * minSourceTokenAmount The minimum amount of source tokens to swapped (only considered if requiredDestTokens == 0).\\n     * maxSourceTokenAmount The maximum amount of source tokens to swapped.\\n     * requiredDestTokenAmount The required amount of destination tokens.\\n     * */\\n    function swap(SwapParams memory params)\\n        public\\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed)\\n    {\\n        require(params.sourceTokenAddress != params.destTokenAddress, \\\"source == dest\\\");\\n\\n        ISovryn iSovryn = ISovryn(address(this));\\n        require(\\n            iSovryn.supportedTokens(params.sourceTokenAddress) &&\\n                iSovryn.supportedTokens(params.destTokenAddress),\\n            \\\"invalid tokens\\\"\\n        );\\n\\n        ISovrynSwapNetwork sovrynSwapNetwork =\\n            getSovrynSwapNetworkContract(iSovryn.sovrynSwapContractRegistryAddress());\\n\\n        IERC20[] memory path =\\n            _getConversionPath(\\n                params.sourceTokenAddress,\\n                params.destTokenAddress,\\n                sovrynSwapNetwork\\n            );\\n\\n        uint256 minReturn = 1;\\n        sourceTokenAmountUsed = params.minSourceTokenAmount;\\n\\n        /// If the required amount of destination tokens is passed, we need to\\n        /// calculate the estimated amount of source tokens regardless of the\\n        /// minimum source token amount (name is misleading).\\n        if (params.requiredDestTokenAmount > 0) {\\n            sourceTokenAmountUsed = _estimateSourceTokenAmount(\\n                params.sourceTokenAddress,\\n                params.destTokenAddress,\\n                params.requiredDestTokenAmount,\\n                params.maxSourceTokenAmount\\n            );\\n            /// sovrynSwapNetwork.rateByPath does not return a rate, but instead the amount of destination tokens returned.\\n            require(\\n                sovrynSwapNetwork.rateByPath(path, sourceTokenAmountUsed) >=\\n                    params.requiredDestTokenAmount,\\n                \\\"insufficient source tokens provided.\\\"\\n            );\\n            minReturn = params.requiredDestTokenAmount;\\n        }\\n\\n        require(sourceTokenAmountUsed > 0, \\\"cannot swap 0 tokens\\\");\\n\\n        _allowTransfer(\\n            sourceTokenAmountUsed,\\n            params.sourceTokenAddress,\\n            address(sovrynSwapNetwork)\\n        );\\n\\n        /// @dev Note: the kyber connector uses .call() to interact with kyber\\n        /// to avoid bubbling up. here we allow bubbling up.\\n        destTokenAmountReceived = sovrynSwapNetwork.convertByPath(\\n            path,\\n            sourceTokenAmountUsed,\\n            minReturn,\\n            params.receiverAddress,\\n            address(0),\\n            0\\n        );\\n\\n        /// If the sender is not the protocol (calling with delegatecall),\\n        /// return the remainder to the specified address.\\n        /// @dev Note: for the case that the swap is used without the\\n        /// protocol. Not sure if it should, though. needs to be discussed.\\n        if (params.returnToSenderAddress != address(this)) {\\n            if (sourceTokenAmountUsed < params.maxSourceTokenAmount) {\\n                /// Send unused source token back.\\n                IERC20(params.sourceTokenAddress).safeTransfer(\\n                    params.returnToSenderAddress,\\n                    params.maxSourceTokenAmount - sourceTokenAmountUsed\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Check whether the existing allowance suffices to transfer\\n     *   the needed amount of tokens.\\n     *   If not, allows the transfer of an arbitrary amount of tokens.\\n     *\\n     * @param tokenAmount The amount to transfer.\\n     * @param tokenAddress The address of the token to transfer.\\n     * @param sovrynSwapNetwork The address of the sovrynSwap network contract.\\n     * */\\n    function _allowTransfer(\\n        uint256 tokenAmount,\\n        address tokenAddress,\\n        address sovrynSwapNetwork\\n    ) internal {\\n        uint256 tempAllowance = IERC20(tokenAddress).allowance(address(this), sovrynSwapNetwork);\\n        if (tempAllowance < tokenAmount) {\\n            IERC20(tokenAddress).safeApprove(sovrynSwapNetwork, uint256(-1));\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the number of source tokens to provide in order to\\n     *   obtain the required destination amount.\\n     *\\n     * @param sourceTokenAddress The address of the source token address.\\n     * @param destTokenAddress The address of the destination token address.\\n     * @param requiredDestTokenAmount The number of destination tokens needed.\\n     * @param maxSourceTokenAmount The maximum number of source tokens to spend.\\n     *\\n     * @return The estimated amount of source tokens needed.\\n     *   Minimum: minSourceTokenAmount, maximum: maxSourceTokenAmount\\n     * */\\n    function _estimateSourceTokenAmount(\\n        address sourceTokenAddress,\\n        address destTokenAddress,\\n        uint256 requiredDestTokenAmount,\\n        uint256 maxSourceTokenAmount\\n    ) internal view returns (uint256 estimatedSourceAmount) {\\n        ISovryn iSovryn = ISovryn(address(this));\\n        uint256 sourceToDestPrecision =\\n            IPriceFeeds(iSovryn.priceFeeds()).queryPrecision(sourceTokenAddress, destTokenAddress);\\n        if (sourceToDestPrecision == 0) return maxSourceTokenAmount;\\n\\n        /// Compute the expected rate for the maxSourceTokenAmount -> if spending less, we can't get a worse rate.\\n        uint256 expectedRate =\\n            getExpectedRate(sourceTokenAddress, destTokenAddress, maxSourceTokenAmount);\\n\\n        /// Compute the source tokens needed to get the required amount with the worst case rate.\\n        estimatedSourceAmount = requiredDestTokenAmount.mul(sourceToDestPrecision).div(\\n            expectedRate\\n        );\\n\\n        /// If the actual rate is exactly the same as the worst case rate, we get rounding issues. So, add a small buffer.\\n        /// buffer = min(estimatedSourceAmount/1000 , sourceBuffer) with sourceBuffer = 10000\\n        uint256 buffer = estimatedSourceAmount.div(1000);\\n        if (buffer > iSovryn.sourceBuffer()) buffer = iSovryn.sourceBuffer();\\n        estimatedSourceAmount = estimatedSourceAmount.add(buffer);\\n\\n        /// Never spend more than the maximum.\\n        if (estimatedSourceAmount == 0 || estimatedSourceAmount > maxSourceTokenAmount)\\n            return maxSourceTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Get the expected rate for 1 source token when exchanging the\\n     *   given amount of source tokens.\\n     *\\n     * @param sourceTokenAddress The address of the source token contract.\\n     * @param destTokenAddress The address of the destination token contract.\\n     * @param sourceTokenAmount The amount of source tokens to get the rate for.\\n     * */\\n    function getExpectedRate(\\n        address sourceTokenAddress,\\n        address destTokenAddress,\\n        uint256 sourceTokenAmount\\n    ) public view returns (uint256) {\\n        ISovrynSwapNetwork sovrynSwapNetwork =\\n            getSovrynSwapNetworkContract(\\n                ISovryn(address(this)).sovrynSwapContractRegistryAddress()\\n            );\\n\\n        IERC20[] memory path =\\n            _getConversionPath(sourceTokenAddress, destTokenAddress, sovrynSwapNetwork);\\n\\n        /// Is returning the total amount of destination tokens.\\n        uint256 expectedReturn = sovrynSwapNetwork.rateByPath(path, sourceTokenAmount);\\n\\n        /// Return the rate for 1 token with 18 decimals.\\n        return expectedReturn.mul(10**18).div(sourceTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Get the expected return amount when exchanging the given\\n     *   amount of source tokens.\\n     *\\n     * @notice Right now, this function is being called directly by _swapsExpectedReturn from the protocol\\n     * So, this function is not using _getConversionPath function since it will try to read the defaultPath storage which is stored in the protocol's slot, and it will cause an issue for direct call.\\n     * Instead, this function is accepting additional parameters called defaultPath which value can be declared by the caller (protocol in this case).\\n     *\\n     * @param sourceTokenAddress The address of the source token contract.\\n     * @param destTokenAddress The address of the destination token contract.\\n     * @param sourceTokenAmount The amount of source tokens to get the return for.\\n     * */\\n    function getExpectedReturn(\\n        address sourceTokenAddress,\\n        address destTokenAddress,\\n        uint256 sourceTokenAmount\\n    ) public view returns (uint256 expectedReturn) {\\n        ISovrynSwapNetwork sovrynSwapNetwork =\\n            getSovrynSwapNetworkContract(\\n                ISovryn(address(this)).sovrynSwapContractRegistryAddress()\\n            );\\n\\n        IERC20[] memory path =\\n            _getConversionPath(sourceTokenAddress, destTokenAddress, sovrynSwapNetwork);\\n\\n        /// Is returning the total amount of destination tokens.\\n        expectedReturn = sovrynSwapNetwork.rateByPath(path, sourceTokenAmount);\\n    }\\n\\n    function _getConversionPath(\\n        address sourceTokenAddress,\\n        address destTokenAddress,\\n        ISovrynSwapNetwork sovrynSwapNetwork\\n    ) private view returns (IERC20[] memory path) {\\n        IERC20[] memory _defaultPathConversion =\\n            ISovryn(address(this)).getDefaultPathConversion(sourceTokenAddress, destTokenAddress);\\n\\n        /// will use the defaultPath if it's set, otherwise query from the SovrynSwapNetwork.\\n        path = _defaultPathConversion.length >= 3\\n            ? _defaultPathConversion\\n            : sovrynSwapNetwork.conversionPath(\\n                IERC20(sourceTokenAddress),\\n                IERC20(destTokenAddress)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x058b8d733422a2421f17d1b159aed69f151ea8d5f48ee507bac5b4e86add8b0c\"},\"contracts/swaps/connectors/interfaces/IContractRegistry.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\ncontract IContractRegistry {\\n    function addressOf(bytes32 contractName) public view returns (address);\\n}\\n\",\"keccak256\":\"0x793c4eefa2ee04cbf0a1a9da28676ac310ed7bf60a27ec7d86de7d7236ccf45b\"},\"contracts/swaps/connectors/interfaces/ISovrynSwapNetwork.sol\":{\"content\":\"pragma solidity >=0.5.8 <=0.5.17;\\n\\nimport \\\"../../../interfaces/IERC20.sol\\\";\\n\\ncontract ISovrynSwapNetwork {\\n    function convertByPath(\\n        IERC20[] calldata _path,\\n        uint256 _amount,\\n        uint256 _minReturn,\\n        address _beneficiary,\\n        address _affiliateAccount,\\n        uint256 _affiliateFee\\n    ) external payable returns (uint256);\\n\\n    function rateByPath(IERC20[] calldata _path, uint256 _amount) external view returns (uint256);\\n\\n    function conversionPath(IERC20 _sourceToken, IERC20 _targetToken)\\n        external\\n        view\\n        returns (IERC20[] memory);\\n}\\n\",\"keccak256\":\"0xcd28e146b77183bff18f78b511912f7ebe60d437430fdaa72ed145fdda61a5ad\"}},\"version\":1}",
  "bytecode": "0x60806040526001600055678ac7230489e80000601555670214e8348c4f000060185567013fbe85edc90000601b55674563918244f40000602055674563918244f40000602155674563918244f400006027556127106028556802b5e3af16b1880000602955650f478e084000602b5567016345785d8a0000602c556802b5e3af16b1880000602f5560036035556801158e460913d000006039553480156100a557600080fd5b5060006100b96001600160e01b0361010c16565b600180546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610110565b3390565b61300980620001206000396000f3fe60806040526004361061036b5760003560e01c80638f32d59b116101c6578063cb6eacd1116100f7578063edab119f11610095578063f589a3e71161006f578063f589a3e7146109af578063f6ddc8b3146109c4578063f706b1f2146109d9578063f851a440146109ee5761036b565b8063edab119f14610965578063f0e085f51461097a578063f2fde38b1461098f5761036b565b8063d473c2da116100d1578063d473c2da146108fa578063d485045e1461090f578063e321b5401461092f578063e8f62764146109505761036b565b8063cb6eacd114610891578063cd5d808d146108c5578063d288208c146108e55761036b565b8063b30643d911610164578063ba4861e91161013e578063ba4861e914610804578063bdee453c14610819578063c4a9081514610839578063c4d66de8146108715761036b565b8063b30643d9146107af578063b7e15241146107cf578063b9cffa3e146107ef5761036b565b8063acc04348116101a0578063acc0434814610741578063ae0a853014610756578063afe840091461076b578063b17da56e1461078d5761036b565b80638f32d59b146106f757806392d894f81461070c578063959083d31461072c5761036b565b80634f28cac2116102a05780637420ca3e1161023e5780637a8faeb8116102185780637a8faeb8146106985780638456cb59146106ad5780638da5cb5b146106c25780638dc48ba5146106d75761036b565b80637420ca3e14610659578063742e67981461066e57806378d849ed146106835761036b565b806362fff3f61161027a57806362fff3f6146105c857806368c4ac26146105f957806369455ddc146106195780636e663730146106395761036b565b80634f28cac21461056f578063569fc1fb14610584578063574442cc146105b35761036b565b80632f4707641161030d5780633fca506e116102e75780633fca506e146104fa5780634115a2b61461051a5780634203e3951461053a5780634699f8461461055a5761036b565b80632f470764146104a55780633432423c146104ba5780633452d2d4146104da5761036b565b80631b7bde74116103495780631b7bde7414610416578063218b39c61461044357806324cc5749146104635780632a324027146104905761036b565b8063065d810f146103995780630676c1b7146103d457806317548b79146103f6575b34801561037757600080fd5b5060405162461bcd60e51b815260040161039090612d6f565b60405180910390fd5b3480156103a557600080fd5b506103b96103b4366004612443565b610a03565b6040516103cb96959493929190612e63565b60405180910390f35b3480156103e057600080fd5b506103e9610a43565b6040516103cb9190612a9e565b34801561040257600080fd5b506103e96104113660046124ce565b610a52565b34801561042257600080fd5b50610436610431366004612293565b610a6d565b6040516103cb9190612ded565b34801561044f57600080fd5b506103e961045e366004612275565b610a8a565b34801561046f57600080fd5b5061048361047e366004612275565b610aa5565b6040516103cb9190612b48565b34801561049c57600080fd5b50610436610aba565b3480156104b157600080fd5b50610436610ac0565b3480156104c657600080fd5b506103b96104d5366004612443565b610ac6565b3480156104e657600080fd5b506104366104f5366004612275565b610b06565b34801561050657600080fd5b50610436610515366004612275565b610b18565b34801561052657600080fd5b506104836105353660046124af565b610b2a565b34801561054657600080fd5b50610436610555366004612275565b610b4a565b34801561056657600080fd5b50610436610b5c565b34801561057b57600080fd5b50610436610b62565b34801561059057600080fd5b506105a461059f366004612491565b610b68565b6040516103cb93929190612e09565b3480156105bf57600080fd5b50610436610b89565b3480156105d457600080fd5b506105e86105e3366004612293565b610b8f565b6040516103cb959493929190612e17565b34801561060557600080fd5b50610483610614366004612275565b610bc9565b34801561062557600080fd5b50610436610634366004612395565b610bde565b34801561064557600080fd5b506103e9610654366004612275565b610bf5565b34801561066557600080fd5b506103e9610c10565b34801561067a57600080fd5b50610436610c1f565b34801561068f57600080fd5b506103e9610c25565b3480156106a457600080fd5b50610436610c34565b3480156106b957600080fd5b50610483610c3a565b3480156106ce57600080fd5b506103e9610c43565b3480156106e357600080fd5b506103e96106f2366004612275565b610c52565b34801561070357600080fd5b50610483610c6d565b34801561071857600080fd5b50610436610727366004612275565b610c93565b34801561073857600080fd5b50610436610ca5565b34801561074d57600080fd5b50610436610cab565b34801561076257600080fd5b50610436610cb1565b34801561077757600080fd5b50610780610cb7565b6040516103cb9190612c80565b34801561079957600080fd5b506107ad6107a83660046123e2565b610cc6565b005b3480156107bb57600080fd5b506104366107ca366004612275565b610cfc565b3480156107db57600080fd5b506104366107ea366004612275565b610d0e565b3480156107fb57600080fd5b506103e9610d20565b34801561081057600080fd5b506103e9610d2f565b34801561082557600080fd5b50610436610834366004612275565b610d3e565b34801561084557600080fd5b50610859610854366004612491565b610d50565b6040516103cb9c9b9a99989796959493929190612bcd565b34801561087d57600080fd5b506107ad61088c366004612275565b610dc2565b34801561089d57600080fd5b506108b16108ac366004612491565b610ea5565b6040516103cb989796959493929190612b56565b3480156108d157600080fd5b506104366108e0366004612293565b610ef7565b3480156108f157600080fd5b506103e9610f14565b34801561090657600080fd5b50610436610f23565b34801561091b57600080fd5b5061043661092a366004612275565b610f29565b61094261093d3660046122cd565b610f3b565b6040516103cb929190612dfb565b34801561095c57600080fd5b506103e9611184565b34801561097157600080fd5b50610436611193565b34801561098657600080fd5b50610436611199565b34801561099b57600080fd5b506107ad6109aa366004612275565b61119f565b3480156109bb57600080fd5b506104366111cf565b3480156109d057600080fd5b506104366111d5565b3480156109e557600080fd5b506103e96111db565b3480156109fa57600080fd5b506103e96111ea565b6009602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b6031546001600160a01b031681565b6005602052600090815260409020546001600160a01b031681565b603b60209081526000928352604080842090915290825290205481565b6023602052600090815260409020546001600160a01b031681565b60326020526000908152604090205460ff1681565b60185481565b601f5481565b6008602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b601a6020526000908152604090205481565b602a6020526000908152604090205481565b600a60209081526000928352604080842090915290825290205460ff1681565b60166020526000908152604090205481565b60155481565b60295481565b600c6020526000908152604090208054600182015460029092015490919083565b602b5481565b600b602090815260009283526040808420909152908252902080546001820154600283015460038401546004909401549293919290919085565b60266020526000908152604090205460ff1681565b6000610beb8484846111f9565b90505b9392505050565b6033602052600090815260409020546001600160a01b031681565b6003546001600160a01b031681565b60355481565b6002546001600160a01b031681565b601e5481565b603d5460ff1681565b6001546001600160a01b031690565b6022602052600090815260409020546001600160a01b031681565b6001546000906001600160a01b0316610c84611287565b6001600160a01b031614905090565b60176020526000908152604090205481565b602c5481565b602f5481565b60205481565b602d546001600160a01b031681565b6000610cd38585856111f9565b905081811015610cf55760405162461bcd60e51b815260040161039090612d1f565b5050505050565b601d6020526000908152604090205481565b601c6020526000908152604090205481565b6037546001600160a01b031681565b6004546001600160a01b031681565b60366020526000908152604090205481565b600660208190526000918252604090912080546001820154600283015460038401546004850154600586015496860154600787015460088801546009890154600a8a0154600b909a0154989a9799969860ff909616979496949593949293919290916001600160a01b0391821691168c565b610dca610c6d565b610de65760405162461bcd60e51b815260040161039090612d4f565b63038c86d560e61b600081905260056020527fe705b9be7ab1128120df187531812b4c979d3ce42ed227d7df3b23e95341849e546001600160a01b031690610e2e908361128b565b610e3f631a51577760e21b8361128b565b610e506358bed2b760e11b8361128b565b6c14ddd85c1cd15e1d195c9b985b609a1b826001600160a01b0316826001600160a01b03167f1420e3a2094d671bc2eb897941fa3d94ffa37f0cb6d530651946250a2151cb7f60405160405180910390a45050565b6007602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949560ff8516956101009095046001600160a01b03908116959481169493169288565b603c60209081526000928352604080842090915290825290205481565b6038546001600160a01b031681565b60275481565b60196020526000908152604090205481565b600080600160005414610f605760405162461bcd60e51b815260040161039090612d8f565b6002600055603d5460ff1615610f885760405162461bcd60e51b815260040161039090612c9f565b85610fa55760405162461bcd60e51b815260040161039090612caf565b610fb18a8a8887610cc6565b341561108e576001600160a01b038a16610fd457602d546001600160a01b031699505b602d546001600160a01b038b81169116146110015760405162461bcd60e51b815260040161039090612d2f565b8534146110205760405162461bcd60e51b815260040161039090612d5f565b602d60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b15801561107057600080fd5b505af1158015611084573d6000803e3d6000fd5b50505050506110b0565b3033146110b0576110b06001600160a01b038b1633308963ffffffff61130716565b6040805160a0810182526001600160a01b03808d1682528b81166020808401919091528b821683850152908a166060808401919091523360808401528351908101845289815290810189905291820187905261111191600080876001611368565b8092508193505050886001600160a01b03168a6001600160a01b0316336001600160a01b03167f03d3f38d1a433bb469c160c1704d282fe2b74819ba8ec9c223e685dd2a0b05478486604051611168929190612dfb565b60405180910390a4600160005590999098509650505050505050565b6014546001600160a01b031681565b601b5481565b60285481565b6111a7610c6d565b6111c35760405162461bcd60e51b815260040161039090612d4f565b6111cc8161158d565b50565b60395481565b60215481565b602e546001600160a01b031681565b6030546001600160a01b031681565b604051636dcd64e560e01b81526000907394D7CEE3Fe77432312e4faCf4dc416CA5Cd224a690636dcd64e59061123790879087908790600401612aea565b60206040518083038186803b15801561124f57600080fd5b505af4158015611263573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610beb91908101906124ec565b3390565b6001600160e01b03198216600090815260056020526040902080546001600160a01b0319166001600160a01b038316908117909155156112e6576112e0600d6001600160e01b0319841663ffffffff61160f16565b50611303565b611301600d6001600160e01b0319841663ffffffff61165916565b505b5050565b6040516113629085906323b872dd60e01b9061132b90879087908790602401612aea565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261171a565b50505050565b8451600090819015158061137f5750602087015115155b61139b5760405162461bcd60e51b815260040161039090612d7f565b60208701516113ac57865160208801525b6020870151875111156113d15760405162461bcd60e51b815260040161039090612d0f565b60008060008761148e5760408a015161144d578515611402576113fb8a60005b60200201516117ff565b9050611416565b6114138a60005b602002015161182f565b90505b80156114485760808b01518b5161143991908b908e60015b602002015185611853565b895161144590826119af565b8a525b61148e565b85156114655761145e8a60026113f1565b9050611473565b6114708a6002611409565b90505b801561148e5760408a015161148890826119f1565b60408b01525b8651156114ad5760405162461bcd60e51b815260040161039090612d9f565b6114b78b8b611a16565b60408c0151919450925061150357895182146114e55760405162461bcd60e51b815260040161039090612dbf565b80156114fe576114fb828263ffffffff6119f116565b91505b61157d565b60208a01518211156115275760405162461bcd60e51b815260040161039090612cff565b60408a015183101561154b5760405162461bcd60e51b815260040161039090612cbf565b801561157d5760808b015160208c015161156a91908b908e600061142e565b61157a838263ffffffff6119af16565b92505b5090999098509650505050505050565b6001600160a01b0381166115b35760405162461bcd60e51b815260040161039090612ccf565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b600061161b8383611b00565b61164f5750600180830180548083018083556000928352602080842090920185905584835290859052604090912055611653565b5060005b92915050565b60006116658383611b00565b1561164f57600082815260208490526040902054600184015460001991820191018082146116dd57600085600101828154811061169e57fe5b90600052602060002001549050808660010184815481106116bb57fe5b6000918252602080832090910192909255918252869052604090206001830190555b600084815260208690526040812055600185018054806116f957fe5b60019003818190600052602060002001600090559055600192505050611653565b61172c826001600160a01b0316611b15565b6117485760405162461bcd60e51b815260040161039090612dcf565b60006060836001600160a01b0316836040516117649190612a92565b6000604051808303816000865af19150503d80600081146117a1576040519150601f19603f3d011682016040523d82523d6000602084013e6117a6565b606091505b5091509150816117c85760405162461bcd60e51b815260040161039090612cef565b80511561136257808060200190516117e39190810190612473565b6113625760405162461bcd60e51b815260040161039090612daf565b600061165368056bc75e2d63100000611823603e5485611b5190919063ffffffff16565b9063ffffffff611b8b16565b600061165368056bc75e2d6310000061182360185485611b5190919063ffffffff16565b8080156119a7576001600160a01b038681166000908152603360205260409020541615611915576001600160a01b038087166000908152603360205260409020546118a19116878684611bcd565b50506119126118d468056bc75e2d631000006118c860395485611b5190919063ffffffff16565b9063ffffffff611c5916565b6119066118f968056bc75e2d631000006118c860205487611b5190919063ffffffff16565b849063ffffffff6119af16565b9063ffffffff6119af16565b90505b6001600160a01b03841660009081526019602052604090205461193e908263ffffffff6119f116565b6001600160a01b03808616600081815260196020526040908190209390935591518792918916907fb23479169712c443e6b00fb0cec3506a5f5926f541df4243d313e11c8c5c71ed90611992908690612ded565b60405180910390a46119a78686868686611c9b565b505050505050565b6000610bee83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612101565b600082820183811015610bee5760405162461bcd60e51b815260040161039090612cdf565b600080611a216121ae565b84516001600160a01b039081168252602080870151821683820152604080880151831681850152606080890151909316928401929092528551608084015285015160a08301528481015160c0830152516335aaa79d60e01b81527394D7CEE3Fe77432312e4faCf4dc416CA5Cd224a6906335aaa79d90611aa5908490600401612ddf565b604080518083038186803b158015611abc57600080fd5b505af4158015611ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611af4919081019061250a565b90969095509350505050565b60009081526020919091526040902054151590565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611b4957508115155b949350505050565b600082611b6057506000611653565b82820282848281611b6d57fe5b0414610bee5760405162461bcd60e51b815260040161039090612d3f565b6000610bee83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061212d565b6040516306a688ff60e11b815260009081903090630d4d11fe90611bfb908990899089908990600401612aac565b6040805180830381600087803b158015611c1457600080fd5b505af1158015611c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c4c919081019061250a565b9097909650945050505050565b6000610bee83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612177565b602f546002546001600160a01b038581166000908152603c602090815260408083208885168452909152812054909392919091169015611cfe576001600160a01b038087166000908152603c602090815260408083209389168352929052205491505b6037546000906060906001600160a01b038085169163d138f9a160e01b918b9116611d3c68056bc75e2d631000006118c88c8b63ffffffff611b5116565b604051602401611d4e93929190612aea565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611d8c9190612a92565b600060405180830381855afa9150503d8060008114611dc7576040519150601f19603f3d011682016040523d82523d6000602084013e611dcc565b606091505b50915091506001821415611de257602081015194505b6000306001600160a01b031663c22552f76040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1d57600080fd5b505afa158015611e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e5591908101906124ec565b90508515801590611e665750858110155b1561208e5760375460385460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611ea1929116908a90600401612b12565b602060405180830381600087803b158015611ebb57600080fd5b505af1158015611ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ef39190810190612473565b50603854603f546040516000926001600160a01b031691611f1a918f918b91602401612b2d565b60408051601f198184030181529181526020820180516001600160e01b0316630efe6a8b60e01b17905251611f4f9190612a92565b6000604051808303816000865af19150503d8060008114611f8c576040519150601f19603f3d011682016040523d82523d6000602084013e611f91565b606091505b50509050801561202057601f54611fae908863ffffffff6119f116565b601f819055508a603760009054906101000a90046001600160a01b03166001600160a01b03168d6001600160a01b03167ff41c644671512f1cda76abfe6038e3d7d526c1377a5a8c692f81703901db2150898b603f5460405161201393929190612e09565b60405180910390a4612088565b8a603760009054906101000a90046001600160a01b03166001600160a01b03168d6001600160a01b03167f483f67ea49f76ac15e15bbad68b52788ca47d50aef1e4acfe95e5e307e710812898b603f5460405161207f93929190612e09565b60405180910390a45b506120f4565b851580159061209c57508581105b156120f457603754603f546040518c926001600160a01b0390811692908f16917f483f67ea49f76ac15e15bbad68b52788ca47d50aef1e4acfe95e5e307e710812916120eb918b918d91612e09565b60405180910390a45b5050505050505050505050565b600081848411156121255760405162461bcd60e51b81526004016103909190612c8e565b505050900390565b6000818361214e5760405162461bcd60e51b81526004016103909190612c8e565b508361215c57506000610bee565b600083600186038161216a57fe5b0460010195945050505050565b600081836121985760405162461bcd60e51b81526004016103909190612c8e565b5060008385816121a457fe5b0495945050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b803561165381612f97565b805161165381612fab565b803561165381612fb4565b803561165381612fbd565b600082601f83011261222757600080fd5b813561223a61223582612ee4565b612ebd565b9150808252602083016020830185838301111561225657600080fd5b612261838284612f55565b50505092915050565b805161165381612fb4565b60006020828403121561228757600080fd5b6000611b4984846121ea565b600080604083850312156122a657600080fd5b60006122b285856121ea565b92505060206122c3858286016121ea565b9150509250929050565b600080600080600080600080610100898b0312156122ea57600080fd5b60006122f68b8b6121ea565b98505060206123078b828c016121ea565b97505060406123188b828c016121ea565b96505060606123298b828c016121ea565b955050608061233a8b828c01612200565b94505060a061234b8b828c01612200565b93505060c061235c8b828c01612200565b92505060e089013567ffffffffffffffff81111561237957600080fd5b6123858b828c01612216565b9150509295985092959890939650565b6000806000606084860312156123aa57600080fd5b60006123b686866121ea565b93505060206123c7868287016121ea565b92505060406123d886828701612200565b9150509250925092565b600080600080608085870312156123f857600080fd5b600061240487876121ea565b9450506020612415878288016121ea565b935050604061242687828801612200565b925050606061243787828801612200565b91505092959194509250565b6000806040838503121561245657600080fd5b600061246285856121ea565b92505060206122c385828601612200565b60006020828403121561248557600080fd5b6000611b4984846121f5565b6000602082840312156124a357600080fd5b6000611b498484612200565b600080604083850312156124c257600080fd5b60006122b28585612200565b6000602082840312156124e057600080fd5b6000611b49848461220b565b6000602082840312156124fe57600080fd5b6000611b49848461226a565b6000806040838503121561251d57600080fd5b6000612529858561226a565b92505060206122c38582860161226a565b61254381612f1e565b82525050565b61254381612f29565b61254381612f2e565b600061256682612f0c565b6125708185612f10565b9350612580818560208601612f61565b9290920192915050565b61254381612f4a565b600061259e82612f0c565b6125a88185612f15565b93506125b8818560208601612f61565b6125c181612f8d565b9093019392505050565b60006125d8600683612f15565b6514185d5cd95960d21b815260200192915050565b60006125fa601683612f15565b750736f75726365546f6b656e416d6f756e74203d3d20360541b815260200192915050565b600061262c601b83612f15565b7f696e73756666696369656e742073776170206c69717569646974790000000000815260200192915050565b6000612665602683612f15565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b60006126ad601b83612f15565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006126e6602083612f15565b7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815260200192915050565b600061271f601383612f15565b72737761702066696c6c20746f6f206c6172676560681b815260200192915050565b600061274e601c83612f15565b7f736f75726365416d6f756e74206c6172676572207468616e206d617800000000815260200192915050565b6000612787601f83612f15565b7f64657374546f6b656e416d6f756e74526563656976656420746f6f206c6f7700815260200192915050565b60006127c0601483612f15565b730e6deeae4c6caa8ded6cadc40dad2e6dac2e8c6d60631b815260200192915050565b60006127f0602183612f15565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000612833600c83612f15565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b600061285b601a83612f15565b7f736f75726365546f6b656e416d6f756e74206d69736d61746368000000000000815260200192915050565b6000612894601483612f15565b7319985b1b189858dac81b9bdd08185b1b1bddd95960621b815260200192915050565b60006128c4602e83612f15565b7f6d696e206f72206d617820736f7572636520746f6b656e20616d6f756e74206e81526d1959591cc81d1bc81899481cd95d60921b602082015260400192915050565b6000612914600c83612f15565b6b1b9bdb9499595b9d1c985b9d60a21b815260200192915050565b600061293c600d83612f15565b6c696e76616c696420737461746560981b815260200192915050565b6000612965602a83612f15565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b60006129b1601683612f15565b751cddd85c081d1bdbc81b185c99d9481d1bc8199a5b1b60521b815260200192915050565b60006129e3601f83612f15565b7f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400815260200192915050565b805160e0830190612a20848261253a565b506020820151612a33602085018261253a565b506040820151612a46604085018261253a565b506060820151612a59606085018261253a565b506080820151612a6c6080850182612552565b5060a0820151612a7f60a0850182612552565b5060c082015161136260c0850182612552565b6000610bee828461255b565b60208101611653828461253a565b60808101612aba828761253a565b612ac7602083018661253a565b612ad4604083018561253a565b612ae16060830184612552565b95945050505050565b60608101612af8828661253a565b612b05602083018561253a565b611b496040830184612552565b60408101612b20828561253a565b610bee6020830184612552565b60608101612b3b828661253a565b612b056020830185612552565b602081016116538284612549565b6101008101612b65828b612552565b612b72602083018a612549565b612b7f604083018961253a565b612b8c606083018861253a565b612b99608083018761253a565b612ba660a0830186612552565b612bb360c0830185612552565b612bc060e0830184612552565b9998505050505050505050565b6101808101612bdc828f612552565b612be9602083018e612552565b612bf6604083018d612552565b612c03606083018c612549565b612c10608083018b612552565b612c1d60a083018a612552565b612c2a60c0830189612552565b612c3760e0830188612552565b612c45610100830187612552565b612c53610120830186612552565b612c6161014083018561253a565b612c6f61016083018461253a565b9d9c50505050505050505050505050565b60208101611653828461258a565b60208082528101610bee8184612593565b60208082528101611653816125cb565b60208082528101611653816125ed565b602080825281016116538161261f565b6020808252810161165381612658565b60208082528101611653816126a0565b60208082528101611653816126d9565b6020808252810161165381612712565b6020808252810161165381612741565b602080825281016116538161277a565b60208082528101611653816127b3565b60208082528101611653816127e3565b6020808252810161165381612826565b602080825281016116538161284e565b6020808252810161165381612887565b60208082528101611653816128b7565b6020808252810161165381612907565b602080825281016116538161292f565b6020808252810161165381612958565b60208082528101611653816129a4565b60208082528101611653816129d6565b60e081016116538284612a0f565b602081016116538284612552565b60408101612b208285612552565b60608101612b3b8286612552565b60a08101612e258288612552565b612e326020830187612552565b612e3f6040830186612552565b612e4c6060830185612552565b612e596080830184612552565b9695505050505050565b60c08101612e718289612552565b612e7e6020830188612552565b612e8b6040830187612552565b612e986060830186612552565b612ea56080830185612552565b612eb260a0830184612552565b979650505050505050565b60405181810167ffffffffffffffff81118282101715612edc57600080fd5b604052919050565b600067ffffffffffffffff821115612efb57600080fd5b506020601f91909101601f19160190565b5190565b919050565b90815260200190565b600061165382612f3e565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b600061165382612f1e565b82818337506000910152565b60005b83811015612f7c578181015183820152602001612f64565b838111156113625750506000910152565b601f01601f191690565b612fa081612f1e565b81146111cc57600080fd5b612fa081612f29565b612fa081612f2e565b612fa081612f3156fea365627a7a7231582027d9926032a476ba1adf5cf1465872fec8b48c50c8ac76e40cef89343dabe38d6c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x60806040526004361061036b5760003560e01c80638f32d59b116101c6578063cb6eacd1116100f7578063edab119f11610095578063f589a3e71161006f578063f589a3e7146109af578063f6ddc8b3146109c4578063f706b1f2146109d9578063f851a440146109ee5761036b565b8063edab119f14610965578063f0e085f51461097a578063f2fde38b1461098f5761036b565b8063d473c2da116100d1578063d473c2da146108fa578063d485045e1461090f578063e321b5401461092f578063e8f62764146109505761036b565b8063cb6eacd114610891578063cd5d808d146108c5578063d288208c146108e55761036b565b8063b30643d911610164578063ba4861e91161013e578063ba4861e914610804578063bdee453c14610819578063c4a9081514610839578063c4d66de8146108715761036b565b8063b30643d9146107af578063b7e15241146107cf578063b9cffa3e146107ef5761036b565b8063acc04348116101a0578063acc0434814610741578063ae0a853014610756578063afe840091461076b578063b17da56e1461078d5761036b565b80638f32d59b146106f757806392d894f81461070c578063959083d31461072c5761036b565b80634f28cac2116102a05780637420ca3e1161023e5780637a8faeb8116102185780637a8faeb8146106985780638456cb59146106ad5780638da5cb5b146106c25780638dc48ba5146106d75761036b565b80637420ca3e14610659578063742e67981461066e57806378d849ed146106835761036b565b806362fff3f61161027a57806362fff3f6146105c857806368c4ac26146105f957806369455ddc146106195780636e663730146106395761036b565b80634f28cac21461056f578063569fc1fb14610584578063574442cc146105b35761036b565b80632f4707641161030d5780633fca506e116102e75780633fca506e146104fa5780634115a2b61461051a5780634203e3951461053a5780634699f8461461055a5761036b565b80632f470764146104a55780633432423c146104ba5780633452d2d4146104da5761036b565b80631b7bde74116103495780631b7bde7414610416578063218b39c61461044357806324cc5749146104635780632a324027146104905761036b565b8063065d810f146103995780630676c1b7146103d457806317548b79146103f6575b34801561037757600080fd5b5060405162461bcd60e51b815260040161039090612d6f565b60405180910390fd5b3480156103a557600080fd5b506103b96103b4366004612443565b610a03565b6040516103cb96959493929190612e63565b60405180910390f35b3480156103e057600080fd5b506103e9610a43565b6040516103cb9190612a9e565b34801561040257600080fd5b506103e96104113660046124ce565b610a52565b34801561042257600080fd5b50610436610431366004612293565b610a6d565b6040516103cb9190612ded565b34801561044f57600080fd5b506103e961045e366004612275565b610a8a565b34801561046f57600080fd5b5061048361047e366004612275565b610aa5565b6040516103cb9190612b48565b34801561049c57600080fd5b50610436610aba565b3480156104b157600080fd5b50610436610ac0565b3480156104c657600080fd5b506103b96104d5366004612443565b610ac6565b3480156104e657600080fd5b506104366104f5366004612275565b610b06565b34801561050657600080fd5b50610436610515366004612275565b610b18565b34801561052657600080fd5b506104836105353660046124af565b610b2a565b34801561054657600080fd5b50610436610555366004612275565b610b4a565b34801561056657600080fd5b50610436610b5c565b34801561057b57600080fd5b50610436610b62565b34801561059057600080fd5b506105a461059f366004612491565b610b68565b6040516103cb93929190612e09565b3480156105bf57600080fd5b50610436610b89565b3480156105d457600080fd5b506105e86105e3366004612293565b610b8f565b6040516103cb959493929190612e17565b34801561060557600080fd5b50610483610614366004612275565b610bc9565b34801561062557600080fd5b50610436610634366004612395565b610bde565b34801561064557600080fd5b506103e9610654366004612275565b610bf5565b34801561066557600080fd5b506103e9610c10565b34801561067a57600080fd5b50610436610c1f565b34801561068f57600080fd5b506103e9610c25565b3480156106a457600080fd5b50610436610c34565b3480156106b957600080fd5b50610483610c3a565b3480156106ce57600080fd5b506103e9610c43565b3480156106e357600080fd5b506103e96106f2366004612275565b610c52565b34801561070357600080fd5b50610483610c6d565b34801561071857600080fd5b50610436610727366004612275565b610c93565b34801561073857600080fd5b50610436610ca5565b34801561074d57600080fd5b50610436610cab565b34801561076257600080fd5b50610436610cb1565b34801561077757600080fd5b50610780610cb7565b6040516103cb9190612c80565b34801561079957600080fd5b506107ad6107a83660046123e2565b610cc6565b005b3480156107bb57600080fd5b506104366107ca366004612275565b610cfc565b3480156107db57600080fd5b506104366107ea366004612275565b610d0e565b3480156107fb57600080fd5b506103e9610d20565b34801561081057600080fd5b506103e9610d2f565b34801561082557600080fd5b50610436610834366004612275565b610d3e565b34801561084557600080fd5b50610859610854366004612491565b610d50565b6040516103cb9c9b9a99989796959493929190612bcd565b34801561087d57600080fd5b506107ad61088c366004612275565b610dc2565b34801561089d57600080fd5b506108b16108ac366004612491565b610ea5565b6040516103cb989796959493929190612b56565b3480156108d157600080fd5b506104366108e0366004612293565b610ef7565b3480156108f157600080fd5b506103e9610f14565b34801561090657600080fd5b50610436610f23565b34801561091b57600080fd5b5061043661092a366004612275565b610f29565b61094261093d3660046122cd565b610f3b565b6040516103cb929190612dfb565b34801561095c57600080fd5b506103e9611184565b34801561097157600080fd5b50610436611193565b34801561098657600080fd5b50610436611199565b34801561099b57600080fd5b506107ad6109aa366004612275565b61119f565b3480156109bb57600080fd5b506104366111cf565b3480156109d057600080fd5b506104366111d5565b3480156109e557600080fd5b506103e96111db565b3480156109fa57600080fd5b506103e96111ea565b6009602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b6031546001600160a01b031681565b6005602052600090815260409020546001600160a01b031681565b603b60209081526000928352604080842090915290825290205481565b6023602052600090815260409020546001600160a01b031681565b60326020526000908152604090205460ff1681565b60185481565b601f5481565b6008602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b601a6020526000908152604090205481565b602a6020526000908152604090205481565b600a60209081526000928352604080842090915290825290205460ff1681565b60166020526000908152604090205481565b60155481565b60295481565b600c6020526000908152604090208054600182015460029092015490919083565b602b5481565b600b602090815260009283526040808420909152908252902080546001820154600283015460038401546004909401549293919290919085565b60266020526000908152604090205460ff1681565b6000610beb8484846111f9565b90505b9392505050565b6033602052600090815260409020546001600160a01b031681565b6003546001600160a01b031681565b60355481565b6002546001600160a01b031681565b601e5481565b603d5460ff1681565b6001546001600160a01b031690565b6022602052600090815260409020546001600160a01b031681565b6001546000906001600160a01b0316610c84611287565b6001600160a01b031614905090565b60176020526000908152604090205481565b602c5481565b602f5481565b60205481565b602d546001600160a01b031681565b6000610cd38585856111f9565b905081811015610cf55760405162461bcd60e51b815260040161039090612d1f565b5050505050565b601d6020526000908152604090205481565b601c6020526000908152604090205481565b6037546001600160a01b031681565b6004546001600160a01b031681565b60366020526000908152604090205481565b600660208190526000918252604090912080546001820154600283015460038401546004850154600586015496860154600787015460088801546009890154600a8a0154600b909a0154989a9799969860ff909616979496949593949293919290916001600160a01b0391821691168c565b610dca610c6d565b610de65760405162461bcd60e51b815260040161039090612d4f565b63038c86d560e61b600081905260056020527fe705b9be7ab1128120df187531812b4c979d3ce42ed227d7df3b23e95341849e546001600160a01b031690610e2e908361128b565b610e3f631a51577760e21b8361128b565b610e506358bed2b760e11b8361128b565b6c14ddd85c1cd15e1d195c9b985b609a1b826001600160a01b0316826001600160a01b03167f1420e3a2094d671bc2eb897941fa3d94ffa37f0cb6d530651946250a2151cb7f60405160405180910390a45050565b6007602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949560ff8516956101009095046001600160a01b03908116959481169493169288565b603c60209081526000928352604080842090915290825290205481565b6038546001600160a01b031681565b60275481565b60196020526000908152604090205481565b600080600160005414610f605760405162461bcd60e51b815260040161039090612d8f565b6002600055603d5460ff1615610f885760405162461bcd60e51b815260040161039090612c9f565b85610fa55760405162461bcd60e51b815260040161039090612caf565b610fb18a8a8887610cc6565b341561108e576001600160a01b038a16610fd457602d546001600160a01b031699505b602d546001600160a01b038b81169116146110015760405162461bcd60e51b815260040161039090612d2f565b8534146110205760405162461bcd60e51b815260040161039090612d5f565b602d60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b15801561107057600080fd5b505af1158015611084573d6000803e3d6000fd5b50505050506110b0565b3033146110b0576110b06001600160a01b038b1633308963ffffffff61130716565b6040805160a0810182526001600160a01b03808d1682528b81166020808401919091528b821683850152908a166060808401919091523360808401528351908101845289815290810189905291820187905261111191600080876001611368565b8092508193505050886001600160a01b03168a6001600160a01b0316336001600160a01b03167f03d3f38d1a433bb469c160c1704d282fe2b74819ba8ec9c223e685dd2a0b05478486604051611168929190612dfb565b60405180910390a4600160005590999098509650505050505050565b6014546001600160a01b031681565b601b5481565b60285481565b6111a7610c6d565b6111c35760405162461bcd60e51b815260040161039090612d4f565b6111cc8161158d565b50565b60395481565b60215481565b602e546001600160a01b031681565b6030546001600160a01b031681565b604051636dcd64e560e01b815260009073__$6b3065420287e4be5d93089ad806c078e3$__90636dcd64e59061123790879087908790600401612aea565b60206040518083038186803b15801561124f57600080fd5b505af4158015611263573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610beb91908101906124ec565b3390565b6001600160e01b03198216600090815260056020526040902080546001600160a01b0319166001600160a01b038316908117909155156112e6576112e0600d6001600160e01b0319841663ffffffff61160f16565b50611303565b611301600d6001600160e01b0319841663ffffffff61165916565b505b5050565b6040516113629085906323b872dd60e01b9061132b90879087908790602401612aea565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261171a565b50505050565b8451600090819015158061137f5750602087015115155b61139b5760405162461bcd60e51b815260040161039090612d7f565b60208701516113ac57865160208801525b6020870151875111156113d15760405162461bcd60e51b815260040161039090612d0f565b60008060008761148e5760408a015161144d578515611402576113fb8a60005b60200201516117ff565b9050611416565b6114138a60005b602002015161182f565b90505b80156114485760808b01518b5161143991908b908e60015b602002015185611853565b895161144590826119af565b8a525b61148e565b85156114655761145e8a60026113f1565b9050611473565b6114708a6002611409565b90505b801561148e5760408a015161148890826119f1565b60408b01525b8651156114ad5760405162461bcd60e51b815260040161039090612d9f565b6114b78b8b611a16565b60408c0151919450925061150357895182146114e55760405162461bcd60e51b815260040161039090612dbf565b80156114fe576114fb828263ffffffff6119f116565b91505b61157d565b60208a01518211156115275760405162461bcd60e51b815260040161039090612cff565b60408a015183101561154b5760405162461bcd60e51b815260040161039090612cbf565b801561157d5760808b015160208c015161156a91908b908e600061142e565b61157a838263ffffffff6119af16565b92505b5090999098509650505050505050565b6001600160a01b0381166115b35760405162461bcd60e51b815260040161039090612ccf565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b600061161b8383611b00565b61164f5750600180830180548083018083556000928352602080842090920185905584835290859052604090912055611653565b5060005b92915050565b60006116658383611b00565b1561164f57600082815260208490526040902054600184015460001991820191018082146116dd57600085600101828154811061169e57fe5b90600052602060002001549050808660010184815481106116bb57fe5b6000918252602080832090910192909255918252869052604090206001830190555b600084815260208690526040812055600185018054806116f957fe5b60019003818190600052602060002001600090559055600192505050611653565b61172c826001600160a01b0316611b15565b6117485760405162461bcd60e51b815260040161039090612dcf565b60006060836001600160a01b0316836040516117649190612a92565b6000604051808303816000865af19150503d80600081146117a1576040519150601f19603f3d011682016040523d82523d6000602084013e6117a6565b606091505b5091509150816117c85760405162461bcd60e51b815260040161039090612cef565b80511561136257808060200190516117e39190810190612473565b6113625760405162461bcd60e51b815260040161039090612daf565b600061165368056bc75e2d63100000611823603e5485611b5190919063ffffffff16565b9063ffffffff611b8b16565b600061165368056bc75e2d6310000061182360185485611b5190919063ffffffff16565b8080156119a7576001600160a01b038681166000908152603360205260409020541615611915576001600160a01b038087166000908152603360205260409020546118a19116878684611bcd565b50506119126118d468056bc75e2d631000006118c860395485611b5190919063ffffffff16565b9063ffffffff611c5916565b6119066118f968056bc75e2d631000006118c860205487611b5190919063ffffffff16565b849063ffffffff6119af16565b9063ffffffff6119af16565b90505b6001600160a01b03841660009081526019602052604090205461193e908263ffffffff6119f116565b6001600160a01b03808616600081815260196020526040908190209390935591518792918916907fb23479169712c443e6b00fb0cec3506a5f5926f541df4243d313e11c8c5c71ed90611992908690612ded565b60405180910390a46119a78686868686611c9b565b505050505050565b6000610bee83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612101565b600082820183811015610bee5760405162461bcd60e51b815260040161039090612cdf565b600080611a216121ae565b84516001600160a01b039081168252602080870151821683820152604080880151831681850152606080890151909316928401929092528551608084015285015160a08301528481015160c0830152516335aaa79d60e01b815273__$6b3065420287e4be5d93089ad806c078e3$__906335aaa79d90611aa5908490600401612ddf565b604080518083038186803b158015611abc57600080fd5b505af4158015611ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611af4919081019061250a565b90969095509350505050565b60009081526020919091526040902054151590565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611b4957508115155b949350505050565b600082611b6057506000611653565b82820282848281611b6d57fe5b0414610bee5760405162461bcd60e51b815260040161039090612d3f565b6000610bee83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061212d565b6040516306a688ff60e11b815260009081903090630d4d11fe90611bfb908990899089908990600401612aac565b6040805180830381600087803b158015611c1457600080fd5b505af1158015611c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c4c919081019061250a565b9097909650945050505050565b6000610bee83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612177565b602f546002546001600160a01b038581166000908152603c602090815260408083208885168452909152812054909392919091169015611cfe576001600160a01b038087166000908152603c602090815260408083209389168352929052205491505b6037546000906060906001600160a01b038085169163d138f9a160e01b918b9116611d3c68056bc75e2d631000006118c88c8b63ffffffff611b5116565b604051602401611d4e93929190612aea565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611d8c9190612a92565b600060405180830381855afa9150503d8060008114611dc7576040519150601f19603f3d011682016040523d82523d6000602084013e611dcc565b606091505b50915091506001821415611de257602081015194505b6000306001600160a01b031663c22552f76040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1d57600080fd5b505afa158015611e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e5591908101906124ec565b90508515801590611e665750858110155b1561208e5760375460385460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392611ea1929116908a90600401612b12565b602060405180830381600087803b158015611ebb57600080fd5b505af1158015611ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ef39190810190612473565b50603854603f546040516000926001600160a01b031691611f1a918f918b91602401612b2d565b60408051601f198184030181529181526020820180516001600160e01b0316630efe6a8b60e01b17905251611f4f9190612a92565b6000604051808303816000865af19150503d8060008114611f8c576040519150601f19603f3d011682016040523d82523d6000602084013e611f91565b606091505b50509050801561202057601f54611fae908863ffffffff6119f116565b601f819055508a603760009054906101000a90046001600160a01b03166001600160a01b03168d6001600160a01b03167ff41c644671512f1cda76abfe6038e3d7d526c1377a5a8c692f81703901db2150898b603f5460405161201393929190612e09565b60405180910390a4612088565b8a603760009054906101000a90046001600160a01b03166001600160a01b03168d6001600160a01b03167f483f67ea49f76ac15e15bbad68b52788ca47d50aef1e4acfe95e5e307e710812898b603f5460405161207f93929190612e09565b60405180910390a45b506120f4565b851580159061209c57508581105b156120f457603754603f546040518c926001600160a01b0390811692908f16917f483f67ea49f76ac15e15bbad68b52788ca47d50aef1e4acfe95e5e307e710812916120eb918b918d91612e09565b60405180910390a45b5050505050505050505050565b600081848411156121255760405162461bcd60e51b81526004016103909190612c8e565b505050900390565b6000818361214e5760405162461bcd60e51b81526004016103909190612c8e565b508361215c57506000610bee565b600083600186038161216a57fe5b0460010195945050505050565b600081836121985760405162461bcd60e51b81526004016103909190612c8e565b5060008385816121a457fe5b0495945050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b803561165381612f97565b805161165381612fab565b803561165381612fb4565b803561165381612fbd565b600082601f83011261222757600080fd5b813561223a61223582612ee4565b612ebd565b9150808252602083016020830185838301111561225657600080fd5b612261838284612f55565b50505092915050565b805161165381612fb4565b60006020828403121561228757600080fd5b6000611b4984846121ea565b600080604083850312156122a657600080fd5b60006122b285856121ea565b92505060206122c3858286016121ea565b9150509250929050565b600080600080600080600080610100898b0312156122ea57600080fd5b60006122f68b8b6121ea565b98505060206123078b828c016121ea565b97505060406123188b828c016121ea565b96505060606123298b828c016121ea565b955050608061233a8b828c01612200565b94505060a061234b8b828c01612200565b93505060c061235c8b828c01612200565b92505060e089013567ffffffffffffffff81111561237957600080fd5b6123858b828c01612216565b9150509295985092959890939650565b6000806000606084860312156123aa57600080fd5b60006123b686866121ea565b93505060206123c7868287016121ea565b92505060406123d886828701612200565b9150509250925092565b600080600080608085870312156123f857600080fd5b600061240487876121ea565b9450506020612415878288016121ea565b935050604061242687828801612200565b925050606061243787828801612200565b91505092959194509250565b6000806040838503121561245657600080fd5b600061246285856121ea565b92505060206122c385828601612200565b60006020828403121561248557600080fd5b6000611b4984846121f5565b6000602082840312156124a357600080fd5b6000611b498484612200565b600080604083850312156124c257600080fd5b60006122b28585612200565b6000602082840312156124e057600080fd5b6000611b49848461220b565b6000602082840312156124fe57600080fd5b6000611b49848461226a565b6000806040838503121561251d57600080fd5b6000612529858561226a565b92505060206122c38582860161226a565b61254381612f1e565b82525050565b61254381612f29565b61254381612f2e565b600061256682612f0c565b6125708185612f10565b9350612580818560208601612f61565b9290920192915050565b61254381612f4a565b600061259e82612f0c565b6125a88185612f15565b93506125b8818560208601612f61565b6125c181612f8d565b9093019392505050565b60006125d8600683612f15565b6514185d5cd95960d21b815260200192915050565b60006125fa601683612f15565b750736f75726365546f6b656e416d6f756e74203d3d20360541b815260200192915050565b600061262c601b83612f15565b7f696e73756666696369656e742073776170206c69717569646974790000000000815260200192915050565b6000612665602683612f15565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b60006126ad601b83612f15565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006126e6602083612f15565b7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815260200192915050565b600061271f601383612f15565b72737761702066696c6c20746f6f206c6172676560681b815260200192915050565b600061274e601c83612f15565b7f736f75726365416d6f756e74206c6172676572207468616e206d617800000000815260200192915050565b6000612787601f83612f15565b7f64657374546f6b656e416d6f756e74526563656976656420746f6f206c6f7700815260200192915050565b60006127c0601483612f15565b730e6deeae4c6caa8ded6cadc40dad2e6dac2e8c6d60631b815260200192915050565b60006127f0602183612f15565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000612833600c83612f15565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b600061285b601a83612f15565b7f736f75726365546f6b656e416d6f756e74206d69736d61746368000000000000815260200192915050565b6000612894601483612f15565b7319985b1b189858dac81b9bdd08185b1b1bddd95960621b815260200192915050565b60006128c4602e83612f15565b7f6d696e206f72206d617820736f7572636520746f6b656e20616d6f756e74206e81526d1959591cc81d1bc81899481cd95d60921b602082015260400192915050565b6000612914600c83612f15565b6b1b9bdb9499595b9d1c985b9d60a21b815260200192915050565b600061293c600d83612f15565b6c696e76616c696420737461746560981b815260200192915050565b6000612965602a83612f15565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b60006129b1601683612f15565b751cddd85c081d1bdbc81b185c99d9481d1bc8199a5b1b60521b815260200192915050565b60006129e3601f83612f15565b7f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400815260200192915050565b805160e0830190612a20848261253a565b506020820151612a33602085018261253a565b506040820151612a46604085018261253a565b506060820151612a59606085018261253a565b506080820151612a6c6080850182612552565b5060a0820151612a7f60a0850182612552565b5060c082015161136260c0850182612552565b6000610bee828461255b565b60208101611653828461253a565b60808101612aba828761253a565b612ac7602083018661253a565b612ad4604083018561253a565b612ae16060830184612552565b95945050505050565b60608101612af8828661253a565b612b05602083018561253a565b611b496040830184612552565b60408101612b20828561253a565b610bee6020830184612552565b60608101612b3b828661253a565b612b056020830185612552565b602081016116538284612549565b6101008101612b65828b612552565b612b72602083018a612549565b612b7f604083018961253a565b612b8c606083018861253a565b612b99608083018761253a565b612ba660a0830186612552565b612bb360c0830185612552565b612bc060e0830184612552565b9998505050505050505050565b6101808101612bdc828f612552565b612be9602083018e612552565b612bf6604083018d612552565b612c03606083018c612549565b612c10608083018b612552565b612c1d60a083018a612552565b612c2a60c0830189612552565b612c3760e0830188612552565b612c45610100830187612552565b612c53610120830186612552565b612c6161014083018561253a565b612c6f61016083018461253a565b9d9c50505050505050505050505050565b60208101611653828461258a565b60208082528101610bee8184612593565b60208082528101611653816125cb565b60208082528101611653816125ed565b602080825281016116538161261f565b6020808252810161165381612658565b60208082528101611653816126a0565b60208082528101611653816126d9565b6020808252810161165381612712565b6020808252810161165381612741565b602080825281016116538161277a565b60208082528101611653816127b3565b60208082528101611653816127e3565b6020808252810161165381612826565b602080825281016116538161284e565b6020808252810161165381612887565b60208082528101611653816128b7565b6020808252810161165381612907565b602080825281016116538161292f565b6020808252810161165381612958565b60208082528101611653816129a4565b60208082528101611653816129d6565b60e081016116538284612a0f565b602081016116538284612552565b60408101612b208285612552565b60608101612b3b8286612552565b60a08101612e258288612552565b612e326020830187612552565b612e3f6040830186612552565b612e4c6060830185612552565b612e596080830184612552565b9695505050505050565b60c08101612e718289612552565b612e7e6020830188612552565b612e8b6040830187612552565b612e986060830186612552565b612ea56080830185612552565b612eb260a0830184612552565b979650505050505050565b60405181810167ffffffffffffffff81118282101715612edc57600080fd5b604052919050565b600067ffffffffffffffff821115612efb57600080fd5b506020601f91909101601f19160190565b5190565b919050565b90815260200190565b600061165382612f3e565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b600061165382612f1e565b82818337506000910152565b60005b83811015612f7c578181015183820152602001612f64565b838111156113625750506000910152565b601f01601f191690565b612fa081612f1e565b81146111cc57600080fd5b612fa081612f29565b612fa081612f2e565b612fa081612f3156fea365627a7a7231582027d9926032a476ba1adf5cf1465872fec8b48c50c8ac76e40cef89343dabe38d6c6578706572696d656e74616cf564736f6c63430005110040",
  "libraries": {
    "SwapsImplSovrynSwapLib": "0x94D7CEE3Fe77432312e4faCf4dc416CA5Cd224a6"
  },
  "devdoc": {
    "methods": {
      "checkPriceDivergence(address,address,uint256,uint256)": {
        "params": {
          "destToken": "The address of the destiny token instance.",
          "minReturn": "The amount (max slippage) that will be compared to the swapsExpectedReturn.     ",
          "sourceToken": "The address of the source token instance.",
          "sourceTokenAmount": "The amount of source tokens."
        }
      },
      "getSwapExpectedReturn(address,address,uint256)": {
        "details": "External wrapper that calls SwapsUser::_swapsExpectedReturn",
        "params": {
          "destToken": "The address of the destiny token instance.",
          "sourceToken": "The address of the source token instance.",
          "sourceTokenAmount": "The amount of source tokens."
        },
        "return": "The expected return value."
      },
      "initialize(address)": {
        "params": {
          "target": "The address of the target contract."
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "swapExternal(address,address,address,address,uint256,uint256,uint256,bytes)": {
        "details": "External wrapper that calls SwapsUser::_swapsCall after turning potential incoming rBTC into wrBTC tokens.",
        "params": {
          "destToken": "The address of the destiny token instance.",
          "minReturn": "Minimum amount (position size) in the collateral tokens.",
          "receiver": "The address of the recipient account.",
          "requiredDestTokenAmount": "The amount of required destiny tokens.",
          "returnToSender": "The address of the sender account.",
          "sourceToken": "The address of the source token instance.",
          "sourceTokenAmount": "The amount of source tokens.",
          "swapData": "Additional swap data (not in use yet)."
        },
        "return": "destTokenAmountReceived The amount of destiny tokens sent.sourceTokenAmountUsed The amount of source tokens spent."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Swaps External contract."
  },
  "userdoc": {
    "methods": {
      "checkPriceDivergence(address,address,uint256,uint256)": {
        "notice": "Check the slippage based on the swapExpectedReturn."
      },
      "constructor": "Empty public constructor.",
      "getSwapExpectedReturn(address,address,uint256)": {
        "notice": "Get the swap expected return value."
      },
      "initialize(address)": {
        "notice": "Set function selectors on target contract."
      },
      "swapExternal(address,address,address,address,uint256,uint256,uint256,bytes)": {
        "notice": "Perform a swap w/ tokens or rBTC as source currency."
      }
    },
    "notice": "This contract code comes from bZx. bZx is a protocol for tokenized margin trading and lending https://bzx.network similar to the dYdX protocol. * This contract contains functions to calculate and execute swaps."
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54790,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "reentrancyLock",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 54606,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6188,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "priceFeeds",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6190,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "swapsImpl",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6192,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "sovrynSwapContractRegistryAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6196,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "logicTargets",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 6200,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "loans",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(Loan)6566_storage)"
      },
      {
        "astId": 6204,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "loanParams",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(LoanParams)6538_storage)"
      },
      {
        "astId": 6210,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "lenderOrders",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Order)6582_storage))"
      },
      {
        "astId": 6216,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "borrowerOrders",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Order)6582_storage))"
      },
      {
        "astId": 6222,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "delegatedManagers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6228,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "lenderInterest",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(LenderInterest)6508_storage))"
      },
      {
        "astId": 6232,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "loanInterest",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_struct(LoanInterest)6518_storage)"
      },
      {
        "astId": 6234,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "logicTargetsSet",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Bytes32Set)36272_storage"
      },
      {
        "astId": 6236,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "activeLoansSet",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Bytes32Set)36272_storage"
      },
      {
        "astId": 6240,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "lenderLoanSets",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)36272_storage)"
      },
      {
        "astId": 6244,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "borrowerLoanSets",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)36272_storage)"
      },
      {
        "astId": 6248,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "userLoanParamSets",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)36272_storage)"
      },
      {
        "astId": 6250,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "feesController",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 6255,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "lendingFeePercent",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 6259,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "lendingFeeTokensHeld",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6263,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "lendingFeeTokensPaid",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6270,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "tradingFeePercent",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 6274,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "tradingFeeTokensHeld",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6278,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "tradingFeeTokensPaid",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6285,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "borrowingFeePercent",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 6289,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "borrowingFeeTokensHeld",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6293,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "borrowingFeeTokensPaid",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6295,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "protocolTokenHeld",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 6297,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "protocolTokenPaid",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 6304,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "affiliateFeePercent",
        "offset": 0,
        "slot": "32",
        "type": "t_uint256"
      },
      {
        "astId": 6311,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "liquidationIncentivePercent",
        "offset": 0,
        "slot": "33",
        "type": "t_uint256"
      },
      {
        "astId": 6315,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "loanPoolToUnderlying",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6319,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "underlyingToLoanPool",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6321,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "loanPoolsSet",
        "offset": 0,
        "slot": "36",
        "type": "t_struct(Bytes32Set)36272_storage"
      },
      {
        "astId": 6325,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "supportedTokens",
        "offset": 0,
        "slot": "38",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6332,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "maxDisagreement",
        "offset": 0,
        "slot": "39",
        "type": "t_uint256"
      },
      {
        "astId": 6335,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "sourceBuffer",
        "offset": 0,
        "slot": "40",
        "type": "t_uint256"
      },
      {
        "astId": 6338,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "maxSwapSize",
        "offset": 0,
        "slot": "41",
        "type": "t_uint256"
      },
      {
        "astId": 6342,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "borrowerNonce",
        "offset": 0,
        "slot": "42",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6345,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "rolloverBaseReward",
        "offset": 0,
        "slot": "43",
        "type": "t_uint256"
      },
      {
        "astId": 6348,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "rolloverFlexFeePercent",
        "offset": 0,
        "slot": "44",
        "type": "t_uint256"
      },
      {
        "astId": 6350,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "wrbtcToken",
        "offset": 0,
        "slot": "45",
        "type": "t_contract(IWrbtcERC20)35073"
      },
      {
        "astId": 6352,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "protocolTokenAddress",
        "offset": 0,
        "slot": "46",
        "type": "t_address"
      },
      {
        "astId": 6359,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "feeRebatePercent",
        "offset": 0,
        "slot": "47",
        "type": "t_uint256"
      },
      {
        "astId": 6361,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "admin",
        "offset": 0,
        "slot": "48",
        "type": "t_address"
      },
      {
        "astId": 6363,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "protocolAddress",
        "offset": 0,
        "slot": "49",
        "type": "t_address"
      },
      {
        "astId": 6367,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "userNotFirstTradeFlag",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6371,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "affiliatesUserReferrer",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6375,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "referralsList",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_struct(AddressSet)35966_storage)"
      },
      {
        "astId": 6378,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "minReferralsToPayout",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 6382,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "affiliateRewardsHeld",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6384,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "sovTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 6386,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "lockedSOVAddress",
        "offset": 0,
        "slot": "56",
        "type": "t_address"
      },
      {
        "astId": 6393,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "affiliateTradingTokenFeePercent",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 6397,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "affiliatesReferrerTokensList",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_struct(AddressSet)35966_storage)"
      },
      {
        "astId": 6403,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "affiliatesReferrerBalances",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6409,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "specialRebates",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6411,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "pause",
        "offset": 0,
        "slot": "61",
        "type": "t_bool"
      },
      {
        "astId": 6413,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "swapExtrernalFeePercent",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      },
      {
        "astId": 6415,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "tradingRebateRewardsBasisPoint",
        "offset": 0,
        "slot": "63",
        "type": "t_uint256"
      },
      {
        "astId": 6422,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "defaultPathConversion",
        "offset": 0,
        "slot": "64",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_contract(IERC20)33292)dyn_storage))"
      },
      {
        "astId": 6424,
        "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
        "label": "pauser",
        "offset": 0,
        "slot": "65",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC20)33292)dyn_storage": {
        "base": "t_contract(IERC20)33292",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IERC20)33292": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IWrbtcERC20)35073": {
        "encoding": "inplace",
        "label": "contract IWrbtcERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_contract(IERC20)33292)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IERC20[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(IERC20)33292)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_contract(IERC20)33292)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => contract IERC20[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_contract(IERC20)33292)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(LenderInterest)6508_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct LenderInterestStruct.LenderInterest))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(LenderInterest)6508_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Order)6582_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct OrderStruct.Order))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Order)6582_storage)"
      },
      "t_mapping(t_address,t_struct(AddressSet)35966_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableAddressSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)35966_storage"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)36272_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableBytes32Set.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)36272_storage"
      },
      "t_mapping(t_address,t_struct(LenderInterest)6508_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LenderInterestStruct.LenderInterest)",
        "numberOfBytes": "32",
        "value": "t_struct(LenderInterest)6508_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(Loan)6566_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LoanStruct.Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)6566_storage"
      },
      "t_mapping(t_bytes32,t_struct(LoanInterest)6518_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LoanInterestStruct.LoanInterest)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanInterest)6518_storage"
      },
      "t_mapping(t_bytes32,t_struct(LoanParams)6538_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LoanParamsStruct.LoanParams)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanParams)6538_storage"
      },
      "t_mapping(t_bytes32,t_struct(Order)6582_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct OrderStruct.Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)6582_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AddressSet)35966_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableAddressSet.AddressSet",
        "members": [
          {
            "astId": 35962,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 35965,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)36272_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableBytes32Set.Bytes32Set",
        "members": [
          {
            "astId": 36268,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 36271,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LenderInterest)6508_storage": {
        "encoding": "inplace",
        "label": "struct LenderInterestStruct.LenderInterest",
        "members": [
          {
            "astId": 6499,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "principalTotal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6501,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "owedPerDay",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6503,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "owedTotal",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6505,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "paidTotal",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6507,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "updatedTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Loan)6566_storage": {
        "encoding": "inplace",
        "label": "struct LoanStruct.Loan",
        "members": [
          {
            "astId": 6543,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 6545,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "loanParamsId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 6547,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "pendingTradesId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 6549,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 6551,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "principal",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6553,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "collateral",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6555,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6557,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6559,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "startMargin",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6561,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "startRate",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 6563,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "borrower",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 6565,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "lender",
            "offset": 0,
            "slot": "11",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(LoanInterest)6518_storage": {
        "encoding": "inplace",
        "label": "struct LoanInterestStruct.LoanInterest",
        "members": [
          {
            "astId": 6513,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "owedPerDay",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6515,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "depositTotal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6517,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "updatedTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LoanParams)6538_storage": {
        "encoding": "inplace",
        "label": "struct LoanParamsStruct.LoanParams",
        "members": [
          {
            "astId": 6523,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 6525,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "active",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 6527,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "owner",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6529,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "loanToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6531,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "collateralToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6533,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "minInitialMargin",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6535,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "maintenanceMargin",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6537,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "maxLoanTerm",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Order)6582_storage": {
        "encoding": "inplace",
        "label": "struct OrderStruct.Order",
        "members": [
          {
            "astId": 6571,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "lockedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6573,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "interestRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6575,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "minLoanTerm",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6577,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "maxLoanTerm",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6579,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "createdTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6581,
            "contract": "contracts/modules/SwapsExternal.sol:SwapsExternal",
            "label": "expirationTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}