{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/integrations/bob/interfaces/ISafeDepositsSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface ISafeDepositsSender {\n    event Withdraw(address indexed from, address indexed token, uint256 amount);\n    event DepositToLockdrop(address indexed lockDrop, address indexed token, uint256 amount);\n    event DepositSOVToLockdrop(address indexed lockDrop, uint256 amount);\n    event WithdrawBalanceFromSafe(address indexed token, uint256 balance);\n    event Pause();\n    event Unpause();\n    event Stop();\n    event SetDepositorAddress(address indexed oldDepositor, address indexed newDepositor);\n    event SetLockDropAddress(address indexed oldLockDrop, address indexed newLockDrop);\n    event MapDepositorToReceiver(address indexed depositor, address indexed receiver);\n\n    function getSafeAddress() external view returns (address);\n    function getLockDropAddress() external view returns (address);\n    function getSovTokenAddress() external view returns (address);\n    function getDepositorAddress() external view returns (address);\n    function isStopped() external view returns (bool);\n    function isPaused() external view returns (bool);\n\n    // @note amount > 0 should be checked by the caller\n    function withdraw(\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        address recipient\n    ) external;\n\n    function withdrawAll(address[] calldata tokens, address recipient) external;\n\n    function pause() external;\n\n    function unpause() external;\n\n    function stop() external;\n\n    function setDepositorAddress(address _newDepositor) external;\n\n    function sendToLockDropContract(\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256 sovAmount\n    ) external;\n}\n"
    },
    "contracts/integrations/bob/SafeDepositsSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport { ISafeDepositsSender } from \"./interfaces/ISafeDepositsSender.sol\";\nimport { SafeERC20, IERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface GnosisSafe {\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction.\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Operation operation\n    ) external returns (bool success);\n}\n\n/**\n * @title SafeDepositsSender\n * @notice This contract is a gateway for depositing funds into the Bob locker contracts\n */\ncontract SafeDepositsSender is ISafeDepositsSender {\n    using SafeERC20 for IERC20;\n    address public constant ETH_TOKEN_ADDRESS = address(0x01);\n    GnosisSafe private immutable SAFE;\n    address private immutable SOV_TOKEN_ADDRESS;\n    address private lockdropDepositorAddress; // address used by automation script to deposit to the LockDrop contract\n    address private lockDropAddress;\n    uint256 private stopBlock; // if set the contract is stopped forever - irreversible\n    bool private paused;\n\n    /**\n     * @param _safeAddress Address of the Gnosis Safe\n     * @param _lockDrop Address of the BOB FusionLock contract\n     * @param _sovToken Address of the SOV token contract\n     * @param _depositor Address of the depositor account\n     */\n    constructor(address _safeAddress, address _lockDrop, address _sovToken, address _depositor) {\n        require(_safeAddress != address(0), \"SafeDepositsSender: Invalid safe address\");\n        require(_lockDrop != address(0), \"SafeDepositsSender: Invalid lockdrop address\");\n        require(_sovToken != address(0), \"SafeDepositsSender: Invalid sov token address\");\n        require(_depositor != address(0), \"SafeDepositsSender: Invalid depositor token address\");\n        SAFE = GnosisSafe(_safeAddress);\n        SOV_TOKEN_ADDRESS = _sovToken;\n        lockdropDepositorAddress = _depositor;\n        lockDropAddress = _lockDrop;\n    }\n\n    receive() external payable {}\n\n    // MODIFIERS //\n\n    modifier onlySafe() {\n        require(msg.sender == address(SAFE), \"SafeDepositsSender: Only Safe\");\n        _;\n    }\n\n    modifier onlyDepositor() {\n        require(msg.sender == lockdropDepositorAddress, \"SafeDepositsSender: Only Depositor\");\n        _;\n    }\n\n    modifier onlyDepositorOrSafe() {\n        require(\n            msg.sender == lockdropDepositorAddress || msg.sender == address(SAFE),\n            \"SafeDepositsSender: Only Depositor or Safe\"\n        );\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!paused, \"SafeDepositsSender: Paused\");\n        _;\n    }\n\n    modifier whenPaused() {\n        require(paused, \"SafeDepositsSender: Not paused\");\n        _;\n    }\n\n    modifier whenUnstopped() {\n        require(stopBlock == 0, \"SafeDepositsSender: Stopped\");\n        _;\n    }\n\n    modifier notZeroAddress(address _address) {\n        require(_address != address(0), \"SafeDepositsSender: Invalid address\");\n        _;\n    }\n\n    // CORE FUNCTIONS\n\n    /**\n     * @notice Sends tokens to the LockDrop contract\n     * @dev This function is for sending tokens to the LockDrop contract for users to receive rewards and to be bridged to the BOB mainnet for Sovryn DEX\n     * @dev The function is allowed to be called only by the lockdropDepositorAddress\n     * @dev Token amounts and SOV amount to send are calculated offchain\n     * @param tokens List of tokens to send\n     * @param amounts List of amounts of tokens to send\n     * @param sovAmount Amount of SOV tokens to send\n     */\n    function sendToLockDropContract(\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256 sovAmount\n    ) external onlyDepositorOrSafe whenNotPaused whenUnstopped {\n        require(\n            tokens.length == amounts.length,\n            \"SafeDepositsSender: Tokens and amounts length mismatch\"\n        );\n        require(sovAmount > 0, \"SafeDepositsSender: Invalid SOV amount\");\n\n        bytes memory data;\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(\n                tokens[i] != SOV_TOKEN_ADDRESS,\n                \"SafeDepositsSender: SOV token is transferred separately\"\n            );\n\n            // transfer native token\n            uint256 balance;\n            uint256 transferAmount;\n            if (tokens[i] == ETH_TOKEN_ADDRESS) {\n                require(\n                    address(SAFE).balance >= amounts[i],\n                    \"SafeDepositsSender: Not enough eth balance to deposit\"\n                );\n                data = abi.encodeWithSignature(\"depositEth()\");\n                require(\n                    SAFE.execTransactionFromModule(\n                        lockDropAddress,\n                        amounts[i],\n                        data,\n                        GnosisSafe.Operation.Call\n                    ),\n                    \"SafeDepositsSender: Could not deposit ether\"\n                );\n\n                // withdraw balance to this contract left after deposit to the LockDrop\n                balance = address(SAFE).balance;\n                transferAmount = balance < amounts[i] ? balance : amounts[i];\n                if (transferAmount > 0) {\n                    require(\n                        SAFE.execTransactionFromModule(\n                            address(this),\n                            transferAmount,\n                            \"\",\n                            GnosisSafe.Operation.Call\n                        ),\n                        \"SafeDepositsSender: Could not withdraw ether after deposit\"\n                    );\n                    emit WithdrawBalanceFromSafe(tokens[i], transferAmount);\n                }\n            } else {\n                // transfer ERC20 tokens\n                IERC20 token = IERC20(tokens[i]);\n                balance = token.balanceOf(address(SAFE));\n                require(balance >= amounts[i], \"SafeDepositsSender: Not enough tokens to deposit\");\n\n                data = abi.encodeWithSignature(\n                    \"approve(address,uint256)\",\n                    lockDropAddress,\n                    amounts[i]\n                );\n                require(\n                    SAFE.execTransactionFromModule(tokens[i], 0, data, GnosisSafe.Operation.Call),\n                    \"SafeDepositsSender: Could not approve token transfer\"\n                );\n\n                data = abi.encodeWithSignature(\n                    \"depositERC20(address,uint256)\",\n                    tokens[i],\n                    amounts[i]\n                );\n                require(\n                    SAFE.execTransactionFromModule(\n                        lockDropAddress,\n                        0,\n                        data,\n                        GnosisSafe.Operation.Call\n                    ),\n                    \"SafeDepositsSender: Could not deposit token\"\n                );\n\n                // withdraw balance to this contract left after deposit to the LockDrop\n                balance = token.balanceOf(address(SAFE));\n                transferAmount = balance < amounts[i] ? balance : amounts[i];\n                if (transferAmount > 0) {\n                    data = abi.encodeWithSignature(\n                        \"transfer(address,uint256)\",\n                        address(this),\n                        transferAmount\n                    );\n                    require(\n                        SAFE.execTransactionFromModule(\n                            tokens[i],\n                            0,\n                            data,\n                            GnosisSafe.Operation.Call\n                        ),\n                        \"SafeDepositsSender: Could not withdraw token after deposit\"\n                    );\n                    emit WithdrawBalanceFromSafe(tokens[i], transferAmount);\n                }\n            }\n            emit DepositToLockdrop(lockDropAddress, tokens[i], amounts[i]);\n        }\n\n        // transfer SOV\n        data = abi.encodeWithSignature(\"approve(address,uint256)\", lockDropAddress, sovAmount);\n        require(\n            SAFE.execTransactionFromModule(SOV_TOKEN_ADDRESS, 0, data, GnosisSafe.Operation.Call),\n            \"SafeDepositsSender: Could not execute SOV transfer\"\n        );\n        data = abi.encodeWithSignature(\n            \"depositERC20(address,uint256)\",\n            SOV_TOKEN_ADDRESS,\n            sovAmount\n        );\n        require(\n            SAFE.execTransactionFromModule(lockDropAddress, 0, data, GnosisSafe.Operation.Call),\n            \"SafeDepositsSender: Could not execute SOV transfer\"\n        );\n\n        emit DepositSOVToLockdrop(lockDropAddress, sovAmount);\n    }\n\n    /// @notice Maps depositor on ethereum to receiver on BOB\n    /// @notice Receiver from the last emitted event called by msg.sender will be used\n    /// @param receiver Receiver address on BOB. The depositor address will be replaced with the receiver address for distribution of LP tokens and rewards on BOB\n    function mapDepositorToReceiver(address receiver) external {\n        emit MapDepositorToReceiver(msg.sender, receiver);\n    }\n\n    // ADMINISTRATIVE FUNCTIONS //\n\n    /**\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) from Safe\n     * @param to Destination address of module transaction.\n     * @param value Ether value of module transaction.\n     * @param data Data payload of module transaction.\n     * @param operation Operation type of module transaction.\n     * @return success Boolean flag indicating if the call succeeded.\n     */\n    function execTransactionFromSafe(\n        address to,\n        uint256 value,\n        bytes memory data,\n        GnosisSafe.Operation operation\n    ) external onlySafe returns (bool success) {\n        success = execute(to, value, data, operation, type(uint256).max);\n    }\n\n    /**\n     * @notice Executes either a delegatecall or a call with provided parameters.\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\n     *      - if the contract at `to` address has code or not\n     *      It is the responsibility of the caller to perform such checks.\n     * @param to Destination address.\n     * @param value Ether value.\n     * @param data Data payload.\n     * @param operation Operation type.\n     * @return success boolean flag indicating if the call succeeded.\n     */\n    function execute(\n        address to,\n        uint256 value,\n        bytes memory data,\n        GnosisSafe.Operation operation,\n        uint256 txGas\n    ) internal returns (bool success) {\n        if (operation == GnosisSafe.Operation.DelegateCall) {\n            /* solhint-disable no-inline-assembly */\n            /// @solidity memory-safe-assembly\n            assembly {\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\n            }\n            /* solhint-enable no-inline-assembly */\n        } else {\n            /* solhint-disable no-inline-assembly */\n            /// @solidity memory-safe-assembly\n            assembly {\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\n            }\n            /* solhint-enable no-inline-assembly */\n        }\n    }\n\n    /// @notice There is no check if _newDepositor is not zero on purpose - that could be required\n\n    /**\n     * @notice Sets new depositor address\n     * @dev Only Safe can call this function\n     * @dev New depositor can be zero address\n     * @param _newDepositor New depositor address\n     */\n    function setDepositorAddress(address _newDepositor) external onlySafe {\n        emit SetDepositorAddress(lockdropDepositorAddress, _newDepositor);\n        lockdropDepositorAddress = _newDepositor;\n    }\n\n    /**\n     * @notice Sets new LockDrop address\n     * @dev Only Safe can call this function\n     * @dev New LockDrop can't be zero address\n     * @param _newLockdrop New depositor address\n     */\n    function setLockDropAddress(address _newLockdrop) external onlySafe {\n        require(_newLockdrop != address(0), \"SafeDepositsSender: Zero address not allowed\");\n        emit SetLockDropAddress(lockDropAddress, _newLockdrop);\n        lockDropAddress = _newLockdrop;\n    }\n\n    /**\n     * @notice Withdraws tokens from this contract to a recipient address\n     * @notice Withdrawal to the Safe address will affect balances and rewards\n     * @notice Amount > 0 should be checked by the caller before calling this function\n     * @dev Only Safe can call this function\n     * @dev Recipient should not be a zero address\n     * @param tokens List of token addresses to withdraw\n     * @param amounts List of token amounts to withdraw\n     * @param recipient Recipient address\n     */\n    function withdraw(\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        address recipient\n    ) external onlySafe notZeroAddress(recipient) {\n        require(\n            tokens.length == amounts.length,\n            \"SafeDepositsSender: Tokens and amounts length mismatch\"\n        );\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            require(tokens[i] != address(0x00), \"SafeDepositsSender: Zero address not allowed\");\n            require(amounts[i] != 0, \"SafeDepositsSender: Zero amount not allowed\");\n            if (tokens[i] == ETH_TOKEN_ADDRESS) {\n                require(\n                    address(this).balance >= amounts[i],\n                    \"SafeDepositsSender: Not enough funds\"\n                );\n                (bool success, ) = payable(recipient).call{ value: amounts[i] }(\"\");\n                require(success, \"Could not withdraw ether\");\n                continue;\n            }\n\n            IERC20 token = IERC20(tokens[i]);\n            uint256 balance = token.balanceOf(address(this));\n            require(balance >= amounts[i], \"SafeDepositsSender: Not enough funds\");\n\n            token.safeTransfer(recipient, amounts[i]);\n\n            emit Withdraw(recipient, tokens[i], amounts[i]);\n        }\n    }\n\n    /**\n     * @notice Withdraws all tokens from this contract to a recipient\n     * @notice Amount > 0 should be checked by the caller before calling this function\n     * @dev Only Safe can call this function\n     * @dev Recipient should not be a zero address\n     * @notice Withdrawal to the Safe address will affect balances and rewards\n     * @param tokens List of token addresses to withdraw\n     * @param recipient Recipient address\n     */\n    function withdrawAll(\n        address[] calldata tokens,\n        address recipient\n    ) external onlySafe notZeroAddress(recipient) {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            if (tokens[i] == ETH_TOKEN_ADDRESS) {\n                (bool success, ) = payable(recipient).call{ value: address(this).balance }(\"\");\n                require(success, \"SafeDepositsSender: Could not withdraw ether\");\n                continue;\n            }\n            IERC20 token = IERC20(tokens[i]);\n            uint256 balance = token.balanceOf(address(this));\n            if (balance > 0) {\n                token.safeTransfer(recipient, balance);\n            }\n\n            emit Withdraw(recipient, tokens[i], balance);\n        }\n    }\n\n    /// @notice pause the contract - no funds can be sent to the LockDrop contract\n    function pause() external onlySafe whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /// @notice unpause the contract\n    function unpause() external onlySafe whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n\n    /// @notice stops the contract - no funds can be sent to the LockDrop contract, this is irreversible\n    function stop() external onlySafe {\n        stopBlock = block.number;\n        emit Stop();\n    }\n\n    // GETTERS //\n    function getSafeAddress() external view returns (address) {\n        return address(SAFE);\n    }\n\n    function getLockDropAddress() external view returns (address) {\n        return lockDropAddress;\n    }\n\n    function getSovTokenAddress() external view returns (address) {\n        return SOV_TOKEN_ADDRESS;\n    }\n\n    function getDepositorAddress() external view returns (address) {\n        return lockdropDepositorAddress;\n    }\n\n    function isStopped() external view returns (bool) {\n        return stopBlock != 0;\n    }\n\n    function getStopBlock() external view returns (uint256) {\n        return stopBlock;\n    }\n\n    function isPaused() external view returns (bool) {\n        return paused;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "remappings": [
      "@contracts/=contracts/",
      "ds-test/=foundry/lib/forge-std/lib/ds-test/src/",
      "forge-std/=foundry/lib/forge-std/src/"
    ]
  }
}