{
  "address": "0x7a5B22EfCA7472E32FcdDCFABaeA00f6484F838a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueBefore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueAfter",
          "type": "uint256"
        }
      ],
      "name": "AllowanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "burner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "loanToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        }
      ],
      "name": "FlashBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "TINY_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "assetBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "avgBorrowInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "baseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialLoanDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralTokenSent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "borrowInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetBorrow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetSupply",
          "type": "uint256"
        }
      ],
      "name": "calculateSupplyInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanTokenSent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minEntryPrice",
          "type": "uint256"
        }
      ],
      "name": "checkPriceDivergence",
      "outputs": [],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "checkpointPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "checkpointSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "earlyAccessToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialLoanDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralTokenAddress",
          "type": "address"
        }
      ],
      "name": "getBorrowAmountForDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialLoanDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralTokenAddress",
          "type": "address"
        }
      ],
      "name": "getDepositAmountForBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "leverageAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanTokenSent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralTokenSent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralTokenAddress",
          "type": "address"
        }
      ],
      "name": "getEstimatedMarginDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getListFunctionSignatures",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "functionSignatures",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes32",
          "name": "moduleName",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "leverageAmount",
          "type": "uint256"
        }
      ],
      "name": "getMaxEscrowAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxEscrowAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kinkLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "liquidityMiningAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loanParamsIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "loanTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lowUtilBaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lowUtilRateMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "leverageAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanTokenSent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralTokenSent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minEntryPrice",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "loanDataBytes",
          "type": "bytes"
        }
      ],
      "name": "marginTrade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "leverageAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanTokenSent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralTokenSent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minEntryPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "affiliateReferrer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "loanDataBytes",
          "type": "bytes"
        }
      ],
      "name": "marginTradeAffiliate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "marketLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxScaleRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "nextBorrowInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "supplyAmount",
          "type": "uint256"
        }
      ],
      "name": "nextSupplyInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "profitOf",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rateMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sovrynContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stakingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "string",
          "name": "source",
          "type": "string"
        }
      ],
      "name": "stringToBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "result",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "supplyInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "targetLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "target_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalAssetBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalAssetSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetSupply",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "transactionLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "wrbtcTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x909f482ffb1b282f15fd77dc0f9f65ade501f35f87a6895db02a4c29556dd45c",
  "receipt": {
    "to": null,
    "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
    "contractAddress": "0x7a5B22EfCA7472E32FcdDCFABaeA00f6484F838a",
    "transactionIndex": 0,
    "gasUsed": "5601108",
    "logsBloom": "0x
    "blockHash": "0x61443a8f896524feab8fd674e90f5c10d74b0102765ef4964be2c59a2f58c14e",
    "transactionHash": "0x909f482ffb1b282f15fd77dc0f9f65ade501f35f87a6895db02a4c29556dd45c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4322456,
        "transactionHash": "0x909f482ffb1b282f15fd77dc0f9f65ade501f35f87a6895db02a4c29556dd45c",
        "address": "0x7a5B22EfCA7472E32FcdDCFABaeA00f6484F838a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000013be55487d37fe3c66ee7305e1e9c1ac85de75ae"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x61443a8f896524feab8fd674e90f5c10d74b0102765ef4964be2c59a2f58c14e"
      }
    ],
    "blockNumber": 4322456,
    "cumulativeGasUsed": "5601108",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "893704ca31180002ea7e9ca57c4eb6c1",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueAfter\",\"type\":\"uint256\"}],\"name\":\"AllowanceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"}],\"name\":\"FlashBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"TINY_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"assetBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"avgBorrowInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenSent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetSupply\",\"type\":\"uint256\"}],\"name\":\"calculateSupplyInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanTokenSent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minEntryPrice\",\"type\":\"uint256\"}],\"name\":\"checkPriceDivergence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkpointPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkpointSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyAccessToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralTokenAddress\",\"type\":\"address\"}],\"name\":\"getBorrowAmountForDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLoanDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralTokenAddress\",\"type\":\"address\"}],\"name\":\"getDepositAmountForBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"leverageAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanTokenSent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenSent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralTokenAddress\",\"type\":\"address\"}],\"name\":\"getEstimatedMarginDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getListFunctionSignatures\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"functionSignatures\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes32\",\"name\":\"moduleName\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"leverageAmount\",\"type\":\"uint256\"}],\"name\":\"getMaxEscrowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxEscrowAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kinkLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityMiningAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loanParamsIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowUtilBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowUtilRateMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"leverageAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanTokenSent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenSent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minEntryPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"loanDataBytes\",\"type\":\"bytes\"}],\"name\":\"marginTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"leverageAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanTokenSent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenSent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minEntryPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"affiliateReferrer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"loanDataBytes\",\"type\":\"bytes\"}],\"name\":\"marginTradeAffiliate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxScaleRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"nextBorrowInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supplyAmount\",\"type\":\"uint256\"}],\"name\":\"nextSupplyInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"profitOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sovrynContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAssetBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAssetSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetSupply\",\"type\":\"uint256\"}],\"name\":\"totalSupplyInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transactionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wrbtcTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"params\":{\"_owner\":\"The account owner of the iTokens.\",\"_spender\":\"The account allowed to send the iTokens.\"},\"return\":\"The number of iTokens an account is allowing the spender  to send on its behalf.\"},\"approve(address,uint256)\":{\"params\":{\"_spender\":\"The account address that will be able to spend the tokens.\",\"_value\":\"The amount of tokens allowed to spend.\"}},\"assetBalanceOf(address)\":{\"return\":\"The user's balance of underlying token.\"},\"avgBorrowInterestRate()\":{\"return\":\"The average borrow interest.\"},\"balanceOf(address)\":{\"params\":{\"_owner\":\"The account owner of the iTokens.\"},\"return\":\"The number of iTokens an account owns.\"},\"borrow(bytes32,uint256,uint256,uint256,address,address,address,bytes)\":{\"params\":{\"borrower\":\"The one paying for the collateral.\",\"collateralTokenAddress\":\"The address of the token to be used as  collateral. Cannot be the loan token address.\",\"collateralTokenSent\":\"The amount of collateral tokens provided by the user.  (150% of the withdrawn amount worth in collateral tokens).\",\"initialLoanDuration\":\"The duration of the loan in seconds.  If the loan is not paid back until then, it'll need to be rolled over.\",\"loanId\":\"The ID of the loan, 0 for a new loan.\",\"receiver\":\"The one receiving the withdrawn amount.\",\"withdrawAmount\":\"The amount to be withdrawn (actually borrowed).\"},\"return\":\"New principal and new collateral added to loan.\"},\"borrowInterestRate()\":{\"return\":\"The borrow interest rate.\"},\"calculateSupplyInterestRate(uint256,uint256)\":{\"params\":{\"assetBorrow\":\"The amount of loan tokens on debt.\",\"assetSupply\":\"The amount of loan tokens supplied.\"},\"return\":\"The next supply interest adjustment.\"},\"checkPriceDivergence(uint256,address,uint256)\":{\"params\":{\"collateralTokenAddress\":\"The token address of collateral.\",\"loanTokenSent\":\"The amount of deposit.\",\"minEntryPrice\":\"Value of loan token in collateral\"}},\"checkpointPrice(address)\":{\"params\":{\"_user\":\"The user account as the mapping index.\"},\"return\":\"The price on the checkpoint for this user.\"},\"getBorrowAmountForDeposit(uint256,uint256,address)\":{\"params\":{\"collateralTokenAddress\":\"The token address of collateral.\",\"depositAmount\":\"The amount of deposit.\",\"initialLoanDuration\":\"The duration of the loan.\"},\"return\":\"The amount of borrow allowed.\"},\"getDepositAmountForBorrow(uint256,uint256,address)\":{\"params\":{\"borrowAmount\":\"The amount of borrow.\",\"collateralTokenAddress\":\"The token address of collateral.\",\"initialLoanDuration\":\"The duration of the loan.\"},\"return\":\"The amount of deposit required.\"},\"getEstimatedMarginDetails(uint256,uint256,uint256,address)\":{\"params\":{\"collateralTokenAddress\":\"The token address of collateral.\",\"collateralTokenSent\":\"The amount of collateral tokens provided by the user.\",\"leverageAmount\":\"The multiple of exposure: 2x ... 5x. The leverage with 18 decimals.\",\"loanTokenSent\":\"The number of loan tokens provided by the user.\"},\"return\":\"The principal, the collateral and the interestRate.\"},\"getListFunctionSignatures()\":{\"details\":\"This function will return the list of function signature in this contract that are available for public call Then this function will be called by LoanTokenLogicBeacon, and the function signatures will be registred in LoanTokenLogicBeacon.To save the gas we can just directly return the list of function signature from this pure function. The other workaround (fancy way) is we can create a storage for the list of the function signature, and then we can store each function signature to that storage from the constructor. Then, in this function we just need to return that storage variable.\",\"return\":\"The list of function signatures (bytes4[])\"},\"getMaxEscrowAmount(uint256)\":{\"details\":\"maxEscrowAmount = liquidity * (100 - interestForDuration) / 100\",\"params\":{\"leverageAmount\":\"The chosen multiplier with 18 decimals.\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"marginTrade(bytes32,uint256,uint256,uint256,address,address,uint256,bytes)\":{\"params\":{\"collateralTokenAddress\":\"The token address of collateral.\",\"collateralTokenSent\":\"The amount of collateral tokens provided by the user.\",\"leverageAmount\":\"The multiple of exposure: 2x ... 5x. The leverage with 18 decimals.\",\"loanDataBytes\":\"Additional loan data (not in use for token swaps).\",\"loanId\":\"The ID of the loan, 0 for a new loan.\",\"loanTokenSent\":\"The number of loan tokens provided by the user.\",\"minEntryPrice\":\"Value of loan token in collateral.\",\"trader\":\"The account that performs this trade.\"},\"return\":\"New principal and new collateral added to trade.\"},\"marginTradeAffiliate(bytes32,uint256,uint256,uint256,address,address,uint256,address,bytes)\":{\"params\":{\"affiliateReferrer\":\"The address of the referrer from affiliates program.\",\"collateralTokenAddress\":\"The token address of collateral.\",\"collateralTokenSent\":\"The amount of collateral tokens provided by the user.\",\"leverageAmount\":\"The multiple of exposure: 2x ... 5x. The leverage with 18 decimals.\",\"loanDataBytes\":\"Additional loan data (not in use for token swaps).\",\"loanId\":\"The ID of the loan, 0 for a new loan.\",\"loanTokenSent\":\"The number of loan tokens provided by the user.\",\"minEntryPrice\":\"Value of loan token in collateral.\",\"trader\":\"The account that performs this trade.\"},\"return\":\"New principal and new collateral added to trade.\"},\"marketLiquidity()\":{\"return\":\"The market liquidity.\"},\"nextBorrowInterestRate(uint256)\":{\"params\":{\"borrowAmount\":\"The amount of tokens to borrow.\"},\"return\":\"The next borrow interest rate.\"},\"nextSupplyInterestRate(uint256)\":{\"params\":{\"supplyAmount\":\"The amount of tokens supplied.\"},\"return\":\"Interest that lenders are currently receiving when supplying a given amount of tokens to the pool.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"profitOf(address)\":{\"params\":{\"user\":\"The user address.\"},\"return\":\"The profit of a user.\"},\"supplyInterestRate()\":{\"return\":\"Interest that lenders are currently receiving when supplying to the pool.\"},\"tokenPrice()\":{\"return\":\"The loan token price.\"},\"totalAssetBorrow()\":{\"return\":\"The total amount of loan tokens on debt.\"},\"totalAssetSupply()\":{\"details\":\"Wrapper for internal _totalAssetSupply function.\",\"return\":\"The total amount of loan tokens on supply.\"},\"totalSupply()\":{\"return\":\"The total number of iTokens in existence as of now.\"},\"totalSupplyInterestRate(uint256)\":{\"params\":{\"assetSupply\":\"The amount of loan tokens supplied.\"},\"return\":\"Interest that lenders are currently receiving when supplying a given amount of loan tokens to the pool.\"},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"The recipient of the tokens.\",\"_value\":\"The amount of tokens sent.\"},\"return\":\"Success true/false.\"},\"transferFrom(address,address,uint256)\":{\"return\":\"A boolean value indicating whether the operation succeeded.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{\"allowance(address,address)\":{\"notice\":\"Get the amount of iTokens allowed to be spent by a  given account on behalf of the owner.\"},\"approve(address,uint256)\":{\"notice\":\"Set an amount as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an {Approval} event.\"},\"assetBalanceOf(address)\":{\"notice\":\"Get loan token balance.\"},\"avgBorrowInterestRate()\":{\"notice\":\"Wrapper for average borrow interest.\"},\"balanceOf(address)\":{\"notice\":\"Get the amount of iTokens owned by an account.\"},\"borrow(bytes32,uint256,uint256,uint256,address,address,address,bytes)\":{\"notice\":\"Borrow funds from the pool. The underlying loan token may not be used as collateral.\"},\"borrowInterestRate()\":{\"notice\":\"Get borrow interest rate. The minimum rate the next base protocol borrower will receive for variable-rate loans.\"},\"calculateSupplyInterestRate(uint256,uint256)\":{\"notice\":\"Compute the next supply interest adjustment.\"},\"checkPriceDivergence(uint256,address,uint256)\":{\"notice\":\"Check if entry price lies above a minimum\"},\"checkpointPrice(address)\":{\"notice\":\"Getter for the price checkpoint mapping.\"},\"getBorrowAmountForDeposit(uint256,uint256,address)\":{\"notice\":\"Calculate the borrow allowed for a given deposit.     * The function for doing over-collateralized borrows against loan tokens expects a minimum amount of collateral be sent to satisfy collateral requirements of the loan, for borrow amount, interest rate, and initial loan duration. To determine appropriate values to pass to this function for a given loan, `getDepositAmountForBorrow` and 'getBorrowAmountForDeposit` are required.\"},\"getDepositAmountForBorrow(uint256,uint256,address)\":{\"notice\":\"Calculate the deposit required to a given borrow.     * The function for doing over-collateralized borrows against loan tokens expects a minimum amount of collateral be sent to satisfy collateral requirements of the loan, for borrow amount, interest rate, and initial loan duration. To determine appropriate values to pass to this function for a given loan, `getDepositAmountForBorrow` and 'getBorrowAmountForDeposit` are required.\"},\"getEstimatedMarginDetails(uint256,uint256,uint256,address)\":{\"notice\":\"Get margin information on a trade.\"},\"getListFunctionSignatures()\":{\"notice\":\"This function is MANDATORY, which will be called by LoanTokenLogicBeacon and be registered. Every new public function, the signature needs to be included in this function.\"},\"getMaxEscrowAmount(uint256)\":{\"notice\":\"Compute the maximum deposit amount under current market conditions.\"},\"marginTrade(bytes32,uint256,uint256,uint256,address,address,uint256,bytes)\":{\"notice\":\"Borrow and immediately get into a position.     * Trading on margin is used to increase an investor's buying power. Margin is the amount of money required to open a position, while leverage is the multiple of exposure to account equity.     * Leverage allows you to trade positions LARGER than the amount of money in your trading account. Leverage is expressed as a ratio.     * When trading on margin, investors first deposit some token that then serves as collateral for the loan, and then pay ongoing interest payments on the money they borrow.     * Margin trading = taking a loan and swapping it: In order to open a margin trade position, 1.- The user calls marginTrade on the loan token contract. 2.- The loan token contract provides the loan and sends it for processing   to the protocol proxy contract. 3.- The protocol proxy contract uses the module LoanOpening to create a   position and swaps the loan tokens to collateral tokens. 4.- The Sovryn Swap network looks up the correct converter and swaps the   tokens. If successful, the position is being held by the protocol proxy contract, which is why positions need to be closed at the protocol proxy contract.\"},\"marginTradeAffiliate(bytes32,uint256,uint256,uint256,address,address,uint256,address,bytes)\":{\"notice\":\"Wrapper for marginTrade invoking setAffiliatesReferrer to track  referral trade by affiliates program.\"},\"marketLiquidity()\":{\"notice\":\"Get current liquidity. A part of total funds supplied are borrowed. Liquidity = supply - borrow\"},\"nextBorrowInterestRate(uint256)\":{\"notice\":\"Public wrapper for internal call.\"},\"nextSupplyInterestRate(uint256)\":{\"notice\":\"Get interest rate w/ added supply.\"},\"profitOf(address)\":{\"notice\":\"Wrapper for internal _profitOf low level function.\"},\"supplyInterestRate()\":{\"notice\":\"Get interest rate.\"},\"tokenPrice()\":{\"notice\":\"Loan token price calculation considering unpaid interests.\"},\"totalAssetBorrow()\":{\"notice\":\"Get the total amount of loan tokens on debt. Calls protocol getTotalPrincipal function. In the context of borrowing, principal is the initial size of a loan. It can also be the amount still owed on a loan. If you take out a $50,000 mortgage, for example, the principal is $50,000. If you pay off $30,000, the principal balance now consists of the remaining $20,000.\"},\"totalAssetSupply()\":{\"notice\":\"Get the total amount of loan tokens on supply.\"},\"totalSupply()\":{\"notice\":\"Get the total supply of iTokens.\"},\"totalSupplyInterestRate(uint256)\":{\"notice\":\"Get interest rate w/ added supply assets.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer tokens wrapper. Sets token owner the msg.sender. Sets maximun allowance uint256(-1) to ensure tokens are always transferred.     * If the recipient (_to) is a vesting contract address, transfer the token to the tokenOwner of the vesting contract itself.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Moves `_value` loan tokens from `_from` to `_to` using the allowance mechanism. Calls internal _internalTransferFrom function.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol\":\"LoanTokenLogicWrbtc\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/connectors/loantoken/AdvancedToken.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./AdvancedTokenStorage.sol\\\";\\n\\n/**\\n * @title Advanced Token contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized margin\\n * trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * AdvancedToken implements standard ERC-20 approval, mint and burn token functionality.\\n * Logic (AdvancedToken) is kept aside from storage (AdvancedTokenStorage).\\n *\\n * For example, LoanTokenLogicDai contract uses AdvancedToken::_mint() to mint\\n * its Loan Dai iTokens.\\n * */\\ncontract AdvancedToken is AdvancedTokenStorage {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Set an amount as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * @param _spender The account address that will be able to spend the tokens.\\n     * @param _value The amount of tokens allowed to spend.\\n     * */\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice The iToken minting process. Meant to issue Loan iTokens.\\n     * Lenders are able to open an iToken position, by minting them.\\n     * This function is called by LoanTokenLogicStandard::_mintToken\\n     * @param _to The recipient of the minted tTokens.\\n     * @param _tokenAmount The amount of iTokens to be minted.\\n     * @param _assetAmount The amount of lended tokens (asset to lend).\\n     * @param _price The price of the lended tokens.\\n     * @return The updated balance of the recipient.\\n     * */\\n    function _mint(\\n        address _to,\\n        uint256 _tokenAmount,\\n        uint256 _assetAmount,\\n        uint256 _price\\n    ) internal returns (uint256) {\\n        require(_to != address(0), \\\"15\\\");\\n\\n        uint256 _balance = balances[_to].add(_tokenAmount);\\n        balances[_to] = _balance;\\n\\n        totalSupply_ = totalSupply_.add(_tokenAmount);\\n\\n        emit Mint(_to, _tokenAmount, _assetAmount, _price);\\n        emit Transfer(address(0), _to, _tokenAmount);\\n\\n        return _balance;\\n    }\\n\\n    /**\\n     * @notice The iToken burning process. Meant to destroy Loan iTokens.\\n     * Lenders are able to close an iToken position, by burning them.\\n     * This function is called by LoanTokenLogicStandard::_burnToken\\n     * @param _who The owner of the iTokens to burn.\\n     * @param _tokenAmount The amount of iTokens to burn.\\n     * @param _assetAmount The amount of lended tokens.\\n     * @param _price The price of the lended tokens.\\n     * @return The updated balance of the iTokens owner.\\n     * */\\n    function _burn(\\n        address _who,\\n        uint256 _tokenAmount,\\n        uint256 _assetAmount,\\n        uint256 _price\\n    ) internal returns (uint256) {\\n        //bzx compare\\n        //TODO: Unit test\\n        uint256 _balance = balances[_who].sub(_tokenAmount, \\\"16\\\");\\n\\n        // a rounding error may leave dust behind, so we clear this out\\n        if (_balance <= 10) {\\n            // We can't leave such small balance quantities.\\n            _tokenAmount = _tokenAmount.add(_balance);\\n            _balance = 0;\\n        }\\n        balances[_who] = _balance;\\n\\n        totalSupply_ = totalSupply_.sub(_tokenAmount);\\n\\n        emit Burn(_who, _tokenAmount, _assetAmount, _price);\\n        emit Transfer(_who, address(0), _tokenAmount);\\n        return _balance;\\n    }\\n}\\n\",\"keccak256\":\"0x4e7606dcb24cd7f3a4e5c1a153975fd65156f7239cb281034c84d64b0dfc5dd0\"},\"contracts/connectors/loantoken/AdvancedTokenStorage.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./LoanTokenBase.sol\\\";\\n\\n/**\\n * @title Advanced Token Storage contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * AdvancedTokenStorage implements standard ERC-20 getters functionality:\\n * totalSupply, balanceOf, allowance and some events.\\n * iToken logic is divided into several contracts AdvancedToken,\\n * AdvancedTokenStorage and LoanTokenBase.\\n * */\\ncontract AdvancedTokenStorage is LoanTokenBase {\\n    using SafeMath for uint256;\\n\\n    /* Events */\\n\\n    /// topic: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// topic: 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// topic: 0x628e75c63c1873bcd3885f7aee9f58ee36f60dc789b2a6b3a978c4189bc548ba\\n    event AllowanceUpdate(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 valueBefore,\\n        uint256 valueAfter\\n    );\\n\\n    /// topic: 0xb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb\\n    event Mint(address indexed minter, uint256 tokenAmount, uint256 assetAmount, uint256 price);\\n\\n    /// topic: 0x743033787f4738ff4d6a7225ce2bd0977ee5f86b91a902a58f5e4d0b297b4644\\n    event Burn(address indexed burner, uint256 tokenAmount, uint256 assetAmount, uint256 price);\\n\\n    /// topic: 0xc688ff9bd4a1c369dd44c5cf64efa9db6652fb6b280aa765cd43f17d256b816e\\n    event FlashBorrow(address borrower, address target, address loanToken, uint256 loanAmount);\\n\\n    /* Storage */\\n\\n    mapping(address => uint256) internal balances;\\n    mapping(address => mapping(address => uint256)) internal allowed;\\n    uint256 internal totalSupply_;\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice Get the total supply of iTokens.\\n     * @return The total number of iTokens in existence as of now.\\n     * */\\n    function totalSupply() public view returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    /**\\n     * @notice Get the amount of iTokens owned by an account.\\n     * @param _owner The account owner of the iTokens.\\n     * @return The number of iTokens an account owns.\\n     * */\\n    function balanceOf(address _owner) public view returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n    /**\\n     * @notice Get the amount of iTokens allowed to be spent by a\\n     *   given account on behalf of the owner.\\n     * @param _owner The account owner of the iTokens.\\n     * @param _spender The account allowed to send the iTokens.\\n     * @return The number of iTokens an account is allowing the spender\\n     *   to send on its behalf.\\n     * */\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\n        return allowed[_owner][_spender];\\n    }\\n}\\n\",\"keccak256\":\"0x08afb0584442da1baf29938b6ff797e22fc8b7e493e51fd26358e7be3b73fa32\"},\"contracts/connectors/loantoken/LoanTokenBase.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"../../openzeppelin/SafeMath.sol\\\";\\nimport \\\"../../openzeppelin/SignedSafeMath.sol\\\";\\nimport \\\"../../openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../openzeppelin/Address.sol\\\";\\nimport \\\"../../interfaces/IWrbtcERC20.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"../../reentrancy/SharedReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Loan Token Base contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized margin\\n * trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * Specific loan related storage for iTokens.\\n *\\n * An loan token or iToken is a representation of a user funds in the pool and the\\n * interest they've earned. The redemption value of iTokens continually increase\\n * from the accretion of interest paid into the lending pool by borrowers. The user\\n * can sell iTokens to exit its position. The user might potentially use them as\\n * collateral wherever applicable.\\n *\\n * There are three main tokens in the bZx system, iTokens, pTokens, and BZRX tokens.\\n * The bZx system of lending and borrowing depends on iTokens and pTokens, and when\\n * users lend or borrow money on bZx, their crypto assets go into or come out of\\n * global liquidity pools, which are pools of funds shared between many different\\n * exchanges. When lenders supply funds into the global liquidity pools, they\\n * automatically receive iTokens; When users borrow money to open margin trading\\n * positions, they automatically receive pTokens. The system is also designed to\\n * use the BZRX tokens, which are only used to pay fees on the network currently.\\n * */\\ncontract LoanTokenBase is ReentrancyGuard, SharedReentrancyGuard, Ownable, Pausable {\\n    uint256 internal constant WEI_PRECISION = 10**18;\\n    uint256 internal constant WEI_PERCENT_PRECISION = 10**20;\\n\\n    int256 internal constant sWEI_PRECISION = 10**18;\\n\\n    /// @notice Standard ERC-20 properties\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    /// @notice The address of the loan token (asset to lend) instance.\\n    address public loanTokenAddress;\\n\\n    uint256 public baseRate;\\n    uint256 public rateMultiplier;\\n    uint256 public lowUtilBaseRate;\\n    uint256 public lowUtilRateMultiplier;\\n\\n    uint256 public targetLevel;\\n    uint256 public kinkLevel;\\n    uint256 public maxScaleRate;\\n\\n    uint256 internal _flTotalAssetSupply;\\n    uint256 public checkpointSupply;\\n    uint256 public initialPrice;\\n\\n    /// uint88 for tight packing -> 8 + 88 + 160 = 256\\n    uint88 internal lastSettleTime_;\\n\\n    /// Mapping of keccak256(collateralToken, isTorqueLoan) to loanParamsId.\\n    mapping(uint256 => bytes32) public loanParamsIds;\\n\\n    /// Price of token at last user checkpoint.\\n    mapping(address => uint256) internal checkpointPrices_;\\n\\n    // the maximum trading/borrowing/lending limit per token address\\n    mapping(address => uint256) public transactionLimit;\\n    // 0 -> no limit\\n}\\n\",\"keccak256\":\"0x9cb501d26d27b5bc143085b6d38261323426741857e49ff5dea0ea1325b5fab8\"},\"contracts/connectors/loantoken/LoanTokenLogicShared.sol\":{\"content\":\"pragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LoanTokenLogicStorage.sol\\\";\\nimport \\\"./interfaces/ProtocolLike.sol\\\";\\nimport \\\"./interfaces/FeedsLike.sol\\\";\\nimport \\\"./interfaces/ProtocolSettingsLike.sol\\\";\\nimport \\\"../../modules/interfaces/ProtocolAffiliatesInterface.sol\\\";\\nimport \\\"../../farm/ILiquidityMining.sol\\\";\\nimport \\\"../../governance/Staking/interfaces/IStaking.sol\\\";\\nimport \\\"../../governance/Vesting/IVesting.sol\\\";\\n\\n/**\\n * @dev This contract shares functions used by both LoanTokenLogicSplit and LoanTokenLogicStandard\\n */\\ncontract LoanTokenLogicShared is LoanTokenLogicStorage {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    /// DON'T ADD VARIABLES HERE, PLEASE\\n\\n    /**\\n     * @notice Update the user's checkpoint price and profit so far.\\n     * In this loan token contract, whenever some tokens are minted or burned,\\n     * the _updateCheckpoints() function is invoked to update the stats to\\n     * reflect the balance changes.\\n     *\\n     * @param _user The user address.\\n     * @param _oldBalance The user's previous balance.\\n     * @param _newBalance The user's updated balance.\\n     * @param _currentPrice The current loan token price.\\n     * */\\n    function _updateCheckpoints(\\n        address _user,\\n        uint256 _oldBalance,\\n        uint256 _newBalance,\\n        uint256 _currentPrice\\n    ) internal {\\n        /// @dev keccak256(\\\"iToken_ProfitSoFar\\\")\\n        bytes32 slot = keccak256(abi.encodePacked(_user, iToken_ProfitSoFar));\\n\\n        int256 _currentProfit;\\n        if (_newBalance == 0) {\\n            _currentPrice = 0;\\n        } else if (_oldBalance != 0) {\\n            _currentProfit = _profitOf(slot, _oldBalance, _currentPrice, checkpointPrices_[_user]);\\n        }\\n\\n        assembly {\\n            sstore(slot, _currentProfit)\\n        }\\n\\n        checkpointPrices_[_user] = _currentPrice;\\n    }\\n\\n    /** INTERNAL FUNCTION */\\n\\n    /**\\n     * @notice Transfer tokens, low level.\\n     * Checks allowance, updates sender and recipient balances\\n     * and updates checkpoints too.\\n     *\\n     * @param _from The tokens' owner.\\n     * @param _to The recipient of the tokens.\\n     * @param _value The amount of tokens sent.\\n     * @param _allowanceAmount The amount of tokens allowed to transfer.\\n     *\\n     * @return Success true/false.\\n     * */\\n    function _internalTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _allowanceAmount\\n    ) internal returns (bool) {\\n        if (_allowanceAmount != uint256(-1)) {\\n            allowed[_from][msg.sender] = _allowanceAmount.sub(_value, \\\"14\\\");\\n            /// @dev Allowance mapping update requires an event log\\n            emit AllowanceUpdate(_from, msg.sender, _allowanceAmount, allowed[_from][msg.sender]);\\n        }\\n\\n        require(_to != address(0), \\\"15\\\");\\n\\n        uint256 _balancesFrom = balances[_from];\\n        uint256 _balancesFromNew = _balancesFrom.sub(_value, \\\"16\\\");\\n        balances[_from] = _balancesFromNew;\\n\\n        uint256 _balancesTo = balances[_to];\\n        uint256 _balancesToNew = _balancesTo.add(_value);\\n        balances[_to] = _balancesToNew;\\n\\n        /// @dev Handle checkpoint update.\\n        uint256 _currentPrice = tokenPrice();\\n\\n        //checkpoints are not being used by the smart contract logic itself, but just for external use (query the profit)\\n        //only update the checkpoints of a user if he's not depositing to / withdrawing from the lending pool\\n        if (_from != liquidityMiningAddress && _to != liquidityMiningAddress) {\\n            _updateCheckpoints(_from, _balancesFrom, _balancesFromNew, _currentPrice);\\n            _updateCheckpoints(_to, _balancesTo, _balancesToNew, _currentPrice);\\n        }\\n\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Profit calculation based on checkpoints of price.\\n     * @param slot The user slot.\\n     * @param _balance The user balance.\\n     * @param _currentPrice The current price of the loan token.\\n     * @param _checkpointPrice The price of the loan token on checkpoint.\\n     * @return The profit of a user.\\n     * */\\n    function _profitOf(\\n        bytes32 slot,\\n        uint256 _balance,\\n        uint256 _currentPrice,\\n        uint256 _checkpointPrice\\n    ) internal view returns (int256 profitSoFar) {\\n        if (_checkpointPrice == 0) {\\n            return 0;\\n        }\\n\\n        assembly {\\n            profitSoFar := sload(slot)\\n        }\\n\\n        profitSoFar = int256(_currentPrice)\\n            .sub(int256(_checkpointPrice))\\n            .mul(int256(_balance))\\n            .div(sWEI_PRECISION)\\n            .add(profitSoFar);\\n    }\\n\\n    /**\\n     * @notice Loan token price calculation considering unpaid interests.\\n     * @return The loan token price.\\n     * */\\n    function tokenPrice() public view returns (uint256 price) {\\n        uint256 interestUnPaid;\\n        if (lastSettleTime_ != uint88(block.timestamp)) {\\n            (, interestUnPaid) = _getAllInterest();\\n        }\\n\\n        return _tokenPrice(_totalAssetSupply(interestUnPaid));\\n    }\\n\\n    /**\\n     * @notice Get the total amount of loan tokens on debt.\\n     * Calls protocol getTotalPrincipal function.\\n     * In the context of borrowing, principal is the initial size of a loan.\\n     * It can also be the amount still owed on a loan. If you take out a\\n     * $50,000 mortgage, for example, the principal is $50,000. If you pay off\\n     * $30,000, the principal balance now consists of the remaining $20,000.\\n     *\\n     * @return The total amount of loan tokens on debt.\\n     * */\\n    function totalAssetBorrow() public view returns (uint256) {\\n        return\\n            ProtocolLike(sovrynContractAddress).getTotalPrincipal(address(this), loanTokenAddress);\\n    }\\n\\n    /** INTERNAL FUNCTION */\\n\\n    /**\\n     * @notice .\\n     *\\n     * @param collateralTokenAddress The address of the token to be used as\\n     *   collateral. Cannot be the loan token address.\\n     * @param sentAddresses The addresses to send tokens: lender, borrower,\\n     *   receiver and manager.\\n     * @param sentAmounts The amounts to send to each address.\\n     * @param withdrawalAmount The amount of tokens to withdraw.\\n     *\\n     * @return msgValue The amount of rBTC sent minus the collateral on tokens.\\n     * */\\n    function _verifyTransfers(\\n        address collateralTokenAddress,\\n        MarginTradeStructHelpers.SentAddresses memory sentAddresses,\\n        MarginTradeStructHelpers.SentAmounts memory sentAmounts,\\n        uint256 withdrawalAmount\\n    ) internal returns (uint256 msgValue) {\\n        address _wrbtcToken = wrbtcTokenAddress;\\n        address _loanTokenAddress = loanTokenAddress;\\n        uint256 newPrincipal = sentAmounts.newPrincipal;\\n        uint256 loanTokenSent = sentAmounts.loanTokenSent;\\n        uint256 collateralTokenSent = sentAmounts.collateralTokenSent;\\n\\n        require(_loanTokenAddress != collateralTokenAddress, \\\"26\\\");\\n\\n        msgValue = msg.value;\\n\\n        if (withdrawalAmount != 0) {\\n            /// withdrawOnOpen == true\\n            _safeTransfer(_loanTokenAddress, sentAddresses.receiver, withdrawalAmount, \\\"\\\");\\n            if (newPrincipal > withdrawalAmount) {\\n                _safeTransfer(\\n                    _loanTokenAddress,\\n                    sovrynContractAddress,\\n                    newPrincipal - withdrawalAmount,\\n                    \\\"\\\"\\n                );\\n            }\\n        } else {\\n            _safeTransfer(_loanTokenAddress, sovrynContractAddress, newPrincipal, \\\"27\\\");\\n        }\\n        /**\\n         * This is a critical piece of code!\\n         * rBTC are supposed to be held by the contract itself, while other tokens are being transfered from the sender directly.\\n         * */\\n        if (collateralTokenSent != 0) {\\n            if (\\n                collateralTokenAddress == _wrbtcToken &&\\n                msgValue != 0 &&\\n                msgValue >= collateralTokenSent\\n            ) {\\n                IWrbtc(_wrbtcToken).deposit.value(collateralTokenSent)();\\n                _safeTransfer(\\n                    collateralTokenAddress,\\n                    sovrynContractAddress,\\n                    collateralTokenSent,\\n                    \\\"28-a\\\"\\n                );\\n                msgValue -= collateralTokenSent;\\n            } else {\\n                _safeTransferFrom(\\n                    collateralTokenAddress,\\n                    msg.sender,\\n                    sovrynContractAddress,\\n                    collateralTokenSent,\\n                    \\\"28-b\\\"\\n                );\\n            }\\n        }\\n\\n        if (loanTokenSent != 0) {\\n            _safeTransferFrom(\\n                _loanTokenAddress,\\n                msg.sender,\\n                sovrynContractAddress,\\n                loanTokenSent,\\n                \\\"29\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw loan token interests from protocol.\\n     * This function only operates once per block.\\n     * It asks protocol to withdraw accrued interests for the loan token.\\n     *\\n     * @dev Internal sync required on every loan trade before starting.\\n     * */\\n    function _settleInterest() internal {\\n        uint88 ts = uint88(block.timestamp);\\n        if (lastSettleTime_ != ts) {\\n            ProtocolLike(sovrynContractAddress).withdrawAccruedInterest(loanTokenAddress);\\n\\n            lastSettleTime_ = ts;\\n        }\\n    }\\n\\n    /**\\n     * @notice Imitate a Solidity high-level call (i.e. a regular function\\n     * call to a contract), relaxing the requirement on the return value:\\n     * the return value is optional (but if data is returned, it must not be\\n     * false).\\n     *\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     * @param errorMsg The error message on failure.\\n     * */\\n    function _callOptionalReturn(\\n        address token,\\n        bytes memory data,\\n        string memory errorMsg\\n    ) internal {\\n        require(Address.isContract(token), \\\"call to a non-contract address\\\");\\n        (bool success, bytes memory returndata) = token.call(data);\\n        require(success, errorMsg);\\n\\n        if (returndata.length != 0) {\\n            require(abi.decode(returndata, (bool)), errorMsg);\\n        }\\n    }\\n\\n    /**\\n     * @notice Execute the ERC20 token's `transfer` function and reverts\\n     * upon failure the main purpose of this function is to prevent a non\\n     * standard ERC20 token from failing silently.\\n     *\\n     * @dev Wrappers around ERC20 operations that throw on failure (when the\\n     * token contract returns false). Tokens that return no value (and instead\\n     * revert or throw on failure) are also supported, non-reverting calls are\\n     * assumed to be successful.\\n     *\\n     * @param token The ERC20 token address.\\n     * @param to The target address.\\n     * @param amount The transfer amount.\\n     * @param errorMsg The error message on failure.\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        string memory errorMsg\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(IERC20(token).transfer.selector, to, amount),\\n            errorMsg\\n        );\\n    }\\n\\n    /**\\n     * @notice Execute the ERC20 token's `transferFrom` function and reverts\\n     * upon failure the main purpose of this function is to prevent a non\\n     * standard ERC20 token from failing silently.\\n     *\\n     * @dev Wrappers around ERC20 operations that throw on failure (when the\\n     * token contract returns false). Tokens that return no value (and instead\\n     * revert or throw on failure) are also supported, non-reverting calls are\\n     * assumed to be successful.\\n     *\\n     * @param token The ERC20 token address.\\n     * @param from The source address.\\n     * @param to The target address.\\n     * @param amount The transfer amount.\\n     * @param errorMsg The error message on failure.\\n     */\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        string memory errorMsg\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(IERC20(token).transferFrom.selector, from, to, amount),\\n            errorMsg\\n        );\\n    }\\n\\n    /** Internal view function */\\n    /**\\n     * @notice Compute the token price.\\n     * @param assetSupply The amount of loan tokens supplied.\\n     * @return The token price.\\n     * */\\n    function _tokenPrice(uint256 assetSupply) internal view returns (uint256) {\\n        uint256 totalTokenSupply = totalSupply_;\\n\\n        return\\n            totalTokenSupply != 0 ? assetSupply.mul(10**18).div(totalTokenSupply) : initialPrice;\\n    }\\n\\n    /**\\n     * @notice Get two kind of interests: owed per day and yet to be paid.\\n     * @return interestOwedPerDay The interest per day.\\n     * @return interestUnPaid The interest not yet paid.\\n     * */\\n    function _getAllInterest()\\n        internal\\n        view\\n        returns (uint256 interestOwedPerDay, uint256 interestUnPaid)\\n    {\\n        /// interestPaid, interestPaidDate, interestOwedPerDay, interestUnPaid, interestFeePercent, principalTotal\\n        uint256 interestFeePercent;\\n        (, , interestOwedPerDay, interestUnPaid, interestFeePercent, ) = ProtocolLike(\\n            sovrynContractAddress\\n        )\\n            .getLenderInterestData(address(this), loanTokenAddress);\\n\\n        interestUnPaid = interestUnPaid.mul(SafeMath.sub(10**20, interestFeePercent)).div(10**20);\\n    }\\n\\n    /**\\n     * @notice Compute the total amount of loan tokens on supply.\\n     * @param interestUnPaid The interest not yet paid.\\n     * @return assetSupply The total amount of loan tokens on supply.\\n     * */\\n    function _totalAssetSupply(uint256 interestUnPaid)\\n        internal\\n        view\\n        returns (uint256 assetSupply)\\n    {\\n        if (totalSupply_ != 0) {\\n            uint256 assetsBalance = _flTotalAssetSupply; /// Temporary locked totalAssetSupply during a flash loan transaction.\\n            if (assetsBalance == 0) {\\n                assetsBalance = _underlyingBalance().add(totalAssetBorrow());\\n            }\\n\\n            return assetsBalance.add(interestUnPaid);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the loan contract balance.\\n     * @return The balance of the loan token for this contract.\\n     * */\\n    function _underlyingBalance() internal view returns (uint256) {\\n        return IERC20(loanTokenAddress).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf48f5305ffa6517e92585dafaf0b502e244a68f28889fc8d3cd7f4ec71892bae\"},\"contracts/connectors/loantoken/LoanTokenLogicStandard.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LoanTokenLogicShared.sol\\\";\\n\\ncontract LoanTokenLogicStandard is LoanTokenLogicShared {\\n    /**\\n     * @notice Transfer tokens wrapper.\\n     * Sets token owner the msg.sender.\\n     * Sets maximun allowance uint256(-1) to ensure tokens are always transferred.\\n     *\\n     * If the recipient (_to) is a vesting contract address, transfer the token to the tokenOwner of the vesting contract itself.\\n     *\\n     * @param _to The recipient of the tokens.\\n     * @param _value The amount of tokens sent.\\n     * @return Success true/false.\\n     * */\\n    function transfer(address _to, uint256 _value) external returns (bool) {\\n        /** need additional check  address(0) here to support backward compatibility\\n         * in case we don't want to activate this check, just need to set the stakingContractAddress to 0 address\\n         */\\n        if (\\n            stakingContractAddress != address(0) &&\\n            IStaking(stakingContractAddress).isVestingContract(_to)\\n        ) {\\n            (bool success, bytes memory data) =\\n                _to.staticcall(abi.encodeWithSelector(IVesting(_to).tokenOwner.selector));\\n\\n            if (success) _to = abi.decode(data, (address));\\n        }\\n\\n        return _internalTransferFrom(msg.sender, _to, _value, uint256(-1));\\n    }\\n\\n    /**\\n     * @notice Moves `_value` loan tokens from `_from` to `_to` using the\\n     * allowance mechanism. Calls internal _internalTransferFrom function.\\n     *\\n     * @return A boolean value indicating whether the operation succeeded.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool) {\\n        return\\n            _internalTransferFrom(\\n                _from,\\n                _to,\\n                _value,\\n                //allowed[_from][msg.sender]\\n                ProtocolLike(sovrynContractAddress).isLoanPool(msg.sender)\\n                    ? uint256(-1)\\n                    : allowed[_from][msg.sender]\\n            );\\n    }\\n\\n    /**\\n     * @notice Borrow funds from the pool.\\n     * The underlying loan token may not be used as collateral.\\n     *\\n     * @param loanId The ID of the loan, 0 for a new loan.\\n     * @param withdrawAmount The amount to be withdrawn (actually borrowed).\\n     * @param initialLoanDuration The duration of the loan in seconds.\\n     *   If the loan is not paid back until then, it'll need to be rolled over.\\n     * @param collateralTokenSent The amount of collateral tokens provided by the user.\\n     *   (150% of the withdrawn amount worth in collateral tokens).\\n     * @param collateralTokenAddress The address of the token to be used as\\n     *   collateral. Cannot be the loan token address.\\n     * @param borrower The one paying for the collateral.\\n     * @param receiver The one receiving the withdrawn amount.\\n     *\\n     * @return New principal and new collateral added to loan.\\n     * */\\n    function borrow(\\n        bytes32 loanId, /// 0 if new loan.\\n        uint256 withdrawAmount,\\n        uint256 initialLoanDuration, /// Duration in seconds.\\n        uint256 collateralTokenSent, /// If 0, loanId must be provided; any rBTC sent must equal this value.\\n        address collateralTokenAddress, /// If address(0), this means rBTC and rBTC must be sent with the call or loanId must be provided.\\n        address borrower,\\n        address receiver,\\n        bytes memory /// loanDataBytes: arbitrary order data (for future use).\\n    )\\n        public\\n        payable\\n        nonReentrant /// Note: needs to be removed to allow flashloan use cases.\\n        globallyNonReentrant\\n        returns (\\n            uint256,\\n            uint256 /// Returns new principal and new collateral added to loan.\\n        )\\n    {\\n        require(withdrawAmount != 0, \\\"6\\\");\\n\\n        _checkPause();\\n\\n        /// Temporary: limit transaction size.\\n        if (transactionLimit[collateralTokenAddress] > 0)\\n            require(collateralTokenSent <= transactionLimit[collateralTokenAddress]);\\n\\n        require(\\n            (msg.value == 0 || msg.value == collateralTokenSent) &&\\n                (collateralTokenSent != 0 || loanId != 0) &&\\n                (collateralTokenAddress != address(0) || msg.value != 0 || loanId != 0) &&\\n                (loanId == 0 || msg.sender == borrower),\\n            \\\"7\\\"\\n        );\\n\\n        /// @dev We have an issue regarding contract size code is too big. 1 of the solution is need to keep the error message 32 bytes length\\n        // Temporarily, we combine this require to the above, so can save the contract size code\\n        // require(collateralTokenSent != 0 || loanId != 0, \\\"8\\\");\\n        // require(collateralTokenAddress != address(0) || msg.value != 0 || loanId != 0, \\\"9\\\");\\n\\n        /// @dev Ensure authorized use of existing loan.\\n        // require(loanId == 0 || msg.sender == borrower, \\\"401 use of existing loan\\\");\\n\\n        /// @dev The condition is never met.\\n        ///   Address zero is not allowed by previous require validation.\\n        ///   This check is unneeded and was lowering the test coverage index.\\n        // if (collateralTokenAddress == address(0)) {\\n        // \\tcollateralTokenAddress = wrbtcTokenAddress;\\n        // }\\n\\n        require(collateralTokenAddress != loanTokenAddress, \\\"10\\\");\\n\\n        _settleInterest();\\n\\n        MarginTradeStructHelpers.SentAddresses memory sentAddresses;\\n        MarginTradeStructHelpers.SentAmounts memory sentAmounts;\\n\\n        sentAddresses.lender = address(this); /// The lender.\\n        sentAddresses.borrower = borrower;\\n        sentAddresses.receiver = receiver;\\n        /// sentAddresses.manager = address(0); /// The manager.\\n\\n        sentAmounts.newPrincipal = withdrawAmount;\\n\\n        /// interestRate, interestInitialAmount, borrowAmount (newBorrowAmount).\\n        (\\n            sentAmounts.interestRate,\\n            sentAmounts.interestInitialAmount,\\n            sentAmounts.newPrincipal\\n        ) = _getInterestRateAndBorrowAmount(\\n            sentAmounts.newPrincipal,\\n            _totalAssetSupply(0), /// Interest is settled above.\\n            initialLoanDuration\\n        );\\n\\n        /// sentAmounts.loanTokenSent = 0; /// loanTokenSent\\n        sentAmounts.collateralTokenSent = collateralTokenSent;\\n\\n        return\\n            _borrowOrTrade(\\n                loanId,\\n                withdrawAmount,\\n                ProtocolSettingsLike(sovrynContractAddress).minInitialMargin(\\n                    loanParamsIds[\\n                        uint256(keccak256(abi.encodePacked(collateralTokenAddress, true)))\\n                    ]\\n                ),\\n                collateralTokenAddress,\\n                sentAddresses,\\n                sentAmounts,\\n                \\\"\\\" /// loanDataBytes\\n            );\\n    }\\n\\n    /**\\n     * @notice Borrow and immediately get into a position.\\n     *\\n     * Trading on margin is used to increase an investor's buying power.\\n     * Margin is the amount of money required to open a position, while\\n     * leverage is the multiple of exposure to account equity.\\n     *\\n     * Leverage allows you to trade positions LARGER than the amount\\n     * of money in your trading account. Leverage is expressed as a ratio.\\n     *\\n     * When trading on margin, investors first deposit some token that then\\n     * serves as collateral for the loan, and then pay ongoing interest\\n     * payments on the money they borrow.\\n     *\\n     * Margin trading = taking a loan and swapping it:\\n     * In order to open a margin trade position,\\n     *  1.- The user calls marginTrade on the loan token contract.\\n     *  2.- The loan token contract provides the loan and sends it for processing\\n     *    to the protocol proxy contract.\\n     *  3.- The protocol proxy contract uses the module LoanOpening to create a\\n     *    position and swaps the loan tokens to collateral tokens.\\n     *  4.- The Sovryn Swap network looks up the correct converter and swaps the\\n     *    tokens.\\n     * If successful, the position is being held by the protocol proxy contract,\\n     * which is why positions need to be closed at the protocol proxy contract.\\n     *\\n     * @param loanId The ID of the loan, 0 for a new loan.\\n     * @param leverageAmount The multiple of exposure: 2x ... 5x. The leverage with 18 decimals.\\n     * @param loanTokenSent The number of loan tokens provided by the user.\\n     * @param collateralTokenSent The amount of collateral tokens provided by the user.\\n     * @param collateralTokenAddress The token address of collateral.\\n     * @param trader The account that performs this trade.\\n     * @param minEntryPrice Value of loan token in collateral.\\n     * @param loanDataBytes Additional loan data (not in use for token swaps).\\n     *\\n     * @return New principal and new collateral added to trade.\\n     * */\\n    function marginTrade(\\n        bytes32 loanId, /// 0 if new loan\\n        uint256 leverageAmount, /// Expected in x * 10**18 where x is the actual leverage (2, 3, 4, or 5).\\n        uint256 loanTokenSent,\\n        uint256 collateralTokenSent,\\n        address collateralTokenAddress,\\n        address trader,\\n        uint256 minEntryPrice, // value of loan token in collateral\\n        bytes memory loanDataBytes /// Arbitrary order data.\\n    )\\n        public\\n        payable\\n        nonReentrant /// Note: needs to be removed to allow flashloan use cases.\\n        globallyNonReentrant\\n        returns (\\n            uint256,\\n            uint256 /// Returns new principal and new collateral added to trade.\\n        )\\n    {\\n        _checkPause();\\n\\n        if (collateralTokenAddress == address(0)) {\\n            collateralTokenAddress = wrbtcTokenAddress;\\n        }\\n\\n        require(collateralTokenAddress != loanTokenAddress, \\\"11\\\");\\n\\n        /// @dev Ensure authorized use of existing loan.\\n        require(loanId == 0 || msg.sender == trader, \\\"401 use of existing loan\\\");\\n\\n        /// Temporary: limit transaction size.\\n        if (transactionLimit[collateralTokenAddress] > 0)\\n            require(collateralTokenSent <= transactionLimit[collateralTokenAddress]);\\n        if (transactionLimit[loanTokenAddress] > 0)\\n            require(loanTokenSent <= transactionLimit[loanTokenAddress]);\\n\\n        /// @dev Compute the worth of the total deposit in loan tokens.\\n        /// (loanTokenSent + convert(collateralTokenSent))\\n        /// No actual swap happening here.\\n        uint256 totalDeposit =\\n            _totalDeposit(collateralTokenAddress, collateralTokenSent, loanTokenSent);\\n        require(totalDeposit != 0, \\\"12\\\");\\n\\n        MarginTradeStructHelpers.SentAddresses memory sentAddresses;\\n        MarginTradeStructHelpers.SentAmounts memory sentAmounts;\\n\\n        sentAddresses.lender = address(this);\\n        sentAddresses.borrower = trader;\\n        sentAddresses.receiver = trader;\\n        /// sentAddresses.manager = address(0); /// The manager.\\n\\n        /// sentAmounts.interestRate = 0; /// interestRate (found later).\\n        sentAmounts.newPrincipal = totalDeposit;\\n        /// sentAmounts.interestInitialAmount = 0; /// interestInitialAmount (interest is calculated based on fixed-term loan).\\n        sentAmounts.loanTokenSent = loanTokenSent;\\n        sentAmounts.collateralTokenSent = collateralTokenSent;\\n\\n        _settleInterest();\\n\\n        (sentAmounts.newPrincipal, sentAmounts.interestRate) = _getMarginBorrowAmountAndRate( /// borrowAmount, interestRate\\n            leverageAmount,\\n            sentAmounts.newPrincipal /// depositAmount\\n        );\\n\\n        require(\\n            _getAmountInRbtc(loanTokenAddress, sentAmounts.newPrincipal) > TINY_AMOUNT,\\n            \\\"principal too small\\\"\\n        );\\n\\n        /// @dev Converting to initialMargin\\n        leverageAmount = SafeMath.div(10**38, leverageAmount);\\n        sentAmounts.minEntryPrice = minEntryPrice;\\n        return\\n            _borrowOrTrade(\\n                loanId,\\n                0, /// withdrawAmount\\n                leverageAmount, //initial margin\\n                collateralTokenAddress,\\n                sentAddresses,\\n                sentAmounts,\\n                loanDataBytes\\n            );\\n    }\\n\\n    /**\\n     * @notice Wrapper for marginTrade invoking setAffiliatesReferrer to track\\n     *   referral trade by affiliates program.\\n     *\\n     * @param loanId The ID of the loan, 0 for a new loan.\\n     * @param leverageAmount The multiple of exposure: 2x ... 5x. The leverage with 18 decimals.\\n     * @param loanTokenSent The number of loan tokens provided by the user.\\n     * @param collateralTokenSent The amount of collateral tokens provided by the user.\\n     * @param collateralTokenAddress The token address of collateral.\\n     * @param trader The account that performs this trade.\\n     * @param minEntryPrice Value of loan token in collateral.\\n     * @param affiliateReferrer The address of the referrer from affiliates program.\\n     * @param loanDataBytes Additional loan data (not in use for token swaps).\\n     *\\n     * @return New principal and new collateral added to trade.\\n     */\\n    function marginTradeAffiliate(\\n        bytes32 loanId, // 0 if new loan\\n        uint256 leverageAmount, // expected in x * 10**18 where x is the actual leverage (2, 3, 4, or 5)\\n        uint256 loanTokenSent,\\n        uint256 collateralTokenSent,\\n        address collateralTokenAddress,\\n        address trader,\\n        uint256 minEntryPrice, /// Value of loan token in collateral\\n        address affiliateReferrer, /// The user was brought by the affiliate (referrer).\\n        bytes calldata loanDataBytes /// Arbitrary order data.\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256,\\n            uint256 /// Returns new principal and new collateral added to trade.\\n        )\\n    {\\n        if (affiliateReferrer != address(0))\\n            ProtocolAffiliatesInterface(sovrynContractAddress).setAffiliatesReferrer(\\n                trader,\\n                affiliateReferrer\\n            );\\n        return\\n            marginTrade(\\n                loanId,\\n                leverageAmount,\\n                loanTokenSent,\\n                collateralTokenSent,\\n                collateralTokenAddress,\\n                trader,\\n                minEntryPrice,\\n                loanDataBytes\\n            );\\n    }\\n\\n    /* Public View functions */\\n\\n    /**\\n     * @notice Wrapper for internal _profitOf low level function.\\n     * @param user The user address.\\n     * @return The profit of a user.\\n     * */\\n    function profitOf(address user) external view returns (int256) {\\n        /// @dev keccak256(\\\"iToken_ProfitSoFar\\\")\\n        bytes32 slot = keccak256(abi.encodePacked(user, iToken_ProfitSoFar));\\n        //TODO + LM balance\\n        return _profitOf(slot, balances[user], tokenPrice(), checkpointPrices_[user]);\\n    }\\n\\n    /**\\n     * @notice Getter for the price checkpoint mapping.\\n     * @param _user The user account as the mapping index.\\n     * @return The price on the checkpoint for this user.\\n     * */\\n    function checkpointPrice(address _user) public view returns (uint256 price) {\\n        return checkpointPrices_[_user];\\n    }\\n\\n    /**\\n     * @notice Get current liquidity.\\n     * A part of total funds supplied are borrowed. Liquidity = supply - borrow\\n     * @return The market liquidity.\\n     * */\\n    function marketLiquidity() public view returns (uint256) {\\n        uint256 totalSupply = _totalAssetSupply(0);\\n        uint256 totalBorrow = totalAssetBorrow();\\n        if (totalSupply > totalBorrow) {\\n            return totalSupply - totalBorrow;\\n        }\\n    }\\n\\n    /**\\n     * @notice Wrapper for average borrow interest.\\n     * @return The average borrow interest.\\n     * */\\n    function avgBorrowInterestRate() public view returns (uint256) {\\n        return _avgBorrowInterestRate(totalAssetBorrow());\\n    }\\n\\n    /**\\n     * @notice Get borrow interest rate.\\n     * The minimum rate the next base protocol borrower will receive\\n     * for variable-rate loans.\\n     * @return The borrow interest rate.\\n     * */\\n    function borrowInterestRate() public view returns (uint256) {\\n        return _nextBorrowInterestRate(0);\\n    }\\n\\n    /**\\n     * @notice Public wrapper for internal call.\\n     * @param borrowAmount The amount of tokens to borrow.\\n     * @return The next borrow interest rate.\\n     * */\\n    function nextBorrowInterestRate(uint256 borrowAmount) public view returns (uint256) {\\n        return _nextBorrowInterestRate(borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Get interest rate.\\n     *\\n     * @return Interest that lenders are currently receiving when supplying to\\n     * the pool.\\n     * */\\n    function supplyInterestRate() public view returns (uint256) {\\n        return totalSupplyInterestRate(_totalAssetSupply(0));\\n    }\\n\\n    /**\\n     * @notice Get interest rate w/ added supply.\\n     * @param supplyAmount The amount of tokens supplied.\\n     * @return Interest that lenders are currently receiving when supplying\\n     * a given amount of tokens to the pool.\\n     * */\\n    function nextSupplyInterestRate(uint256 supplyAmount) public view returns (uint256) {\\n        return totalSupplyInterestRate(_totalAssetSupply(0).add(supplyAmount));\\n    }\\n\\n    /**\\n     * @notice Get interest rate w/ added supply assets.\\n     * @param assetSupply The amount of loan tokens supplied.\\n     * @return Interest that lenders are currently receiving when supplying\\n     * a given amount of loan tokens to the pool.\\n     * */\\n    function totalSupplyInterestRate(uint256 assetSupply) public view returns (uint256) {\\n        uint256 assetBorrow = totalAssetBorrow();\\n        if (assetBorrow != 0) {\\n            return calculateSupplyInterestRate(assetBorrow, assetSupply);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the total amount of loan tokens on supply.\\n     * @dev Wrapper for internal _totalAssetSupply function.\\n     * @return The total amount of loan tokens on supply.\\n     * */\\n    function totalAssetSupply() public view returns (uint256) {\\n        uint256 interestUnPaid;\\n        if (lastSettleTime_ != uint88(block.timestamp)) {\\n            (, interestUnPaid) = _getAllInterest();\\n        }\\n\\n        return _totalAssetSupply(interestUnPaid);\\n    }\\n\\n    /**\\n     * @notice Compute the maximum deposit amount under current market conditions.\\n     * @dev maxEscrowAmount = liquidity * (100 - interestForDuration) / 100\\n     * @param leverageAmount The chosen multiplier with 18 decimals.\\n     * */\\n    function getMaxEscrowAmount(uint256 leverageAmount)\\n        public\\n        view\\n        returns (uint256 maxEscrowAmount)\\n    {\\n        /**\\n         * @dev Mathematical imperfection: depending on liquidity we might be able\\n         * to borrow more if utilization is below the kink level.\\n         * */\\n        uint256 interestForDuration = maxScaleRate.mul(28).div(365);\\n        uint256 factor = uint256(10**20).sub(interestForDuration);\\n        uint256 maxLoanSize = marketLiquidity().mul(factor).div(10**20);\\n        maxEscrowAmount = maxLoanSize.mul(10**18).div(leverageAmount);\\n    }\\n\\n    /**\\n     * @notice Get loan token balance.\\n     * @return The user's balance of underlying token.\\n     * */\\n    function assetBalanceOf(address _owner) public view returns (uint256) {\\n        uint256 balanceOnLM = 0;\\n        if (liquidityMiningAddress != address(0)) {\\n            balanceOnLM = ILiquidityMining(liquidityMiningAddress).getUserPoolTokenBalance(\\n                address(this),\\n                _owner\\n            );\\n        }\\n        return balanceOf(_owner).add(balanceOnLM).mul(tokenPrice()).div(10**18);\\n    }\\n\\n    /**\\n     * @notice Get margin information on a trade.\\n     *\\n     * @param leverageAmount The multiple of exposure: 2x ... 5x. The leverage with 18 decimals.\\n     * @param loanTokenSent The number of loan tokens provided by the user.\\n     * @param collateralTokenSent The amount of collateral tokens provided by the user.\\n     * @param collateralTokenAddress The token address of collateral.\\n     *\\n     * @return The principal, the collateral and the interestRate.\\n     * */\\n    function getEstimatedMarginDetails(\\n        uint256 leverageAmount,\\n        uint256 loanTokenSent,\\n        uint256 collateralTokenSent,\\n        address collateralTokenAddress // address(0) means ETH\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 principal,\\n            uint256 collateral,\\n            uint256 interestRate\\n        )\\n    {\\n        if (collateralTokenAddress == address(0)) {\\n            collateralTokenAddress = wrbtcTokenAddress;\\n        }\\n\\n        uint256 totalDeposit =\\n            _totalDeposit(collateralTokenAddress, collateralTokenSent, loanTokenSent);\\n\\n        (principal, interestRate) = _getMarginBorrowAmountAndRate(leverageAmount, totalDeposit);\\n        if (principal > _underlyingBalance()) {\\n            return (0, 0, 0);\\n        }\\n\\n        loanTokenSent = loanTokenSent.add(principal);\\n\\n        collateral = ProtocolLike(sovrynContractAddress).getEstimatedMarginExposure(\\n            loanTokenAddress,\\n            collateralTokenAddress,\\n            loanTokenSent,\\n            collateralTokenSent,\\n            interestRate,\\n            principal\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate the deposit required to a given borrow.\\n     *\\n     * The function for doing over-collateralized borrows against loan tokens\\n     * expects a minimum amount of collateral be sent to satisfy collateral\\n     * requirements of the loan, for borrow amount, interest rate, and\\n     * initial loan duration. To determine appropriate values to pass to this\\n     * function for a given loan, `getDepositAmountForBorrow` and\\n     * 'getBorrowAmountForDeposit` are required.\\n     *\\n     * @param borrowAmount The amount of borrow.\\n     * @param initialLoanDuration The duration of the loan.\\n     * @param collateralTokenAddress The token address of collateral.\\n     *\\n     * @return The amount of deposit required.\\n     * */\\n    function getDepositAmountForBorrow(\\n        uint256 borrowAmount,\\n        uint256 initialLoanDuration, /// Duration in seconds.\\n        address collateralTokenAddress /// address(0) means rBTC\\n    ) public view returns (uint256 depositAmount) {\\n        if (borrowAmount != 0) {\\n            (, , uint256 newBorrowAmount) =\\n                _getInterestRateAndBorrowAmount(\\n                    borrowAmount,\\n                    totalAssetSupply(),\\n                    initialLoanDuration\\n                );\\n\\n            if (newBorrowAmount <= _underlyingBalance()) {\\n                if (collateralTokenAddress == address(0))\\n                    collateralTokenAddress = wrbtcTokenAddress;\\n                bytes32 loanParamsId =\\n                    loanParamsIds[\\n                        uint256(keccak256(abi.encodePacked(collateralTokenAddress, true)))\\n                    ];\\n                return\\n                    ProtocolLike(sovrynContractAddress)\\n                        .getRequiredCollateral(\\n                        loanTokenAddress,\\n                        collateralTokenAddress,\\n                        newBorrowAmount,\\n                        ProtocolSettingsLike(sovrynContractAddress).minInitialMargin(loanParamsId), /// initialMargin\\n                        true /// isTorqueLoan\\n                    )\\n                        .add(10); /// Some dust to compensate for rounding errors.\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the borrow allowed for a given deposit.\\n     *\\n     * The function for doing over-collateralized borrows against loan tokens\\n     * expects a minimum amount of collateral be sent to satisfy collateral\\n     * requirements of the loan, for borrow amount, interest rate, and\\n     * initial loan duration. To determine appropriate values to pass to this\\n     * function for a given loan, `getDepositAmountForBorrow` and\\n     * 'getBorrowAmountForDeposit` are required.\\n     *\\n     * @param depositAmount The amount of deposit.\\n     * @param initialLoanDuration The duration of the loan.\\n     * @param collateralTokenAddress The token address of collateral.\\n     *\\n     * @return The amount of borrow allowed.\\n     * */\\n    function getBorrowAmountForDeposit(\\n        uint256 depositAmount,\\n        uint256 initialLoanDuration, /// Duration in seconds.\\n        address collateralTokenAddress /// address(0) means rBTC\\n    ) public view returns (uint256 borrowAmount) {\\n        if (depositAmount != 0) {\\n            if (collateralTokenAddress == address(0)) collateralTokenAddress = wrbtcTokenAddress;\\n            bytes32 loanParamsId =\\n                loanParamsIds[uint256(keccak256(abi.encodePacked(collateralTokenAddress, true)))];\\n            borrowAmount = ProtocolLike(sovrynContractAddress).getBorrowAmount(\\n                loanTokenAddress,\\n                collateralTokenAddress,\\n                depositAmount,\\n                ProtocolSettingsLike(sovrynContractAddress).minInitialMargin(loanParamsId), /// initialMargin,\\n                true /// isTorqueLoan\\n            );\\n\\n            (, , borrowAmount) = _getInterestRateAndBorrowAmount(\\n                borrowAmount,\\n                totalAssetSupply(),\\n                initialLoanDuration\\n            );\\n\\n            if (borrowAmount > _underlyingBalance()) {\\n                borrowAmount = 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if entry price lies above a minimum\\n     *\\n     * @param loanTokenSent The amount of deposit.\\n     * @param collateralTokenAddress The token address of collateral.\\n     * @param minEntryPrice Value of loan token in collateral\\n     * */\\n    function checkPriceDivergence(\\n        uint256 loanTokenSent,\\n        address collateralTokenAddress,\\n        uint256 minEntryPrice\\n    ) public view {\\n        /// @dev See how many collateralTokens we would get if exchanging this amount of loan tokens to collateral tokens.\\n        uint256 collateralTokensReceived =\\n            ProtocolLike(sovrynContractAddress).getSwapExpectedReturn(\\n                loanTokenAddress,\\n                collateralTokenAddress,\\n                loanTokenSent\\n            );\\n        uint256 collateralTokenPrice =\\n            (collateralTokensReceived.mul(WEI_PRECISION)).div(loanTokenSent);\\n        require(collateralTokenPrice >= minEntryPrice, \\\"entry price above the minimum\\\");\\n    }\\n\\n    /**\\n     * @notice Compute the next supply interest adjustment.\\n     * @param assetBorrow The amount of loan tokens on debt.\\n     * @param assetSupply The amount of loan tokens supplied.\\n     * @return The next supply interest adjustment.\\n     * */\\n    function calculateSupplyInterestRate(uint256 assetBorrow, uint256 assetSupply)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (assetBorrow != 0 && assetSupply >= assetBorrow) {\\n            return\\n                _avgBorrowInterestRate(assetBorrow)\\n                    .mul(_utilizationRate(assetBorrow, assetSupply))\\n                    .mul(\\n                    SafeMath.sub(10**20, ProtocolLike(sovrynContractAddress).lendingFeePercent())\\n                )\\n                    .div(10**40);\\n        }\\n    }\\n\\n    /* Internal functions */\\n\\n    /**\\n     * @notice Compute what the deposit is worth in loan tokens using the swap rate\\n     *      used for loan size computation.\\n     *\\n     * @param collateralTokenAddress The token address of the collateral.\\n     * @param collateralTokenSent The amount of collateral tokens provided by the user.\\n     * @param loanTokenSent The number of loan tokens provided by the user.\\n     *\\n     * @return The value of the deposit in loan tokens.\\n     * */\\n    function _totalDeposit(\\n        address collateralTokenAddress,\\n        uint256 collateralTokenSent,\\n        uint256 loanTokenSent\\n    ) internal view returns (uint256 totalDeposit) {\\n        totalDeposit = loanTokenSent;\\n\\n        if (collateralTokenSent != 0) {\\n            /// @dev Get the oracle rate from collateral -> loan\\n            (uint256 collateralToLoanRate, uint256 collateralToLoanPrecision) =\\n                FeedsLike(ProtocolLike(sovrynContractAddress).priceFeeds()).queryRate(\\n                    collateralTokenAddress,\\n                    loanTokenAddress\\n                );\\n            require(\\n                (collateralToLoanRate != 0) && (collateralToLoanPrecision != 0),\\n                \\\"invalid rate collateral token\\\"\\n            );\\n\\n            /// @dev Compute the loan token amount with the oracle rate.\\n            uint256 loanTokenAmount =\\n                collateralTokenSent.mul(collateralToLoanRate).div(collateralToLoanPrecision);\\n\\n            /// @dev See how many collateralTokens we would get if exchanging this amount of loan tokens to collateral tokens.\\n            uint256 collateralTokenAmount =\\n                ProtocolLike(sovrynContractAddress).getSwapExpectedReturn(\\n                    loanTokenAddress,\\n                    collateralTokenAddress,\\n                    loanTokenAmount\\n                );\\n\\n            /// @dev Probably not the same due to the price difference.\\n            if (collateralTokenAmount != collateralTokenSent) {\\n                //scale the loan token amount accordingly, so we'll get the expected position size in the end\\n                loanTokenAmount = loanTokenAmount.mul(collateralTokenAmount).div(\\n                    collateralTokenSent\\n                );\\n            }\\n\\n            totalDeposit = loanTokenAmount.add(totalDeposit);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns amount of the asset converted to RBTC\\n     * @param asset the asset to be transferred\\n     * @param amount the amount to be transferred\\n     * @return amount in RBTC\\n     * */\\n    function _getAmountInRbtc(address asset, uint256 amount) internal returns (uint256) {\\n        (uint256 rbtcRate, uint256 rbtcPrecision) =\\n            FeedsLike(ProtocolLike(sovrynContractAddress).priceFeeds()).queryRate(\\n                asset,\\n                wrbtcTokenAddress\\n            );\\n        return amount.mul(rbtcRate).div(rbtcPrecision);\\n    }\\n\\n    /*\\n     * @notice Compute interest rate and other loan parameters.\\n     *\\n     * @param borrowAmount The amount of tokens to borrow.\\n     * @param assetSupply The amount of loan tokens supplied.\\n     * @param initialLoanDuration The duration of the loan in seconds.\\n     *   If the loan is not paid back until then, it'll need to be rolled over.\\n     *\\n     * @return The interest rate, the interest calculated based on fixed-term\\n     *   loan, and the new borrow amount.\\n     * */\\n    function _getInterestRateAndBorrowAmount(\\n        uint256 borrowAmount,\\n        uint256 assetSupply,\\n        uint256 initialLoanDuration /// Duration in seconds.\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 interestRate,\\n            uint256 interestInitialAmount,\\n            uint256 newBorrowAmount\\n        )\\n    {\\n        interestRate = _nextBorrowInterestRate2(borrowAmount, assetSupply);\\n\\n        /// newBorrowAmount = borrowAmount * 10^18 / (10^18 - interestRate * 7884000 * 10^18 / 31536000 / 10^20)\\n        newBorrowAmount = borrowAmount.mul(10**18).div(\\n            SafeMath.sub(\\n                10**18,\\n                interestRate.mul(initialLoanDuration).mul(10**18).div(31536000 * 10**20) /// 365 * 86400 * 10**20\\n            )\\n        );\\n\\n        interestInitialAmount = newBorrowAmount.sub(borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Compute principal and collateral.\\n     *\\n     * @param loanId The ID of the loan, 0 for a new loan.\\n     * @param withdrawAmount The amount to be withdrawn (actually borrowed).\\n     * @param initialMargin The initial margin with 18 decimals\\n     * @param collateralTokenAddress  The address of the token to be used as\\n     *   collateral. Cannot be the loan token address.\\n     * @param sentAddresses The addresses to send tokens: lender, borrower,\\n     *   receiver and manager.\\n     * @param sentAmounts The amounts to send to each address.\\n     * @param loanDataBytes Additional loan data (not in use for token swaps).\\n     *\\n     * @return The new principal and the new collateral. Principal is the\\n     *   complete borrowed amount (in loan tokens). Collateral is the complete\\n     *   position size (loan + margin) (in collateral tokens).\\n     * */\\n    function _borrowOrTrade(\\n        bytes32 loanId,\\n        uint256 withdrawAmount,\\n        uint256 initialMargin,\\n        address collateralTokenAddress,\\n        MarginTradeStructHelpers.SentAddresses memory sentAddresses,\\n        MarginTradeStructHelpers.SentAmounts memory sentAmounts,\\n        bytes memory loanDataBytes\\n    ) internal returns (uint256, uint256) {\\n        _checkPause();\\n        require(\\n            sentAmounts.newPrincipal <= _underlyingBalance() && /// newPrincipal (borrowed amount + fees)\\n                sentAddresses.borrower != address(0), /// The borrower.\\n            \\\"24\\\"\\n        );\\n\\n        if (sentAddresses.receiver == address(0)) {\\n            sentAddresses.receiver = sentAddresses.borrower; /// The receiver = the borrower.\\n        }\\n\\n        /// @dev Handle transfers prior to adding newPrincipal to loanTokenSent\\n        uint256 msgValue =\\n            _verifyTransfers(collateralTokenAddress, sentAddresses, sentAmounts, withdrawAmount);\\n\\n        /**\\n         * @dev Adding the loan token portion from the lender to loanTokenSent\\n         * (add the loan to the loan tokens sent from the user).\\n         * */\\n        sentAmounts.loanTokenSent = sentAmounts.loanTokenSent.add(sentAmounts.newPrincipal); /// newPrincipal\\n\\n        if (withdrawAmount != 0) {\\n            /// @dev withdrawAmount already sent to the borrower, so we aren't sending it to the protocol.\\n            sentAmounts.loanTokenSent = sentAmounts.loanTokenSent.sub(withdrawAmount);\\n        }\\n\\n        bool withdrawAmountExist = false; /// Default is false, but added just as to make sure.\\n\\n        if (withdrawAmount != 0) {\\n            withdrawAmountExist = true;\\n        }\\n\\n        bytes32 loanParamsId =\\n            loanParamsIds[\\n                uint256(keccak256(abi.encodePacked(collateralTokenAddress, withdrawAmountExist)))\\n            ];\\n\\n        (sentAmounts.newPrincipal, sentAmounts.collateralTokenSent) = ProtocolLike(\\n            sovrynContractAddress\\n        )\\n            .borrowOrTradeFromPool\\n            .value(msgValue)(\\n            loanParamsId,\\n            loanId,\\n            withdrawAmountExist,\\n            initialMargin,\\n            sentAddresses,\\n            sentAmounts,\\n            loanDataBytes\\n        ); /// newPrincipal, newCollateral\\n        require(sentAmounts.newPrincipal != 0, \\\"25\\\");\\n\\n        /// @dev Setting not-first-trade flag to prevent binding to an affiliate existing users post factum.\\n        /// @dev REFACTOR: move to a general interface: ProtocolSettingsLike?\\n        ProtocolAffiliatesInterface(sovrynContractAddress).setUserNotFirstTradeFlag(\\n            sentAddresses.borrower\\n        );\\n\\n        return (sentAmounts.newPrincipal, sentAmounts.collateralTokenSent); // newPrincipal, newCollateral\\n    }\\n\\n    /* Internal View functions */\\n\\n    /**\\n     * @notice Compute the average borrow interest rate.\\n     * @param assetBorrow The amount of loan tokens on debt.\\n     * @return The average borrow interest rate.\\n     * */\\n    function _avgBorrowInterestRate(uint256 assetBorrow) internal view returns (uint256) {\\n        if (assetBorrow != 0) {\\n            (uint256 interestOwedPerDay, ) = _getAllInterest();\\n            return interestOwedPerDay.mul(10**20).mul(365).div(assetBorrow);\\n        }\\n    }\\n\\n    /**\\n     * @notice Compute the next borrow interest adjustment.\\n     * @param borrowAmount The amount of tokens to borrow.\\n     * @return The next borrow interest adjustment.\\n     * */\\n    function _nextBorrowInterestRate(uint256 borrowAmount) internal view returns (uint256) {\\n        uint256 interestUnPaid;\\n        if (borrowAmount != 0) {\\n            if (lastSettleTime_ != uint88(block.timestamp)) {\\n                (, interestUnPaid) = _getAllInterest();\\n            }\\n\\n            uint256 balance = _underlyingBalance().add(interestUnPaid);\\n            if (borrowAmount > balance) {\\n                borrowAmount = balance;\\n            }\\n        }\\n\\n        return _nextBorrowInterestRate2(borrowAmount, _totalAssetSupply(interestUnPaid));\\n    }\\n\\n    /**\\n     * @notice Compute the next borrow interest adjustment under target-kink\\n     * level analysis.\\n     *\\n     * The \\\"kink\\\" in the cDAI interest rate model reflects the utilization rate\\n     * at which the slope of the interest rate goes from \\\"gradual\\\" to \\\"steep\\\".\\n     * That is, below this utilization rate, the slope of the interest rate\\n     * curve is gradual. Above this utilization rate, it is steep.\\n     *\\n     * Because of this dynamic between the interest rate curves before and\\n     * after the \\\"kink\\\", the \\\"kink\\\" can be thought of as the target utilization\\n     * rate. Above that rate, it quickly becomes expensive to borrow (and\\n     * commensurately lucrative for suppliers).\\n     *\\n     * @param newBorrowAmount The new amount of tokens to borrow.\\n     * @param assetSupply The amount of loan tokens supplied.\\n     * @return The next borrow interest adjustment.\\n     * */\\n    function _nextBorrowInterestRate2(uint256 newBorrowAmount, uint256 assetSupply)\\n        internal\\n        view\\n        returns (uint256 nextRate)\\n    {\\n        uint256 utilRate = _utilizationRate(totalAssetBorrow().add(newBorrowAmount), assetSupply);\\n\\n        uint256 thisMinRate;\\n        uint256 thisRateAtKink;\\n        uint256 thisBaseRate = baseRate;\\n        uint256 thisRateMultiplier = rateMultiplier;\\n        uint256 thisTargetLevel = targetLevel;\\n        uint256 thisKinkLevel = kinkLevel;\\n        uint256 thisMaxScaleRate = maxScaleRate;\\n\\n        if (utilRate < thisTargetLevel) {\\n            // target targetLevel utilization when utilization is under targetLevel\\n            utilRate = thisTargetLevel;\\n        }\\n\\n        if (utilRate > thisKinkLevel) {\\n            /// @dev Scale rate proportionally up to 100%\\n            uint256 thisMaxRange = WEI_PERCENT_PRECISION - thisKinkLevel; /// Will not overflow.\\n\\n            utilRate -= thisKinkLevel;\\n            if (utilRate > thisMaxRange) utilRate = thisMaxRange;\\n\\n            // Modified the rate calculation as it is slightly exaggerated around kink level\\n            // thisRateAtKink = thisRateMultiplier.add(thisBaseRate).mul(thisKinkLevel).div(WEI_PERCENT_PRECISION);\\n            thisRateAtKink = thisKinkLevel.mul(thisRateMultiplier).div(WEI_PERCENT_PRECISION).add(\\n                thisBaseRate\\n            );\\n\\n            nextRate = utilRate\\n                .mul(SafeMath.sub(thisMaxScaleRate, thisRateAtKink))\\n                .div(thisMaxRange)\\n                .add(thisRateAtKink);\\n        } else {\\n            nextRate = utilRate.mul(thisRateMultiplier).div(WEI_PERCENT_PRECISION).add(\\n                thisBaseRate\\n            );\\n\\n            thisMinRate = thisBaseRate;\\n            thisRateAtKink = thisRateMultiplier.add(thisBaseRate);\\n\\n            if (nextRate < thisMinRate) nextRate = thisMinRate;\\n            else if (nextRate > thisRateAtKink) nextRate = thisRateAtKink;\\n        }\\n    }\\n\\n    /**\\n     * @notice Compute the loan size and interest rate.\\n     * @param leverageAmount The leverage with 18 decimals.\\n     * @param depositAmount The amount the user deposited in underlying loan tokens.\\n     * @return borrowAmount The amount of tokens to borrow.\\n     * @return interestRate The interest rate to pay on the position.\\n     * */\\n    function _getMarginBorrowAmountAndRate(uint256 leverageAmount, uint256 depositAmount)\\n        internal\\n        view\\n        returns (uint256 borrowAmount, uint256 interestRate)\\n    {\\n        uint256 loanSizeBeforeInterest = depositAmount.mul(leverageAmount).div(10**18);\\n        /**\\n         * @dev Mathematical imperfection. we calculate the interest rate based on\\n         * the loanSizeBeforeInterest, but the actual borrowed amount will be bigger.\\n         * */\\n        interestRate = _nextBorrowInterestRate2(loanSizeBeforeInterest, _totalAssetSupply(0));\\n        /// @dev Assumes that loan, collateral, and interest token are the same.\\n        borrowAmount = _adjustLoanSize(interestRate, 28 days, loanSizeBeforeInterest);\\n    }\\n\\n    /**\\n     * @notice Make sure call is not paused.\\n     * @dev Used for internal verification if the called function is paused.\\n     *   It throws an exception in case it's not.\\n     * */\\n    function _checkPause() internal view {\\n        /// keccak256(\\\"iToken_FunctionPause\\\")\\n        bytes32 slot =\\n            keccak256(\\n                abi.encodePacked(\\n                    msg.sig,\\n                    uint256(0xd46a704bc285dbd6ff5ad3863506260b1df02812f4f857c8cc852317a6ac64f2)\\n                )\\n            );\\n        bool isPaused;\\n        assembly {\\n            isPaused := sload(slot)\\n        }\\n        require(!isPaused, \\\"unauthorized\\\");\\n    }\\n\\n    /**\\n     * @notice Adjusts the loan size to make sure the expected exposure remains after prepaying the interest.\\n     * @dev loanSizeWithInterest = loanSizeBeforeInterest * 100 / (100 - interestForDuration)\\n     * @param interestRate The interest rate to pay on the position.\\n     * @param maxDuration The maximum duration of the position (until rollover).\\n     * @param loanSizeBeforeInterest The loan size before interest is added.\\n     * */\\n    function _adjustLoanSize(\\n        uint256 interestRate,\\n        uint256 maxDuration,\\n        uint256 loanSizeBeforeInterest\\n    ) internal pure returns (uint256 loanSizeWithInterest) {\\n        uint256 interestForDuration = interestRate.mul(maxDuration).div(365 days);\\n        uint256 divisor = uint256(10**20).sub(interestForDuration);\\n        loanSizeWithInterest = loanSizeBeforeInterest.mul(10**20).div(divisor);\\n    }\\n\\n    /**\\n     * @notice Calculate the utilization rate.\\n     * @dev Utilization rate = assetBorrow / assetSupply\\n     * @param assetBorrow The amount of loan tokens on debt.\\n     * @param assetSupply The amount of loan tokens supplied.\\n     * @return The utilization rate.\\n     * */\\n    function _utilizationRate(uint256 assetBorrow, uint256 assetSupply)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (assetBorrow != 0 && assetSupply != 0) {\\n            /// U = total_borrow / total_supply\\n            return assetBorrow.mul(10**20).div(assetSupply);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcb2a6cd30b2f0e13ea41229491738490a0bd7bd15ca517fdb1aa0ee1fac25c3b\"},\"contracts/connectors/loantoken/LoanTokenLogicStorage.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./AdvancedToken.sol\\\";\\n\\ncontract LoanTokenLogicStorage is AdvancedToken {\\n    /// DO NOT ADD VARIABLES HERE - SEE BELOW\\n\\n    /// @dev It is important to maintain the variables order so the delegate\\n    /// calls can access sovrynContractAddress\\n\\n    /// ------------- MUST BE THE SAME AS IN LoanToken CONTRACT -------------------\\n    address public sovrynContractAddress;\\n    address public wrbtcTokenAddress;\\n    address public target_;\\n    address public admin;\\n    /// ------------- END MUST BE THE SAME AS IN LoanToken CONTRACT -------------------\\n\\n    /// @dev Add new variables here on the bottom.\\n    address public earlyAccessToken; //not used anymore, but staying for upgradability\\n    address public pauser;\\n    /** The address of the liquidity mining contract */\\n    address public liquidityMiningAddress;\\n\\n    /** The address of the staking contract */\\n    address public stakingContractAddress;\\n\\n    /// @dev Used by flashBorrow function.\\n    uint256 public constant VERSION = 6;\\n    /// @dev Used by flashBorrow function.\\n    address internal constant arbitraryCaller = 0x000F400e6818158D541C3EBE45FE3AA0d47372FF;\\n    bytes32 internal constant iToken_ProfitSoFar =\\n        0x37aa2b7d583612f016e4a4de4292cb015139b3d7762663d06a53964912ea2fb6; // keccak256(\\\"iToken_ProfitSoFar\\\")\\n    uint256 public constant TINY_AMOUNT = 25e13;\\n\\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\\n        bytes memory tempEmptyStringTest = bytes(source);\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n\\n    modifier onlyPauserOrOwner() {\\n        require(isOwner() || msg.sender == pauser, \\\"unauthorized\\\"); // SS02\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xaa4a1499c18053dfb193b312b029081c6e8f07c780600e5a37943ae9f7c6ddcb\"},\"contracts/connectors/loantoken/Pausable.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title Pausable contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized margin\\n * trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * The contract implements pausable functionality by reading on slots the\\n * pause state of contract functions.\\n * */\\ncontract Pausable {\\n    /// keccak256(\\\"Pausable_FunctionPause\\\")\\n    bytes32 internal constant Pausable_FunctionPause =\\n        0xa7143c84d793a15503da6f19bf9119a2dac94448ca45d77c8bf08f57b2e91047;\\n\\n    modifier pausable(bytes4 sig) {\\n        require(!_isPaused(sig), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check whether a function is paused.\\n     *\\n     * @dev Used to read externally from the smart contract to see if a\\n     *   function is paused.\\n     *\\n     * @param sig The function ID, the selector on bytes4.\\n     *\\n     * @return isPaused Whether the function is paused: true or false.\\n     * */\\n    function _isPaused(bytes4 sig) internal view returns (bool isPaused) {\\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\\n        assembly {\\n            isPaused := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x54f95b041e66fbcadb867bfba626373b681e0000ecea2b19f521de89c3020690\"},\"contracts/connectors/loantoken/interfaces/FeedsLike.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\ninterface FeedsLike {\\n    function queryRate(address sourceTokenAddress, address destTokenAddress)\\n        external\\n        view\\n        returns (uint256 rate, uint256 precision);\\n}\\n\",\"keccak256\":\"0xc8786f355ccc5a00a4b0985c28f0063cb9480f53468d44b7c17b02c9bf13a970\"},\"contracts/connectors/loantoken/interfaces/ProtocolLike.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/MarginTradeStructHelpers.sol\\\";\\n\\ninterface ProtocolLike {\\n    function borrowOrTradeFromPool(\\n        bytes32 loanParamsId,\\n        bytes32 loanId, // if 0, start a new loan\\n        bool isTorqueLoan,\\n        uint256 initialMargin,\\n        MarginTradeStructHelpers.SentAddresses calldata sentAddresses,\\n        // lender: must match loan if loanId provided\\n        // borrower: must match loan if loanId provided\\n        // receiver: receiver of funds (address(0) assumes borrower address)\\n        // manager: delegated manager of loan unless address(0)\\n        MarginTradeStructHelpers.SentAmounts calldata sentValues,\\n        // newRate: new loan interest rate\\n        // newPrincipal: new loan size (borrowAmount + any borrowed interest)\\n        // torqueInterest: new amount of interest to escrow for Torque loan (determines initial loan length)\\n        // loanTokenReceived: total loanToken deposit (amount not sent to borrower in the case of Torque loans)\\n        // collateralTokenReceived: total collateralToken deposit\\n        bytes calldata loanDataBytes\\n    ) external payable returns (uint256 newPrincipal, uint256 newCollateral);\\n\\n    function getTotalPrincipal(address lender, address loanToken) external view returns (uint256);\\n\\n    function withdrawAccruedInterest(address loanToken) external;\\n\\n    function getLenderInterestData(address lender, address loanToken)\\n        external\\n        view\\n        returns (\\n            uint256 interestPaid,\\n            uint256 interestPaidDate,\\n            uint256 interestOwedPerDay,\\n            uint256 interestUnPaid,\\n            uint256 interestFeePercent,\\n            uint256 principalTotal\\n        );\\n\\n    function priceFeeds() external view returns (address);\\n\\n    function getEstimatedMarginExposure(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanTokenSent,\\n        uint256 collateralTokenSent,\\n        uint256 interestRate,\\n        uint256 newPrincipal\\n    ) external view returns (uint256);\\n\\n    function getRequiredCollateral(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 newPrincipal,\\n        uint256 marginAmount,\\n        bool isTorqueLoan\\n    ) external view returns (uint256 collateralAmountRequired);\\n\\n    function getBorrowAmount(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 collateralTokenAmount,\\n        uint256 marginAmount,\\n        bool isTorqueLoan\\n    ) external view returns (uint256 borrowAmount);\\n\\n    function isLoanPool(address loanPool) external view returns (bool);\\n\\n    function lendingFeePercent() external view returns (uint256);\\n\\n    function getSwapExpectedReturn(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceTokenAmount\\n    ) external view returns (uint256);\\n\\n    function borrowerNonce(address) external view returns (uint256);\\n\\n    function closeWithSwap(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 swapAmount, // denominated in collateralToken\\n        bool returnTokenIsCollateral, // true: withdraws collateralToken, false: withdraws loanToken\\n        bytes calldata // for future use /*loanDataBytes*/\\n    )\\n        external\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n\\n    function closeWithDeposit(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 depositAmount // denominated in loanToken\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n}\\n\",\"keccak256\":\"0x97e523a6ab51b439537b2ad5ef8c09cb01f99d210b2574cc54fb5062f900f2ab\"},\"contracts/connectors/loantoken/interfaces/ProtocolSettingsLike.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../core/objects/LoanParamsStruct.sol\\\";\\n\\ninterface ProtocolSettingsLike {\\n    function setupLoanParams(LoanParamsStruct.LoanParams[] calldata loanParamsList)\\n        external\\n        returns (bytes32[] memory loanParamsIdList);\\n\\n    function disableLoanParams(bytes32[] calldata loanParamsIdList) external;\\n\\n    function minInitialMargin(bytes32 loanParamsId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3e1ea57320782c4f65c58d9f28aff15eda65eef1f8e76551b2da920dffbf0c1e\"},\"contracts/connectors/loantoken/lib/MarginTradeStructHelpers.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nlibrary MarginTradeStructHelpers {\\n    struct SentAddresses {\\n        address lender;\\n        address borrower;\\n        address receiver;\\n        address manager;\\n    }\\n\\n    struct SentAmounts {\\n        uint256 interestRate;\\n        uint256 newPrincipal;\\n        uint256 interestInitialAmount;\\n        uint256 loanTokenSent;\\n        uint256 collateralTokenSent;\\n        uint256 minEntryPrice;\\n        uint256 loanToCollateralSwapRate;\\n        uint256 interestDuration;\\n        uint256 entryLeverage;\\n    }\\n}\\n\",\"keccak256\":\"0xf0612e2c0d13604a67c3d55efe88810c089f0b84ca63bd3ce82c1e09b0938973\"},\"contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../LoanTokenLogicStandard.sol\\\";\\n\\ncontract LoanTokenLogicWrbtc is LoanTokenLogicStandard {\\n    /**\\n     * @notice This function is MANDATORY, which will be called by LoanTokenLogicBeacon and be registered.\\n     * Every new public function, the signature needs to be included in this function.\\n     *\\n     * @dev This function will return the list of function signature in this contract that are available for public call\\n     * Then this function will be called by LoanTokenLogicBeacon, and the function signatures will be registred in LoanTokenLogicBeacon.\\n     * @dev To save the gas we can just directly return the list of function signature from this pure function.\\n     * The other workaround (fancy way) is we can create a storage for the list of the function signature, and then we can store each function signature to that storage from the constructor.\\n     * Then, in this function we just need to return that storage variable.\\n     *\\n     * @return The list of function signatures (bytes4[])\\n     */\\n    function getListFunctionSignatures()\\n        external\\n        pure\\n        returns (bytes4[] memory functionSignatures, bytes32 moduleName)\\n    {\\n        bytes4[] memory res = new bytes4[](28);\\n\\n        // Loan Token Logic Standard, Trade & Borrow\\n        res[0] = this.borrow.selector;\\n        res[1] = this.marginTrade.selector;\\n        res[2] = this.marginTradeAffiliate.selector;\\n        res[3] = this.transfer.selector;\\n        res[4] = this.transferFrom.selector;\\n        res[5] = this.profitOf.selector;\\n        res[6] = this.tokenPrice.selector;\\n        res[7] = this.checkpointPrice.selector;\\n        res[8] = this.marketLiquidity.selector;\\n        res[9] = this.avgBorrowInterestRate.selector;\\n        res[10] = this.borrowInterestRate.selector;\\n        res[11] = this.nextBorrowInterestRate.selector;\\n        res[12] = this.supplyInterestRate.selector;\\n        res[13] = this.nextSupplyInterestRate.selector;\\n        res[14] = this.totalSupplyInterestRate.selector;\\n        res[15] = this.totalAssetBorrow.selector;\\n        res[16] = this.totalAssetSupply.selector;\\n        res[17] = this.getMaxEscrowAmount.selector;\\n        res[18] = this.assetBalanceOf.selector;\\n        res[19] = this.getEstimatedMarginDetails.selector;\\n        res[20] = this.getDepositAmountForBorrow.selector;\\n        res[21] = this.getBorrowAmountForDeposit.selector;\\n        res[22] = this.checkPriceDivergence.selector;\\n        res[23] = this.calculateSupplyInterestRate.selector;\\n\\n        // Advanced Token\\n        res[24] = this.approve.selector;\\n\\n        // Advanced Token Storage\\n        res[25] = this.totalSupply.selector;\\n        res[26] = this.balanceOf.selector;\\n        res[27] = this.allowance.selector;\\n\\n        return (res, stringToBytes32(\\\"LoanTokenLogicWrbtc\\\"));\\n    }\\n\\n    /**\\n     * @dev internal override functions\\n     * @dev Put all of internal override function dedicated to the loanTokenWrtbc module here\\n     * e.g: _verifyTransfers will override the implementation of _verifyTransfers in loanTokenLogicSplit\\n     */\\n\\n    /**\\n     * @notice Handle transfers prior to adding newPrincipal to loanTokenSent.\\n     *\\n     * @param collateralTokenAddress The address of the collateral token.\\n     * @param sentAddresses The struct which contains addresses of\\n     * - lender\\n     * - borrower\\n     * - receiver\\n     * - manager\\n     *\\n     * @param sentAmounts The struct which contains uint256 of:\\n     * - interestRate\\n     * - newPrincipal\\n     * - interestInitialAmount\\n     * - loanTokenSent\\n     * - collateralTokenSent\\n     *\\n     * @param withdrawalAmount The amount to withdraw.\\n     *\\n     * @return msgValue The amount of value sent.\\n     * */\\n    function _verifyTransfers(\\n        address collateralTokenAddress,\\n        MarginTradeStructHelpers.SentAddresses memory sentAddresses,\\n        MarginTradeStructHelpers.SentAmounts memory sentAmounts,\\n        uint256 withdrawalAmount\\n    ) internal returns (uint256 msgValue) {\\n        address _wrbtcToken = wrbtcTokenAddress;\\n        address _loanTokenAddress = _wrbtcToken;\\n        address receiver = sentAddresses.receiver;\\n        uint256 newPrincipal = sentAmounts.newPrincipal;\\n        uint256 loanTokenSent = sentAmounts.loanTokenSent;\\n        uint256 collateralTokenSent = sentAmounts.collateralTokenSent;\\n\\n        require(_loanTokenAddress != collateralTokenAddress, \\\"26\\\");\\n\\n        msgValue = msg.value;\\n\\n        if (withdrawalAmount != 0) {\\n            /// withdrawOnOpen == true\\n            IWrbtcERC20(_wrbtcToken).withdraw(withdrawalAmount);\\n            Address.sendValue(receiver, withdrawalAmount);\\n            if (newPrincipal > withdrawalAmount) {\\n                _safeTransfer(\\n                    _loanTokenAddress,\\n                    sovrynContractAddress,\\n                    newPrincipal - withdrawalAmount,\\n                    \\\"\\\"\\n                );\\n            }\\n        } else {\\n            _safeTransfer(_loanTokenAddress, sovrynContractAddress, newPrincipal, \\\"27\\\");\\n        }\\n\\n        if (collateralTokenSent != 0) {\\n            _safeTransferFrom(\\n                collateralTokenAddress,\\n                msg.sender,\\n                sovrynContractAddress,\\n                collateralTokenSent,\\n                \\\"28\\\"\\n            );\\n        }\\n\\n        if (loanTokenSent != 0) {\\n            if (msgValue != 0 && msgValue >= loanTokenSent) {\\n                IWrbtc(_wrbtcToken).deposit.value(loanTokenSent)();\\n                _safeTransfer(_loanTokenAddress, sovrynContractAddress, loanTokenSent, \\\"29\\\");\\n                msgValue -= loanTokenSent;\\n            } else {\\n                _safeTransferFrom(\\n                    _loanTokenAddress,\\n                    msg.sender,\\n                    sovrynContractAddress,\\n                    loanTokenSent,\\n                    \\\"29\\\"\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xde4116408d0822a557c0b74a1be0df3c3fa4f6ebf5f736a4d0db2ee684d32173\"},\"contracts/core/objects/LoanParamsStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Loan Parameters.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Loan Parameters.\\n * */\\ncontract LoanParamsStruct {\\n    struct LoanParams {\\n        /// @dev ID of loan params object.\\n        bytes32 id;\\n        /// @dev If false, this object has been disabled by the owner and can't\\n        ///   be used for future loans.\\n        bool active;\\n        /// @dev Owner of this object.\\n        address owner;\\n        /// @dev The token being loaned.\\n        address loanToken;\\n        /// @dev The required collateral token.\\n        address collateralToken;\\n        /// @dev The minimum allowed initial margin.\\n        uint256 minInitialMargin;\\n        /// @dev An unhealthy loan when current margin is at or below this value.\\n        uint256 maintenanceMargin;\\n        /// @dev The maximum term for new loans (0 means there's no max term).\\n        uint256 maxLoanTerm;\\n    }\\n}\\n\",\"keccak256\":\"0xe15aa97713521da7f501e5225af9d92cf34bd68d286dbfed86aa75aabb323945\"},\"contracts/farm/ILiquidityMining.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\ninterface ILiquidityMining {\\n    function withdraw(\\n        address _poolToken,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function onTokensDeposited(address _user, uint256 _amount) external;\\n\\n    function getUserPoolTokenBalance(address _poolToken, address _user)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xed5abb44e4a222ecf9d20998ad9ae2ee3715291c9ea6a30e0c74f0a0e6d08ea8\"},\"contracts/governance/Staking/interfaces/IStaking.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Interface for Staking modules governance/Staking/modules\\n */\\n\\ninterface IStaking {\\n    /*************************** StakingAdminModule ***************************/\\n\\n    /**\\n     * @notice Add account to Admins ACL.\\n     * @param _admin The addresses of the account to grant permissions.\\n     * */\\n    function addAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Remove account from Admins ACL.\\n     * @param _admin The addresses of the account to revoke permissions.\\n     * */\\n    function removeAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Add account to pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function addPauser(address _pauser) external;\\n\\n    /**\\n     * @notice Remove account from pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function removePauser(address _pauser) external;\\n\\n    /**\\n     * @notice Pause/unpause contract\\n     * @param _pause true when pausing, false when unpausing\\n     * */\\n    function pauseUnpause(bool _pause) external;\\n\\n    /**\\n     * @notice Freeze contract - disable all functions\\n     * @param _freeze true when freezing, false when unfreezing\\n     * @dev When freezing, pause is always applied too. When unfreezing, the contract is left in paused stated.\\n     * */\\n    function freezeUnfreeze(bool _freeze) external;\\n\\n    /**\\n     * @notice Allows the owner to set a fee sharing proxy contract.\\n     * We need it for unstaking with slashing.\\n     * @param _feeSharing The address of FeeSharingCollectorProxy contract.\\n     * */\\n    function setFeeSharing(address _feeSharing) external;\\n\\n    /**\\n     * @notice Allow the owner to set weight scaling.\\n     * We need it for unstaking with slashing.\\n     * @param _weightScaling The weight scaling.\\n     * */\\n    function setWeightScaling(uint96 _weightScaling) external;\\n\\n    /**\\n     * @notice Allow the owner to set a new staking contract.\\n     * As a consequence it allows the stakers to migrate their positions\\n     * to the new contract.\\n     * @dev Doesn't have any influence as long as migrateToNewStakingContract\\n     * is not implemented.\\n     * @param _newStakingContract The address of the new staking contract.\\n     * */\\n    function setNewStakingContract(address _newStakingContract) external;\\n\\n    /**\\n     * @notice Allow a staker to migrate his positions to the new staking contract.\\n     * @dev Staking contract needs to be set before by the owner.\\n     * Currently not implemented, just needed for the interface.\\n     *      In case it's needed at some point in the future,\\n     *      the implementation needs to be changed first.\\n     * */\\n    function migrateToNewStakingContract() external; // dummy - not implemented as of now\\n\\n    /*************************** StakingGovernanceModule ***************************/\\n\\n    /**\\n     * @notice Compute the total voting power at a given time.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @param time The timestamp for which to calculate the total voting power.\\n     * @return The total voting power at the given time.\\n     * */\\n    function getPriorTotalVotingPower(uint32 blockNumber, uint256 time)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Get the current votes balance for a user account.\\n     * @param account The address to get votes balance.\\n     * @dev This is a wrapper to simplify arguments. The actual computation is\\n     * performed on WeightedStaking parent contract.\\n     * @return The number of current votes for a user account.\\n     * */\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of votes for a delegatee as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will revert\\n     * to prevent misinformation.\\n     *      Used for Voting, not for fee sharing.\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The number of votes the delegatee had as of the given block.\\n     * */\\n    function getPriorVotes(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The staking date to compute the power for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorStakeByDateForDelegatee(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an unlocking date as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * TODO: WeightedStaking::getPriorTotalStakesForDate should probably better\\n     * be internal instead of a public function.\\n     * @param date The date to check the stakes for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorTotalStakesForDate(uint256 date, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` which are locked until lockDate to `delegatee`.\\n     * @param delegatee The address to delegate votes to.\\n     * @param lockDate the date if the position to delegate.\\n     * */\\n    function delegate(address delegatee, uint256 lockDate) external;\\n\\n    /*************************** StakingStakeModule ***************************/\\n\\n    event TokensStaked(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 lockedUntil,\\n        uint256 totalStaked\\n    );\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stake(\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @dev This function will be invoked from receiveApproval\\n     * @dev SOV.approveAndCall -> this.receiveApproval -> this.stakeWithApproval\\n     * @param sender The sender of SOV.approveAndCall\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeWithApproval(\\n        address sender,\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _data The data will be used for low level call.\\n     */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Extend the staking duration until the specified date.\\n     * @param previousLock The old unlocking timestamp.\\n     * @param until The new unlocking timestamp in seconds.\\n     * */\\n    function extendStakingDuration(uint256 previousLock, uint256 until) external;\\n\\n    /**\\n     * @dev DO NOT USE this misspelled function. Use stakeBySchedule function instead.\\n     * This function cannot be deprecated while we have non-upgradeable vesting contracts.\\n     * */\\n    function stakesBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Stake tokens according to the vesting schedule.\\n     * @param amount The amount of tokens to stake.\\n     * @param cliff The time interval to the first withdraw.\\n     * @param duration The staking duration.\\n     * @param intervalLength The length of each staking interval when cliff passed.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Get the number of staked tokens held by the user account.\\n     * @dev Iterate checkpoints adding up stakes.\\n     * @param account The address of the account to get the balance of.\\n     * @return The number of tokens held.\\n     * */\\n    function balanceOf(address account) external view returns (uint96 balance);\\n\\n    /**\\n     * @notice Get the current number of tokens staked for a day.\\n     * @param lockedTS The timestamp to get the staked tokens for.\\n     * */\\n    function getCurrentStakedUntil(uint256 lockedTS) external view returns (uint96);\\n\\n    /**\\n     * @notice Get list of stakes for a user account.\\n     * @param account The address to get stakes.\\n     * @return The arrays of dates and stakes.\\n     * */\\n    function getStakes(address account)\\n        external\\n        view\\n        returns (uint256[] memory dates, uint96[] memory stakes);\\n\\n    /**\\n     * @notice Unstaking is possible every 2 weeks only. This means, to\\n     * calculate the key value for the staking checkpoints, we need to\\n     * map the intended timestamp to the closest available date.\\n     * @param timestamp The unlocking timestamp.\\n     * @return The actual unlocking date (might be up to 2 weeks shorter than intended).\\n     * */\\n    function timestampToLockDate(uint256 timestamp) external view returns (uint256);\\n\\n    /*************************** StakingStorageModule ***************************/\\n\\n    /// @notice The maximum duration to stake tokens\\n    /// @return MAX_DURATION to stake tokens\\n    function getStorageMaxDurationToStakeTokens() external pure returns (uint256);\\n\\n    /// @notice The maximum possible voting weight before adding +1 (actually 10, but need 9 for computation).\\n    /// @return uint256(MAX_VOTING_WEIGHT);\\n    function getStorageMaxVotingWeight() external pure returns (uint256);\\n\\n    /// @notice weight is multiplied with this factor (for allowing decimals, like 1.2x).\\n    /// @dev MAX_VOTING_WEIGHT * WEIGHT_FACTOR needs to be < 792, because there are 100,000,000 SOV with 18 decimals\\n    /// @return uint256(WEIGHT_FACTOR);\\n    function getStorageWeightFactor() external pure returns (uint256);\\n\\n    /// @return uint256(DEFAULT_WEIGHT_SCALING);\\n    function getStorageDefaultWeightScaling() external pure returns (uint256);\\n\\n    /// @notice return (uint256(MIN_WEIGHT_SCALING), uint256(MAX_WEIGHT_SCALING))\\n    function getStorageRangeForWeightScaling()\\n        external\\n        pure\\n        returns (uint256 minWeightScaling, uint256 maxWeightScaling);\\n\\n    /// @notice The EIP-712 typehash for the contract's domain.\\n    /// @return uint256(DOMAIN_TYPEHASH);\\n    function getStorageDomainTypehash() external pure returns (uint256);\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\\n    /// @return uint256(DELEGATION_TYPEHASH);\\n    function getStorageDelegationTypehash() external pure returns (uint256);\\n\\n    /// @return name;\\n    function getStorageName() external view returns (string memory);\\n\\n    /// AUTOGENERATED FUNCTIONS FROM THE STAKING STORAGE PUBLIC VARIABLES ///\\n\\n    /// @notice The timestamp of contract creation. Base for the staking period calculation.\\n    function kickoffTS() external view returns (uint256);\\n\\n    /// @notice The token to be staked\\n    function SOVToken() external view returns (address);\\n\\n    /// @notice Stakers delegated voting power\\n    /// @param staker - the delegating address\\n    /// @param until - delegated voting\\n    /// @return _delegate - voting power delegated to address\\n    function delegates(address staker, uint256 until) external view returns (address _delegate);\\n\\n    /// @notice If this flag is set to true, all tokens are unlocked immediately\\n    /// see function unlockAllTokens() for details\\n    function allUnlocked() external view returns (bool);\\n\\n    /// @notice Used for stake migrations to a new staking contract with a different storage structure\\n    function newStakingContract() external view returns (address);\\n\\n    /// CHECKPOINTS\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 stake;\\n    }\\n\\n    /// @notice A record of tokens to be unstaked at a given time in total.\\n    /// For total voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev totalStakingCheckpoints[date][index] is a checkpoint\\n    function totalStakingCheckpoints(uint256 date, uint32 index)\\n        external\\n        view\\n        returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date.\\n    /// @dev numTotalStakingCheckpoints[date] is a number.\\n    function numTotalStakingCheckpoints(uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which were delegated to a certain address.\\n    /// For delegatee voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev delegateStakingCheckpoints[delegatee][date][index] is a checkpoint.\\n    function delegateStakingCheckpoints(\\n        address delagatee,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per delegate.\\n    /// @dev numDelegateStakingCheckpoints[delegatee][date] is a number.\\n    function numDelegateStakingCheckpoints(address delegatee, uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which per user address (address -> lockDate -> stake checkpoint)\\n    /// @dev userStakingCheckpoints[user][date][index] is a checkpoint.\\n    function userStakingCheckpoints(\\n        address user,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per user.\\n    /// @dev numUserStakingCheckpoints[user][date] is a number\\n    function numUserStakingCheckpoints(address user, uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of states for signing / validating signatures\\n    /// @dev nonces[user] is a number.\\n    function nonces(address user) external view returns (uint256 nonce);\\n\\n    /// SLASHING ///\\n\\n    /// @notice the address of FeeSharingCollectorProxy contract, we need it for unstaking with slashing.\\n    function feeSharing() external view returns (address);\\n\\n    /// @notice used for weight scaling when unstaking with slashing.\\n    /// @return uint96 DEFAULT_WEIGHT_SCALING\\n    function weightScaling() external view returns (uint96);\\n\\n    /// @notice List of vesting contracts, tokens for these contracts won't be slashed if unstaked by governance.\\n    /// @dev vestingWhitelist[contract] is true/false.\\n    function vestingWhitelist(address isWhitelisted) external view returns (bool);\\n\\n    /// @dev user => flag whether user has admin role.\\n    /// @dev multisig should be an admin, admin can invoke only governanceWithdrawVesting function,\\n    /// \\tthis function works only with Team Vesting contracts\\n    function admins(address isAdmin) external view returns (bool);\\n\\n    /// @dev vesting contract code hash => flag whether it's registered code hash\\n    function vestingCodeHashes(bytes32 vestingLogicCodeHash) external view returns (bool);\\n\\n    /// @notice A record of tokens to be unstaked from vesting contract at a given time (lockDate -> vest checkpoint)\\n    /// @dev vestingCheckpoints[date][index] is a checkpoint.\\n    function vestingCheckpoints(uint256 date, uint32 index)\\n        external\\n        view\\n        returns (Checkpoint memory);\\n\\n    /// @notice The number of total vesting checkpoints for each date.\\n    /// @dev numVestingCheckpoints[date] is a number.\\n    function numVestingCheckpoints(uint256 date) external view returns (uint32 checkpointsQty);\\n\\n    ///@notice vesting registry contract PROXY address\\n    function vestingRegistryLogic() external view returns (address);\\n\\n    /// @dev user => flag whether user has pauser role.\\n    function pausers(address isPauser) external view returns (bool);\\n\\n    /// @dev Staking contract is paused\\n    function paused() external view returns (bool);\\n\\n    /// @dev Staking contract is frozen\\n    function frozen() external view returns (bool);\\n\\n    /*************************** StakingVestingModule ***************************/\\n\\n    event VestingStakeSet(uint256 lockedTS, uint96 value);\\n\\n    /**\\n     * @notice Return flag whether the given address is a registered vesting contract.\\n     * @param stakerAddress the address to check\\n     */\\n    function isVestingContract(address stakerAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Remove vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function removeContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Add vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function addContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Determine the prior number of vested stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorVestingStakeByDate(uint256 date, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * @param date The staking date to compute the power for. Adjusted to the next valid lock date, if necessary.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedVestingStakeByDate(\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Determine the prior weighted vested amount for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     * TODO: WeightedStaking::getPriorVestingWeightedStake is using the variable name \\\"votes\\\"\\n     * to add up token stake, and that could be misleading.\\n     *\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorVestingWeightedStake(uint256 blockNumber, uint256 date)\\n        external\\n        view\\n        returns (uint96 votes);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorUserStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Sets the users' vesting stakes for a giving lock dates and writes checkpoints.\\n     * @param lockedDates The arrays of lock dates.\\n     * @param values The array of values to add to the staked balance.\\n     */\\n    function setVestingStakes(uint256[] calldata lockedDates, uint96[] calldata values) external;\\n\\n    /**\\n     * @notice sets vesting registry\\n     * @param _vestingRegistryProxy the address of vesting registry proxy contract\\n     * @dev _vestingRegistryProxy can be set to 0 as this function can be reused by\\n     * various other functionalities without the necessity of linking it with Vesting Registry\\n     */\\n    function setVestingRegistry(address _vestingRegistryProxy) external;\\n\\n    /*************************** StakingWithdrawModule ***************************/\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens if they are unlocked.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * */\\n    function withdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting\\n     * @dev **WARNING** This function should not be no longer used by Sovryn Protocol.\\n     * Sovryn protocol will use the cancelTeamVesting function for the withdrawal moving forward.\\n     * */\\n    function governanceWithdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw tokens for vesting contract.\\n     * @param vesting The address of Vesting contract.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting.\\n     * */\\n    function governanceWithdrawVesting(address vesting, address receiver) external;\\n\\n    /**\\n     * @notice Get available and punished amount for withdrawing.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * */\\n    function getWithdrawAmounts(uint96 amount, uint256 until)\\n        external\\n        view\\n        returns (uint96, uint96);\\n\\n    /**\\n     * @notice Allow the owner to unlock all tokens in case the staking contract\\n     * is going to be replaced\\n     * Note: Not reversible on purpose. once unlocked, everything is unlocked.\\n     * The owner should not be able to just quickly unlock to withdraw his own\\n     * tokens and lock again.\\n     * @dev Last resort.\\n     * */\\n    function unlockAllTokens() external;\\n\\n    /*************************** WeightedStakingModule ***************************/\\n\\n    /**\\n     * @notice Determine the prior weighted stake for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     *\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The date/timestamp of the unstaking time.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorWeightedStake(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96 priorWeightedStake);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * TODO: WeightedStaking::weightedStakeByDate should probably better\\n     * be internal instead of a public function.\\n     * @param account The user address.\\n     * @param date The staking date to compute the power for.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Compute the weight for a specific date.\\n     * @param date The unlocking date.\\n     * @param startDate We compute the weight for the tokens staked until 'date' on 'startDate'.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function computeWeightByDate(uint256 date, uint256 startDate)\\n        external\\n        pure\\n        returns (uint96 weight);\\n\\n    /**\\n     * @notice Returns public constant MAX_DURATION\\n     * preserved for backwards compatibility\\n     * Use getStorageMaxDurationToStakeTokens()\\n     * @return uint96 MAX_DURATION for staking\\n     **/\\n    function MAX_DURATION() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() external view returns (bool);\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @notice Governance withdraw vesting directly through staking contract.\\n     * This direct withdraw vesting solves the out of gas issue when there are too many iterations when withdrawing.\\n     * This function only allows cancelling vesting contract of the TeamVesting type.\\n     *\\n     * @param vesting The vesting address.\\n     * @param receiver The receiving address.\\n     * @param startFrom The start value for the iterations.\\n     */\\n    function cancelTeamVesting(\\n        address vesting,\\n        address receiver,\\n        uint256 startFrom\\n    ) external;\\n\\n    /**\\n     * @notice Max iteration for direct withdrawal from staking to prevent out of gas issue.\\n     *\\n     * @return max iteration value.\\n     */\\n    function getMaxVestingWithdrawIterations() external view returns (uint256);\\n\\n    /**\\n     * @dev set max withdraw iterations.\\n     *\\n     * @param maxIterations new max iterations value.\\n     */\\n    function setMaxVestingWithdrawIterations(uint256 maxIterations) external;\\n}\\n\",\"keccak256\":\"0x720bd2cc1042cb4abc2bd3a6839131638eafd3d224571ad9ac21cae36625ec2e\"},\"contracts/governance/Vesting/IVesting.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for Vesting contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * This interface is used by VestingLogic contract to implement stakeTokens function\\n * and on VestingRegistry contract to call IVesting(vesting).stakeTokens function\\n * at a vesting instance.\\n */\\ninterface IVesting {\\n    function duration() external returns (uint256);\\n\\n    function endDate() external returns (uint256);\\n\\n    function stakeTokens(uint256 amount) external;\\n\\n    function tokenOwner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3482a1e27402655f85f5ff2cb06e0876e9bb94e1a63446a09e33babd60274b4b\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _who) external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbc0c9bb48f19651930ec9aff366b2e11a1abf89c846e4b2d52d8102b15ce6721\"},\"contracts/interfaces/IWrbtc.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ninterface IWrbtc {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x20fdfe4b5e32fd7f863b3fa128e3c80bd4ccf090a4ffba56186ef3b7f2a80492\"},\"contracts/interfaces/IWrbtcERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./IWrbtc.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract IWrbtcERC20 is IWrbtc, IERC20 {}\\n\",\"keccak256\":\"0x7301a8c8ca7aa016ec94268a16d07366875f2e406442e929968dd745b1ee5be5\"},\"contracts/modules/interfaces/ProtocolAffiliatesInterface.sol\":{\"content\":\"/**\\n * Copyright 2020, Denis Savelev. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\ninterface ProtocolAffiliatesInterface {\\n    function setAffiliatesReferrer(address user, address referrer) external;\\n\\n    function setUserNotFirstTradeFlag(address user_) external;\\n\\n    function getUserNotFirstTradeFlag(address user_) external returns (bool);\\n\\n    function payTradingFeeToAffiliatesReferrer(\\n        address affiliate,\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256 affiliatesBonusSOVAmount, uint256 affiliatesBonusTokenAmount);\\n}\\n\",\"keccak256\":\"0x42f259156db09a06e3dcdf0ab9c6774712616b35e6baff97999a2a534d1c9c64\"},\"contracts/openzeppelin/Address.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html\\n     *   #use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x23df48a01dbac9b25e86c9131174fb7752bbc7e741e63f1aa982de22e055ad54\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen <remco@2\\u03c0.com>, Eenae <alexey@mixbytes.io>\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard {\\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\\n\\n    /// @dev Constant for locked guard state\\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\\n\\n    /**\\n     * @dev We use a single lock for the whole contract.\\n     */\\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * If you mark a function `nonReentrant`, you should also\\n     * mark it `external`. Calling one `nonReentrant` function from\\n     * another is not supported. Instead, you can implement a\\n     * `private` function doing the actual work, and an `external`\\n     * wrapper marked as `nonReentrant`.\\n     */\\n    modifier nonReentrant() {\\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \\\"nonReentrant\\\");\\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\\n        _;\\n        reentrancyLock = REENTRANCY_GUARD_FREE;\\n    }\\n}\\n\",\"keccak256\":\"0xd347de96ad57d1e45b07a2efe3050c1bd4b809236bbf354acb593de56d21a5c9\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"},\"contracts/openzeppelin/SignedSafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 private constant _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x449606d22a41bbeaeee8775d66b2bd179b6964b65fd3380b22ef837634e7523b\"},\"contracts/reentrancy/Mutex.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/*\\n * @title Global Mutex contract\\n *\\n * @notice A mutex contract that allows only one function to be called at a time out\\n * of a large set of functions. *Anyone* in the network can freely use any instance\\n * of this contract to add a universal mutex to any function in any contract.\\n */\\ncontract Mutex {\\n    /*\\n     * We use an uint to store the mutex state.\\n     */\\n    uint256 public value;\\n\\n    /*\\n     * @notice Increment the mutex state and return the new value.\\n     *\\n     * @dev This is the function that will be called by anyone to change the mutex\\n     * state. It is purposely not protected by any access control\\n     */\\n    function incrementAndGetValue() external returns (uint256) {\\n        /*\\n         * increment value using unsafe math. This is safe because we are\\n         * pretty certain no one will ever increment the value 2^256 times\\n         * in a single transaction.\\n         */\\n        return ++value;\\n    }\\n}\\n\",\"keccak256\":\"0xd10b0fd07d5fed1ae1237e7c87e6501970fce2a86e2b8862e502258b0d3aeb2c\"},\"contracts/reentrancy/SharedReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"./Mutex.sol\\\";\\n\\n/*\\n * @title Abstract contract for shared reentrancy guards\\n *\\n * @notice Exposes a single modifier `globallyNonReentrant` that can be used to ensure\\n * that there's no reentrancy between *any* functions marked with the modifier.\\n *\\n * @dev The Mutex contract address is hardcoded because the address is deployed using a\\n * special deployment method (similar to ERC1820Registry). This contract therefore has no\\n * state and is thus safe to add to the inheritance chain of upgradeable contracts.\\n */\\ncontract SharedReentrancyGuard {\\n    /*\\n     * This is the address of the mutex contract that will be used as the\\n     * reentrancy guard.\\n     *\\n     * The address is hardcoded to avoid changing the memory layout of\\n     * derived contracts (possibly upgradable). Hardcoding the address is possible,\\n     * because the Mutex contract is always deployed to the same address, with the\\n     * same method used in the deployment of ERC1820Registry.\\n     */\\n    Mutex private constant MUTEX = Mutex(0xba10edD6ABC7696Eae685839217BdcC42139612b);\\n\\n    /*\\n     * This is the modifier that will be used to protect functions from\\n     * reentrancy. It will call the mutex contract to increment the mutex\\n     * state and then revert if the mutex state was changed by another\\n     * nested call.\\n     */\\n    modifier globallyNonReentrant() {\\n        uint256 previous = MUTEX.incrementAndGetValue();\\n\\n        _;\\n\\n        /*\\n         * If the mutex state was changed by a nested function call, then\\n         * the value of the state variable will be different from the previous value.\\n         */\\n        require(previous == MUTEX.value(), \\\"reentrancy violation\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2d0e61b104b91c1764f20fbeb381ba0f8a8889934ba7f6e8a167ed542ec2c124\"}},\"version\":1}",
  "bytecode": "0x6080604052600160009081556200001e6001600160e01b036200007216565b600180546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000076565b3390565b6150a080620000866000396000f3fe6080604052600436106103815760003560e01c80637b7933b4116101d1578063b9fe1a8f11610102578063e41b07e3116100a0578063f6b69f991161006f578063f6b69f991461094e578063f851a44014610961578063f8dd4f0e14610976578063ffa1ad741461098b57610381565b8063e41b07e3146108d9578063eebc5081146108f9578063ef2b0b3914610919578063f2fde38b1461092e57610381565b8063cfb51928116100dc578063cfb5192814610864578063d65a502114610884578063d759dbeb146108a4578063dd62ed3e146108b957610381565b8063b9fe1a8f1461081a578063ba0e43bf1461083a578063ca37e6661461084f57610381565b80638f32d59b1161016f57806395d89b411161014957806395d89b41146107bb5780639bda3a98146107d05780639fd0506d146107e5578063a9059cbb146107fa57610381565b80638f32d59b1461076e5780638fb807c51461078357806390967de51461079857610381565b8063829b38f4116101ab578063829b38f41461070f5780638325a1c01461072f5780638da5cb5b146107445780638ee6c4e61461075957610381565b80637b7933b4146106d05780637e37c08c146106e55780637ff9b596146106fa57610381565b80632ea295fa116102b657806354198ce9116102545780636b40cd40116102235780636b40cd401461064c5780636d23d1ac1461067b57806370a082311461069b578063797bf385146106bb57610381565b806354198ce9146105e257806356e07d7014610602578063612ef80b14610617578063631a3ef81461062c57610381565b80633291c11a116102905780633291c11a14610583578063330691ac146105a35780633535f48b146105b857806344a4a003146105cd57610381565b80632ea295fa146105395780632f6b600d1461054c578063313ce5671461056157610381565b806312416898116103235780631f68f20a116102fd5780631f68f20a146104ce57806320f6d07c146104e357806323b872dd146104f857806328a02f191461051857610381565b8063124168981461048457806318160ddd146104a45780631d0806ae146104b957610381565b806306fdde031161035f57806306fdde03146103fe578063095ea7b31461042057806309ec6b6b1461044d57806310e576441461046257610381565b8063047979301461038657806306947a3a146103bc57806306b3efd6146103de575b600080fd5b34801561039257600080fd5b506103a66103a136600461421b565b6109a0565b6040516103b39190614ca4565b60405180910390f35b3480156103c857600080fd5b506103d1610b49565b6040516103b39190614b60565b3480156103ea57600080fd5b506103a66103f9366004613df1565b610b58565b34801561040a57600080fd5b50610413610c44565b6040516103b39190614d23565b34801561042c57600080fd5b5061044061043b366004613eb4565b610ccf565b6040516103b39190614c96565b34801561045957600080fd5b506103a6610d3a565b34801561046e57600080fd5b5061048261047d3660046141ab565b610d4f565b005b34801561049057600080fd5b506103a661049f36600461416f565b610e32565b3480156104b057600080fd5b506103a6610e5d565b3480156104c557600080fd5b506103a6610e63565b3480156104da57600080fd5b506103a6610e69565b3480156104ef57600080fd5b506103a6610e6f565b34801561050457600080fd5b50610440610513366004613e67565b610efe565b61052b6105263660046140ab565b610fc7565b6040516103b3929190614ee4565b61052b610547366004613f02565b611359565b34801561055857600080fd5b506103d16116e0565b34801561056d57600080fd5b506105766116ef565b6040516103b39190614f0d565b34801561058f57600080fd5b506103a661059e36600461416f565b6116f8565b3480156105af57600080fd5b506103a661170a565b3480156105c457600080fd5b506103d1611710565b3480156105d957600080fd5b506103a661171f565b3480156105ee57600080fd5b506103a66105fd366004613df1565b611731565b34801561060e57600080fd5b506103a66117d2565b34801561062357600080fd5b506103a66117d8565b34801561063857600080fd5b506103a661064736600461421b565b611809565b34801561065857600080fd5b5061066c61066736600461425e565b6119a9565b6040516103b393929190614ef2565b34801561068757600080fd5b506103a66106963660046141cc565b611aba565b3480156106a757600080fd5b506103a66106b6366004613df1565b611b9d565b3480156106c757600080fd5b506103d1611bb8565b3480156106dc57600080fd5b506103a6611bcc565b3480156106f157600080fd5b506103a6611bd2565b34801561070657600080fd5b506103a6611bd8565b34801561071b57600080fd5b506103a661072a36600461416f565b611c16565b34801561073b57600080fd5b506103a6611c96565b34801561075057600080fd5b506103d1611ca2565b34801561076557600080fd5b506103d1611cb1565b34801561077a57600080fd5b50610440611cc0565b34801561078f57600080fd5b506103a6611ce6565b3480156107a457600080fd5b506107ad611d16565b6040516103b3929190614c76565b3480156107c757600080fd5b506104136122df565b3480156107dc57600080fd5b506103d161233a565b3480156107f157600080fd5b506103d1612349565b34801561080657600080fd5b50610440610815366004613eb4565b612358565b34801561082657600080fd5b506103a661083536600461416f565b6124ac565b34801561084657600080fd5b506103a66124b7565b34801561085b57600080fd5b506103d16124bd565b34801561087057600080fd5b506103a661087f36600461413a565b6124cc565b34801561089057600080fd5b506103a661089f36600461416f565b6124ea565b3480156108b057600080fd5b506103a66124fd565b3480156108c557600080fd5b506103a66108d4366004613e2d565b612503565b3480156108e557600080fd5b506103a66108f4366004613df1565b61252e565b34801561090557600080fd5b506103a6610914366004613df1565b612540565b34801561092557600080fd5b506103a661255b565b34801561093a57600080fd5b50610482610949366004613df1565b612561565b61052b61095c366004613fca565b612591565b34801561096d57600080fd5b506103d1612661565b34801561098257600080fd5b506103a6612670565b34801561099757600080fd5b506103a661267a565b60008315610b42576001600160a01b0382166109c5576017546001600160a01b031691505b6000601060008460016040516020016109df929190614ae1565b60408051601f19818403018152918152815160209283012083529082019290925281016000205460165460048054935163ca74a5d960e01b81529294506001600160a01b039182169363e762319f936101009091049092169187918a91869163ca74a5d991610a50918a9101614ca4565b60206040518083038186803b158015610a6857600080fd5b505afa158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aa0919081019061418d565b60016040518663ffffffff1660e01b8152600401610ac2959493929190614bbf565b60206040518083038186803b158015610ada57600080fd5b505afa158015610aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b12919081019061418d565b9150610b2682610b20611ce6565b8661267f565b9350610b3491506126f89050565b821115610b4057600091505b505b9392505050565b6016546001600160a01b031681565b601c5460009081906001600160a01b031615610bf357601c54604051636822955360e11b81526001600160a01b039091169063d0452aa690610ba09030908790600401614b7c565b60206040518083038186803b158015610bb857600080fd5b505afa158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bf0919081019061418d565b90505b610c3b670de0b6b3a7640000610c2f610c0a611bd8565b610c2385610c1789611b9d565b9063ffffffff61272e16565b9063ffffffff61275316565b9063ffffffff61278d16565b9150505b919050565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610cc75780601f10610c9c57610100808354040283529160200191610cc7565b820191906000526020600020905b815481529060010190602001808311610caa57829003601f168201915b505050505081565b3360008181526014602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610d28908690614ca4565b60405180910390a35060015b92915050565b6000610d4961049f60006127cf565b90505b90565b60165460048054604051631a51577760e21b81526000936001600160a01b03908116936369455ddc93610d90936101009091049092169188918a9101614b97565b60206040518083038186803b158015610da857600080fd5b505afa158015610dbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610de0919081019061418d565b90506000610e0085610c2f84670de0b6b3a764000063ffffffff61275316565b905082811015610e2b5760405162461bcd60e51b8152600401610e2290614d84565b60405180910390fd5b5050505050565b600080610e3d610e6f565b90508015610e5757610e4f8184611aba565b915050610c3f565b50919050565b60155490565b600e5481565b60055481565b6016546004805460405163250f447f60e11b81526000936001600160a01b0390811693634a1e88fe93610eae9330936101009092049091169101614b7c565b60206040518083038186803b158015610ec657600080fd5b505afa158015610eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d49919081019061418d565b60165460405163115dd4b160e01b8152600091610fbf918691869186916001600160a01b03169063115dd4b190610f39903390600401614b6e565b60206040518083038186803b158015610f5157600080fd5b505afa158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f899190810190613ee4565b610fb6576001600160a01b0388166000908152601460209081526040808320338452909152902054610fba565b6000195b612809565b949350505050565b600080600160005414610fec5760405162461bcd60e51b8152600401610e2290614e94565b6002600081905550600073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b031663ed04e1c36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561104557600080fd5b505af1158015611059573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061107d919081019061418d565b9050611087612a19565b6001600160a01b0387166110a4576017546001600160a01b031696505b6004546001600160a01b038881166101009092041614156110d75760405162461bcd60e51b8152600401610e2290614df4565b8a15806110ec5750336001600160a01b038716145b6111085760405162461bcd60e51b8152600401610e2290614eb4565b6001600160a01b0387166000908152601260205260409020541561114b576001600160a01b03871660009081526012602052604090205488111561114b57600080fd5b60045461010090046001600160a01b03166000908152601260205260409020541561119c5760045461010090046001600160a01b031660009081526012602052604090205489111561119c57600080fd5b60006111a9888a8c612a99565b9050806111c85760405162461bcd60e51b8152600401610e2290614e14565b6111d0613caa565b6111d8613cd1565b3082526001600160a01b038916602080840182905260408401919091528101839052606081018c9052608081018b9052611210612cc6565b61121e8d8260200151612d6c565b82526020820181905260045465e35fa931a0009161124a9161010090046001600160a01b031690612dbb565b116112675760405162461bcd60e51b8152600401610e2290614e74565b6112816f4b3b4ca85a86c47a098a2240000000008e61278d565b60a082018990529c5061129a8e60008f8d86868d612ee2565b9550955050505073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b0316633fa4f2456040518163ffffffff1660e01b815260040160206040518083038186803b1580156112ee57600080fd5b505afa158015611302573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611326919081019061418d565b81146113445760405162461bcd60e51b8152600401610e2290614d34565b50600160005590999098509650505050505050565b60008060016000541461137e5760405162461bcd60e51b8152600401610e2290614e94565b6002600081905550600073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b031663ed04e1c36040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156113d757600080fd5b505af11580156113eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061140f919081019061418d565b90508961142e5760405162461bcd60e51b8152600401610e2290614ec4565b611436612a19565b6001600160a01b03871660009081526012602052604090205415611479576001600160a01b03871660009081526012602052604090205488111561147957600080fd5b34158061148557508734145b801561149957508715158061149957508a15155b80156114c057506001600160a01b0387161515806114b657503415155b806114c057508a15155b80156114dc57508a15806114dc5750336001600160a01b038716145b6114f85760405162461bcd60e51b8152600401610e2290614dc4565b6004546001600160a01b0388811661010090920416141561152b5760405162461bcd60e51b8152600401610e2290614d44565b611533612cc6565b61153b613caa565b611543613cd1565b3082526001600160a01b03888116602080850191909152908816604084015281018c905261157b8c61157560006127cf565b8d61267f565b8360000184604001856020018381525083815250838152505050508981608001818152505061168d8d8d601660009054906101000a90046001600160a01b03166001600160a01b031663ca74a5d9601060008f60016040516020016115e1929190614ae1565b6040516020818303038152906040528051906020012060001c8152602001908152602001600020546040518263ffffffff1660e01b81526004016116259190614ca4565b60206040518083038186803b15801561163d57600080fd5b505afa158015611651573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611675919081019061418d565b8c868660405180602001604052806000815250612ee2565b94509450505073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b0316633fa4f2456040518163ffffffff1660e01b815260040160206040518083038186803b1580156112ee57600080fd5b6017546001600160a01b031681565b60045460ff1681565b60106020526000908152604090205481565b60065481565b601d546001600160a01b031681565b6000610d4961172c610e6f565b61313f565b600080827f37aa2b7d583612f016e4a4de4292cb015139b3d7762663d06a53964912ea2fb660001b60405160200161176a929190614b07565b604051602081830303815290604052805190602001209050610c3b8160136000866001600160a01b03166001600160a01b03168152602001908152602001600020546117b4611bd8565b6001600160a01b038716600090815260116020526040902054613177565b600a5481565b6000806117e560006127cf565b905060006117f1610e6f565b9050808211156118045790039050610d4c565b505090565b60008315610b4257600061181f85610b20611ce6565b9250505061182b6126f8565b8111610b40576001600160a01b03831661184e576017546001600160a01b031692505b600060106000856001604051602001611868929190614ae1565b60408051601f19818403018152918152815160209283012083529082019290925281016000205460165460048054935163ca74a5d960e01b81529294506119a093600a936001600160a01b03938416936325decac09361010090930416918a918991869163ca74a5d9916118de918c9101614ca4565b60206040518083038186803b1580156118f657600080fd5b505afa15801561190a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061192e919081019061418d565b60016040518663ffffffff1660e01b8152600401611950959493929190614bbf565b60206040518083038186803b15801561196857600080fd5b505afa15801561197c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c17919081019061418d565b92505050610b42565b600080806001600160a01b0384166119ca576017546001600160a01b031693505b60006119d7858789612a99565b90506119e38882612d6c565b90945091506119f06126f8565b841115611a07575060009250829150819050611ab0565b611a17878563ffffffff61272e16565b6016546004805460405163d67f707760e01b8152939a506001600160a01b039283169363d67f707793611a5c9361010090930416918a918d918d918a918d9101614c01565b60206040518083038186803b158015611a7457600080fd5b505afa158015611a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611aac919081019061418d565b9250505b9450945094915050565b60008215801590611acb5750828210155b15610d3457611b96701d6329f1c35ca4bfabb9f5610000000000610c2f611b8068056bc75e2d63100000601660009054906101000a90046001600160a01b03166001600160a01b0316634699f8466040518163ffffffff1660e01b815260040160206040518083038186803b158015611b4357600080fd5b505afa158015611b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b7b919081019061418d565b6131d1565b610c23611b8d8888613213565b610c238961313f565b9050610d34565b6001600160a01b031660009081526013602052604090205490565b60045461010090046001600160a01b031681565b600d5481565b60085481565b600f546000908190426001600160581b03908116911614611bff57611bfb613245565b9150505b611c10611c0b826127cf565b613311565b91505090565b600080611c3561016d610c2f601c600b5461275390919063ffffffff16565b90506000611c5268056bc75e2d631000008363ffffffff6131d116565b90506000611c6f68056bc75e2d63100000610c2f84610c236117d8565b9050611c8d85610c2f83670de0b6b3a764000063ffffffff61275316565b95945050505050565b6000610d496000613340565b6001546001600160a01b031690565b601c546001600160a01b031681565b6001546000906001600160a01b0316611cd7613396565b6001600160a01b031614905090565b600f546000908190426001600160581b03908116911614611d0d57611d09613245565b9150505b611c10816127cf565b60408051601c8082526103a0820190925260609160009183916020820161038080388339019050509050632ea295fa60e01b81600081518110611d5557fe5b6001600160e01b03199092166020928302919091019091015280516328a02f1960e01b9082906001908110611d8657fe5b6001600160e01b031990921660209283029190910190910152805163f6b69f9960e01b9082906002908110611db757fe5b6001600160e01b031990921660209283029190910190910152805163a9059cbb60e01b9082906003908110611de857fe5b6001600160e01b03199092166020928302919091019091015280516323b872dd60e01b9082906004908110611e1957fe5b6001600160e01b03199092166020928302919091019091015280516354198ce960e01b9082906005908110611e4a57fe5b6001600160e01b0319909216602092830291909101909101528051633ffcdacb60e11b9082906006908110611e7b57fe5b6001600160e01b031990921660209283029190910190910152805163eebc508160e01b9082906007908110611eac57fe5b6001600160e01b031990921660209283029190910190910152805163612ef80b60e01b9082906008908110611edd57fe5b6001600160e01b03199092166020928302919091019091015280516344a4a00360e01b9082906009908110611f0e57fe5b6001600160e01b031990921660209283029190910190910152805163020c968760e61b908290600a908110611f3f57fe5b6001600160e01b031990921660209283029190910190910152805163b9fe1a8f60e01b908290600b908110611f7057fe5b6001600160e01b03199092166020928302919091019091015280516309ec6b6b60e01b908290600c908110611fa157fe5b6001600160e01b031990921660209283029190910190910152805163d65a502160e01b908290600d908110611fd257fe5b6001600160e01b03199092166020928302919091019091015280516302482d1360e31b908290600e90811061200357fe5b6001600160e01b031990921660209283029190910190910152805163083db41f60e21b908290600f90811061203457fe5b6001600160e01b0319909216602092830291909101909101528051638fb807c560e01b908290601090811061206557fe5b6001600160e01b03199092166020928302919091019091015280516320a6ce3d60e21b908290601190811061209657fe5b6001600160e01b0319909216602092830291909101909101528051630359f7eb60e11b90829060129081106120c757fe5b6001600160e01b03199092166020928302919091019091015280516301ad033560e61b90829060139081106120f857fe5b6001600160e01b0319909216602092830291909101909101528051630c6347df60e31b908290601490811061212957fe5b6001600160e01b03199092166020928302919091019091015280516247979360e41b908290601590811061215957fe5b6001600160e01b03199092166020928302919091019091015280516304395d9160e21b908290601690811061218a57fe5b6001600160e01b0319909216602092830291909101909101528051631b48f46b60e21b90829060179081106121bb57fe5b6001600160e01b031990921660209283029190910190910152805163095ea7b360e01b90829060189081106121ec57fe5b6001600160e01b03199092166020928302919091019091015280516318160ddd60e01b908290601990811061221d57fe5b6001600160e01b03199092166020928302919091019091015280516370a0823160e01b908290601a90811061224e57fe5b6001600160e01b0319909216602092830291909101909101528051636eb1769f60e11b908290601b90811061227f57fe5b60200260200101906001600160e01b03191690816001600160e01b03191681525050806122d6604051806040016040528060138152602001724c6f616e546f6b656e4c6f676963577262746360681b8152506124cc565b92509250509091565b6003805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610cc75780601f10610c9c57610100808354040283529160200191610cc7565b6018546001600160a01b031681565b601b546001600160a01b031681565b601d546000906001600160a01b0316158015906123f05750601d5460405163ca6860df60e01b81526001600160a01b039091169063ca6860df906123a0908690600401614b60565b60206040518083038186803b1580156123b857600080fd5b505afa1580156123cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123f09190810190613ee4565b1561249e5760408051600481526024810182526020810180516001600160e01b0316630a3e676160e41b17905290516000916060916001600160a01b0387169161243991614b49565b600060405180830381855afa9150503d8060008114612474576040519150601f19603f3d011682016040523d82523d6000602084013e612479565b606091505b5091509150811561249b57808060200190516124989190810190613e0f565b94505b50505b610b42338484600019612809565b6000610d3482613340565b60095481565b601a546001600160a01b031681565b805160009082906124e1575060009050610c3f565b50506020015190565b6000610d3461049f83610c1760006127cf565b60075481565b6001600160a01b03918216600090815260146020908152604080832093909416825291909152205490565b60126020526000908152604090205481565b6001600160a01b031660009081526011602052604090205490565b600b5481565b612569611cc0565b6125855760405162461bcd60e51b8152600401610e2290614e44565b61258e8161339a565b50565b6000806001600160a01b038516156126085760165460405163193bbe8960e31b81526001600160a01b039091169063c9ddf448906125d5908a908990600401614b7c565b600060405180830381600087803b1580156125ef57600080fd5b505af1158015612603573d6000803e3d6000fd5b505050505b61264e8c8c8c8c8c8c8c8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fc792505050565b915091509a509a98505050505050505050565b6019546001600160a01b031681565b65e35fa931a00081565b600681565b600080600061268e868661341c565b92506126db6126c3670de0b6b3a7640000611b7b6b0a3098c68eb9427db8000000610c2f83610c238a8c63ffffffff61275316565b610c2f88670de0b6b3a764000063ffffffff61275316565b90506126ed818763ffffffff6131d116565b915093509350939050565b600480546040516370a0823160e01b81526000926101009092046001600160a01b0316916370a0823191610eae91309101614b60565b600082820183811015610b425760405162461bcd60e51b8152600401610e2290614d94565b60008261276257506000610d34565b8282028284828161276f57fe5b0414610b425760405162461bcd60e51b8152600401610e2290614e34565b6000610b4283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613532565b6000601554600014610c3f57600c54806127f9576127f66127ee610e6f565b610c176126f8565b90505b610e4f818463ffffffff61272e16565b600060001982146128a2576040805180820190915260028152610c4d60f21b6020820152612840908390859063ffffffff61356916565b6001600160a01b038616600081815260146020908152604080832033808552925291829020849055905190927f628e75c63c1873bcd3885f7aee9f58ee36f60dc789b2a6b3a978c4189bc548ba91612899918791614ee4565b60405180910390a35b6001600160a01b0384166128c85760405162461bcd60e51b8152600401610e2290614d54565b6001600160a01b03851660009081526013602090815260408083205481518083019092526002825261189b60f11b92820192909252909190612913908390879063ffffffff61356916565b6001600160a01b0380891660009081526013602052604080822084905591891681529081205491925061294c828863ffffffff61272e16565b6001600160a01b0389166000908152601360205260408120829055909150612972611bd8565b601c549091506001600160a01b038b81169116148015906129a15750601c546001600160a01b038a8116911614155b156129be576129b28a868684613595565b6129be89848484613595565b886001600160a01b03168a6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8a604051612a019190614ca4565b60405180910390a35060019998505050505050505050565b600080356001600160e01b0319167fd46a704bc285dbd6ff5ad3863506260b1df02812f4f857c8cc852317a6ac64f2604051602001612a59929190614b2d565b6040516020818303038152906040528051906020012090506000815490508015612a955760405162461bcd60e51b8152600401610e2290614e44565b5050565b808215610b4257600080601660009054906101000a90046001600160a01b03166001600160a01b03166378d849ed6040518163ffffffff1660e01b815260040160206040518083038186803b158015612af157600080fd5b505afa158015612b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b299190810190613e0f565b60048054604051630a7549df60e21b81526001600160a01b03938416936329d5277c93612b62938c936101009091049092169101614b7c565b604080518083038186803b158015612b7957600080fd5b505afa158015612b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612bb191908101906141eb565b9150915081600014158015612bc557508015155b612be15760405162461bcd60e51b8152600401610e2290614e84565b6000612bf782610c2f888663ffffffff61275316565b60165460048054604051631a51577760e21b81529394506000936001600160a01b03938416936369455ddc93612c3a936101009004909116918d91889101614b97565b60206040518083038186803b158015612c5257600080fd5b505afa158015612c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612c8a919081019061418d565b9050868114612caa57612ca787610c2f848463ffffffff61275316565b91505b612cba828663ffffffff61272e16565b98975050505050505050565b600f5442906001600160581b0380831691161461258e5760165460048054604051630740ff7d60e51b81526001600160a01b039384169363e81fefa093612d169361010090049091169101614b60565b600060405180830381600087803b158015612d3057600080fd5b505af1158015612d44573d6000803e3d6000fd5b5050600f80546001600160581b0385166affffffffffffffffffffff19909116179055505050565b60008080612d8c670de0b6b3a7640000610c2f868863ffffffff61275316565b9050612da181612d9c60006127cf565b61341c565b9150612db1826224ea008361364b565b9250509250929050565b6000806000601660009054906101000a90046001600160a01b03166001600160a01b03166378d849ed6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e0e57600080fd5b505afa158015612e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612e469190810190613e0f565b601754604051630a7549df60e21b81526001600160a01b03928316926329d5277c92612e7a928a9290911690600401614b7c565b604080518083038186803b158015612e9157600080fd5b505afa158015612ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612ec991908101906141eb565b9092509050611c8d81610c2f868563ffffffff61275316565b600080612eed612a19565b612ef56126f8565b846020015111158015612f14575060208501516001600160a01b031615155b612f305760405162461bcd60e51b8152600401610e2290614de4565b60408501516001600160a01b0316612f565760208501516001600160a01b031660408601525b6000612f648787878c6136ac565b9050612f818560200151866060015161272e90919063ffffffff16565b60608601528815612fa7576060850151612fa1908a63ffffffff6131d116565b60608601525b60008915612fb3575060015b6000601060008a84604051602001612fcc929190614ae1565b6040516020818303038152906040528051906020012060001c8152602001908152602001600020549050601660009054906101000a90046001600160a01b03166001600160a01b031663d84ca25484838f868f8e8e8e6040518963ffffffff1660e01b81526004016130449796959493929190614cb2565b60408051808303818588803b15801561305c57600080fd5b505af1158015613070573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525061309591908101906141eb565b6080890152602088018190526130bd5760405162461bcd60e51b8152600401610e2290614e24565b601654602089015160405163f06a9c6b60e01b81526001600160a01b039092169163f06a9c6b916130f091600401614b60565b600060405180830381600087803b15801561310a57600080fd5b505af115801561311e573d6000803e3d6000fd5b50505050866020015187608001519450945050505097509795505050505050565b60008115610c3f576000613151613245565b509050610e4f83610c2f61016d610c238568056bc75e2d6310000063ffffffff61275316565b60008161318657506000610fbf565b508354611c8d816131c5670de0b6b3a76400006131b9886131ad898963ffffffff61390616565b9063ffffffff61394c16565b9063ffffffff6139b716565b9063ffffffff613a1b16565b6000610b4283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613569565b6000821580159061322357508115155b15610d3457611b9682610c2f8568056bc75e2d6310000063ffffffff61275316565b60165460048054604051630d1979fb60e41b8152600093849384936001600160a01b039283169363d1979fb09361328793309361010090049091169101614b7c565b60c06040518083038186803b15801561329f57600080fd5b505afa1580156132b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506132d791908101906142bf565b509196509450925061330a915068056bc75e2d631000009050610c2f6132fd82856131d1565b859063ffffffff61275316565b9150509091565b6015546000908061332457600e54610c3b565b610c3b81610c2f85670de0b6b3a764000063ffffffff61275316565b600080821561338957600f54426001600160581b0390811691161461336b57613367613245565b9150505b600061337982610c176126f8565b905080841115613387578093505b505b610c3b83612d9c836127cf565b3390565b6001600160a01b0381166133c05760405162461bcd60e51b8152600401610e2290614d74565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008061343461342e85610c17610e6f565b84613213565b600554600654600954600a54600b549495506000948594939291908288101561345b578297505b818811156134ce57968190039668056bc75e2d6310000082900380891115613481578098505b6134a286610c1768056bc75e2d63100000610c2f878a63ffffffff61275316565b96506134c687610c1783610c2f6134b9878d6131d1565b8e9063ffffffff61275316565b995050613524565b6134ef85610c1768056bc75e2d63100000610c2f8c8963ffffffff61275316565b98509395508593613506848663ffffffff61272e16565b95508689101561351857869850613524565b85891115613524578598505b505050505050505092915050565b600081836135535760405162461bcd60e51b8152600401610e229190614d23565b50600083858161355f57fe5b0495945050505050565b6000818484111561358d5760405162461bcd60e51b8152600401610e229190614d23565b505050900390565b6040516000906135cb9086907f37aa2b7d583612f016e4a4de4292cb015139b3d7762663d06a53964912ea2fb690602001614b07565b604051602081830303815290604052805190602001209050600083600014156135f75760009250613628565b8415613628576001600160a01b03861660009081526011602052604090205461362590839087908690613177565b90505b90556001600160a01b039093166000908152601160205260409020929092555050565b6000806136666301e13380610c2f878763ffffffff61275316565b9050600061368368056bc75e2d631000008363ffffffff6131d116565b90506136a281610c2f8668056bc75e2d6310000063ffffffff61275316565b9695505050505050565b60175460408401516020840151606085015160808601516000946001600160a01b039081169485949093909290918b168514156136fb5760405162461bcd60e51b8152600401610e2290614e54565b34965087156137a657604051632e1a7d4d60e01b81526001600160a01b03871690632e1a7d4d90613730908b90600401614ca4565b600060405180830381600087803b15801561374a57600080fd5b505af115801561375e573d6000803e3d6000fd5b5050505061376c8489613a61565b878311156137a1576016546040805160208101909152600081526137a19187916001600160a01b03909116908b870390613b02565b6137db565b601654604080518082019091526002815261323760f01b60208201526137db9187916001600160a01b03909116908690613b02565b801561381657601654604080518082019091526002815261064760f31b6020820152613816918d9133916001600160a01b0316908590613b62565b81156138f857861580159061382b5750818710155b156138c357856001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561386b57600080fd5b505af115801561387f573d6000803e3d6000fd5b5050601654604080518082019091526002815261323960f01b60208201526138b994508993506001600160a01b0390911691508590613b02565b81870396506138f8565b601654604080518082019091526002815261323960f01b60208201526138f891879133916001600160a01b0316908690613b62565b505050505050949350505050565b600081830381831280159061391b5750838113155b80613930575060008312801561393057508381135b610b425760405162461bcd60e51b8152600401610e2290614ea4565b60008261395b57506000610d34565b8260001914801561396f5750600160ff1b82145b1561398c5760405162461bcd60e51b8152600401610e2290614e64565b8282028284828161399957fe5b0514610b425760405162461bcd60e51b8152600401610e2290614e64565b6000816139d65760405162461bcd60e51b8152600401610e2290614ed4565b816000191480156139ea5750600160ff1b83145b15613a075760405162461bcd60e51b8152600401610e2290614e04565b6000828481613a1257fe5b05949350505050565b6000828201818312801590613a305750838112155b80613a455750600083128015613a4557508381125b610b425760405162461bcd60e51b8152600401610e2290614da4565b80471015613a815760405162461bcd60e51b8152600401610e2290614dd4565b6000826001600160a01b031682604051613a9a90614b55565b60006040518083038185875af1925050503d8060008114613ad7576040519150601f19603f3d011682016040523d82523d6000602084013e613adc565b606091505b5050905080613afd5760405162461bcd60e51b8152600401610e2290614db4565b505050565b604051613b5c90859063a9059cbb60e01b90613b249087908790602401614c5b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915283613b86565b50505050565b604051610e2b9086906323b872dd60e01b90613b2490889088908890602401614b97565b613b8f83613c71565b613bab5760405162461bcd60e51b8152600401610e2290614d64565b60006060846001600160a01b031684604051613bc79190614b49565b6000604051808303816000865af19150503d8060008114613c04576040519150601f19603f3d011682016040523d82523d6000602084013e613c09565b606091505b5091509150818390613c2e5760405162461bcd60e51b8152600401610e229190614d23565b50805115610e2b5780806020019051613c4a9190810190613ee4565b8390613c695760405162461bcd60e51b8152600401610e229190614d23565b505050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610fbf575050151592915050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8035610d3481615037565b8051610d3481615037565b8051610d348161504b565b8035610d3481615054565b60008083601f840112613d5b57600080fd5b50813567ffffffffffffffff811115613d7357600080fd5b602083019150836001820283011115613d8b57600080fd5b9250929050565b600082601f830112613da357600080fd5b8135613db6613db182614f42565b614f1b565b91508082526020830160208301858383011115613dd257600080fd5b613ddd838284614fbd565b50505092915050565b8051610d3481615054565b600060208284031215613e0357600080fd5b6000610fbf8484613d1d565b600060208284031215613e2157600080fd5b6000610fbf8484613d28565b60008060408385031215613e4057600080fd5b6000613e4c8585613d1d565b9250506020613e5d85828601613d1d565b9150509250929050565b600080600060608486031215613e7c57600080fd5b6000613e888686613d1d565b9350506020613e9986828701613d1d565b9250506040613eaa86828701613d3e565b9150509250925092565b60008060408385031215613ec757600080fd5b6000613ed38585613d1d565b9250506020613e5d85828601613d3e565b600060208284031215613ef657600080fd5b6000610fbf8484613d33565b600080600080600080600080610100898b031215613f1f57600080fd5b6000613f2b8b8b613d3e565b9850506020613f3c8b828c01613d3e565b9750506040613f4d8b828c01613d3e565b9650506060613f5e8b828c01613d3e565b9550506080613f6f8b828c01613d1d565b94505060a0613f808b828c01613d1d565b93505060c0613f918b828c01613d1d565b92505060e089013567ffffffffffffffff811115613fae57600080fd5b613fba8b828c01613d92565b9150509295985092959890939650565b6000806000806000806000806000806101208b8d031215613fea57600080fd5b6000613ff68d8d613d3e565b9a505060206140078d828e01613d3e565b99505060406140188d828e01613d3e565b98505060606140298d828e01613d3e565b975050608061403a8d828e01613d1d565b96505060a061404b8d828e01613d1d565b95505060c061405c8d828e01613d3e565b94505060e061406d8d828e01613d1d565b9350506101008b013567ffffffffffffffff81111561408b57600080fd5b6140978d828e01613d49565b92509250509295989b9194979a5092959850565b600080600080600080600080610100898b0312156140c857600080fd5b60006140d48b8b613d3e565b98505060206140e58b828c01613d3e565b97505060406140f68b828c01613d3e565b96505060606141078b828c01613d3e565b95505060806141188b828c01613d1d565b94505060a06141298b828c01613d1d565b93505060c0613f918b828c01613d3e565b60006020828403121561414c57600080fd5b813567ffffffffffffffff81111561416357600080fd5b610fbf84828501613d92565b60006020828403121561418157600080fd5b6000610fbf8484613d3e565b60006020828403121561419f57600080fd5b6000610fbf8484613de6565b6000806000606084860312156141c057600080fd5b6000613e888686613d3e565b600080604083850312156141df57600080fd5b6000613ed38585613d3e565b600080604083850312156141fe57600080fd5b600061420a8585613de6565b9250506020613e5d85828601613de6565b60008060006060848603121561423057600080fd5b600061423c8686613d3e565b935050602061424d86828701613d3e565b9250506040613eaa86828701613d1d565b6000806000806080858703121561427457600080fd5b60006142808787613d3e565b945050602061429187828801613d3e565b93505060406142a287828801613d3e565b92505060606142b387828801613d1d565b91505092959194509250565b60008060008060008060c087890312156142d857600080fd5b60006142e48989613de6565b96505060206142f589828a01613de6565b955050604061430689828a01613de6565b945050606061431789828a01613de6565b935050608061432889828a01613de6565b92505060a061433989828a01613de6565b9150509295509295509295565b60006143528383614410565b505060200190565b61436381614fac565b82525050565b61436381614f7d565b61436361437e82614f7d565b614ff5565b600061438e82614f70565b6143988185614f74565b93506143a383614f6a565b8060005b838110156143d15781516143bb8882614346565b97506143c683614f6a565b9250506001016143a7565b509495945050505050565b61436381614f88565b6143636143f182614f88565b615000565b61436381610d4c565b61436361440b82610d4c565b610d4c565b61436381614f8d565b61436361440b82614f8d565b600061443082614f70565b61443a8185614f74565b935061444a818560208601614fc9565b61445381615021565b9093019392505050565b600061446882614f70565b6144728185610c3f565b9350614482818560208601614fc9565b9290920192915050565b6000614499601483614f74565b733932b2b73a3930b731bc903b34b7b630ba34b7b760611b815260200192915050565b60006144c9600283614f74565b61031360f41b815260200192915050565b60006144e7600283614f74565b61313560f01b815260200192915050565b6000614505601e83614f74565b7f63616c6c20746f2061206e6f6e2d636f6e747261637420616464726573730000815260200192915050565b600061453e602683614f74565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000614586601d83614f74565b7f656e7472792070726963652061626f766520746865206d696e696d756d000000815260200192915050565b60006145bf601b83614f74565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006145f8602183614f74565b7f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f8152607760f81b602082015260400192915050565b600061463b603a83614f74565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207281527f6563697069656e74206d61792068617665207265766572746564000000000000602082015260400192915050565b600061469a600183614f74565b603760f81b815260200192915050565b60006146b7601d83614f74565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000815260200192915050565b60006146f0600283614f74565b610c8d60f21b815260200192915050565b600061470e600283614f74565b61313160f01b815260200192915050565b600061472c602183614f74565b7f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f8152607760f81b602082015260400192915050565b600061476f600283614f74565b61189960f11b815260200192915050565b600061478d600283614f74565b61323560f01b815260200192915050565b60006147ab602183614f74565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006147ee600c83614f74565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000614816600283614f74565b61191b60f11b815260200192915050565b6000614834602783614f74565b7f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f815266766572666c6f7760c81b602082015260400192915050565b600061487d601383614f74565b721c1c9a5b98da5c185b081d1bdbc81cdb585b1b606a1b815260200192915050565b60006148ac601d83614f74565b7f696e76616c6964207261746520636f6c6c61746572616c20746f6b656e000000815260200192915050565b6000610d34600083610c3f565b60006148f2600c83614f74565b6b1b9bdb9499595b9d1c985b9d60a21b815260200192915050565b600061491a602483614f74565b7f5369676e6564536166654d6174683a207375627472616374696f6e206f766572815263666c6f7760e01b602082015260400192915050565b6000614960601883614f74565b7f34303120757365206f66206578697374696e67206c6f616e0000000000000000815260200192915050565b6000614999600183614f74565b601b60f91b815260200192915050565b60006149b6602083614f74565b7f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f815260200192915050565b805160808301906149f38482614369565b506020820151614a066020850182614369565b506040820151614a196040850182614369565b506060820151613b5c6060850182614369565b8051610120830190614a3e84826143f6565b506020820151614a5160208501826143f6565b506040820151614a6460408501826143f6565b506060820151614a7760608501826143f6565b506080820151614a8a60808501826143f6565b5060a0820151614a9d60a08501826143f6565b5060c0820151614ab060c08501826143f6565b5060e0820151614ac360e08501826143f6565b50610100820151613b5c6101008501826143f6565b61436381614fa6565b6000614aed8285614372565b601482019150614afd82846143e5565b5060010192915050565b6000614b138285614372565b601482019150614b2382846143ff565b5060200192915050565b6000614b398285614419565b600482019150614b2382846143ff565b6000610b42828461445d565b6000610d34826148d8565b60208101610d348284614369565b60208101610d34828461435a565b60408101614b8a8285614369565b610b426020830184614369565b60608101614ba58286614369565b614bb26020830185614369565b610fbf60408301846143f6565b60a08101614bcd8288614369565b614bda6020830187614369565b614be760408301866143f6565b614bf460608301856143f6565b6136a260808301846143dc565b60c08101614c0f8289614369565b614c1c6020830188614369565b614c2960408301876143f6565b614c3660608301866143f6565b614c4360808301856143f6565b614c5060a08301846143f6565b979650505050505050565b60408101614c698285614369565b610b4260208301846143f6565b60408082528101614c878185614383565b9050610b4260208301846143f6565b60208101610d3482846143dc565b60208101610d3482846143f6565b6102408101614cc1828a6143f6565b614cce60208301896143f6565b614cdb60408301886143dc565b614ce860608301876143f6565b614cf560808301866149e2565b614d03610100830185614a2c565b818103610220830152614d168184614425565b9998505050505050505050565b60208082528101610b428184614425565b60208082528101610d348161448c565b60208082528101610d34816144bc565b60208082528101610d34816144da565b60208082528101610d34816144f8565b60208082528101610d3481614531565b60208082528101610d3481614579565b60208082528101610d34816145b2565b60208082528101610d34816145eb565b60208082528101610d348161462e565b60208082528101610d348161468d565b60208082528101610d34816146aa565b60208082528101610d34816146e3565b60208082528101610d3481614701565b60208082528101610d348161471f565b60208082528101610d3481614762565b60208082528101610d3481614780565b60208082528101610d348161479e565b60208082528101610d34816147e1565b60208082528101610d3481614809565b60208082528101610d3481614827565b60208082528101610d3481614870565b60208082528101610d348161489f565b60208082528101610d34816148e5565b60208082528101610d348161490d565b60208082528101610d3481614953565b60208082528101610d348161498c565b60208082528101610d34816149a9565b60408101614c6982856143f6565b60608101614f0082866143f6565b614bb260208301856143f6565b60208101610d348284614ad8565b60405181810167ffffffffffffffff81118282101715614f3a57600080fd5b604052919050565b600067ffffffffffffffff821115614f5957600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b6000610d3482614f9a565b151590565b6001600160e01b03191690565b6001600160a01b031690565b60ff1690565b6000610d34826000610d3482614f7d565b82818337506000910152565b60005b83811015614fe4578181015183820152602001614fcc565b83811115613b5c5750506000910152565b6000610d348261500b565b6000610d3482615016565b6000610d3482615031565b6000610d348261502b565b601f01601f191690565b60f81b90565b60601b90565b61504081614f7d565b811461258e57600080fd5b61504081614f88565b61504081610d4c56fea365627a7a72315820280499a116e7eadb38aa8729728c15a657f6bfd6d3ab49666a76a0cfc6e4b7686c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x6080604052600436106103815760003560e01c80637b7933b4116101d1578063b9fe1a8f11610102578063e41b07e3116100a0578063f6b69f991161006f578063f6b69f991461094e578063f851a44014610961578063f8dd4f0e14610976578063ffa1ad741461098b57610381565b8063e41b07e3146108d9578063eebc5081146108f9578063ef2b0b3914610919578063f2fde38b1461092e57610381565b8063cfb51928116100dc578063cfb5192814610864578063d65a502114610884578063d759dbeb146108a4578063dd62ed3e146108b957610381565b8063b9fe1a8f1461081a578063ba0e43bf1461083a578063ca37e6661461084f57610381565b80638f32d59b1161016f57806395d89b411161014957806395d89b41146107bb5780639bda3a98146107d05780639fd0506d146107e5578063a9059cbb146107fa57610381565b80638f32d59b1461076e5780638fb807c51461078357806390967de51461079857610381565b8063829b38f4116101ab578063829b38f41461070f5780638325a1c01461072f5780638da5cb5b146107445780638ee6c4e61461075957610381565b80637b7933b4146106d05780637e37c08c146106e55780637ff9b596146106fa57610381565b80632ea295fa116102b657806354198ce9116102545780636b40cd40116102235780636b40cd401461064c5780636d23d1ac1461067b57806370a082311461069b578063797bf385146106bb57610381565b806354198ce9146105e257806356e07d7014610602578063612ef80b14610617578063631a3ef81461062c57610381565b80633291c11a116102905780633291c11a14610583578063330691ac146105a35780633535f48b146105b857806344a4a003146105cd57610381565b80632ea295fa146105395780632f6b600d1461054c578063313ce5671461056157610381565b806312416898116103235780631f68f20a116102fd5780631f68f20a146104ce57806320f6d07c146104e357806323b872dd146104f857806328a02f191461051857610381565b8063124168981461048457806318160ddd146104a45780631d0806ae146104b957610381565b806306fdde031161035f57806306fdde03146103fe578063095ea7b31461042057806309ec6b6b1461044d57806310e576441461046257610381565b8063047979301461038657806306947a3a146103bc57806306b3efd6146103de575b600080fd5b34801561039257600080fd5b506103a66103a136600461421b565b6109a0565b6040516103b39190614ca4565b60405180910390f35b3480156103c857600080fd5b506103d1610b49565b6040516103b39190614b60565b3480156103ea57600080fd5b506103a66103f9366004613df1565b610b58565b34801561040a57600080fd5b50610413610c44565b6040516103b39190614d23565b34801561042c57600080fd5b5061044061043b366004613eb4565b610ccf565b6040516103b39190614c96565b34801561045957600080fd5b506103a6610d3a565b34801561046e57600080fd5b5061048261047d3660046141ab565b610d4f565b005b34801561049057600080fd5b506103a661049f36600461416f565b610e32565b3480156104b057600080fd5b506103a6610e5d565b3480156104c557600080fd5b506103a6610e63565b3480156104da57600080fd5b506103a6610e69565b3480156104ef57600080fd5b506103a6610e6f565b34801561050457600080fd5b50610440610513366004613e67565b610efe565b61052b6105263660046140ab565b610fc7565b6040516103b3929190614ee4565b61052b610547366004613f02565b611359565b34801561055857600080fd5b506103d16116e0565b34801561056d57600080fd5b506105766116ef565b6040516103b39190614f0d565b34801561058f57600080fd5b506103a661059e36600461416f565b6116f8565b3480156105af57600080fd5b506103a661170a565b3480156105c457600080fd5b506103d1611710565b3480156105d957600080fd5b506103a661171f565b3480156105ee57600080fd5b506103a66105fd366004613df1565b611731565b34801561060e57600080fd5b506103a66117d2565b34801561062357600080fd5b506103a66117d8565b34801561063857600080fd5b506103a661064736600461421b565b611809565b34801561065857600080fd5b5061066c61066736600461425e565b6119a9565b6040516103b393929190614ef2565b34801561068757600080fd5b506103a66106963660046141cc565b611aba565b3480156106a757600080fd5b506103a66106b6366004613df1565b611b9d565b3480156106c757600080fd5b506103d1611bb8565b3480156106dc57600080fd5b506103a6611bcc565b3480156106f157600080fd5b506103a6611bd2565b34801561070657600080fd5b506103a6611bd8565b34801561071b57600080fd5b506103a661072a36600461416f565b611c16565b34801561073b57600080fd5b506103a6611c96565b34801561075057600080fd5b506103d1611ca2565b34801561076557600080fd5b506103d1611cb1565b34801561077a57600080fd5b50610440611cc0565b34801561078f57600080fd5b506103a6611ce6565b3480156107a457600080fd5b506107ad611d16565b6040516103b3929190614c76565b3480156107c757600080fd5b506104136122df565b3480156107dc57600080fd5b506103d161233a565b3480156107f157600080fd5b506103d1612349565b34801561080657600080fd5b50610440610815366004613eb4565b612358565b34801561082657600080fd5b506103a661083536600461416f565b6124ac565b34801561084657600080fd5b506103a66124b7565b34801561085b57600080fd5b506103d16124bd565b34801561087057600080fd5b506103a661087f36600461413a565b6124cc565b34801561089057600080fd5b506103a661089f36600461416f565b6124ea565b3480156108b057600080fd5b506103a66124fd565b3480156108c557600080fd5b506103a66108d4366004613e2d565b612503565b3480156108e557600080fd5b506103a66108f4366004613df1565b61252e565b34801561090557600080fd5b506103a6610914366004613df1565b612540565b34801561092557600080fd5b506103a661255b565b34801561093a57600080fd5b50610482610949366004613df1565b612561565b61052b61095c366004613fca565b612591565b34801561096d57600080fd5b506103d1612661565b34801561098257600080fd5b506103a6612670565b34801561099757600080fd5b506103a661267a565b60008315610b42576001600160a01b0382166109c5576017546001600160a01b031691505b6000601060008460016040516020016109df929190614ae1565b60408051601f19818403018152918152815160209283012083529082019290925281016000205460165460048054935163ca74a5d960e01b81529294506001600160a01b039182169363e762319f936101009091049092169187918a91869163ca74a5d991610a50918a9101614ca4565b60206040518083038186803b158015610a6857600080fd5b505afa158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aa0919081019061418d565b60016040518663ffffffff1660e01b8152600401610ac2959493929190614bbf565b60206040518083038186803b158015610ada57600080fd5b505afa158015610aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b12919081019061418d565b9150610b2682610b20611ce6565b8661267f565b9350610b3491506126f89050565b821115610b4057600091505b505b9392505050565b6016546001600160a01b031681565b601c5460009081906001600160a01b031615610bf357601c54604051636822955360e11b81526001600160a01b039091169063d0452aa690610ba09030908790600401614b7c565b60206040518083038186803b158015610bb857600080fd5b505afa158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bf0919081019061418d565b90505b610c3b670de0b6b3a7640000610c2f610c0a611bd8565b610c2385610c1789611b9d565b9063ffffffff61272e16565b9063ffffffff61275316565b9063ffffffff61278d16565b9150505b919050565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610cc75780601f10610c9c57610100808354040283529160200191610cc7565b820191906000526020600020905b815481529060010190602001808311610caa57829003601f168201915b505050505081565b3360008181526014602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610d28908690614ca4565b60405180910390a35060015b92915050565b6000610d4961049f60006127cf565b90505b90565b60165460048054604051631a51577760e21b81526000936001600160a01b03908116936369455ddc93610d90936101009091049092169188918a9101614b97565b60206040518083038186803b158015610da857600080fd5b505afa158015610dbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610de0919081019061418d565b90506000610e0085610c2f84670de0b6b3a764000063ffffffff61275316565b905082811015610e2b5760405162461bcd60e51b8152600401610e2290614d84565b60405180910390fd5b5050505050565b600080610e3d610e6f565b90508015610e5757610e4f8184611aba565b915050610c3f565b50919050565b60155490565b600e5481565b60055481565b6016546004805460405163250f447f60e11b81526000936001600160a01b0390811693634a1e88fe93610eae9330936101009092049091169101614b7c565b60206040518083038186803b158015610ec657600080fd5b505afa158015610eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d49919081019061418d565b60165460405163115dd4b160e01b8152600091610fbf918691869186916001600160a01b03169063115dd4b190610f39903390600401614b6e565b60206040518083038186803b158015610f5157600080fd5b505afa158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f899190810190613ee4565b610fb6576001600160a01b0388166000908152601460209081526040808320338452909152902054610fba565b6000195b612809565b949350505050565b600080600160005414610fec5760405162461bcd60e51b8152600401610e2290614e94565b6002600081905550600073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b031663ed04e1c36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561104557600080fd5b505af1158015611059573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061107d919081019061418d565b9050611087612a19565b6001600160a01b0387166110a4576017546001600160a01b031696505b6004546001600160a01b038881166101009092041614156110d75760405162461bcd60e51b8152600401610e2290614df4565b8a15806110ec5750336001600160a01b038716145b6111085760405162461bcd60e51b8152600401610e2290614eb4565b6001600160a01b0387166000908152601260205260409020541561114b576001600160a01b03871660009081526012602052604090205488111561114b57600080fd5b60045461010090046001600160a01b03166000908152601260205260409020541561119c5760045461010090046001600160a01b031660009081526012602052604090205489111561119c57600080fd5b60006111a9888a8c612a99565b9050806111c85760405162461bcd60e51b8152600401610e2290614e14565b6111d0613caa565b6111d8613cd1565b3082526001600160a01b038916602080840182905260408401919091528101839052606081018c9052608081018b9052611210612cc6565b61121e8d8260200151612d6c565b82526020820181905260045465e35fa931a0009161124a9161010090046001600160a01b031690612dbb565b116112675760405162461bcd60e51b8152600401610e2290614e74565b6112816f4b3b4ca85a86c47a098a2240000000008e61278d565b60a082018990529c5061129a8e60008f8d86868d612ee2565b9550955050505073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b0316633fa4f2456040518163ffffffff1660e01b815260040160206040518083038186803b1580156112ee57600080fd5b505afa158015611302573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611326919081019061418d565b81146113445760405162461bcd60e51b8152600401610e2290614d34565b50600160005590999098509650505050505050565b60008060016000541461137e5760405162461bcd60e51b8152600401610e2290614e94565b6002600081905550600073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b031663ed04e1c36040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156113d757600080fd5b505af11580156113eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061140f919081019061418d565b90508961142e5760405162461bcd60e51b8152600401610e2290614ec4565b611436612a19565b6001600160a01b03871660009081526012602052604090205415611479576001600160a01b03871660009081526012602052604090205488111561147957600080fd5b34158061148557508734145b801561149957508715158061149957508a15155b80156114c057506001600160a01b0387161515806114b657503415155b806114c057508a15155b80156114dc57508a15806114dc5750336001600160a01b038716145b6114f85760405162461bcd60e51b8152600401610e2290614dc4565b6004546001600160a01b0388811661010090920416141561152b5760405162461bcd60e51b8152600401610e2290614d44565b611533612cc6565b61153b613caa565b611543613cd1565b3082526001600160a01b03888116602080850191909152908816604084015281018c905261157b8c61157560006127cf565b8d61267f565b8360000184604001856020018381525083815250838152505050508981608001818152505061168d8d8d601660009054906101000a90046001600160a01b03166001600160a01b031663ca74a5d9601060008f60016040516020016115e1929190614ae1565b6040516020818303038152906040528051906020012060001c8152602001908152602001600020546040518263ffffffff1660e01b81526004016116259190614ca4565b60206040518083038186803b15801561163d57600080fd5b505afa158015611651573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611675919081019061418d565b8c868660405180602001604052806000815250612ee2565b94509450505073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b0316633fa4f2456040518163ffffffff1660e01b815260040160206040518083038186803b1580156112ee57600080fd5b6017546001600160a01b031681565b60045460ff1681565b60106020526000908152604090205481565b60065481565b601d546001600160a01b031681565b6000610d4961172c610e6f565b61313f565b600080827f37aa2b7d583612f016e4a4de4292cb015139b3d7762663d06a53964912ea2fb660001b60405160200161176a929190614b07565b604051602081830303815290604052805190602001209050610c3b8160136000866001600160a01b03166001600160a01b03168152602001908152602001600020546117b4611bd8565b6001600160a01b038716600090815260116020526040902054613177565b600a5481565b6000806117e560006127cf565b905060006117f1610e6f565b9050808211156118045790039050610d4c565b505090565b60008315610b4257600061181f85610b20611ce6565b9250505061182b6126f8565b8111610b40576001600160a01b03831661184e576017546001600160a01b031692505b600060106000856001604051602001611868929190614ae1565b60408051601f19818403018152918152815160209283012083529082019290925281016000205460165460048054935163ca74a5d960e01b81529294506119a093600a936001600160a01b03938416936325decac09361010090930416918a918991869163ca74a5d9916118de918c9101614ca4565b60206040518083038186803b1580156118f657600080fd5b505afa15801561190a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061192e919081019061418d565b60016040518663ffffffff1660e01b8152600401611950959493929190614bbf565b60206040518083038186803b15801561196857600080fd5b505afa15801561197c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c17919081019061418d565b92505050610b42565b600080806001600160a01b0384166119ca576017546001600160a01b031693505b60006119d7858789612a99565b90506119e38882612d6c565b90945091506119f06126f8565b841115611a07575060009250829150819050611ab0565b611a17878563ffffffff61272e16565b6016546004805460405163d67f707760e01b8152939a506001600160a01b039283169363d67f707793611a5c9361010090930416918a918d918d918a918d9101614c01565b60206040518083038186803b158015611a7457600080fd5b505afa158015611a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611aac919081019061418d565b9250505b9450945094915050565b60008215801590611acb5750828210155b15610d3457611b96701d6329f1c35ca4bfabb9f5610000000000610c2f611b8068056bc75e2d63100000601660009054906101000a90046001600160a01b03166001600160a01b0316634699f8466040518163ffffffff1660e01b815260040160206040518083038186803b158015611b4357600080fd5b505afa158015611b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b7b919081019061418d565b6131d1565b610c23611b8d8888613213565b610c238961313f565b9050610d34565b6001600160a01b031660009081526013602052604090205490565b60045461010090046001600160a01b031681565b600d5481565b60085481565b600f546000908190426001600160581b03908116911614611bff57611bfb613245565b9150505b611c10611c0b826127cf565b613311565b91505090565b600080611c3561016d610c2f601c600b5461275390919063ffffffff16565b90506000611c5268056bc75e2d631000008363ffffffff6131d116565b90506000611c6f68056bc75e2d63100000610c2f84610c236117d8565b9050611c8d85610c2f83670de0b6b3a764000063ffffffff61275316565b95945050505050565b6000610d496000613340565b6001546001600160a01b031690565b601c546001600160a01b031681565b6001546000906001600160a01b0316611cd7613396565b6001600160a01b031614905090565b600f546000908190426001600160581b03908116911614611d0d57611d09613245565b9150505b611c10816127cf565b60408051601c8082526103a0820190925260609160009183916020820161038080388339019050509050632ea295fa60e01b81600081518110611d5557fe5b6001600160e01b03199092166020928302919091019091015280516328a02f1960e01b9082906001908110611d8657fe5b6001600160e01b031990921660209283029190910190910152805163f6b69f9960e01b9082906002908110611db757fe5b6001600160e01b031990921660209283029190910190910152805163a9059cbb60e01b9082906003908110611de857fe5b6001600160e01b03199092166020928302919091019091015280516323b872dd60e01b9082906004908110611e1957fe5b6001600160e01b03199092166020928302919091019091015280516354198ce960e01b9082906005908110611e4a57fe5b6001600160e01b0319909216602092830291909101909101528051633ffcdacb60e11b9082906006908110611e7b57fe5b6001600160e01b031990921660209283029190910190910152805163eebc508160e01b9082906007908110611eac57fe5b6001600160e01b031990921660209283029190910190910152805163612ef80b60e01b9082906008908110611edd57fe5b6001600160e01b03199092166020928302919091019091015280516344a4a00360e01b9082906009908110611f0e57fe5b6001600160e01b031990921660209283029190910190910152805163020c968760e61b908290600a908110611f3f57fe5b6001600160e01b031990921660209283029190910190910152805163b9fe1a8f60e01b908290600b908110611f7057fe5b6001600160e01b03199092166020928302919091019091015280516309ec6b6b60e01b908290600c908110611fa157fe5b6001600160e01b031990921660209283029190910190910152805163d65a502160e01b908290600d908110611fd257fe5b6001600160e01b03199092166020928302919091019091015280516302482d1360e31b908290600e90811061200357fe5b6001600160e01b031990921660209283029190910190910152805163083db41f60e21b908290600f90811061203457fe5b6001600160e01b0319909216602092830291909101909101528051638fb807c560e01b908290601090811061206557fe5b6001600160e01b03199092166020928302919091019091015280516320a6ce3d60e21b908290601190811061209657fe5b6001600160e01b0319909216602092830291909101909101528051630359f7eb60e11b90829060129081106120c757fe5b6001600160e01b03199092166020928302919091019091015280516301ad033560e61b90829060139081106120f857fe5b6001600160e01b0319909216602092830291909101909101528051630c6347df60e31b908290601490811061212957fe5b6001600160e01b03199092166020928302919091019091015280516247979360e41b908290601590811061215957fe5b6001600160e01b03199092166020928302919091019091015280516304395d9160e21b908290601690811061218a57fe5b6001600160e01b0319909216602092830291909101909101528051631b48f46b60e21b90829060179081106121bb57fe5b6001600160e01b031990921660209283029190910190910152805163095ea7b360e01b90829060189081106121ec57fe5b6001600160e01b03199092166020928302919091019091015280516318160ddd60e01b908290601990811061221d57fe5b6001600160e01b03199092166020928302919091019091015280516370a0823160e01b908290601a90811061224e57fe5b6001600160e01b0319909216602092830291909101909101528051636eb1769f60e11b908290601b90811061227f57fe5b60200260200101906001600160e01b03191690816001600160e01b03191681525050806122d6604051806040016040528060138152602001724c6f616e546f6b656e4c6f676963577262746360681b8152506124cc565b92509250509091565b6003805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610cc75780601f10610c9c57610100808354040283529160200191610cc7565b6018546001600160a01b031681565b601b546001600160a01b031681565b601d546000906001600160a01b0316158015906123f05750601d5460405163ca6860df60e01b81526001600160a01b039091169063ca6860df906123a0908690600401614b60565b60206040518083038186803b1580156123b857600080fd5b505afa1580156123cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123f09190810190613ee4565b1561249e5760408051600481526024810182526020810180516001600160e01b0316630a3e676160e41b17905290516000916060916001600160a01b0387169161243991614b49565b600060405180830381855afa9150503d8060008114612474576040519150601f19603f3d011682016040523d82523d6000602084013e612479565b606091505b5091509150811561249b57808060200190516124989190810190613e0f565b94505b50505b610b42338484600019612809565b6000610d3482613340565b60095481565b601a546001600160a01b031681565b805160009082906124e1575060009050610c3f565b50506020015190565b6000610d3461049f83610c1760006127cf565b60075481565b6001600160a01b03918216600090815260146020908152604080832093909416825291909152205490565b60126020526000908152604090205481565b6001600160a01b031660009081526011602052604090205490565b600b5481565b612569611cc0565b6125855760405162461bcd60e51b8152600401610e2290614e44565b61258e8161339a565b50565b6000806001600160a01b038516156126085760165460405163193bbe8960e31b81526001600160a01b039091169063c9ddf448906125d5908a908990600401614b7c565b600060405180830381600087803b1580156125ef57600080fd5b505af1158015612603573d6000803e3d6000fd5b505050505b61264e8c8c8c8c8c8c8c8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fc792505050565b915091509a509a98505050505050505050565b6019546001600160a01b031681565b65e35fa931a00081565b600681565b600080600061268e868661341c565b92506126db6126c3670de0b6b3a7640000611b7b6b0a3098c68eb9427db8000000610c2f83610c238a8c63ffffffff61275316565b610c2f88670de0b6b3a764000063ffffffff61275316565b90506126ed818763ffffffff6131d116565b915093509350939050565b600480546040516370a0823160e01b81526000926101009092046001600160a01b0316916370a0823191610eae91309101614b60565b600082820183811015610b425760405162461bcd60e51b8152600401610e2290614d94565b60008261276257506000610d34565b8282028284828161276f57fe5b0414610b425760405162461bcd60e51b8152600401610e2290614e34565b6000610b4283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613532565b6000601554600014610c3f57600c54806127f9576127f66127ee610e6f565b610c176126f8565b90505b610e4f818463ffffffff61272e16565b600060001982146128a2576040805180820190915260028152610c4d60f21b6020820152612840908390859063ffffffff61356916565b6001600160a01b038616600081815260146020908152604080832033808552925291829020849055905190927f628e75c63c1873bcd3885f7aee9f58ee36f60dc789b2a6b3a978c4189bc548ba91612899918791614ee4565b60405180910390a35b6001600160a01b0384166128c85760405162461bcd60e51b8152600401610e2290614d54565b6001600160a01b03851660009081526013602090815260408083205481518083019092526002825261189b60f11b92820192909252909190612913908390879063ffffffff61356916565b6001600160a01b0380891660009081526013602052604080822084905591891681529081205491925061294c828863ffffffff61272e16565b6001600160a01b0389166000908152601360205260408120829055909150612972611bd8565b601c549091506001600160a01b038b81169116148015906129a15750601c546001600160a01b038a8116911614155b156129be576129b28a868684613595565b6129be89848484613595565b886001600160a01b03168a6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8a604051612a019190614ca4565b60405180910390a35060019998505050505050505050565b600080356001600160e01b0319167fd46a704bc285dbd6ff5ad3863506260b1df02812f4f857c8cc852317a6ac64f2604051602001612a59929190614b2d565b6040516020818303038152906040528051906020012090506000815490508015612a955760405162461bcd60e51b8152600401610e2290614e44565b5050565b808215610b4257600080601660009054906101000a90046001600160a01b03166001600160a01b03166378d849ed6040518163ffffffff1660e01b815260040160206040518083038186803b158015612af157600080fd5b505afa158015612b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b299190810190613e0f565b60048054604051630a7549df60e21b81526001600160a01b03938416936329d5277c93612b62938c936101009091049092169101614b7c565b604080518083038186803b158015612b7957600080fd5b505afa158015612b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612bb191908101906141eb565b9150915081600014158015612bc557508015155b612be15760405162461bcd60e51b8152600401610e2290614e84565b6000612bf782610c2f888663ffffffff61275316565b60165460048054604051631a51577760e21b81529394506000936001600160a01b03938416936369455ddc93612c3a936101009004909116918d91889101614b97565b60206040518083038186803b158015612c5257600080fd5b505afa158015612c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612c8a919081019061418d565b9050868114612caa57612ca787610c2f848463ffffffff61275316565b91505b612cba828663ffffffff61272e16565b98975050505050505050565b600f5442906001600160581b0380831691161461258e5760165460048054604051630740ff7d60e51b81526001600160a01b039384169363e81fefa093612d169361010090049091169101614b60565b600060405180830381600087803b158015612d3057600080fd5b505af1158015612d44573d6000803e3d6000fd5b5050600f80546001600160581b0385166affffffffffffffffffffff19909116179055505050565b60008080612d8c670de0b6b3a7640000610c2f868863ffffffff61275316565b9050612da181612d9c60006127cf565b61341c565b9150612db1826224ea008361364b565b9250509250929050565b6000806000601660009054906101000a90046001600160a01b03166001600160a01b03166378d849ed6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e0e57600080fd5b505afa158015612e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612e469190810190613e0f565b601754604051630a7549df60e21b81526001600160a01b03928316926329d5277c92612e7a928a9290911690600401614b7c565b604080518083038186803b158015612e9157600080fd5b505afa158015612ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612ec991908101906141eb565b9092509050611c8d81610c2f868563ffffffff61275316565b600080612eed612a19565b612ef56126f8565b846020015111158015612f14575060208501516001600160a01b031615155b612f305760405162461bcd60e51b8152600401610e2290614de4565b60408501516001600160a01b0316612f565760208501516001600160a01b031660408601525b6000612f648787878c6136ac565b9050612f818560200151866060015161272e90919063ffffffff16565b60608601528815612fa7576060850151612fa1908a63ffffffff6131d116565b60608601525b60008915612fb3575060015b6000601060008a84604051602001612fcc929190614ae1565b6040516020818303038152906040528051906020012060001c8152602001908152602001600020549050601660009054906101000a90046001600160a01b03166001600160a01b031663d84ca25484838f868f8e8e8e6040518963ffffffff1660e01b81526004016130449796959493929190614cb2565b60408051808303818588803b15801561305c57600080fd5b505af1158015613070573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525061309591908101906141eb565b6080890152602088018190526130bd5760405162461bcd60e51b8152600401610e2290614e24565b601654602089015160405163f06a9c6b60e01b81526001600160a01b039092169163f06a9c6b916130f091600401614b60565b600060405180830381600087803b15801561310a57600080fd5b505af115801561311e573d6000803e3d6000fd5b50505050866020015187608001519450945050505097509795505050505050565b60008115610c3f576000613151613245565b509050610e4f83610c2f61016d610c238568056bc75e2d6310000063ffffffff61275316565b60008161318657506000610fbf565b508354611c8d816131c5670de0b6b3a76400006131b9886131ad898963ffffffff61390616565b9063ffffffff61394c16565b9063ffffffff6139b716565b9063ffffffff613a1b16565b6000610b4283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613569565b6000821580159061322357508115155b15610d3457611b9682610c2f8568056bc75e2d6310000063ffffffff61275316565b60165460048054604051630d1979fb60e41b8152600093849384936001600160a01b039283169363d1979fb09361328793309361010090049091169101614b7c565b60c06040518083038186803b15801561329f57600080fd5b505afa1580156132b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506132d791908101906142bf565b509196509450925061330a915068056bc75e2d631000009050610c2f6132fd82856131d1565b859063ffffffff61275316565b9150509091565b6015546000908061332457600e54610c3b565b610c3b81610c2f85670de0b6b3a764000063ffffffff61275316565b600080821561338957600f54426001600160581b0390811691161461336b57613367613245565b9150505b600061337982610c176126f8565b905080841115613387578093505b505b610c3b83612d9c836127cf565b3390565b6001600160a01b0381166133c05760405162461bcd60e51b8152600401610e2290614d74565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008061343461342e85610c17610e6f565b84613213565b600554600654600954600a54600b549495506000948594939291908288101561345b578297505b818811156134ce57968190039668056bc75e2d6310000082900380891115613481578098505b6134a286610c1768056bc75e2d63100000610c2f878a63ffffffff61275316565b96506134c687610c1783610c2f6134b9878d6131d1565b8e9063ffffffff61275316565b995050613524565b6134ef85610c1768056bc75e2d63100000610c2f8c8963ffffffff61275316565b98509395508593613506848663ffffffff61272e16565b95508689101561351857869850613524565b85891115613524578598505b505050505050505092915050565b600081836135535760405162461bcd60e51b8152600401610e229190614d23565b50600083858161355f57fe5b0495945050505050565b6000818484111561358d5760405162461bcd60e51b8152600401610e229190614d23565b505050900390565b6040516000906135cb9086907f37aa2b7d583612f016e4a4de4292cb015139b3d7762663d06a53964912ea2fb690602001614b07565b604051602081830303815290604052805190602001209050600083600014156135f75760009250613628565b8415613628576001600160a01b03861660009081526011602052604090205461362590839087908690613177565b90505b90556001600160a01b039093166000908152601160205260409020929092555050565b6000806136666301e13380610c2f878763ffffffff61275316565b9050600061368368056bc75e2d631000008363ffffffff6131d116565b90506136a281610c2f8668056bc75e2d6310000063ffffffff61275316565b9695505050505050565b60175460408401516020840151606085015160808601516000946001600160a01b039081169485949093909290918b168514156136fb5760405162461bcd60e51b8152600401610e2290614e54565b34965087156137a657604051632e1a7d4d60e01b81526001600160a01b03871690632e1a7d4d90613730908b90600401614ca4565b600060405180830381600087803b15801561374a57600080fd5b505af115801561375e573d6000803e3d6000fd5b5050505061376c8489613a61565b878311156137a1576016546040805160208101909152600081526137a19187916001600160a01b03909116908b870390613b02565b6137db565b601654604080518082019091526002815261323760f01b60208201526137db9187916001600160a01b03909116908690613b02565b801561381657601654604080518082019091526002815261064760f31b6020820152613816918d9133916001600160a01b0316908590613b62565b81156138f857861580159061382b5750818710155b156138c357856001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561386b57600080fd5b505af115801561387f573d6000803e3d6000fd5b5050601654604080518082019091526002815261323960f01b60208201526138b994508993506001600160a01b0390911691508590613b02565b81870396506138f8565b601654604080518082019091526002815261323960f01b60208201526138f891879133916001600160a01b0316908690613b62565b505050505050949350505050565b600081830381831280159061391b5750838113155b80613930575060008312801561393057508381135b610b425760405162461bcd60e51b8152600401610e2290614ea4565b60008261395b57506000610d34565b8260001914801561396f5750600160ff1b82145b1561398c5760405162461bcd60e51b8152600401610e2290614e64565b8282028284828161399957fe5b0514610b425760405162461bcd60e51b8152600401610e2290614e64565b6000816139d65760405162461bcd60e51b8152600401610e2290614ed4565b816000191480156139ea5750600160ff1b83145b15613a075760405162461bcd60e51b8152600401610e2290614e04565b6000828481613a1257fe5b05949350505050565b6000828201818312801590613a305750838112155b80613a455750600083128015613a4557508381125b610b425760405162461bcd60e51b8152600401610e2290614da4565b80471015613a815760405162461bcd60e51b8152600401610e2290614dd4565b6000826001600160a01b031682604051613a9a90614b55565b60006040518083038185875af1925050503d8060008114613ad7576040519150601f19603f3d011682016040523d82523d6000602084013e613adc565b606091505b5050905080613afd5760405162461bcd60e51b8152600401610e2290614db4565b505050565b604051613b5c90859063a9059cbb60e01b90613b249087908790602401614c5b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915283613b86565b50505050565b604051610e2b9086906323b872dd60e01b90613b2490889088908890602401614b97565b613b8f83613c71565b613bab5760405162461bcd60e51b8152600401610e2290614d64565b60006060846001600160a01b031684604051613bc79190614b49565b6000604051808303816000865af19150503d8060008114613c04576040519150601f19603f3d011682016040523d82523d6000602084013e613c09565b606091505b5091509150818390613c2e5760405162461bcd60e51b8152600401610e229190614d23565b50805115610e2b5780806020019051613c4a9190810190613ee4565b8390613c695760405162461bcd60e51b8152600401610e229190614d23565b505050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610fbf575050151592915050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8035610d3481615037565b8051610d3481615037565b8051610d348161504b565b8035610d3481615054565b60008083601f840112613d5b57600080fd5b50813567ffffffffffffffff811115613d7357600080fd5b602083019150836001820283011115613d8b57600080fd5b9250929050565b600082601f830112613da357600080fd5b8135613db6613db182614f42565b614f1b565b91508082526020830160208301858383011115613dd257600080fd5b613ddd838284614fbd565b50505092915050565b8051610d3481615054565b600060208284031215613e0357600080fd5b6000610fbf8484613d1d565b600060208284031215613e2157600080fd5b6000610fbf8484613d28565b60008060408385031215613e4057600080fd5b6000613e4c8585613d1d565b9250506020613e5d85828601613d1d565b9150509250929050565b600080600060608486031215613e7c57600080fd5b6000613e888686613d1d565b9350506020613e9986828701613d1d565b9250506040613eaa86828701613d3e565b9150509250925092565b60008060408385031215613ec757600080fd5b6000613ed38585613d1d565b9250506020613e5d85828601613d3e565b600060208284031215613ef657600080fd5b6000610fbf8484613d33565b600080600080600080600080610100898b031215613f1f57600080fd5b6000613f2b8b8b613d3e565b9850506020613f3c8b828c01613d3e565b9750506040613f4d8b828c01613d3e565b9650506060613f5e8b828c01613d3e565b9550506080613f6f8b828c01613d1d565b94505060a0613f808b828c01613d1d565b93505060c0613f918b828c01613d1d565b92505060e089013567ffffffffffffffff811115613fae57600080fd5b613fba8b828c01613d92565b9150509295985092959890939650565b6000806000806000806000806000806101208b8d031215613fea57600080fd5b6000613ff68d8d613d3e565b9a505060206140078d828e01613d3e565b99505060406140188d828e01613d3e565b98505060606140298d828e01613d3e565b975050608061403a8d828e01613d1d565b96505060a061404b8d828e01613d1d565b95505060c061405c8d828e01613d3e565b94505060e061406d8d828e01613d1d565b9350506101008b013567ffffffffffffffff81111561408b57600080fd5b6140978d828e01613d49565b92509250509295989b9194979a5092959850565b600080600080600080600080610100898b0312156140c857600080fd5b60006140d48b8b613d3e565b98505060206140e58b828c01613d3e565b97505060406140f68b828c01613d3e565b96505060606141078b828c01613d3e565b95505060806141188b828c01613d1d565b94505060a06141298b828c01613d1d565b93505060c0613f918b828c01613d3e565b60006020828403121561414c57600080fd5b813567ffffffffffffffff81111561416357600080fd5b610fbf84828501613d92565b60006020828403121561418157600080fd5b6000610fbf8484613d3e565b60006020828403121561419f57600080fd5b6000610fbf8484613de6565b6000806000606084860312156141c057600080fd5b6000613e888686613d3e565b600080604083850312156141df57600080fd5b6000613ed38585613d3e565b600080604083850312156141fe57600080fd5b600061420a8585613de6565b9250506020613e5d85828601613de6565b60008060006060848603121561423057600080fd5b600061423c8686613d3e565b935050602061424d86828701613d3e565b9250506040613eaa86828701613d1d565b6000806000806080858703121561427457600080fd5b60006142808787613d3e565b945050602061429187828801613d3e565b93505060406142a287828801613d3e565b92505060606142b387828801613d1d565b91505092959194509250565b60008060008060008060c087890312156142d857600080fd5b60006142e48989613de6565b96505060206142f589828a01613de6565b955050604061430689828a01613de6565b945050606061431789828a01613de6565b935050608061432889828a01613de6565b92505060a061433989828a01613de6565b9150509295509295509295565b60006143528383614410565b505060200190565b61436381614fac565b82525050565b61436381614f7d565b61436361437e82614f7d565b614ff5565b600061438e82614f70565b6143988185614f74565b93506143a383614f6a565b8060005b838110156143d15781516143bb8882614346565b97506143c683614f6a565b9250506001016143a7565b509495945050505050565b61436381614f88565b6143636143f182614f88565b615000565b61436381610d4c565b61436361440b82610d4c565b610d4c565b61436381614f8d565b61436361440b82614f8d565b600061443082614f70565b61443a8185614f74565b935061444a818560208601614fc9565b61445381615021565b9093019392505050565b600061446882614f70565b6144728185610c3f565b9350614482818560208601614fc9565b9290920192915050565b6000614499601483614f74565b733932b2b73a3930b731bc903b34b7b630ba34b7b760611b815260200192915050565b60006144c9600283614f74565b61031360f41b815260200192915050565b60006144e7600283614f74565b61313560f01b815260200192915050565b6000614505601e83614f74565b7f63616c6c20746f2061206e6f6e2d636f6e747261637420616464726573730000815260200192915050565b600061453e602683614f74565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000614586601d83614f74565b7f656e7472792070726963652061626f766520746865206d696e696d756d000000815260200192915050565b60006145bf601b83614f74565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006145f8602183614f74565b7f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f8152607760f81b602082015260400192915050565b600061463b603a83614f74565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207281527f6563697069656e74206d61792068617665207265766572746564000000000000602082015260400192915050565b600061469a600183614f74565b603760f81b815260200192915050565b60006146b7601d83614f74565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000815260200192915050565b60006146f0600283614f74565b610c8d60f21b815260200192915050565b600061470e600283614f74565b61313160f01b815260200192915050565b600061472c602183614f74565b7f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f8152607760f81b602082015260400192915050565b600061476f600283614f74565b61189960f11b815260200192915050565b600061478d600283614f74565b61323560f01b815260200192915050565b60006147ab602183614f74565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006147ee600c83614f74565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000614816600283614f74565b61191b60f11b815260200192915050565b6000614834602783614f74565b7f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f815266766572666c6f7760c81b602082015260400192915050565b600061487d601383614f74565b721c1c9a5b98da5c185b081d1bdbc81cdb585b1b606a1b815260200192915050565b60006148ac601d83614f74565b7f696e76616c6964207261746520636f6c6c61746572616c20746f6b656e000000815260200192915050565b6000610d34600083610c3f565b60006148f2600c83614f74565b6b1b9bdb9499595b9d1c985b9d60a21b815260200192915050565b600061491a602483614f74565b7f5369676e6564536166654d6174683a207375627472616374696f6e206f766572815263666c6f7760e01b602082015260400192915050565b6000614960601883614f74565b7f34303120757365206f66206578697374696e67206c6f616e0000000000000000815260200192915050565b6000614999600183614f74565b601b60f91b815260200192915050565b60006149b6602083614f74565b7f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f815260200192915050565b805160808301906149f38482614369565b506020820151614a066020850182614369565b506040820151614a196040850182614369565b506060820151613b5c6060850182614369565b8051610120830190614a3e84826143f6565b506020820151614a5160208501826143f6565b506040820151614a6460408501826143f6565b506060820151614a7760608501826143f6565b506080820151614a8a60808501826143f6565b5060a0820151614a9d60a08501826143f6565b5060c0820151614ab060c08501826143f6565b5060e0820151614ac360e08501826143f6565b50610100820151613b5c6101008501826143f6565b61436381614fa6565b6000614aed8285614372565b601482019150614afd82846143e5565b5060010192915050565b6000614b138285614372565b601482019150614b2382846143ff565b5060200192915050565b6000614b398285614419565b600482019150614b2382846143ff565b6000610b42828461445d565b6000610d34826148d8565b60208101610d348284614369565b60208101610d34828461435a565b60408101614b8a8285614369565b610b426020830184614369565b60608101614ba58286614369565b614bb26020830185614369565b610fbf60408301846143f6565b60a08101614bcd8288614369565b614bda6020830187614369565b614be760408301866143f6565b614bf460608301856143f6565b6136a260808301846143dc565b60c08101614c0f8289614369565b614c1c6020830188614369565b614c2960408301876143f6565b614c3660608301866143f6565b614c4360808301856143f6565b614c5060a08301846143f6565b979650505050505050565b60408101614c698285614369565b610b4260208301846143f6565b60408082528101614c878185614383565b9050610b4260208301846143f6565b60208101610d3482846143dc565b60208101610d3482846143f6565b6102408101614cc1828a6143f6565b614cce60208301896143f6565b614cdb60408301886143dc565b614ce860608301876143f6565b614cf560808301866149e2565b614d03610100830185614a2c565b818103610220830152614d168184614425565b9998505050505050505050565b60208082528101610b428184614425565b60208082528101610d348161448c565b60208082528101610d34816144bc565b60208082528101610d34816144da565b60208082528101610d34816144f8565b60208082528101610d3481614531565b60208082528101610d3481614579565b60208082528101610d34816145b2565b60208082528101610d34816145eb565b60208082528101610d348161462e565b60208082528101610d348161468d565b60208082528101610d34816146aa565b60208082528101610d34816146e3565b60208082528101610d3481614701565b60208082528101610d348161471f565b60208082528101610d3481614762565b60208082528101610d3481614780565b60208082528101610d348161479e565b60208082528101610d34816147e1565b60208082528101610d3481614809565b60208082528101610d3481614827565b60208082528101610d3481614870565b60208082528101610d348161489f565b60208082528101610d34816148e5565b60208082528101610d348161490d565b60208082528101610d3481614953565b60208082528101610d348161498c565b60208082528101610d34816149a9565b60408101614c6982856143f6565b60608101614f0082866143f6565b614bb260208301856143f6565b60208101610d348284614ad8565b60405181810167ffffffffffffffff81118282101715614f3a57600080fd5b604052919050565b600067ffffffffffffffff821115614f5957600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b6000610d3482614f9a565b151590565b6001600160e01b03191690565b6001600160a01b031690565b60ff1690565b6000610d34826000610d3482614f7d565b82818337506000910152565b60005b83811015614fe4578181015183820152602001614fcc565b83811115613b5c5750506000910152565b6000610d348261500b565b6000610d3482615016565b6000610d3482615031565b6000610d348261502b565b601f01601f191690565b60f81b90565b60601b90565b61504081614f7d565b811461258e57600080fd5b61504081614f88565b61504081610d4c56fea365627a7a72315820280499a116e7eadb38aa8729728c15a657f6bfd6d3ab49666a76a0cfc6e4b7686c6578706572696d656e74616cf564736f6c63430005110040",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "params": {
          "_owner": "The account owner of the iTokens.",
          "_spender": "The account allowed to send the iTokens."
        },
        "return": "The number of iTokens an account is allowing the spender  to send on its behalf."
      },
      "approve(address,uint256)": {
        "params": {
          "_spender": "The account address that will be able to spend the tokens.",
          "_value": "The amount of tokens allowed to spend."
        }
      },
      "assetBalanceOf(address)": {
        "return": "The user's balance of underlying token."
      },
      "avgBorrowInterestRate()": {
        "return": "The average borrow interest."
      },
      "balanceOf(address)": {
        "params": {
          "_owner": "The account owner of the iTokens."
        },
        "return": "The number of iTokens an account owns."
      },
      "borrow(bytes32,uint256,uint256,uint256,address,address,address,bytes)": {
        "params": {
          "borrower": "The one paying for the collateral.",
          "collateralTokenAddress": "The address of the token to be used as  collateral. Cannot be the loan token address.",
          "collateralTokenSent": "The amount of collateral tokens provided by the user.  (150% of the withdrawn amount worth in collateral tokens).",
          "initialLoanDuration": "The duration of the loan in seconds.  If the loan is not paid back until then, it'll need to be rolled over.",
          "loanId": "The ID of the loan, 0 for a new loan.",
          "receiver": "The one receiving the withdrawn amount.",
          "withdrawAmount": "The amount to be withdrawn (actually borrowed)."
        },
        "return": "New principal and new collateral added to loan."
      },
      "borrowInterestRate()": {
        "return": "The borrow interest rate."
      },
      "calculateSupplyInterestRate(uint256,uint256)": {
        "params": {
          "assetBorrow": "The amount of loan tokens on debt.",
          "assetSupply": "The amount of loan tokens supplied."
        },
        "return": "The next supply interest adjustment."
      },
      "checkPriceDivergence(uint256,address,uint256)": {
        "params": {
          "collateralTokenAddress": "The token address of collateral.",
          "loanTokenSent": "The amount of deposit.",
          "minEntryPrice": "Value of loan token in collateral"
        }
      },
      "checkpointPrice(address)": {
        "params": {
          "_user": "The user account as the mapping index."
        },
        "return": "The price on the checkpoint for this user."
      },
      "getBorrowAmountForDeposit(uint256,uint256,address)": {
        "params": {
          "collateralTokenAddress": "The token address of collateral.",
          "depositAmount": "The amount of deposit.",
          "initialLoanDuration": "The duration of the loan."
        },
        "return": "The amount of borrow allowed."
      },
      "getDepositAmountForBorrow(uint256,uint256,address)": {
        "params": {
          "borrowAmount": "The amount of borrow.",
          "collateralTokenAddress": "The token address of collateral.",
          "initialLoanDuration": "The duration of the loan."
        },
        "return": "The amount of deposit required."
      },
      "getEstimatedMarginDetails(uint256,uint256,uint256,address)": {
        "params": {
          "collateralTokenAddress": "The token address of collateral.",
          "collateralTokenSent": "The amount of collateral tokens provided by the user.",
          "leverageAmount": "The multiple of exposure: 2x ... 5x. The leverage with 18 decimals.",
          "loanTokenSent": "The number of loan tokens provided by the user."
        },
        "return": "The principal, the collateral and the interestRate."
      },
      "getListFunctionSignatures()": {
        "details": "This function will return the list of function signature in this contract that are available for public call Then this function will be called by LoanTokenLogicBeacon, and the function signatures will be registred in LoanTokenLogicBeacon.To save the gas we can just directly return the list of function signature from this pure function. The other workaround (fancy way) is we can create a storage for the list of the function signature, and then we can store each function signature to that storage from the constructor. Then, in this function we just need to return that storage variable.",
        "return": "The list of function signatures (bytes4[])"
      },
      "getMaxEscrowAmount(uint256)": {
        "details": "maxEscrowAmount = liquidity * (100 - interestForDuration) / 100",
        "params": {
          "leverageAmount": "The chosen multiplier with 18 decimals."
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "marginTrade(bytes32,uint256,uint256,uint256,address,address,uint256,bytes)": {
        "params": {
          "collateralTokenAddress": "The token address of collateral.",
          "collateralTokenSent": "The amount of collateral tokens provided by the user.",
          "leverageAmount": "The multiple of exposure: 2x ... 5x. The leverage with 18 decimals.",
          "loanDataBytes": "Additional loan data (not in use for token swaps).",
          "loanId": "The ID of the loan, 0 for a new loan.",
          "loanTokenSent": "The number of loan tokens provided by the user.",
          "minEntryPrice": "Value of loan token in collateral.",
          "trader": "The account that performs this trade."
        },
        "return": "New principal and new collateral added to trade."
      },
      "marginTradeAffiliate(bytes32,uint256,uint256,uint256,address,address,uint256,address,bytes)": {
        "params": {
          "affiliateReferrer": "The address of the referrer from affiliates program.",
          "collateralTokenAddress": "The token address of collateral.",
          "collateralTokenSent": "The amount of collateral tokens provided by the user.",
          "leverageAmount": "The multiple of exposure: 2x ... 5x. The leverage with 18 decimals.",
          "loanDataBytes": "Additional loan data (not in use for token swaps).",
          "loanId": "The ID of the loan, 0 for a new loan.",
          "loanTokenSent": "The number of loan tokens provided by the user.",
          "minEntryPrice": "Value of loan token in collateral.",
          "trader": "The account that performs this trade."
        },
        "return": "New principal and new collateral added to trade."
      },
      "marketLiquidity()": {
        "return": "The market liquidity."
      },
      "nextBorrowInterestRate(uint256)": {
        "params": {
          "borrowAmount": "The amount of tokens to borrow."
        },
        "return": "The next borrow interest rate."
      },
      "nextSupplyInterestRate(uint256)": {
        "params": {
          "supplyAmount": "The amount of tokens supplied."
        },
        "return": "Interest that lenders are currently receiving when supplying a given amount of tokens to the pool."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "profitOf(address)": {
        "params": {
          "user": "The user address."
        },
        "return": "The profit of a user."
      },
      "supplyInterestRate()": {
        "return": "Interest that lenders are currently receiving when supplying to the pool."
      },
      "tokenPrice()": {
        "return": "The loan token price."
      },
      "totalAssetBorrow()": {
        "return": "The total amount of loan tokens on debt."
      },
      "totalAssetSupply()": {
        "details": "Wrapper for internal _totalAssetSupply function.",
        "return": "The total amount of loan tokens on supply."
      },
      "totalSupply()": {
        "return": "The total number of iTokens in existence as of now."
      },
      "totalSupplyInterestRate(uint256)": {
        "params": {
          "assetSupply": "The amount of loan tokens supplied."
        },
        "return": "Interest that lenders are currently receiving when supplying a given amount of loan tokens to the pool."
      },
      "transfer(address,uint256)": {
        "params": {
          "_to": "The recipient of the tokens.",
          "_value": "The amount of tokens sent."
        },
        "return": "Success true/false."
      },
      "transferFrom(address,address,uint256)": {
        "return": "A boolean value indicating whether the operation succeeded."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {
      "allowance(address,address)": {
        "notice": "Get the amount of iTokens allowed to be spent by a  given account on behalf of the owner."
      },
      "approve(address,uint256)": {
        "notice": "Set an amount as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an {Approval} event."
      },
      "assetBalanceOf(address)": {
        "notice": "Get loan token balance."
      },
      "avgBorrowInterestRate()": {
        "notice": "Wrapper for average borrow interest."
      },
      "balanceOf(address)": {
        "notice": "Get the amount of iTokens owned by an account."
      },
      "borrow(bytes32,uint256,uint256,uint256,address,address,address,bytes)": {
        "notice": "Borrow funds from the pool. The underlying loan token may not be used as collateral."
      },
      "borrowInterestRate()": {
        "notice": "Get borrow interest rate. The minimum rate the next base protocol borrower will receive for variable-rate loans."
      },
      "calculateSupplyInterestRate(uint256,uint256)": {
        "notice": "Compute the next supply interest adjustment."
      },
      "checkPriceDivergence(uint256,address,uint256)": {
        "notice": "Check if entry price lies above a minimum"
      },
      "checkpointPrice(address)": {
        "notice": "Getter for the price checkpoint mapping."
      },
      "getBorrowAmountForDeposit(uint256,uint256,address)": {
        "notice": "Calculate the borrow allowed for a given deposit.     * The function for doing over-collateralized borrows against loan tokens expects a minimum amount of collateral be sent to satisfy collateral requirements of the loan, for borrow amount, interest rate, and initial loan duration. To determine appropriate values to pass to this function for a given loan, `getDepositAmountForBorrow` and 'getBorrowAmountForDeposit` are required."
      },
      "getDepositAmountForBorrow(uint256,uint256,address)": {
        "notice": "Calculate the deposit required to a given borrow.     * The function for doing over-collateralized borrows against loan tokens expects a minimum amount of collateral be sent to satisfy collateral requirements of the loan, for borrow amount, interest rate, and initial loan duration. To determine appropriate values to pass to this function for a given loan, `getDepositAmountForBorrow` and 'getBorrowAmountForDeposit` are required."
      },
      "getEstimatedMarginDetails(uint256,uint256,uint256,address)": {
        "notice": "Get margin information on a trade."
      },
      "getListFunctionSignatures()": {
        "notice": "This function is MANDATORY, which will be called by LoanTokenLogicBeacon and be registered. Every new public function, the signature needs to be included in this function."
      },
      "getMaxEscrowAmount(uint256)": {
        "notice": "Compute the maximum deposit amount under current market conditions."
      },
      "marginTrade(bytes32,uint256,uint256,uint256,address,address,uint256,bytes)": {
        "notice": "Borrow and immediately get into a position.     * Trading on margin is used to increase an investor's buying power. Margin is the amount of money required to open a position, while leverage is the multiple of exposure to account equity.     * Leverage allows you to trade positions LARGER than the amount of money in your trading account. Leverage is expressed as a ratio.     * When trading on margin, investors first deposit some token that then serves as collateral for the loan, and then pay ongoing interest payments on the money they borrow.     * Margin trading = taking a loan and swapping it: In order to open a margin trade position, 1.- The user calls marginTrade on the loan token contract. 2.- The loan token contract provides the loan and sends it for processing   to the protocol proxy contract. 3.- The protocol proxy contract uses the module LoanOpening to create a   position and swaps the loan tokens to collateral tokens. 4.- The Sovryn Swap network looks up the correct converter and swaps the   tokens. If successful, the position is being held by the protocol proxy contract, which is why positions need to be closed at the protocol proxy contract."
      },
      "marginTradeAffiliate(bytes32,uint256,uint256,uint256,address,address,uint256,address,bytes)": {
        "notice": "Wrapper for marginTrade invoking setAffiliatesReferrer to track  referral trade by affiliates program."
      },
      "marketLiquidity()": {
        "notice": "Get current liquidity. A part of total funds supplied are borrowed. Liquidity = supply - borrow"
      },
      "nextBorrowInterestRate(uint256)": {
        "notice": "Public wrapper for internal call."
      },
      "nextSupplyInterestRate(uint256)": {
        "notice": "Get interest rate w/ added supply."
      },
      "profitOf(address)": {
        "notice": "Wrapper for internal _profitOf low level function."
      },
      "supplyInterestRate()": {
        "notice": "Get interest rate."
      },
      "tokenPrice()": {
        "notice": "Loan token price calculation considering unpaid interests."
      },
      "totalAssetBorrow()": {
        "notice": "Get the total amount of loan tokens on debt. Calls protocol getTotalPrincipal function. In the context of borrowing, principal is the initial size of a loan. It can also be the amount still owed on a loan. If you take out a $50,000 mortgage, for example, the principal is $50,000. If you pay off $30,000, the principal balance now consists of the remaining $20,000."
      },
      "totalAssetSupply()": {
        "notice": "Get the total amount of loan tokens on supply."
      },
      "totalSupply()": {
        "notice": "Get the total supply of iTokens."
      },
      "totalSupplyInterestRate(uint256)": {
        "notice": "Get interest rate w/ added supply assets."
      },
      "transfer(address,uint256)": {
        "notice": "Transfer tokens wrapper. Sets token owner the msg.sender. Sets maximun allowance uint256(-1) to ensure tokens are always transferred.     * If the recipient (_to) is a vesting contract address, transfer the token to the tokenOwner of the vesting contract itself."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Moves `_value` loan tokens from `_from` to `_to` using the allowance mechanism. Calls internal _internalTransferFrom function."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54500,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "reentrancyLock",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 54316,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 483,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 485,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 487,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "decimals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 489,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "loanTokenAddress",
        "offset": 1,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 491,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "baseRate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 493,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "rateMultiplier",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 495,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "lowUtilBaseRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 497,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "lowUtilRateMultiplier",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 499,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "targetLevel",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 501,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "kinkLevel",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 503,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "maxScaleRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 505,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "_flTotalAssetSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 507,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "checkpointSupply",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 509,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "initialPrice",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 511,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "lastSettleTime_",
        "offset": 0,
        "slot": "15",
        "type": "t_uint88"
      },
      {
        "astId": 515,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "loanParamsIds",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 519,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "checkpointPrices_",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 523,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "transactionLimit",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 236,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "balances",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 242,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "allowed",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 244,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "totalSupply_",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 3991,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "sovrynContractAddress",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 3993,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "wrbtcTokenAddress",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 3995,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "target_",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 3997,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "admin",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      },
      {
        "astId": 3999,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "earlyAccessToken",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 4001,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "pauser",
        "offset": 0,
        "slot": "27",
        "type": "t_address"
      },
      {
        "astId": 4003,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "liquidityMiningAddress",
        "offset": 0,
        "slot": "28",
        "type": "t_address"
      },
      {
        "astId": 4005,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtc.sol:LoanTokenLogicWrbtc",
        "label": "stakingContractAddress",
        "offset": 0,
        "slot": "29",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint88": {
        "encoding": "inplace",
        "label": "uint88",
        "numberOfBytes": "11"
      }
    }
  }
}