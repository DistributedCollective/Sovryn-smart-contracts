{
  "address": "0xD58aEAA5E720B38f94542c51cFAC9B85fDB03551",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "loanPoolToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxCheckpoints",
          "type": "uint32"
        }
      ],
      "name": "DividendsCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newStakingContract",
          "type": "address"
        }
      ],
      "name": "MigratedToNewStakingContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        }
      ],
      "name": "TokenOwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "TokensWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "VotesDelegated",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FOUR_WEEKS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "SOV",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "approveOwnershipTransfer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTokenOwner",
          "type": "address"
        }
      ],
      "name": "changeTokenOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cliff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cliffAdded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_loanPoolToken",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_maxCheckpoints",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "collectDividends",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "durationLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "endDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "extendDurationFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "extendStaking",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeSharingCollector",
      "outputs": [
        {
          "internalType": "contract IFeeSharingCollector",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lastStakingSchedule",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "migrateToNewStakingContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "newImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "newTokenOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "receiveApproval",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "remainingStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newImplementation",
          "type": "address"
        }
      ],
      "name": "setImpl",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "name": "setMaxInterval",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_restartStakeSchedule",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastSchedule",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_restartStakeSchedule",
          "type": "uint256"
        }
      ],
      "name": "stakeTokensWithApproval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastSchedule",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IStaking",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "startDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tokenOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa3b2343baa052e36cf8cef39c0f6e3103b354f1443c89a06531afd28f920391b",
  "receipt": {
    "to": null,
    "from": "0xFEe171A152C02F336021fb9E79b4fAc2304a9E7E",
    "contractAddress": "0xD58aEAA5E720B38f94542c51cFAC9B85fDB03551",
    "transactionIndex": 0,
    "gasUsed": "2765559",
    "logsBloom": "0x
    "blockHash": "0x83b460105d3e4fe33f6c8951bf82d21700141196c51ee74af01859c500c95221",
    "transactionHash": "0xa3b2343baa052e36cf8cef39c0f6e3103b354f1443c89a06531afd28f920391b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5138045,
        "transactionHash": "0xa3b2343baa052e36cf8cef39c0f6e3103b354f1443c89a06531afd28f920391b",
        "address": "0xD58aEAA5E720B38f94542c51cFAC9B85fDB03551",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fee171a152c02f336021fb9e79b4fac2304a9e7e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x83b460105d3e4fe33f6c8951bf82d21700141196c51ee74af01859c500c95221"
      }
    ],
    "blockNumber": 5138045,
    "cumulativeGasUsed": "2765559",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "34e9e4d6fe817048075efc6a6d51d2ff",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanPoolToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxCheckpoints\",\"type\":\"uint32\"}],\"name\":\"DividendsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStakingContract\",\"type\":\"address\"}],\"name\":\"MigratedToNewStakingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"TokenOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"VotesDelegated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOUR_WEEKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOV\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveOwnershipTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenOwner\",\"type\":\"address\"}],\"name\":\"changeTokenOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cliffAdded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanPoolToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_maxCheckpoints\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"collectDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extendDurationFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"extendStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeSharingCollector\",\"outputs\":[{\"internalType\":\"contract IFeeSharingCollector\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastStakingSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrateToNewStakingContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newTokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"setImpl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"setMaxInterval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_restartStakeSchedule\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastSchedule\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_restartStakeSchedule\",\"type\":\"uint256\"}],\"name\":\"stakeTokensWithApproval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastSchedule\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Deployed by FourYearVestingFactory contract.\",\"methods\":{\"approveOwnershipTransfer()\":{\"details\":\"Token owner can only be modified when both vesting owner and token owner have approved. This function ascertains the approval of token owner.\"},\"changeTokenOwner(address)\":{\"details\":\"Modifies token owner. This must be followed by approval from token owner.\",\"params\":{\"_newTokenOwner\":\"Address of new token owner.\"}},\"collectDividends(address,uint32,address)\":{\"params\":{\"_loanPoolToken\":\"The loan pool token address.\",\"_maxCheckpoints\":\"Maximum number of checkpoints to be processed.\",\"_receiver\":\"The receiver of tokens or msg.sender\"}},\"delegate(address)\":{\"params\":{\"_delegatee\":\"The address to delegate votes to.\"}},\"extendStaking()\":{\"details\":\"Tokens are vested for 4 years. Since the max staking period is 3 years and the tokens are unlocked only after the first year(timeDuration) is passed, hence, we usually extend the duration of staking for all unlocked tokens for the first year by 3 years. In some cases, the timeDuration can differ.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveApproval(address,uint256,address,bytes)\":{\"params\":{\"_data\":\"The data will be used for low level call.\"}},\"setImpl(address)\":{\"details\":\"This function sets the new implementation address. It must also be approved by the Vesting owner.\",\"params\":{\"_newImplementation\":\"Address of the new implementation.\"}},\"setMaxInterval(uint256)\":{\"params\":{\"_interval\":\"Max interval for which tokens scheduled shall be staked.\"}},\"stakeTokens(uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to stake.\",\"_restartStakeSchedule\":\"The time from which staking schedule restarts. The issue is that we can only stake tokens for a max duration. Thus, we need to restart from the lastSchedule.\"},\"return\":\"lastSchedule The max duration for which tokens were staked.remainingAmount The amount outstanding - to be staked.\"},\"stakeTokensWithApproval(address,uint256,uint256)\":{\"details\":\"This function will be invoked from receiveApproval.SOV.approveAndCall -> this.receiveApproval -> this.stakeTokensWithApproval\",\"params\":{\"_amount\":\"The amount of tokens to stake.\",\"_restartStakeSchedule\":\"The time from which staking schedule restarts. The issue is that we can only stake tokens for a max duration. Thus, we need to restart from the lastSchedule.\",\"_sender\":\"The sender of SOV.approveAndCall\"},\"return\":\"lastSchedule The max duration for which tokens were staked.remainingAmount The amount outstanding - to be staked.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawTokens(address)\":{\"params\":{\"receiver\":\"The receiving address.\"}}},\"title\":\"Four Year Vesting Logic contract.\"},\"userdoc\":{\"methods\":{\"approveOwnershipTransfer()\":{\"notice\":\"Approve token owner change - only token Owner.\"},\"changeTokenOwner(address)\":{\"notice\":\"Change token owner - only vesting owner is allowed to change.\"},\"collectDividends(address,uint32,address)\":{\"notice\":\"Collect dividends from fee sharing proxy.\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` which are locked until lockDate to `delegatee`.\"},\"extendStaking()\":{\"notice\":\"Extends stakes(unlocked till timeDuration) for four year vesting contracts.\"},\"migrateToNewStakingContract()\":{\"notice\":\"Allows the owners to migrate the positions to a new staking contract.\"},\"receiveApproval(address,uint256,address,bytes)\":{\"notice\":\"Receives approval from SOV token.\"},\"setImpl(address)\":{\"notice\":\"Set address of the implementation - only Token Owner.\"},\"setMaxInterval(uint256)\":{\"notice\":\"Sets the max interval.\"},\"stakeTokens(uint256,uint256)\":{\"notice\":\"Stakes tokens according to the vesting schedule.\"},\"stakeTokensWithApproval(address,uint256,uint256)\":{\"notice\":\"Stakes tokens according to the vesting schedule.\"},\"withdrawTokens(address)\":{\"notice\":\"Withdraws unlocked tokens from the staking contract and forwards them to an address specified by the token owner.\"}},\"notice\":\"Staking, delegating and withdrawal functionality.\"}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol\":\"FourYearVestingLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/governance/ApprovalReceiver.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"./ErrorDecoder.sol\\\";\\nimport \\\"../token/IApproveAndCall.sol\\\";\\n\\n/**\\n * @title Base contract for receiving approval from SOV token.\\n */\\ncontract ApprovalReceiver is ErrorDecoder, IApproveAndCall {\\n    modifier onlyThisContract() {\\n        // Accepts calls only from receiveApproval function.\\n        require(msg.sender == address(this), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _data The data will be used for low level call.\\n     */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external {\\n        // Accepts calls only from SOV token.\\n        require(msg.sender == _getToken(), \\\"unauthorized\\\");\\n        require(msg.sender == _token, \\\"unauthorized\\\");\\n\\n        // Only allowed methods.\\n        bool isAllowed = false;\\n        bytes4[] memory selectors = _getSelectors();\\n        bytes4 sig = _getSig(_data);\\n        for (uint256 i = 0; i < selectors.length; i++) {\\n            if (sig == selectors[i]) {\\n                isAllowed = true;\\n                break;\\n            }\\n        }\\n        require(isAllowed, \\\"method is not allowed\\\");\\n\\n        // Check sender and amount.\\n        address sender;\\n        uint256 amount;\\n        (, sender, amount) = abi.decode(\\n            abi.encodePacked(bytes28(0), _data),\\n            (bytes32, address, uint256)\\n        );\\n        require(sender == _sender, \\\"sender mismatch\\\");\\n        require(amount == _amount, \\\"amount mismatch\\\");\\n\\n        _call(_data);\\n    }\\n\\n    /**\\n     * @notice Returns token address, only this address can be a sender for receiveApproval.\\n     * @dev Should be overridden in child contracts, otherwise error will be thrown.\\n     * @return By default, 0x. When overriden, the token address making the call.\\n     */\\n    function _getToken() internal view returns (address) {\\n        return address(0);\\n    }\\n\\n    /**\\n     * @notice Returns list of function selectors allowed to be invoked.\\n     * @dev Should be overridden in child contracts, otherwise error will be thrown.\\n     * @return By default, empty array. When overriden, allowed selectors.\\n     */\\n    function _getSelectors() internal pure returns (bytes4[] memory) {\\n        return new bytes4[](0);\\n    }\\n\\n    /**\\n     * @notice Makes call and reverts w/ enhanced error message.\\n     * @param _data Error message as bytes.\\n     */\\n    function _call(bytes memory _data) internal {\\n        (bool success, bytes memory returnData) = address(this).call(_data);\\n        if (!success) {\\n            if (returnData.length <= ERROR_MESSAGE_SHIFT) {\\n                revert(\\\"receiveApproval: Transaction execution reverted.\\\");\\n            } else {\\n                revert(_addErrorMessage(\\\"receiveApproval: \\\", string(returnData)));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Extracts the called function selector, a hash of the signature.\\n     * @dev The first four bytes of the call data for a function call specifies\\n     * the function to be called. It is the first (left, high-order in big-endian)\\n     * four bytes of the Keccak-256 (SHA-3) hash of the signature of the function.\\n     * Solidity doesn't yet support a casting of byte[4] to bytes4.\\n     * Example:\\n     *  msg.data:\\n     *    0xcdcd77c000000000000000000000000000000000000000000000000000000000000\\n     *    000450000000000000000000000000000000000000000000000000000000000000001\\n     *  selector (or method ID): 0xcdcd77c0\\n     *  signature: baz(uint32,bool)\\n     * @param _data The msg.data from the low level call.\\n     * @return sig First 4 bytes of msg.data i.e. the selector, hash of the signature.\\n     */\\n    function _getSig(bytes memory _data) internal pure returns (bytes4 sig) {\\n        assembly {\\n            sig := mload(add(_data, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfec344456774fa83b0885dd71825ccb6780be8db63c394f3ca09107977c65429\"},\"contracts/governance/ErrorDecoder.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Base contract to properly handle returned data on failed calls\\n * @dev On EVM if the return data length of a call is less than 68,\\n * then the transaction fails silently without a revert message!\\n *\\n * As described in the Solidity documentation\\n * https://solidity.readthedocs.io/en/v0.5.17/control-structures.html#revert\\n * the revert reason is an ABI-encoded string consisting of:\\n * 0x08c379a0 // Function selector (method id) for \\\"Error(string)\\\" signature\\n * 0x0000000000000000000000000000000000000000000000000000000000000020 // Data offset\\n * 0x000000000000000000000000000000000000000000000000000000000000001a // String length\\n * 0x4e6f7420656e6f7567682045746865722070726f76696465642e000000000000 // String data\\n *\\n * Another example, debug data from test:\\n *   0x08c379a0\\n *   0000000000000000000000000000000000000000000000000000000000000020\\n *   0000000000000000000000000000000000000000000000000000000000000034\\n *   54696d656c6f636b3a3a73657444656c61793a2044656c6179206d7573742065\\n *   7863656564206d696e696d756d2064656c61792e000000000000000000000000\\n *\\n * Parsed into:\\n *   Data offset: 20\\n *   Length: 34\\n *   Error message:\\n *     54696d656c6f636b3a3a73657444656c61793a2044656c6179206d7573742065\\n *     7863656564206d696e696d756d2064656c61792e000000000000000000000000\\n */\\ncontract ErrorDecoder {\\n    uint256 constant ERROR_MESSAGE_SHIFT = 68; // EVM silent revert error string length\\n\\n    /**\\n     * @notice Concats two error strings taking into account ERROR_MESSAGE_SHIFT.\\n     * @param str1 First string, usually a hardcoded context written by dev.\\n     * @param str2 Second string, usually the error message from the reverted call.\\n     * @return The concatenated error string\\n     */\\n    function _addErrorMessage(string memory str1, string memory str2)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory bytesStr1 = bytes(str1);\\n        bytes memory bytesStr2 = bytes(str2);\\n        string memory str12 =\\n            new string(bytesStr1.length + bytesStr2.length - ERROR_MESSAGE_SHIFT);\\n        bytes memory bytesStr12 = bytes(str12);\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < bytesStr1.length; i++) {\\n            bytesStr12[j++] = bytesStr1[i];\\n        }\\n        for (uint256 i = ERROR_MESSAGE_SHIFT; i < bytesStr2.length; i++) {\\n            bytesStr12[j++] = bytesStr2[i];\\n        }\\n        return string(bytesStr12);\\n    }\\n}\\n\",\"keccak256\":\"0xa0fa7986924aab574ca9e7c265f8c7bf00671ba1d86dbad143df7c14455f1c6a\"},\"contracts/governance/IFeeSharingCollector.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for contract governance/FeeSharingCollector/FeeSharingCollector.sol\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * */\\ninterface IFeeSharingCollector {\\n    function withdrawFees(address[] calldata _token) external;\\n\\n    function transferTokens(address _token, uint96 _amount) external;\\n\\n    function withdraw(\\n        address _loanPoolToken,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7794cb434d9395ea983dcf8ded48db5b68897a338429320f60172c4caa47fb40\"},\"contracts/governance/Staking/interfaces/IStaking.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Interface for Staking modules governance/Staking/modules\\n */\\n\\ninterface IStaking {\\n    /*************************** StakingAdminModule ***************************/\\n\\n    /**\\n     * @notice Add account to Admins ACL.\\n     * @param _admin The addresses of the account to grant permissions.\\n     * */\\n    function addAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Remove account from Admins ACL.\\n     * @param _admin The addresses of the account to revoke permissions.\\n     * */\\n    function removeAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Add account to pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function addPauser(address _pauser) external;\\n\\n    /**\\n     * @notice Remove account from pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function removePauser(address _pauser) external;\\n\\n    /**\\n     * @notice Pause/unpause contract\\n     * @param _pause true when pausing, false when unpausing\\n     * */\\n    function pauseUnpause(bool _pause) external;\\n\\n    /**\\n     * @notice Freeze contract - disable all functions\\n     * @param _freeze true when freezing, false when unfreezing\\n     * @dev When freezing, pause is always applied too. When unfreezing, the contract is left in paused stated.\\n     * */\\n    function freezeUnfreeze(bool _freeze) external;\\n\\n    /**\\n     * @notice Allows the owner to set a fee sharing proxy contract.\\n     * We need it for unstaking with slashing.\\n     * @param _feeSharing The address of FeeSharingCollectorProxy contract.\\n     * */\\n    function setFeeSharing(address _feeSharing) external;\\n\\n    /**\\n     * @notice Allow the owner to set weight scaling.\\n     * We need it for unstaking with slashing.\\n     * @param _weightScaling The weight scaling.\\n     * */\\n    function setWeightScaling(uint96 _weightScaling) external;\\n\\n    /**\\n     * @notice Allow the owner to set a new staking contract.\\n     * As a consequence it allows the stakers to migrate their positions\\n     * to the new contract.\\n     * @dev Doesn't have any influence as long as migrateToNewStakingContract\\n     * is not implemented.\\n     * @param _newStakingContract The address of the new staking contract.\\n     * */\\n    function setNewStakingContract(address _newStakingContract) external;\\n\\n    /**\\n     * @notice Allow a staker to migrate his positions to the new staking contract.\\n     * @dev Staking contract needs to be set before by the owner.\\n     * Currently not implemented, just needed for the interface.\\n     *      In case it's needed at some point in the future,\\n     *      the implementation needs to be changed first.\\n     * */\\n    function migrateToNewStakingContract() external; // dummy - not implemented as of now\\n\\n    /*************************** StakingGovernanceModule ***************************/\\n\\n    /**\\n     * @notice Compute the total voting power at a given time.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @param time The timestamp for which to calculate the total voting power.\\n     * @return The total voting power at the given time.\\n     * */\\n    function getPriorTotalVotingPower(uint32 blockNumber, uint256 time)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Get the current votes balance for a user account.\\n     * @param account The address to get votes balance.\\n     * @dev This is a wrapper to simplify arguments. The actual computation is\\n     * performed on WeightedStaking parent contract.\\n     * @return The number of current votes for a user account.\\n     * */\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of votes for a delegatee as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will revert\\n     * to prevent misinformation.\\n     *      Used for Voting, not for fee sharing.\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The number of votes the delegatee had as of the given block.\\n     * */\\n    function getPriorVotes(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The staking date to compute the power for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorStakeByDateForDelegatee(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an unlocking date as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * TODO: WeightedStaking::getPriorTotalStakesForDate should probably better\\n     * be internal instead of a public function.\\n     * @param date The date to check the stakes for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorTotalStakesForDate(uint256 date, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` which are locked until lockDate to `delegatee`.\\n     * @param delegatee The address to delegate votes to.\\n     * @param lockDate the date if the position to delegate.\\n     * */\\n    function delegate(address delegatee, uint256 lockDate) external;\\n\\n    /**\\n     * @notice Delegates votes from signatory to a delegatee account.\\n     * Voting with EIP-712 Signatures.\\n     *\\n     * Voting power can be delegated to any address, and then can be used to\\n     * vote on proposals. A key benefit to users of by-signature functionality\\n     * is that they can create a signed vote transaction for free, and have a\\n     * trusted third-party spend rBTC(or ETH) on gas fees and write it to the\\n     * blockchain for them.\\n     *\\n     * The third party in this scenario, submitting the SOV-holder\\u2019s signed\\n     * transaction holds a voting power that is for only a single proposal.\\n     * The signatory still holds the power to vote on their own behalf in\\n     * the proposal if the third party has not yet published the signed\\n     * transaction that was given to them.\\n     *\\n     * @dev The signature needs to be broken up into 3 parameters, known as\\n     * v, r and s:\\n     * const r = '0x' + sig.substring(2).substring(0, 64);\\n     * const s = '0x' + sig.substring(2).substring(64, 128);\\n     * const v = '0x' + sig.substring(2).substring(128, 130);\\n     *\\n     * @param delegatee The address to delegate votes to.\\n     * @param lockDate The date until which the position is locked.\\n     * @param nonce The contract state required to match the signature.\\n     * @param expiry The time at which to expire the signature.\\n     * @param v The recovery byte of the signature.\\n     * @param r Half of the ECDSA signature pair.\\n     * @param s Half of the ECDSA signature pair.\\n     * */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 lockDate,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /*************************** StakingStakeModule ***************************/\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stake(\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @dev This function will be invoked from receiveApproval\\n     * @dev SOV.approveAndCall -> this.receiveApproval -> this.stakeWithApproval\\n     * @param sender The sender of SOV.approveAndCall\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeWithApproval(\\n        address sender,\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _data The data will be used for low level call.\\n     */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Extend the staking duration until the specified date.\\n     * @param previousLock The old unlocking timestamp.\\n     * @param until The new unlocking timestamp in seconds.\\n     * */\\n    function extendStakingDuration(uint256 previousLock, uint256 until) external;\\n\\n    /**\\n     * @dev DO NOT USE this misspelled function. Use stakeBySchedule function instead.\\n     * This function cannot be deprecated while we have non-upgradeable vesting contracts.\\n     * */\\n    function stakesBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Stake tokens according to the vesting schedule.\\n     * @param amount The amount of tokens to stake.\\n     * @param cliff The time interval to the first withdraw.\\n     * @param duration The staking duration.\\n     * @param intervalLength The length of each staking interval when cliff passed.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Get the number of staked tokens held by the user account.\\n     * @dev Iterate checkpoints adding up stakes.\\n     * @param account The address of the account to get the balance of.\\n     * @return The number of tokens held.\\n     * */\\n    function balanceOf(address account) external view returns (uint96 balance);\\n\\n    /**\\n     * @notice Get the current number of tokens staked for a day.\\n     * @param lockedTS The timestamp to get the staked tokens for.\\n     * */\\n    function getCurrentStakedUntil(uint256 lockedTS) external view returns (uint96);\\n\\n    /**\\n     * @notice Get list of stakes for a user account.\\n     * @param account The address to get stakes.\\n     * @return The arrays of dates and stakes.\\n     * */\\n    function getStakes(address account)\\n        external\\n        view\\n        returns (uint256[] memory dates, uint96[] memory stakes);\\n\\n    /**\\n     * @notice Unstaking is possible every 2 weeks only. This means, to\\n     * calculate the key value for the staking checkpoints, we need to\\n     * map the intended timestamp to the closest available date.\\n     * @param timestamp The unlocking timestamp.\\n     * @return The actual unlocking date (might be up to 2 weeks shorter than intended).\\n     * */\\n    function timestampToLockDate(uint256 timestamp) external view returns (uint256);\\n\\n    /*************************** StakingStorageModule ***************************/\\n\\n    /// @notice The maximum duration to stake tokens\\n    /// @return MAX_DURATION to stake tokens\\n    function getStorageMaxDurationToStakeTokens() external pure returns (uint256);\\n\\n    /// @notice The maximum possible voting weight before adding +1 (actually 10, but need 9 for computation).\\n    /// @return uint256(MAX_VOTING_WEIGHT);\\n    function getStorageMaxVotingWeight() external pure returns (uint256);\\n\\n    /// @notice weight is multiplied with this factor (for allowing decimals, like 1.2x).\\n    /// @dev MAX_VOTING_WEIGHT * WEIGHT_FACTOR needs to be < 792, because there are 100,000,000 SOV with 18 decimals\\n    /// @return uint256(WEIGHT_FACTOR);\\n    function getStorageWeightFactor() external pure returns (uint256);\\n\\n    /// @return uint256(DEFAULT_WEIGHT_SCALING);\\n    function getStorageDefaultWeightScaling() external pure returns (uint256);\\n\\n    /// @notice return (uint256(MIN_WEIGHT_SCALING), uint256(MAX_WEIGHT_SCALING))\\n    function getStorageRangeForWeightScaling()\\n        external\\n        pure\\n        returns (uint256 minWeightScaling, uint256 maxWeightScaling);\\n\\n    /// @notice The EIP-712 typehash for the contract's domain.\\n    /// @return uint256(DOMAIN_TYPEHASH);\\n    function getStorageDomainTypehash() external pure returns (uint256);\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\\n    /// @return uint256(DELEGATION_TYPEHASH);\\n    function getStorageDelegationTypehash() external pure returns (uint256);\\n\\n    /// @return name;\\n    function getStorageName() external view returns (string memory);\\n\\n    /// AUTOGENERATED FUNCTIONS FROM THE STAKING STORAGE PUBLIC VARIABLES ///\\n\\n    /// @notice The timestamp of contract creation. Base for the staking period calculation.\\n    function kickoffTS() external view returns (uint256);\\n\\n    /// @notice The token to be staked\\n    function SOVToken() external view returns (address);\\n\\n    /// @notice Stakers delegated voting power\\n    /// @param staker - the delegating address\\n    /// @param until - delegated voting\\n    /// @return _delegate - voting power delegated to address\\n    function delegates(address staker, uint256 until) external view returns (address _delegate);\\n\\n    /// @notice If this flag is set to true, all tokens are unlocked immediately\\n    /// see function unlockAllTokens() for details\\n    function allUnlocked() external view returns (bool);\\n\\n    /// @notice Used for stake migrations to a new staking contract with a different storage structure\\n    function newStakingContract() external view returns (address);\\n\\n    /// CHECKPOINTS\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 stake;\\n    }\\n\\n    /// @notice A record of tokens to be unstaked at a given time in total.\\n    /// For total voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev totalStakingCheckpoints[date][index] is a checkpoint\\n    function totalStakingCheckpoints(uint256 date, uint32 index)\\n        external\\n        view\\n        returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date.\\n    /// @dev numTotalStakingCheckpoints[date] is a number.\\n    function numTotalStakingCheckpoints(uint256 date)\\n        external\\n        view\\n        returns (bytes32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which were delegated to a certain address.\\n    /// For delegatee voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev delegateStakingCheckpoints[delegatee][date][index] is a checkpoint.\\n    function delegateStakingCheckpoints(\\n        address delagatee,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per delegate.\\n    /// @dev numDelegateStakingCheckpoints[delegatee][date] is a number.\\n    function numDelegateStakingCheckpoints(address delegatee, uint256 date)\\n        external\\n        view\\n        returns (bytes32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which per user address (address -> lockDate -> stake checkpoint)\\n    /// @dev userStakingCheckpoints[user][date][index] is a checkpoint.\\n    function userStakingCheckpoints(\\n        address user,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per user.\\n    /// @dev numUserStakingCheckpoints[user][date] is a number\\n    function numUserStakingCheckpoints(address user, uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of states for signing / validating signatures\\n    /// @dev nonces[user] is a number.\\n    function nonces(address user) external view returns (uint256 nonce);\\n\\n    /// SLASHING ///\\n\\n    /// @notice the address of FeeSharingCollectorProxy contract, we need it for unstaking with slashing.\\n    function feeSharing() external view returns (address);\\n\\n    /// @notice used for weight scaling when unstaking with slashing.\\n    /// @return uint96 DEFAULT_WEIGHT_SCALING\\n    function weightScaling() external view returns (uint96);\\n\\n    /// @notice List of vesting contracts, tokens for these contracts won't be slashed if unstaked by governance.\\n    /// @dev vestingWhitelist[contract] is true/false.\\n    function vestingWhitelist(address isWhitelisted) external view returns (bool);\\n\\n    /// @dev user => flag whether user has admin role.\\n    /// @dev multisig should be an admin, admin can invoke only governanceWithdrawVesting function,\\n    /// \\tthis function works only with Team Vesting contracts\\n    function admins(address isAdmin) external view returns (bool);\\n\\n    /// @dev vesting contract code hash => flag whether it's registered code hash\\n    function vestingCodeHashes(bytes32 vestingLogicCodeHash) external view returns (bool);\\n\\n    /// @notice A record of tokens to be unstaked from vesting contract at a given time (lockDate -> vest checkpoint)\\n    /// @dev vestingCheckpoints[date][index] is a checkpoint.\\n    function vestingCheckpoints(uint256 date, uint32 index)\\n        external\\n        view\\n        returns (Checkpoint memory);\\n\\n    /// @notice The number of total vesting checkpoints for each date.\\n    /// @dev numVestingCheckpoints[date] is a number.\\n    function numVestingCheckpoints(uint256 date) external view returns (uint32 checkpointsQty);\\n\\n    ///@notice vesting registry contract PROXY address\\n    function vestingRegistryLogic() external view returns (address);\\n\\n    /// @dev user => flag whether user has pauser role.\\n    function pausers(address isPauser) external view returns (bool);\\n\\n    /// @dev Staking contract is paused\\n    function paused() external view returns (bool);\\n\\n    /// @dev Staking contract is frozen\\n    function frozen() external view returns (bool);\\n\\n    /*************************** StakingVestingModule ***************************/\\n\\n    /**\\n     * @notice Return flag whether the given address is a registered vesting contract.\\n     * @param stakerAddress the address to check\\n     */\\n    function isVestingContract(address stakerAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Remove vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function removeContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Add vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function addContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Determine the prior number of vested stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorVestingStakeByDate(uint256 date, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * @param date The staking date to compute the power for. Adjusted to the next valid lock date, if necessary.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedVestingStakeByDate(\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Determine the prior weighted vested amount for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     * TODO: WeightedStaking::getPriorVestingWeightedStake is using the variable name \\\"votes\\\"\\n     * to add up token stake, and that could be misleading.\\n     *\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorVestingWeightedStake(uint256 blockNumber, uint256 date)\\n        external\\n        view\\n        returns (uint96 votes);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorUserStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Sets the users' vesting stakes for a giving lock dates and writes checkpoints.\\n     * @param lockedDates The arrays of lock dates.\\n     * @param values The array of values to add to the staked balance.\\n     */\\n    function setVestingStakes(uint256[] calldata lockedDates, uint96[] calldata values) external;\\n\\n    /**\\n     * @notice sets vesting registry\\n     * @param _vestingRegistryProxy the address of vesting registry proxy contract\\n     * @dev _vestingRegistryProxy can be set to 0 as this function can be reused by\\n     * various other functionalities without the necessity of linking it with Vesting Registry\\n     */\\n    function setVestingRegistry(address _vestingRegistryProxy) external;\\n\\n    /*************************** StakingWithdrawModule ***************************/\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens if they are unlocked.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * */\\n    function withdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting\\n     * @dev **WARNING** This function should not be no longer used by Sovryn Protocol.\\n     * Sovryn protocol will use the cancelTeamVesting function for the withdrawal moving forward.\\n     * */\\n    function governanceWithdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw tokens for vesting contract.\\n     * @param vesting The address of Vesting contract.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting.\\n     * */\\n    function governanceWithdrawVesting(address vesting, address receiver) external;\\n\\n    /**\\n     * @notice Get available and punished amount for withdrawing.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * */\\n    function getWithdrawAmounts(uint96 amount, uint256 until)\\n        external\\n        view\\n        returns (uint96, uint96);\\n\\n    /**\\n     * @notice Allow the owner to unlock all tokens in case the staking contract\\n     * is going to be replaced\\n     * Note: Not reversible on purpose. once unlocked, everything is unlocked.\\n     * The owner should not be able to just quickly unlock to withdraw his own\\n     * tokens and lock again.\\n     * @dev Last resort.\\n     * */\\n    function unlockAllTokens() external;\\n\\n    /*************************** WeightedStakingModule ***************************/\\n\\n    /**\\n     * @notice Determine the prior weighted stake for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     *\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The date/timestamp of the unstaking time.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorWeightedStake(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96 priorWeightedStake);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * TODO: WeightedStaking::weightedStakeByDate should probably better\\n     * be internal instead of a public function.\\n     * @param account The user address.\\n     * @param date The staking date to compute the power for.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Compute the weight for a specific date.\\n     * @param date The unlocking date.\\n     * @param startDate We compute the weight for the tokens staked until 'date' on 'startDate'.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function computeWeightByDate(uint256 date, uint256 startDate)\\n        external\\n        pure\\n        returns (uint96 weight);\\n\\n    /**\\n     * @notice Returns public constant MAX_DURATION\\n     * preserved for backwards compatibility\\n     * Use getStorageMaxDurationToStakeTokens()\\n     * @return uint96 MAX_DURATION for staking\\n     **/\\n    function MAX_DURATION() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() external view returns (bool);\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @notice Governance withdraw vesting directly through staking contract.\\n     * This direct withdraw vesting solves the out of gas issue when there are too many iterations when withdrawing.\\n     * This function only allows cancelling vesting contract of the TeamVesting type.\\n     *\\n     * @param vesting The vesting address.\\n     * @param receiver The receiving address.\\n     * @param startFrom The start value for the iterations.\\n     */\\n    function cancelTeamVesting(\\n        address vesting,\\n        address receiver,\\n        uint256 startFrom\\n    ) external;\\n\\n    /**\\n     * @notice Max iteration for direct withdrawal from staking to prevent out of gas issue.\\n     *\\n     * @return max iteration value.\\n     */\\n    function getMaxVestingWithdrawIterations() external view returns (uint256);\\n\\n    /**\\n     * @dev set max withdraw iterations.\\n     *\\n     * @param maxIterations new max iterations value.\\n     */\\n    function setMaxVestingWithdrawIterations(uint256 maxIterations) external;\\n}\\n\",\"keccak256\":\"0x5d400d10ac5d54f0a1103cf34a1048e585f5c6f20be3f5192b5bc7b277e5bfb0\"},\"contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IFourYearVesting.sol\\\";\\nimport \\\"../../ApprovalReceiver.sol\\\";\\nimport \\\"./FourYearVestingStorage.sol\\\";\\nimport \\\"../../../openzeppelin/SafeMath.sol\\\";\\n\\n/**\\n * @title Four Year Vesting Logic contract.\\n * @notice Staking, delegating and withdrawal functionality.\\n * @dev Deployed by FourYearVestingFactory contract.\\n * */\\ncontract FourYearVestingLogic is IFourYearVesting, FourYearVestingStorage, ApprovalReceiver {\\n    using SafeMath for uint256;\\n\\n    /* Events */\\n    event TokensStaked(address indexed caller, uint256 amount);\\n    event VotesDelegated(address indexed caller, address delegatee);\\n    event TokensWithdrawn(address indexed caller, address receiver);\\n    event DividendsCollected(\\n        address indexed caller,\\n        address loanPoolToken,\\n        address receiver,\\n        uint32 maxCheckpoints\\n    );\\n    event MigratedToNewStakingContract(address indexed caller, address newStakingContract);\\n    event TokenOwnerChanged(address indexed newOwner, address indexed oldOwner);\\n\\n    /* Modifiers */\\n    /**\\n     * @dev Throws if called by any account other than the token owner or the contract owner.\\n     */\\n    modifier onlyOwners() {\\n        require(msg.sender == tokenOwner || isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the token owner.\\n     */\\n    modifier onlyTokenOwner() {\\n        require(msg.sender == tokenOwner, \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice Sets the max interval.\\n     * @param _interval Max interval for which tokens scheduled shall be staked.\\n     * */\\n    function setMaxInterval(uint256 _interval) external onlyOwner {\\n        require(_interval.mod(FOUR_WEEKS) == 0, \\\"invalid interval\\\");\\n        maxInterval = _interval;\\n    }\\n\\n    /**\\n     * @notice Stakes tokens according to the vesting schedule.\\n     * @param _amount The amount of tokens to stake.\\n     * @param _restartStakeSchedule The time from which staking schedule restarts.\\n     * The issue is that we can only stake tokens for a max duration. Thus, we need to restart\\n     * from the lastSchedule.\\n     * @return lastSchedule The max duration for which tokens were staked.\\n     * @return remainingAmount The amount outstanding - to be staked.\\n     * */\\n    function stakeTokens(uint256 _amount, uint256 _restartStakeSchedule)\\n        external\\n        returns (uint256 lastSchedule, uint256 remainingAmount)\\n    {\\n        (lastSchedule, remainingAmount) = _stakeTokens(msg.sender, _amount, _restartStakeSchedule);\\n    }\\n\\n    /**\\n     * @notice Stakes tokens according to the vesting schedule.\\n     * @dev This function will be invoked from receiveApproval.\\n     * @dev SOV.approveAndCall -> this.receiveApproval -> this.stakeTokensWithApproval\\n     * @param _sender The sender of SOV.approveAndCall\\n     * @param _amount The amount of tokens to stake.\\n     * @param _restartStakeSchedule The time from which staking schedule restarts.\\n     * The issue is that we can only stake tokens for a max duration. Thus, we need to restart\\n     * from the lastSchedule.\\n     * @return lastSchedule The max duration for which tokens were staked.\\n     * @return remainingAmount The amount outstanding - to be staked.\\n     * */\\n    function stakeTokensWithApproval(\\n        address _sender,\\n        uint256 _amount,\\n        uint256 _restartStakeSchedule\\n    ) external onlyThisContract returns (uint256 lastSchedule, uint256 remainingAmount) {\\n        (lastSchedule, remainingAmount) = _stakeTokens(_sender, _amount, _restartStakeSchedule);\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` which are locked until lockDate\\n     * to `delegatee`.\\n     * @param _delegatee The address to delegate votes to.\\n     * */\\n    function delegate(address _delegatee) external onlyTokenOwner {\\n        require(_delegatee != address(0), \\\"delegatee address invalid\\\");\\n        uint256 stakingEndDate = endDate;\\n        /// @dev Withdraw for each unlocked position.\\n        /// @dev Don't change FOUR_WEEKS to TWO_WEEKS, a lot of vestings already deployed with FOUR_WEEKS\\n        ///\\t\\tworkaround found, but it doesn't work with TWO_WEEKS\\n        for (uint256 i = startDate.add(cliff); i <= stakingEndDate; i += FOUR_WEEKS) {\\n            staking.delegate(_delegatee, i);\\n        }\\n        emit VotesDelegated(msg.sender, _delegatee);\\n    }\\n\\n    /**\\n     * @notice Withdraws unlocked tokens from the staking contract and\\n     * forwards them to an address specified by the token owner.\\n     * @param receiver The receiving address.\\n     * */\\n    function withdrawTokens(address receiver) external onlyTokenOwner {\\n        _withdrawTokens(receiver, false);\\n    }\\n\\n    /**\\n     * @notice Collect dividends from fee sharing proxy.\\n     * @param _loanPoolToken The loan pool token address.\\n     * @param _maxCheckpoints Maximum number of checkpoints to be processed.\\n     * @param _receiver The receiver of tokens or msg.sender\\n     * */\\n    function collectDividends(\\n        address _loanPoolToken,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    ) external onlyTokenOwner {\\n        require(_receiver != address(0), \\\"receiver address invalid\\\");\\n\\n        /// @dev Invokes the fee sharing proxy.\\n        feeSharingCollector.withdraw(_loanPoolToken, _maxCheckpoints, _receiver);\\n\\n        emit DividendsCollected(msg.sender, _loanPoolToken, _receiver, _maxCheckpoints);\\n    }\\n\\n    /**\\n     * @notice Change token owner - only vesting owner is allowed to change.\\n     * @dev Modifies token owner. This must be followed by approval\\n     * from token owner.\\n     * @param _newTokenOwner Address of new token owner.\\n     * */\\n    function changeTokenOwner(address _newTokenOwner) public onlyOwner {\\n        require(_newTokenOwner != address(0), \\\"invalid new token owner address\\\");\\n        require(_newTokenOwner != tokenOwner, \\\"same owner not allowed\\\");\\n        newTokenOwner = _newTokenOwner;\\n    }\\n\\n    /**\\n     * @notice Approve token owner change - only token Owner.\\n     * @dev Token owner can only be modified\\n     * when both vesting owner and token owner have approved. This\\n     * function ascertains the approval of token owner.\\n     * */\\n    function approveOwnershipTransfer() public onlyTokenOwner {\\n        require(newTokenOwner != address(0), \\\"invalid address\\\");\\n        tokenOwner = newTokenOwner;\\n        newTokenOwner = address(0);\\n        emit TokenOwnerChanged(tokenOwner, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Set address of the implementation - only Token Owner.\\n     * @dev This function sets the new implementation address.\\n     * It must also be approved by the Vesting owner.\\n     * @param _newImplementation Address of the new implementation.\\n     * */\\n    function setImpl(address _newImplementation) public onlyTokenOwner {\\n        require(_newImplementation != address(0), \\\"invalid new implementation address\\\");\\n        newImplementation = _newImplementation;\\n    }\\n\\n    /**\\n     * @notice Allows the owners to migrate the positions\\n     * to a new staking contract.\\n     * */\\n    function migrateToNewStakingContract() external onlyOwners {\\n        staking.migrateToNewStakingContract();\\n        staking = IStaking(staking.newStakingContract());\\n        emit MigratedToNewStakingContract(msg.sender, address(staking));\\n    }\\n\\n    /**\\n     * @notice Extends stakes(unlocked till timeDuration) for four year vesting contracts.\\n     * @dev Tokens are vested for 4 years. Since the max staking\\n     * period is 3 years and the tokens are unlocked only after the first year(timeDuration) is\\n     * passed, hence, we usually extend the duration of staking for all unlocked tokens for the first\\n     * year by 3 years. In some cases, the timeDuration can differ.\\n     * */\\n    function extendStaking() external {\\n        uint256 timeDuration = startDate.add(extendDurationFor);\\n        uint256[] memory dates;\\n        uint96[] memory stakes;\\n        (dates, stakes) = staking.getStakes(address(this));\\n\\n        for (uint256 i = 0; i < dates.length; i++) {\\n            if ((dates[i] < block.timestamp) && (dates[i] <= timeDuration) && (stakes[i] > 0)) {\\n                staking.extendStakingDuration(dates[i], dates[i].add(156 weeks));\\n                endDate = dates[i].add(156 weeks);\\n            } else {\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Stakes tokens according to the vesting schedule. Low level function.\\n     * @dev Once here the allowance of tokens is taken for granted.\\n     * @param _sender The sender of tokens to stake.\\n     * @param _amount The amount of tokens to stake.\\n     * @param _restartStakeSchedule The time from which staking schedule restarts.\\n     * The issue is that we can only stake tokens for a max duration. Thus, we need to restart\\n     * from the lastSchedule.\\n     * @return lastSchedule The max duration for which tokens were staked.\\n     * @return remainingAmount The amount outstanding - to be staked.\\n     * */\\n    function _stakeTokens(\\n        address _sender,\\n        uint256 _amount,\\n        uint256 _restartStakeSchedule\\n    ) internal returns (uint256 lastSchedule, uint256 remainingAmount) {\\n        // Creating a new staking schedule for the same vesting contract is disallowed unlike normal vesting\\n        require(\\n            (startDate == 0) ||\\n                (startDate > 0 && remainingStakeAmount > 0 && _restartStakeSchedule > 0),\\n            \\\"create new vesting address\\\"\\n        );\\n        uint256 restartDate;\\n        uint256 relativeAmount;\\n        // Calling the _stakeTokens function first time for the vesting contract\\n        // Runs for maxInterval only (consider maxInterval = 18 * 4 = 72 weeks)\\n        if (startDate == 0 && _restartStakeSchedule == 0) {\\n            startDate = staking.timestampToLockDate(block.timestamp); // Set only once\\n            durationLeft = duration; // We do not touch duration and cliff as they are used throughout\\n            cliffAdded = cliff; // Hence, durationLeft and cliffAdded is created\\n        }\\n        // Calling the _stakeTokens second/third time - we start from the end of previous interval\\n        // and the remaining amount(amount left after tokens are staked in the previous interval)\\n        if (_restartStakeSchedule > 0) {\\n            require(\\n                _restartStakeSchedule == lastStakingSchedule && _amount == remainingStakeAmount,\\n                \\\"invalid params\\\"\\n            );\\n            restartDate = _restartStakeSchedule;\\n        } else {\\n            restartDate = startDate;\\n        }\\n        // Runs only once when the _stakeTokens is called for the first time\\n        if (endDate == 0) {\\n            endDate = staking.timestampToLockDate(block.timestamp.add(duration));\\n        }\\n        uint256 addedMaxInterval = restartDate.add(maxInterval); // run for maxInterval\\n        if (addedMaxInterval < endDate) {\\n            // Runs for max interval\\n            lastStakingSchedule = addedMaxInterval;\\n            relativeAmount = (_amount.mul(maxInterval)).div(durationLeft); // (_amount * 18) / 39\\n            durationLeft = durationLeft.sub(maxInterval); // durationLeft - 18 periods(72 weeks)\\n            remainingStakeAmount = _amount.sub(relativeAmount); // Amount left to be staked in subsequent intervals\\n        } else {\\n            // Normal run\\n            lastStakingSchedule = endDate; // if staking intervals left < 18 periods(72 weeks)\\n            remainingStakeAmount = 0;\\n            durationLeft = 0;\\n            relativeAmount = _amount; // Stake all amount left\\n        }\\n\\n        /// @dev Transfer the tokens to this contract.\\n        bool success = SOV.transferFrom(_sender, address(this), relativeAmount);\\n        require(success, \\\"transfer failed\\\");\\n\\n        /// @dev Allow the staking contract to access them.\\n        SOV.approve(address(staking), relativeAmount);\\n\\n        staking.stakesBySchedule(\\n            relativeAmount,\\n            cliffAdded,\\n            duration.sub(durationLeft),\\n            FOUR_WEEKS,\\n            address(this),\\n            tokenOwner\\n        );\\n        if (durationLeft == 0) {\\n            // All tokens staked\\n            cliffAdded = 0;\\n        } else {\\n            cliffAdded = cliffAdded.add(maxInterval); // Add cliff to the end of previous maxInterval\\n        }\\n\\n        emit TokensStaked(_sender, relativeAmount);\\n        return (lastStakingSchedule, remainingStakeAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraws tokens from the staking contract and forwards them\\n     * to an address specified by the token owner. Low level function.\\n     * @dev Once here the caller permission is taken for granted.\\n     * @param receiver The receiving address.\\n     * @param isGovernance Whether all tokens (true)\\n     * or just unlocked tokens (false).\\n     * */\\n    function _withdrawTokens(address receiver, bool isGovernance) internal {\\n        require(receiver != address(0), \\\"receiver address invalid\\\");\\n\\n        uint96 stake;\\n\\n        /// @dev Usually we just need to iterate over the possible dates until now.\\n        uint256 end;\\n\\n        /// @dev In the unlikely case that all tokens have been unlocked early,\\n        ///   allow to withdraw all of them.\\n        if (staking.allUnlocked() || isGovernance) {\\n            end = endDate;\\n        } else {\\n            end = block.timestamp;\\n        }\\n\\n        /// @dev Withdraw for each unlocked position.\\n        /// @dev Don't change FOUR_WEEKS to TWO_WEEKS, a lot of vestings already deployed with FOUR_WEEKS\\n        ///\\t\\tworkaround found, but it doesn't work with TWO_WEEKS\\n        /// @dev For four year vesting, withdrawal of stakes for the first year is not allowed. These\\n        /// stakes are extended for three years. In some cases the withdrawal may be allowed at a different\\n        /// time and hence we use extendDurationFor.\\n        for (uint256 i = startDate.add(extendDurationFor); i <= end; i += FOUR_WEEKS) {\\n            /// @dev Read amount to withdraw.\\n            stake = staking.getPriorUserStakeByDate(address(this), i, block.number.sub(1));\\n\\n            /// @dev Withdraw if > 0\\n            if (stake > 0) {\\n                staking.withdraw(stake, i, receiver);\\n            }\\n        }\\n\\n        emit TokensWithdrawn(msg.sender, receiver);\\n    }\\n\\n    /**\\n     * @notice Overrides default ApprovalReceiver._getToken function to\\n     * register SOV token on this contract.\\n     * @return The address of SOV token.\\n     * */\\n    function _getToken() internal view returns (address) {\\n        return address(SOV);\\n    }\\n\\n    /**\\n     * @notice Overrides default ApprovalReceiver._getSelectors function to\\n     * register stakeTokensWithApproval selector on this contract.\\n     * @return The array of registered selectors on this contract.\\n     * */\\n    function _getSelectors() internal pure returns (bytes4[] memory) {\\n        bytes4[] memory selectors = new bytes4[](1);\\n        selectors[0] = this.stakeTokensWithApproval.selector;\\n        return selectors;\\n    }\\n}\\n\",\"keccak256\":\"0x0daadfe8606076a402e42cccdd4ca2a513d2b6c387af49d6b53d404cbb21d7ad\"},\"contracts/governance/Vesting/fouryear/FourYearVestingStorage.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"../../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../../interfaces/IERC20.sol\\\";\\nimport \\\"../../Staking/interfaces/IStaking.sol\\\";\\nimport \\\"../../IFeeSharingCollector.sol\\\";\\n\\n/**\\n * @title Four Year Vesting Storage Contract.\\n *\\n * @notice This contract is just the storage required for four year vesting.\\n * It is parent of FourYearVestingLogic and FourYearVesting.\\n *\\n * @dev Use Ownable as a parent to align storage structure for Logic and Proxy contracts.\\n * */\\ncontract FourYearVestingStorage is Ownable {\\n    /// @notice The SOV token contract.\\n    IERC20 public SOV;\\n\\n    /// @notice The staking contract address.\\n    IStaking public staking;\\n\\n    /// @notice The owner of the vested tokens.\\n    address public tokenOwner;\\n\\n    /// @notice Fee sharing Proxy.\\n    IFeeSharingCollector public feeSharingCollector;\\n\\n    // Used lower case for cliff and duration to maintain consistency with normal vesting\\n    /// @notice The cliff. After this time period the tokens begin to unlock.\\n    uint256 public constant cliff = 4 weeks;\\n\\n    /// @notice The duration. After this period all tokens will have been unlocked.\\n    uint256 public constant duration = 156 weeks;\\n\\n    /// @notice The start date of the vesting.\\n    uint256 public startDate;\\n\\n    /// @notice The end date of the vesting.\\n    uint256 public endDate;\\n\\n    /// @notice Constant used for computing the vesting dates.\\n    uint256 public constant FOUR_WEEKS = 4 weeks;\\n\\n    /// @notice Maximum interval to stake tokens at one go\\n    uint256 public maxInterval;\\n\\n    /// @notice End of previous staking schedule.\\n    uint256 public lastStakingSchedule;\\n\\n    /// @notice Amount of shares left to be staked.\\n    uint256 public remainingStakeAmount;\\n\\n    /// @notice Durations left.\\n    uint256 public durationLeft;\\n\\n    /// @notice Cliffs added.\\n    uint256 public cliffAdded;\\n\\n    /// @notice Address of new token owner.\\n    address public newTokenOwner;\\n\\n    /// @notice Address of new implementation.\\n    address public newImplementation;\\n\\n    /// @notice Duration(from start) till the time unlocked tokens are extended(for 3 years)\\n    uint256 public extendDurationFor;\\n\\n    /// @dev Please add new state variables below this line. Mark them internal and\\n    /// add a getter function while upgrading the contracts.\\n}\\n\",\"keccak256\":\"0xaa0878f6e0b832a33b5cf8b56a516eb39272d3e1e5434ce798b30a346ab66cc0\"},\"contracts/governance/Vesting/fouryear/IFourYearVesting.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for Four Year Vesting contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * This interface is used by FourYearVestingLogic contract to implement stakeTokens function\\n * and on VestingRegistry contract to call IFourYearVesting(vesting).stakeTokens function\\n * at a vesting instance.\\n */\\ninterface IFourYearVesting {\\n    function endDate() external returns (uint256);\\n\\n    function stakeTokens(uint256 _amount, uint256 _restartStakeSchedule)\\n        external\\n        returns (uint256 lastSchedule, uint256 remainingAmount);\\n}\\n\",\"keccak256\":\"0x0ad1709b497fee70a9a018ee2ecbfc48f764802409efa9b1397a955551dae977\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) public view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) public returns (bool);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xea0bb1bf7d022130bb42a4efdfd875ef76ac5ac730a94ddd7b8c9949d4253855\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"},\"contracts/token/IApproveAndCall.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for contract governance/ApprovalReceiver.sol\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n */\\ninterface IApproveAndCall {\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _sender The sender of SOV.approveAndCall function.\\n     * @param _amount The amount was approved.\\n     * @param _token The address of token.\\n     * @param _data The data will be used for low level call.\\n     * */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0ca93f8436a4d81d80de5ea9214139b490d96f708f09c975a0869ce9abc61635\"}},\"version\":1}",
  "bytecode": "0x608060405260006100176001600160e01b0361006616565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006a565b3390565b612754806100796000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80636b7dbb2d1161010f578063b06a470c116100a2578063d0e60a6a11610071578063d0e60a6a14610385578063d38bd9f01461038d578063f2fde38b14610395578063f6d6189e14610258576101f0565b8063b06a470c1461035a578063c15d145014610362578063c24a0f8b14610375578063cae774b31461037d576101f0565b80638da5cb5b116100de5780638da5cb5b146103225780638f32d59b1461032a5780638f4ffcb11461033f578063a3e6761014610352576101f0565b80636b7dbb2d146102f557806373496bce146102fd5780638b677b03146103055780638bc6efc81461031a576101f0565b806341c632a6116101875780635419675f116101565780635419675f146102b45780635c19a95c146102bc57806362dc2f35146102cf578063691bd2ae146102e2576101f0565b806341c632a61461028957806349df728c146102915780634cf088d9146102a4578063533a386c146102ac576101f0565b80630fb5a6b4116101c35780630fb5a6b41461025057806313d033c0146102585780633b7b6188146102605780633c4efe0114610281576101f0565b806303021c87146101f557806308dcb3601461020a5780630b97bc86146102285780630f809adb1461023d575b600080fd5b610208610203366004611e00565b6103a8565b005b61021261040a565b60405161021f9190612424565b60405180910390f35b610230610419565b60405161021f9190612563565b61020861024b366004611be4565b61041f565b6102306104b9565b6102306104c1565b61027361026e366004611e3c565b6104c8565b60405161021f929190612571565b6102306104e1565b6102306104e7565b61020861029f366004611be4565b6104ed565b610212610525565b610230610534565b61020861053a565b6102086102ca366004611be4565b6106bb565b6102086102dd366004611cf3565b6107e8565b6102086102f0366004611be4565b6108e7565b610212610959565b610208610968565b61030d610b51565b60405161021f919061235a565b610208610b60565b61030d610c0c565b610332610c1b565b60405161021f9190612416565b61020861034d366004611c28565b610c3f565b61030d610e33565b610230610e42565b610273610370366004611ca6565b610e48565b610230610e81565b610230610e87565b610230610e8d565b61030d610e93565b6102086103a3366004611be4565b610ea2565b6103b0610c1b565b6103d55760405162461bcd60e51b81526004016103cc906124d3565b60405180910390fd5b6103e8816224ea0063ffffffff610ecf16565b156104055760405162461bcd60e51b81526004016103cc90612443565b600755565b6001546001600160a01b031681565b60055481565b610427610c1b565b6104435760405162461bcd60e51b81526004016103cc906124d3565b6001600160a01b0381166104695760405162461bcd60e51b81526004016103cc906124f3565b6003546001600160a01b03828116911614156104975760405162461bcd60e51b81526004016103cc90612453565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b63059fa60081565b6224ea0081565b6000806104d6338585610f1a565b909590945092505050565b60095481565b60085481565b6003546001600160a01b031633146105175760405162461bcd60e51b81526004016103cc906124d3565b6105228160006113d5565b50565b6002546001600160a01b031681565b600a5481565b6003546001600160a01b03163314806105565750610556610c1b565b6105725760405162461bcd60e51b81526004016103cc906124d3565b600260009054906101000a90046001600160a01b03166001600160a01b0316635419675f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105c257600080fd5b505af11580156105d6573d6000803e3d6000fd5b50505050600260009054906101000a90046001600160a01b03166001600160a01b031663ae81dfe46040518163ffffffff1660e01b815260040160206040518083038186803b15801561062857600080fd5b505afa15801561063c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106609190810190611c0a565b600280546001600160a01b0319166001600160a01b03928316179081905560405133927f9613f431247983a83a2b3667aa63a5174194ac89328dfadc69be44409521b3c1926106b19291169061235a565b60405180910390a2565b6003546001600160a01b031633146106e55760405162461bcd60e51b81526004016103cc906124d3565b6001600160a01b03811661070b5760405162461bcd60e51b81526004016103cc906124e3565b600654600554600090610727906224ea0063ffffffff61161c16565b90505b8181116107a25760025460405163026e402b60e01b81526001600160a01b039091169063026e402b9061076390869085906004016123b8565b600060405180830381600087803b15801561077d57600080fd5b505af1158015610791573d6000803e3d6000fd5b505050506224ea008101905061072a565b50336001600160a01b03167f734a802cc194e2139bfcc08e10336f24dfa14fd2c5ab70268d8706c055867066836040516107dc919061235a565b60405180910390a25050565b6003546001600160a01b031633146108125760405162461bcd60e51b81526004016103cc906124d3565b6001600160a01b0381166108385760405162461bcd60e51b81526004016103cc90612523565b6004805460405163a965b3a960e01b81526001600160a01b039091169163a965b3a99161086b91879187918791016123ee565b600060405180830381600087803b15801561088557600080fd5b505af1158015610899573d6000803e3d6000fd5b50505050336001600160a01b03167f5fa0b381cb4bdbc7063d1e5c78b90a634a6d6a12d6cb6fabe450fd4b8d1eab018483856040516108da93929190612390565b60405180910390a2505050565b6003546001600160a01b031633146109115760405162461bcd60e51b81526004016103cc906124d3565b6001600160a01b0381166109375760405162461bcd60e51b81526004016103cc90612503565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b6000610981600e5460055461161c90919063ffffffff16565b600254604051630f74de8b60e31b815291925060609182916001600160a01b031690637ba6f458906109b790309060040161235a565b60006040518083038186803b1580156109cf57600080fd5b505afa1580156109e3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a0b9190810190611d36565b909250905060005b8251811015610b4b5742838281518110610a2957fe5b6020026020010151108015610a51575083838281518110610a4657fe5b602002602001015111155b8015610a7957506000828281518110610a6657fe5b60200260200101516001600160601b0316115b15610b3e5760025483516001600160a01b039091169063eefb8c4790859084908110610aa157fe5b6020026020010151610ad363059fa600878681518110610abd57fe5b602002602001015161161c90919063ffffffff16565b6040518363ffffffff1660e01b8152600401610af0929190612571565b600060405180830381600087803b158015610b0a57600080fd5b505af1158015610b1e573d6000803e3d6000fd5b50505050610b3663059fa600848381518110610abd57fe5b600655610b43565b610b4b565b600101610a13565b50505050565b600d546001600160a01b031681565b6003546001600160a01b03163314610b8a5760405162461bcd60e51b81526004016103cc906124d3565b600c546001600160a01b0316610bb25760405162461bcd60e51b81526004016103cc906124a3565b600c8054600380546001600160a01b038084166001600160a01b0319928316179283905592169092556040513392909116907f9cf24b1ec41d66a62ffba9f3ed8641a7fb6fb987150ff3e0ded7576b6b63576b90600090a3565b6000546001600160a01b031690565b600080546001600160a01b0316610c30611641565b6001600160a01b031614905090565b610c47611645565b6001600160a01b0316336001600160a01b031614610c775760405162461bcd60e51b81526004016103cc906124d3565b336001600160a01b03841614610c9f5760405162461bcd60e51b81526004016103cc906124d3565b60006060610cab611654565b90506000610cee85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116ac92505050565b905060005b8251811015610d3c57828181518110610d0857fe5b60200260200101516001600160e01b031916826001600160e01b0319161415610d345760019350610d3c565b600101610cf3565b5082610d5a5760405162461bcd60e51b81526004016103cc90612483565b600080600060201b8787604051602001610d7693929190612328565b604051602081830303815290604052806020019051610d989190810190611dbd565b9093509150506001600160a01b03808316908b1614610dc95760405162461bcd60e51b81526004016103cc906124b3565b888114610de85760405162461bcd60e51b81526004016103cc90612543565b610e2787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116b392505050565b50505050505050505050565b6003546001600160a01b031681565b600b5481565b600080333014610e6a5760405162461bcd60e51b81526004016103cc906124d3565b610e75858585610f1a565b90969095509350505050565b60065481565b60075481565b600e5481565b600c546001600160a01b031681565b610eaa610c1b565b610ec65760405162461bcd60e51b81526004016103cc906124d3565b6105228161178d565b6000610f1183836040518060400160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f000000000000000081525061180e565b90505b92915050565b60008060055460001480610f4957506000600554118015610f3d57506000600954115b8015610f495750600083115b610f655760405162461bcd60e51b81526004016103cc90612553565b6000806005546000148015610f78575084155b15611010576002546040516372ec979560e01b81526001600160a01b03909116906372ec979590610fad904290600401612563565b60206040518083038186803b158015610fc557600080fd5b505afa158015610fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ffd9190810190611e1e565b60055563059fa600600a556224ea00600b555b841561104c5760085485148015611028575060095486145b6110445760405162461bcd60e51b81526004016103cc90612513565b849150611052565b60055491505b6006546110ee576002546001600160a01b03166372ec979561107e4263059fa60063ffffffff61161c16565b6040518263ffffffff1660e01b815260040161109a9190612563565b60206040518083038186803b1580156110b257600080fd5b505afa1580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110ea9190810190611e1e565b6006555b60006111056007548461161c90919063ffffffff16565b9050600654811015611172576008819055600a5460075461113e9190611132908a9063ffffffff61184416565b9063ffffffff61187e16565b9150611157600754600a546118c090919063ffffffff16565b600a5561116a878363ffffffff6118c016565b600955611186565b60065460085560006009819055600a558691505b6001546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd906111bb908c9030908890600401612368565b602060405180830381600087803b1580156111d557600080fd5b505af11580156111e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061120d9190810190611d9f565b90508061122c5760405162461bcd60e51b81526004016103cc90612533565b60015460025460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926112629291169087906004016123b8565b602060405180830381600087803b15801561127c57600080fd5b505af1158015611290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112b49190810190611d9f565b50600254600b54600a546001600160a01b0390921691634b2fea1e9186916112e79063059fa6009063ffffffff6118c016565b6003546040516001600160e01b031960e087901b16815261131e949392916224ea009130916001600160a01b03169060040161257f565b600060405180830381600087803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b50505050600a5460001415611365576000600b5561137e565b600754600b5461137a9163ffffffff61161c16565b600b555b886001600160a01b03167fb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef846040516113b79190612563565b60405180910390a26008546009549550955050505050935093915050565b6001600160a01b0382166113fb5760405162461bcd60e51b81526004016103cc90612523565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316639929e8866040518163ffffffff1660e01b815260040160206040518083038186803b15801561144c57600080fd5b505afa158015611460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114849190810190611d9f565b8061148c5750825b1561149a575060065461149d565b50425b60006114b6600e5460055461161c90919063ffffffff16565b90505b8181116115d4576002546001600160a01b031663cf7b684a30836114e443600163ffffffff6118c016565b6040518463ffffffff1660e01b8152600401611502939291906123d3565b60206040518083038186803b15801561151a57600080fd5b505afa15801561152e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115529190810190611e6c565b92506001600160601b038316156115ca576002546040516336adb29160e21b81526001600160a01b039091169063dab6ca449061159790869085908a906004016125d9565b600060405180830381600087803b1580156115b157600080fd5b505af11580156115c5573d6000803e3d6000fd5b505050505b6224ea00016114b9565b50336001600160a01b03167f351b2b7a8b3659a02c6c87ac06e00099a1e5979171161a69eab5d057deb838ec8560405161160e919061235a565b60405180910390a250505050565b600082820183811015610f115760405162461bcd60e51b81526004016103cc90612493565b3390565b6001546001600160a01b031690565b6040805160018082528183019092526060918291906020808301908038833901905050905063c15d145060e01b8160008151811061168e57fe5b6001600160e01b031990921660209283029190910190910152905090565b6020015190565b60006060306001600160a01b0316836040516116cf919061234e565b6000604051808303816000865af19150503d806000811461170c576040519150601f19603f3d011682016040523d82523d6000602084013e611711565b606091505b50915091508161178857604481511161173c5760405162461bcd60e51b81526004016103cc90612463565b61176f6040518060400160405280601181526020017003932b1b2b4bb32a0b8383937bb30b61d1607d1b81525082611902565b60405162461bcd60e51b81526004016103cc9190612432565b505050565b6001600160a01b0381166117b35760405162461bcd60e51b81526004016103cc90612473565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000818361182f5760405162461bcd60e51b81526004016103cc9190612432565b5082848161183957fe5b0690505b9392505050565b60008261185357506000610f14565b8282028284828161186057fe5b0414610f115760405162461bcd60e51b81526004016103cc906124c3565b6000610f1183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506119fc565b6000610f1183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611a33565b6060808390506060839050606060448251845101036040519080825280601f01601f191660200182016040528015611941576020820181803883390190505b509050806000805b855181101561199a5785818151811061195e57fe5b602001015160f81c60f81b83838060010194508151811061197b57fe5b60200101906001600160f81b031916908160001a905350600101611949565b5060445b84518110156119ef578481815181106119b357fe5b602001015160f81c60f81b8383806001019450815181106119d057fe5b60200101906001600160f81b031916908160001a90535060010161199e565b5090979650505050505050565b60008183611a1d5760405162461bcd60e51b81526004016103cc9190612432565b506000838581611a2957fe5b0495945050505050565b60008184841115611a575760405162461bcd60e51b81526004016103cc9190612432565b505050900390565b8035610f14816126d9565b8051610f14816126d9565b600082601f830112611a8657600080fd5b8151611a99611a948261261b565b6125f4565b91508181835260208401935060208101905083856020840282011115611abe57600080fd5b60005b83811015611aea5781611ad48882611b6f565b8452506020928301929190910190600101611ac1565b5050505092915050565b600082601f830112611b0557600080fd5b8151611b13611a948261261b565b91508181835260208401935060208101905083856020840282011115611b3857600080fd5b60005b83811015611aea5781611b4e8882611bd9565b8452506020928301929190910190600101611b3b565b8051610f14816126ed565b8051610f14816126f6565b60008083601f840112611b8c57600080fd5b50813567ffffffffffffffff811115611ba457600080fd5b602083019150836001820283011115611bbc57600080fd5b9250929050565b8035610f14816126f6565b8035610f14816126ff565b8051610f1481612708565b600060208284031215611bf657600080fd5b6000611c028484611a5f565b949350505050565b600060208284031215611c1c57600080fd5b6000611c028484611a6a565b600080600080600060808688031215611c4057600080fd5b6000611c4c8888611a5f565b9550506020611c5d88828901611bc3565b9450506040611c6e88828901611a5f565b935050606086013567ffffffffffffffff811115611c8b57600080fd5b611c9788828901611b7a565b92509250509295509295909350565b600080600060608486031215611cbb57600080fd5b6000611cc78686611a5f565b9350506020611cd886828701611bc3565b9250506040611ce986828701611bc3565b9150509250925092565b600080600060608486031215611d0857600080fd5b6000611d148686611a5f565b9350506020611d2586828701611bce565b9250506040611ce986828701611a5f565b60008060408385031215611d4957600080fd5b825167ffffffffffffffff811115611d6057600080fd5b611d6c85828601611a75565b925050602083015167ffffffffffffffff811115611d8957600080fd5b611d9585828601611af4565b9150509250929050565b600060208284031215611db157600080fd5b6000611c028484611b64565b600080600060608486031215611dd257600080fd5b6000611dde8686611b6f565b9350506020611def86828701611a6a565b9250506040611ce986828701611b6f565b600060208284031215611e1257600080fd5b6000611c028484611bc3565b600060208284031215611e3057600080fd5b6000611c028484611b6f565b60008060408385031215611e4f57600080fd5b6000611e5b8585611bc3565b9250506020611d9585828601611bc3565b600060208284031215611e7e57600080fd5b6000611c028484611bd9565b611e938161264e565b82525050565b611e9381612659565b611e93611eae8261265e565b612668565b6000611ebf8385612640565b9350611ecc838584612697565b50500190565b6000611edd8261263c565b611ee78185612640565b9350611ef78185602086016126a3565b9290920192915050565b611e938161268c565b6000611f158261263c565b611f1f8185612645565b9350611f2f8185602086016126a3565b611f38816126cf565b9093019392505050565b6000611f4f601083612645565b6f1a5b9d985b1a59081a5b9d195c9d985b60821b815260200192915050565b6000611f7b601683612645565b751cd85b59481bdddb995c881b9bdd08185b1b1bddd95960521b815260200192915050565b6000611fad603083612645565b7f72656365697665417070726f76616c3a205472616e73616374696f6e2065786581526f31baba34b7b7103932bb32b93a32b21760811b602082015260400192915050565b6000611fff602683612645565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000612047601583612645565b741b595d1a1bd9081a5cc81b9bdd08185b1b1bddd959605a1b815260200192915050565b6000612078601b83612645565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006120b1600f83612645565b6e696e76616c6964206164647265737360881b815260200192915050565b60006120dc600f83612645565b6e0e6cadcc8cae440dad2e6dac2e8c6d608b1b815260200192915050565b6000612107602183612645565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b600061214a600c83612645565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000612172601983612645565b7f64656c656761746565206164647265737320696e76616c696400000000000000815260200192915050565b60006121ab601f83612645565b7f696e76616c6964206e657720746f6b656e206f776e6572206164647265737300815260200192915050565b60006121e4602283612645565b7f696e76616c6964206e657720696d706c656d656e746174696f6e206164647265815261737360f01b602082015260400192915050565b6000612228600e83612645565b6d696e76616c696420706172616d7360901b815260200192915050565b6000612252601883612645565b7f7265636569766572206164647265737320696e76616c69640000000000000000815260200192915050565b600061228b600f83612645565b6e1d1c985b9cd9995c8819985a5b1959608a1b815260200192915050565b60006122b6600f83612645565b6e0c2dadeeadce840dad2e6dac2e8c6d608b1b815260200192915050565b60006122e1601a83612645565b7f637265617465206e65772076657374696e672061646472657373000000000000815260200192915050565b611e9381612668565b611e9381612677565b611e9381612680565b60006123348286611ea2565b601c82019150612345828486611eb3565b95945050505050565b600061183d8284611ed2565b60208101610f148284611e8a565b606081016123768286611e8a565b6123836020830185611e8a565b611c02604083018461230d565b6060810161239e8286611e8a565b6123ab6020830185611e8a565b611c026040830184612316565b604081016123c68285611e8a565b61183d602083018461230d565b606081016123e18286611e8a565b612383602083018561230d565b606081016123fc8286611e8a565b6124096020830185612316565b611c026040830184611e8a565b60208101610f148284611e99565b60208101610f148284611f01565b60208082528101610f118184611f0a565b60208082528101610f1481611f42565b60208082528101610f1481611f6e565b60208082528101610f1481611fa0565b60208082528101610f1481611ff2565b60208082528101610f148161203a565b60208082528101610f148161206b565b60208082528101610f14816120a4565b60208082528101610f14816120cf565b60208082528101610f14816120fa565b60208082528101610f148161213d565b60208082528101610f1481612165565b60208082528101610f148161219e565b60208082528101610f14816121d7565b60208082528101610f148161221b565b60208082528101610f1481612245565b60208082528101610f148161227e565b60208082528101610f14816122a9565b60208082528101610f14816122d4565b60208101610f14828461230d565b604081016123c6828561230d565b60c0810161258d828961230d565b61259a602083018861230d565b6125a7604083018761230d565b6125b4606083018661230d565b6125c16080830185611e8a565b6125ce60a0830184611e8a565b979650505050505050565b606081016125e7828661231f565b612409602083018561230d565b60405181810167ffffffffffffffff8111828210171561261357600080fd5b604052919050565b600067ffffffffffffffff82111561263257600080fd5b5060209081020190565b5190565b919050565b90815260200190565b6000610f148261266b565b151590565b63ffffffff191690565b90565b6001600160a01b031690565b63ffffffff1690565b6001600160601b031690565b6000610f148261264e565b82818337506000910152565b60005b838110156126be5781810151838201526020016126a6565b83811115610b4b5750506000910152565b601f01601f191690565b6126e28161264e565b811461052257600080fd5b6126e281612659565b6126e281612668565b6126e281612677565b6126e28161268056fea365627a7a72315820c9e0ae7da45ee9aa72f34d2df67ca516181ff60df22349f402454f6b701238136c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c80636b7dbb2d1161010f578063b06a470c116100a2578063d0e60a6a11610071578063d0e60a6a14610385578063d38bd9f01461038d578063f2fde38b14610395578063f6d6189e14610258576101f0565b8063b06a470c1461035a578063c15d145014610362578063c24a0f8b14610375578063cae774b31461037d576101f0565b80638da5cb5b116100de5780638da5cb5b146103225780638f32d59b1461032a5780638f4ffcb11461033f578063a3e6761014610352576101f0565b80636b7dbb2d146102f557806373496bce146102fd5780638b677b03146103055780638bc6efc81461031a576101f0565b806341c632a6116101875780635419675f116101565780635419675f146102b45780635c19a95c146102bc57806362dc2f35146102cf578063691bd2ae146102e2576101f0565b806341c632a61461028957806349df728c146102915780634cf088d9146102a4578063533a386c146102ac576101f0565b80630fb5a6b4116101c35780630fb5a6b41461025057806313d033c0146102585780633b7b6188146102605780633c4efe0114610281576101f0565b806303021c87146101f557806308dcb3601461020a5780630b97bc86146102285780630f809adb1461023d575b600080fd5b610208610203366004611e00565b6103a8565b005b61021261040a565b60405161021f9190612424565b60405180910390f35b610230610419565b60405161021f9190612563565b61020861024b366004611be4565b61041f565b6102306104b9565b6102306104c1565b61027361026e366004611e3c565b6104c8565b60405161021f929190612571565b6102306104e1565b6102306104e7565b61020861029f366004611be4565b6104ed565b610212610525565b610230610534565b61020861053a565b6102086102ca366004611be4565b6106bb565b6102086102dd366004611cf3565b6107e8565b6102086102f0366004611be4565b6108e7565b610212610959565b610208610968565b61030d610b51565b60405161021f919061235a565b610208610b60565b61030d610c0c565b610332610c1b565b60405161021f9190612416565b61020861034d366004611c28565b610c3f565b61030d610e33565b610230610e42565b610273610370366004611ca6565b610e48565b610230610e81565b610230610e87565b610230610e8d565b61030d610e93565b6102086103a3366004611be4565b610ea2565b6103b0610c1b565b6103d55760405162461bcd60e51b81526004016103cc906124d3565b60405180910390fd5b6103e8816224ea0063ffffffff610ecf16565b156104055760405162461bcd60e51b81526004016103cc90612443565b600755565b6001546001600160a01b031681565b60055481565b610427610c1b565b6104435760405162461bcd60e51b81526004016103cc906124d3565b6001600160a01b0381166104695760405162461bcd60e51b81526004016103cc906124f3565b6003546001600160a01b03828116911614156104975760405162461bcd60e51b81526004016103cc90612453565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b63059fa60081565b6224ea0081565b6000806104d6338585610f1a565b909590945092505050565b60095481565b60085481565b6003546001600160a01b031633146105175760405162461bcd60e51b81526004016103cc906124d3565b6105228160006113d5565b50565b6002546001600160a01b031681565b600a5481565b6003546001600160a01b03163314806105565750610556610c1b565b6105725760405162461bcd60e51b81526004016103cc906124d3565b600260009054906101000a90046001600160a01b03166001600160a01b0316635419675f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105c257600080fd5b505af11580156105d6573d6000803e3d6000fd5b50505050600260009054906101000a90046001600160a01b03166001600160a01b031663ae81dfe46040518163ffffffff1660e01b815260040160206040518083038186803b15801561062857600080fd5b505afa15801561063c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106609190810190611c0a565b600280546001600160a01b0319166001600160a01b03928316179081905560405133927f9613f431247983a83a2b3667aa63a5174194ac89328dfadc69be44409521b3c1926106b19291169061235a565b60405180910390a2565b6003546001600160a01b031633146106e55760405162461bcd60e51b81526004016103cc906124d3565b6001600160a01b03811661070b5760405162461bcd60e51b81526004016103cc906124e3565b600654600554600090610727906224ea0063ffffffff61161c16565b90505b8181116107a25760025460405163026e402b60e01b81526001600160a01b039091169063026e402b9061076390869085906004016123b8565b600060405180830381600087803b15801561077d57600080fd5b505af1158015610791573d6000803e3d6000fd5b505050506224ea008101905061072a565b50336001600160a01b03167f734a802cc194e2139bfcc08e10336f24dfa14fd2c5ab70268d8706c055867066836040516107dc919061235a565b60405180910390a25050565b6003546001600160a01b031633146108125760405162461bcd60e51b81526004016103cc906124d3565b6001600160a01b0381166108385760405162461bcd60e51b81526004016103cc90612523565b6004805460405163a965b3a960e01b81526001600160a01b039091169163a965b3a99161086b91879187918791016123ee565b600060405180830381600087803b15801561088557600080fd5b505af1158015610899573d6000803e3d6000fd5b50505050336001600160a01b03167f5fa0b381cb4bdbc7063d1e5c78b90a634a6d6a12d6cb6fabe450fd4b8d1eab018483856040516108da93929190612390565b60405180910390a2505050565b6003546001600160a01b031633146109115760405162461bcd60e51b81526004016103cc906124d3565b6001600160a01b0381166109375760405162461bcd60e51b81526004016103cc90612503565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b6000610981600e5460055461161c90919063ffffffff16565b600254604051630f74de8b60e31b815291925060609182916001600160a01b031690637ba6f458906109b790309060040161235a565b60006040518083038186803b1580156109cf57600080fd5b505afa1580156109e3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a0b9190810190611d36565b909250905060005b8251811015610b4b5742838281518110610a2957fe5b6020026020010151108015610a51575083838281518110610a4657fe5b602002602001015111155b8015610a7957506000828281518110610a6657fe5b60200260200101516001600160601b0316115b15610b3e5760025483516001600160a01b039091169063eefb8c4790859084908110610aa157fe5b6020026020010151610ad363059fa600878681518110610abd57fe5b602002602001015161161c90919063ffffffff16565b6040518363ffffffff1660e01b8152600401610af0929190612571565b600060405180830381600087803b158015610b0a57600080fd5b505af1158015610b1e573d6000803e3d6000fd5b50505050610b3663059fa600848381518110610abd57fe5b600655610b43565b610b4b565b600101610a13565b50505050565b600d546001600160a01b031681565b6003546001600160a01b03163314610b8a5760405162461bcd60e51b81526004016103cc906124d3565b600c546001600160a01b0316610bb25760405162461bcd60e51b81526004016103cc906124a3565b600c8054600380546001600160a01b038084166001600160a01b0319928316179283905592169092556040513392909116907f9cf24b1ec41d66a62ffba9f3ed8641a7fb6fb987150ff3e0ded7576b6b63576b90600090a3565b6000546001600160a01b031690565b600080546001600160a01b0316610c30611641565b6001600160a01b031614905090565b610c47611645565b6001600160a01b0316336001600160a01b031614610c775760405162461bcd60e51b81526004016103cc906124d3565b336001600160a01b03841614610c9f5760405162461bcd60e51b81526004016103cc906124d3565b60006060610cab611654565b90506000610cee85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116ac92505050565b905060005b8251811015610d3c57828181518110610d0857fe5b60200260200101516001600160e01b031916826001600160e01b0319161415610d345760019350610d3c565b600101610cf3565b5082610d5a5760405162461bcd60e51b81526004016103cc90612483565b600080600060201b8787604051602001610d7693929190612328565b604051602081830303815290604052806020019051610d989190810190611dbd565b9093509150506001600160a01b03808316908b1614610dc95760405162461bcd60e51b81526004016103cc906124b3565b888114610de85760405162461bcd60e51b81526004016103cc90612543565b610e2787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116b392505050565b50505050505050505050565b6003546001600160a01b031681565b600b5481565b600080333014610e6a5760405162461bcd60e51b81526004016103cc906124d3565b610e75858585610f1a565b90969095509350505050565b60065481565b60075481565b600e5481565b600c546001600160a01b031681565b610eaa610c1b565b610ec65760405162461bcd60e51b81526004016103cc906124d3565b6105228161178d565b6000610f1183836040518060400160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f000000000000000081525061180e565b90505b92915050565b60008060055460001480610f4957506000600554118015610f3d57506000600954115b8015610f495750600083115b610f655760405162461bcd60e51b81526004016103cc90612553565b6000806005546000148015610f78575084155b15611010576002546040516372ec979560e01b81526001600160a01b03909116906372ec979590610fad904290600401612563565b60206040518083038186803b158015610fc557600080fd5b505afa158015610fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ffd9190810190611e1e565b60055563059fa600600a556224ea00600b555b841561104c5760085485148015611028575060095486145b6110445760405162461bcd60e51b81526004016103cc90612513565b849150611052565b60055491505b6006546110ee576002546001600160a01b03166372ec979561107e4263059fa60063ffffffff61161c16565b6040518263ffffffff1660e01b815260040161109a9190612563565b60206040518083038186803b1580156110b257600080fd5b505afa1580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110ea9190810190611e1e565b6006555b60006111056007548461161c90919063ffffffff16565b9050600654811015611172576008819055600a5460075461113e9190611132908a9063ffffffff61184416565b9063ffffffff61187e16565b9150611157600754600a546118c090919063ffffffff16565b600a5561116a878363ffffffff6118c016565b600955611186565b60065460085560006009819055600a558691505b6001546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd906111bb908c9030908890600401612368565b602060405180830381600087803b1580156111d557600080fd5b505af11580156111e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061120d9190810190611d9f565b90508061122c5760405162461bcd60e51b81526004016103cc90612533565b60015460025460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926112629291169087906004016123b8565b602060405180830381600087803b15801561127c57600080fd5b505af1158015611290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112b49190810190611d9f565b50600254600b54600a546001600160a01b0390921691634b2fea1e9186916112e79063059fa6009063ffffffff6118c016565b6003546040516001600160e01b031960e087901b16815261131e949392916224ea009130916001600160a01b03169060040161257f565b600060405180830381600087803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b50505050600a5460001415611365576000600b5561137e565b600754600b5461137a9163ffffffff61161c16565b600b555b886001600160a01b03167fb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef846040516113b79190612563565b60405180910390a26008546009549550955050505050935093915050565b6001600160a01b0382166113fb5760405162461bcd60e51b81526004016103cc90612523565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316639929e8866040518163ffffffff1660e01b815260040160206040518083038186803b15801561144c57600080fd5b505afa158015611460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114849190810190611d9f565b8061148c5750825b1561149a575060065461149d565b50425b60006114b6600e5460055461161c90919063ffffffff16565b90505b8181116115d4576002546001600160a01b031663cf7b684a30836114e443600163ffffffff6118c016565b6040518463ffffffff1660e01b8152600401611502939291906123d3565b60206040518083038186803b15801561151a57600080fd5b505afa15801561152e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115529190810190611e6c565b92506001600160601b038316156115ca576002546040516336adb29160e21b81526001600160a01b039091169063dab6ca449061159790869085908a906004016125d9565b600060405180830381600087803b1580156115b157600080fd5b505af11580156115c5573d6000803e3d6000fd5b505050505b6224ea00016114b9565b50336001600160a01b03167f351b2b7a8b3659a02c6c87ac06e00099a1e5979171161a69eab5d057deb838ec8560405161160e919061235a565b60405180910390a250505050565b600082820183811015610f115760405162461bcd60e51b81526004016103cc90612493565b3390565b6001546001600160a01b031690565b6040805160018082528183019092526060918291906020808301908038833901905050905063c15d145060e01b8160008151811061168e57fe5b6001600160e01b031990921660209283029190910190910152905090565b6020015190565b60006060306001600160a01b0316836040516116cf919061234e565b6000604051808303816000865af19150503d806000811461170c576040519150601f19603f3d011682016040523d82523d6000602084013e611711565b606091505b50915091508161178857604481511161173c5760405162461bcd60e51b81526004016103cc90612463565b61176f6040518060400160405280601181526020017003932b1b2b4bb32a0b8383937bb30b61d1607d1b81525082611902565b60405162461bcd60e51b81526004016103cc9190612432565b505050565b6001600160a01b0381166117b35760405162461bcd60e51b81526004016103cc90612473565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000818361182f5760405162461bcd60e51b81526004016103cc9190612432565b5082848161183957fe5b0690505b9392505050565b60008261185357506000610f14565b8282028284828161186057fe5b0414610f115760405162461bcd60e51b81526004016103cc906124c3565b6000610f1183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506119fc565b6000610f1183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611a33565b6060808390506060839050606060448251845101036040519080825280601f01601f191660200182016040528015611941576020820181803883390190505b509050806000805b855181101561199a5785818151811061195e57fe5b602001015160f81c60f81b83838060010194508151811061197b57fe5b60200101906001600160f81b031916908160001a905350600101611949565b5060445b84518110156119ef578481815181106119b357fe5b602001015160f81c60f81b8383806001019450815181106119d057fe5b60200101906001600160f81b031916908160001a90535060010161199e565b5090979650505050505050565b60008183611a1d5760405162461bcd60e51b81526004016103cc9190612432565b506000838581611a2957fe5b0495945050505050565b60008184841115611a575760405162461bcd60e51b81526004016103cc9190612432565b505050900390565b8035610f14816126d9565b8051610f14816126d9565b600082601f830112611a8657600080fd5b8151611a99611a948261261b565b6125f4565b91508181835260208401935060208101905083856020840282011115611abe57600080fd5b60005b83811015611aea5781611ad48882611b6f565b8452506020928301929190910190600101611ac1565b5050505092915050565b600082601f830112611b0557600080fd5b8151611b13611a948261261b565b91508181835260208401935060208101905083856020840282011115611b3857600080fd5b60005b83811015611aea5781611b4e8882611bd9565b8452506020928301929190910190600101611b3b565b8051610f14816126ed565b8051610f14816126f6565b60008083601f840112611b8c57600080fd5b50813567ffffffffffffffff811115611ba457600080fd5b602083019150836001820283011115611bbc57600080fd5b9250929050565b8035610f14816126f6565b8035610f14816126ff565b8051610f1481612708565b600060208284031215611bf657600080fd5b6000611c028484611a5f565b949350505050565b600060208284031215611c1c57600080fd5b6000611c028484611a6a565b600080600080600060808688031215611c4057600080fd5b6000611c4c8888611a5f565b9550506020611c5d88828901611bc3565b9450506040611c6e88828901611a5f565b935050606086013567ffffffffffffffff811115611c8b57600080fd5b611c9788828901611b7a565b92509250509295509295909350565b600080600060608486031215611cbb57600080fd5b6000611cc78686611a5f565b9350506020611cd886828701611bc3565b9250506040611ce986828701611bc3565b9150509250925092565b600080600060608486031215611d0857600080fd5b6000611d148686611a5f565b9350506020611d2586828701611bce565b9250506040611ce986828701611a5f565b60008060408385031215611d4957600080fd5b825167ffffffffffffffff811115611d6057600080fd5b611d6c85828601611a75565b925050602083015167ffffffffffffffff811115611d8957600080fd5b611d9585828601611af4565b9150509250929050565b600060208284031215611db157600080fd5b6000611c028484611b64565b600080600060608486031215611dd257600080fd5b6000611dde8686611b6f565b9350506020611def86828701611a6a565b9250506040611ce986828701611b6f565b600060208284031215611e1257600080fd5b6000611c028484611bc3565b600060208284031215611e3057600080fd5b6000611c028484611b6f565b60008060408385031215611e4f57600080fd5b6000611e5b8585611bc3565b9250506020611d9585828601611bc3565b600060208284031215611e7e57600080fd5b6000611c028484611bd9565b611e938161264e565b82525050565b611e9381612659565b611e93611eae8261265e565b612668565b6000611ebf8385612640565b9350611ecc838584612697565b50500190565b6000611edd8261263c565b611ee78185612640565b9350611ef78185602086016126a3565b9290920192915050565b611e938161268c565b6000611f158261263c565b611f1f8185612645565b9350611f2f8185602086016126a3565b611f38816126cf565b9093019392505050565b6000611f4f601083612645565b6f1a5b9d985b1a59081a5b9d195c9d985b60821b815260200192915050565b6000611f7b601683612645565b751cd85b59481bdddb995c881b9bdd08185b1b1bddd95960521b815260200192915050565b6000611fad603083612645565b7f72656365697665417070726f76616c3a205472616e73616374696f6e2065786581526f31baba34b7b7103932bb32b93a32b21760811b602082015260400192915050565b6000611fff602683612645565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000612047601583612645565b741b595d1a1bd9081a5cc81b9bdd08185b1b1bddd959605a1b815260200192915050565b6000612078601b83612645565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006120b1600f83612645565b6e696e76616c6964206164647265737360881b815260200192915050565b60006120dc600f83612645565b6e0e6cadcc8cae440dad2e6dac2e8c6d608b1b815260200192915050565b6000612107602183612645565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b600061214a600c83612645565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000612172601983612645565b7f64656c656761746565206164647265737320696e76616c696400000000000000815260200192915050565b60006121ab601f83612645565b7f696e76616c6964206e657720746f6b656e206f776e6572206164647265737300815260200192915050565b60006121e4602283612645565b7f696e76616c6964206e657720696d706c656d656e746174696f6e206164647265815261737360f01b602082015260400192915050565b6000612228600e83612645565b6d696e76616c696420706172616d7360901b815260200192915050565b6000612252601883612645565b7f7265636569766572206164647265737320696e76616c69640000000000000000815260200192915050565b600061228b600f83612645565b6e1d1c985b9cd9995c8819985a5b1959608a1b815260200192915050565b60006122b6600f83612645565b6e0c2dadeeadce840dad2e6dac2e8c6d608b1b815260200192915050565b60006122e1601a83612645565b7f637265617465206e65772076657374696e672061646472657373000000000000815260200192915050565b611e9381612668565b611e9381612677565b611e9381612680565b60006123348286611ea2565b601c82019150612345828486611eb3565b95945050505050565b600061183d8284611ed2565b60208101610f148284611e8a565b606081016123768286611e8a565b6123836020830185611e8a565b611c02604083018461230d565b6060810161239e8286611e8a565b6123ab6020830185611e8a565b611c026040830184612316565b604081016123c68285611e8a565b61183d602083018461230d565b606081016123e18286611e8a565b612383602083018561230d565b606081016123fc8286611e8a565b6124096020830185612316565b611c026040830184611e8a565b60208101610f148284611e99565b60208101610f148284611f01565b60208082528101610f118184611f0a565b60208082528101610f1481611f42565b60208082528101610f1481611f6e565b60208082528101610f1481611fa0565b60208082528101610f1481611ff2565b60208082528101610f148161203a565b60208082528101610f148161206b565b60208082528101610f14816120a4565b60208082528101610f14816120cf565b60208082528101610f14816120fa565b60208082528101610f148161213d565b60208082528101610f1481612165565b60208082528101610f148161219e565b60208082528101610f14816121d7565b60208082528101610f148161221b565b60208082528101610f1481612245565b60208082528101610f148161227e565b60208082528101610f14816122a9565b60208082528101610f14816122d4565b60208101610f14828461230d565b604081016123c6828561230d565b60c0810161258d828961230d565b61259a602083018861230d565b6125a7604083018761230d565b6125b4606083018661230d565b6125c16080830185611e8a565b6125ce60a0830184611e8a565b979650505050505050565b606081016125e7828661231f565b612409602083018561230d565b60405181810167ffffffffffffffff8111828210171561261357600080fd5b604052919050565b600067ffffffffffffffff82111561263257600080fd5b5060209081020190565b5190565b919050565b90815260200190565b6000610f148261266b565b151590565b63ffffffff191690565b90565b6001600160a01b031690565b63ffffffff1690565b6001600160601b031690565b6000610f148261264e565b82818337506000910152565b60005b838110156126be5781810151838201526020016126a6565b83811115610b4b5750506000910152565b601f01601f191690565b6126e28161264e565b811461052257600080fd5b6126e281612659565b6126e281612668565b6126e281612677565b6126e28161268056fea365627a7a72315820c9e0ae7da45ee9aa72f34d2df67ca516181ff60df22349f402454f6b701238136c6578706572696d656e74616cf564736f6c63430005110040",
  "devdoc": {
    "details": "Deployed by FourYearVestingFactory contract.",
    "methods": {
      "approveOwnershipTransfer()": {
        "details": "Token owner can only be modified when both vesting owner and token owner have approved. This function ascertains the approval of token owner."
      },
      "changeTokenOwner(address)": {
        "details": "Modifies token owner. This must be followed by approval from token owner.",
        "params": {
          "_newTokenOwner": "Address of new token owner."
        }
      },
      "collectDividends(address,uint32,address)": {
        "params": {
          "_loanPoolToken": "The loan pool token address.",
          "_maxCheckpoints": "Maximum number of checkpoints to be processed.",
          "_receiver": "The receiver of tokens or msg.sender"
        }
      },
      "delegate(address)": {
        "params": {
          "_delegatee": "The address to delegate votes to."
        }
      },
      "extendStaking()": {
        "details": "Tokens are vested for 4 years. Since the max staking period is 3 years and the tokens are unlocked only after the first year(timeDuration) is passed, hence, we usually extend the duration of staking for all unlocked tokens for the first year by 3 years. In some cases, the timeDuration can differ."
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "receiveApproval(address,uint256,address,bytes)": {
        "params": {
          "_data": "The data will be used for low level call."
        }
      },
      "setImpl(address)": {
        "details": "This function sets the new implementation address. It must also be approved by the Vesting owner.",
        "params": {
          "_newImplementation": "Address of the new implementation."
        }
      },
      "setMaxInterval(uint256)": {
        "params": {
          "_interval": "Max interval for which tokens scheduled shall be staked."
        }
      },
      "stakeTokens(uint256,uint256)": {
        "params": {
          "_amount": "The amount of tokens to stake.",
          "_restartStakeSchedule": "The time from which staking schedule restarts. The issue is that we can only stake tokens for a max duration. Thus, we need to restart from the lastSchedule."
        },
        "return": "lastSchedule The max duration for which tokens were staked.remainingAmount The amount outstanding - to be staked."
      },
      "stakeTokensWithApproval(address,uint256,uint256)": {
        "details": "This function will be invoked from receiveApproval.SOV.approveAndCall -> this.receiveApproval -> this.stakeTokensWithApproval",
        "params": {
          "_amount": "The amount of tokens to stake.",
          "_restartStakeSchedule": "The time from which staking schedule restarts. The issue is that we can only stake tokens for a max duration. Thus, we need to restart from the lastSchedule.",
          "_sender": "The sender of SOV.approveAndCall"
        },
        "return": "lastSchedule The max duration for which tokens were staked.remainingAmount The amount outstanding - to be staked."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawTokens(address)": {
        "params": {
          "receiver": "The receiving address."
        }
      }
    },
    "title": "Four Year Vesting Logic contract."
  },
  "userdoc": {
    "methods": {
      "approveOwnershipTransfer()": {
        "notice": "Approve token owner change - only token Owner."
      },
      "changeTokenOwner(address)": {
        "notice": "Change token owner - only vesting owner is allowed to change."
      },
      "collectDividends(address,uint32,address)": {
        "notice": "Collect dividends from fee sharing proxy."
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` which are locked until lockDate to `delegatee`."
      },
      "extendStaking()": {
        "notice": "Extends stakes(unlocked till timeDuration) for four year vesting contracts."
      },
      "migrateToNewStakingContract()": {
        "notice": "Allows the owners to migrate the positions to a new staking contract."
      },
      "receiveApproval(address,uint256,address,bytes)": {
        "notice": "Receives approval from SOV token."
      },
      "setImpl(address)": {
        "notice": "Set address of the implementation - only Token Owner."
      },
      "setMaxInterval(uint256)": {
        "notice": "Sets the max interval."
      },
      "stakeTokens(uint256,uint256)": {
        "notice": "Stakes tokens according to the vesting schedule."
      },
      "stakeTokensWithApproval(address,uint256,uint256)": {
        "notice": "Stakes tokens according to the vesting schedule."
      },
      "withdrawTokens(address)": {
        "notice": "Withdraws unlocked tokens from the staking contract and forwards them to an address specified by the token owner."
      }
    },
    "notice": "Staking, delegating and withdrawal functionality."
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 52590,
        "contract": "contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol:FourYearVestingLogic",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31440,
        "contract": "contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol:FourYearVestingLogic",
        "label": "SOV",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)31656"
      },
      {
        "astId": 31442,
        "contract": "contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol:FourYearVestingLogic",
        "label": "staking",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IStaking)16226"
      },
      {
        "astId": 31444,
        "contract": "contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol:FourYearVestingLogic",
        "label": "tokenOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 31446,
        "contract": "contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol:FourYearVestingLogic",
        "label": "feeSharingCollector",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IFeeSharingCollector)15397"
      },
      {
        "astId": 31454,
        "contract": "contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol:FourYearVestingLogic",
        "label": "startDate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 31456,
        "contract": "contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol:FourYearVestingLogic",
        "label": "endDate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 31461,
        "contract": "contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol:FourYearVestingLogic",
        "label": "maxInterval",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 31463,
        "contract": "contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol:FourYearVestingLogic",
        "label": "lastStakingSchedule",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 31465,
        "contract": "contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol:FourYearVestingLogic",
        "label": "remainingStakeAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 31467,
        "contract": "contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol:FourYearVestingLogic",
        "label": "durationLeft",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 31469,
        "contract": "contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol:FourYearVestingLogic",
        "label": "cliffAdded",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 31471,
        "contract": "contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol:FourYearVestingLogic",
        "label": "newTokenOwner",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 31473,
        "contract": "contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol:FourYearVestingLogic",
        "label": "newImplementation",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 31475,
        "contract": "contracts/governance/Vesting/fouryear/FourYearVestingLogic.sol:FourYearVestingLogic",
        "label": "extendDurationFor",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)31656": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFeeSharingCollector)15397": {
        "encoding": "inplace",
        "label": "contract IFeeSharingCollector",
        "numberOfBytes": "20"
      },
      "t_contract(IStaking)16226": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}