{
    "address": "0x225B21542264b93C34b4ce1b77977e5991d2D875",
    "abi": [
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32"
                }
            ],
            "name": "ContractCodeHashAdded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32"
                }
            ],
            "name": "ContractCodeHashRemoved",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lockedTS",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint96",
                    "name": "value",
                    "type": "uint96"
                }
            ],
            "name": "VestingStakeSet",
            "type": "event"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "DELEGATION_TYPEHASH",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "DOMAIN_TYPEHASH",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "MAX_DURATION",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "MAX_VOTING_WEIGHT",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "SOVToken",
            "outputs": [
                {
                    "internalType": "contract IERC20",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "WEIGHT_FACTOR",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "vesting",
                    "type": "address"
                }
            ],
            "name": "addContractCodeHash",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "admins",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "allUnlocked",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "delegateStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "delegates",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "feeSharing",
            "outputs": [
                {
                    "internalType": "contract IFeeSharingCollector",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "frozen",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "getFunctionsList",
            "outputs": [
                {
                    "internalType": "bytes4[]",
                    "name": "",
                    "type": "bytes4[]"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "date",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "blockNumber",
                    "type": "uint256"
                }
            ],
            "name": "getPriorUserStakeByDate",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "date",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "blockNumber",
                    "type": "uint256"
                }
            ],
            "name": "getPriorVestingStakeByDate",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "blockNumber",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "date",
                    "type": "uint256"
                }
            ],
            "name": "getPriorVestingWeightedStake",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "votes",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "isOwner",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "stakerAddress",
                    "type": "address"
                }
            ],
            "name": "isVestingContract",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "kickoffTS",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "newStakingContract",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "nonces",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numDelegateStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numTotalStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numUserStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numVestingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "paused",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "pausers",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "vesting",
                    "type": "address"
                }
            ],
            "name": "removeContractCodeHash",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_vestingRegistryProxy",
                    "type": "address"
                }
            ],
            "name": "setVestingRegistry",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "uint256[]",
                    "name": "lockedDates",
                    "type": "uint256[]"
                },
                {
                    "internalType": "uint96[]",
                    "name": "values",
                    "type": "uint96[]"
                }
            ],
            "name": "setVestingStakes",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "totalStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "userStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "vestingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "name": "vestingCodeHashes",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "vestingRegistryLogic",
            "outputs": [
                {
                    "internalType": "contract IVestingRegistry",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "vestingWhitelist",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "weightScaling",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "date",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "startDate",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "blockNumber",
                    "type": "uint256"
                }
            ],
            "name": "weightedVestingStakeByDate",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "power",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "transactionHash": "0x2b6864061f2170204b56bf2eca4cc7d000cea35ccd043dc006f766af05b2f920",
    "receipt": {
        "to": null,
        "from": "0x8C9143221F2b72Fcef391893c3a02Cf0fE84f50b",
        "contractAddress": "0x225B21542264b93C34b4ce1b77977e5991d2D875",
        "transactionIndex": 0,
        "gasUsed": "2547003",
        "logsBloom": "0x
        "blockHash": "0xb17752cee95d7ea0d0849e38ef7b70ae073b74675d8d982ed6fa2d6c313bdc7a",
        "transactionHash": "0x2b6864061f2170204b56bf2eca4cc7d000cea35ccd043dc006f766af05b2f920",
        "logs": [
            {
                "transactionIndex": 0,
                "blockNumber": 3556941,
                "transactionHash": "0x2b6864061f2170204b56bf2eca4cc7d000cea35ccd043dc006f766af05b2f920",
                "address": "0x225B21542264b93C34b4ce1b77977e5991d2D875",
                "topics": [
                    "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x0000000000000000000000008c9143221f2b72fcef391893c3a02cf0fe84f50b"
                ],
                "data": "0x",
                "logIndex": 0,
                "blockHash": "0xb17752cee95d7ea0d0849e38ef7b70ae073b74675d8d982ed6fa2d6c313bdc7a"
            }
        ],
        "blockNumber": 3556941,
        "cumulativeGasUsed": "2547003",
        "status": 1,
        "byzantium": true
    },
    "args": [],
    "numDeployments": 1,
    "solcInputHash": "015b019a6db9133c2258981a8efcf2d8",
    "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ContractCodeHashAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ContractCodeHashRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedTS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"name\":\"VestingStakeSet\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VOTING_WEIGHT\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOVToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEIGHT_FACTOR\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"}],\"name\":\"addContractCodeHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"delegateStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeSharing\",\"outputs\":[{\"internalType\":\"contract IFeeSharingCollector\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFunctionsList\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"\",\"type\":\"bytes4[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorUserStakeByDate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVestingStakeByDate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"getPriorVestingWeightedStake\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"isVestingContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kickoffTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newStakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numDelegateStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numTotalStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numUserStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numVestingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"}],\"name\":\"removeContractCodeHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingRegistryProxy\",\"type\":\"address\"}],\"name\":\"setVestingRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lockedDates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint96[]\",\"name\":\"values\",\"type\":\"uint96[]\"}],\"name\":\"setVestingStakes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"totalStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"userStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"vestingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vestingCodeHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingRegistryLogic\",\"outputs\":[{\"internalType\":\"contract IVestingRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weightScaling\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"weightedVestingStakeByDate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"power\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addContractCodeHash(address)\":{\"details\":\"We need it to use isVestingContract() function instead of isContract()\",\"params\":{\"vesting\":\"The address of Vesting contract.\"}},\"getPriorUserStakeByDate(address,uint256,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check.\",\"blockNumber\":\"The block number to get the vote balance at.\",\"date\":\"The lock date. Adjusted to the next valid lock date, if necessary.\"},\"return\":\"The number of votes the account had as of the given block.\"},\"getPriorVestingStakeByDate(uint256,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"blockNumber\":\"The block number to get the vote balance at.\",\"date\":\"The lock date. Adjusted to the next valid lock date, if necessary.\"},\"return\":\"The number of votes the account had as of the given block.\"},\"getPriorVestingWeightedStake(uint256,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.     Used for fee sharing, not voting. TODO: WeightedStaking::getPriorVestingWeightedStake is using the variable name \\\"votes\\\" to add up token stake, and that could be misleading.\",\"params\":{\"blockNumber\":\"The block number to get the vote balance at.\",\"date\":\"The staking date to compute the power for.\"},\"return\":\"The weighted stake the account had as of the given block.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"isVestingContract(address)\":{\"params\":{\"stakerAddress\":\"the address to check\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeContractCodeHash(address)\":{\"details\":\"We need it to use isVestingContract() function instead of isContract()\",\"params\":{\"vesting\":\"The address of Vesting contract.\"}},\"setVestingRegistry(address)\":{\"details\":\"_vestingRegistryProxy can be set to 0 as this function can be reused by various other functionalities without the necessity of linking it with Vesting Registry\",\"params\":{\"_vestingRegistryProxy\":\"the address of vesting registry proxy contract\"}},\"setVestingStakes(uint256[],uint96[])\":{\"params\":{\"lockedDates\":\"The arrays of lock dates.\",\"values\":\"The array of values to add to the staked balance. TODO: remove - it was designed as a disposable function to initialize vesting checkpoints\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"weightedVestingStakeByDate(uint256,uint256,uint256)\":{\"params\":{\"blockNumber\":\"The block number, needed for checkpointing.\",\"date\":\"The staking date to compute the power for. Adjusted to the previous valid lock date, if necessary.\",\"startDate\":\"The date for which we need to know the power of the stake. Adjusted to the previous valid lock date, if necessary.\"},\"return\":\"The stacking power.\"}},\"title\":\"Staking Vesting Module contract\"},\"userdoc\":{\"methods\":{\"addContractCodeHash(address)\":{\"notice\":\"Add vesting contract's code hash to a map of code hashes.\"},\"getPriorUserStakeByDate(address,uint256,uint256)\":{\"notice\":\"Determine the prior number of stake for an account until a certain lock date as of a block number.\"},\"getPriorVestingStakeByDate(uint256,uint256)\":{\"notice\":\"Determine the prior number of vested stake for an account until a certain lock date as of a block number.\"},\"getPriorVestingWeightedStake(uint256,uint256)\":{\"notice\":\"Determine the prior weighted vested amount for an account as of a block number. Iterate through checkpoints adding up voting power.\"},\"isVestingContract(address)\":{\"notice\":\"Return flag whether the given address is a registered vesting contract.\"},\"removeContractCodeHash(address)\":{\"notice\":\"Remove vesting contract's code hash to a map of code hashes.\"},\"setVestingRegistry(address)\":{\"notice\":\"sets vesting registry\"},\"setVestingStakes(uint256[],uint96[])\":{\"notice\":\"Sets the users' vesting stakes for a giving lock dates and writes checkpoints.\"},\"weightedVestingStakeByDate(uint256,uint256,uint256)\":{\"notice\":\"Compute the voting power for a specific date. Power = stake * weight\"}},\"notice\":\"Implements interaction with Vesting functionality: vesting registry, vesting staking\"}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Staking/modules/StakingVestingModule.sol\":\"StakingVestingModule\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/governance/IFeeSharingCollector.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for contract governance/FeeSharingCollector/FeeSharingCollector.sol\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * */\\ninterface IFeeSharingCollector {\\n    function withdrawFees(address[] calldata _token) external;\\n\\n    function transferTokens(address _token, uint96 _amount) external;\\n\\n    function withdraw(\\n        address _loanPoolToken,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7794cb434d9395ea983dcf8ded48db5b68897a338429320f60172c4caa47fb40\"},\"contracts/governance/Staking/SafeMath96.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title SafeMath96 contract.\\n * @notice Improved Solidity's arithmetic operations with added overflow checks.\\n * @dev SafeMath96 uses uint96, unsigned integers of 96 bits length, so every\\n * integer from 0 to 2^96-1 can be operated.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * SafeMath restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this contract instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n * */\\ncontract SafeMath96 {\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe64(uint256 n, string memory errorMessage) internal pure returns (uint64) {\\n        require(n < 2**64, errorMessage);\\n        return uint64(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `+` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe addition a+b.\\n     * */\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Substracts two unsigned integers, reverting on underflow.\\n     * @dev Counterpart to Solidity's `-` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on underflow.\\n     * @return The safe substraction a-b.\\n     * */\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `*` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe product a*b.\\n     * */\\n    function mul96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint96 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Divides two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `/` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe division a/b.\\n     * */\\n    function div96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint96 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xc37b24a41212f26435849813104568112c9e151a60018f53d76c7d06e74782ce\"},\"contracts/governance/Staking/modules/StakingVestingModule.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./shared/StakingShared.sol\\\";\\nimport \\\"../../../proxy/modules/interfaces/IFunctionsList.sol\\\";\\n\\n/**\\n * @title Staking Vesting Module contract\\n * @notice Implements interaction with Vesting functionality: vesting registry, vesting staking\\n * */\\ncontract StakingVestingModule is IFunctionsList, StakingShared {\\n    event ContractCodeHashAdded(bytes32 hash);\\n    event ContractCodeHashRemoved(bytes32 hash);\\n    event VestingStakeSet(uint256 lockedTS, uint96 value);\\n\\n    /**\\n     * @notice sets vesting registry\\n     * @param _vestingRegistryProxy the address of vesting registry proxy contract\\n     * @dev _vestingRegistryProxy can be set to 0 as this function can be reused by\\n     * various other functionalities without the necessity of linking it with Vesting Registry\\n     */\\n    function setVestingRegistry(address _vestingRegistryProxy) external onlyOwner whenNotFrozen {\\n        vestingRegistryLogic = IVestingRegistry(_vestingRegistryProxy);\\n    }\\n\\n    /**\\n     * @notice Sets the users' vesting stakes for a giving lock dates and writes checkpoints.\\n     * @param lockedDates The arrays of lock dates.\\n     * @param values The array of values to add to the staked balance.\\n     * TODO: remove - it was designed as a disposable function to initialize vesting checkpoints\\n     */\\n    function setVestingStakes(uint256[] calldata lockedDates, uint96[] calldata values)\\n        external\\n        onlyAuthorized\\n        whenNotFrozen\\n    {\\n        require(lockedDates.length == values.length, \\\"arrays mismatch\\\"); // WS05\\n\\n        uint256 length = lockedDates.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            _setVestingStake(lockedDates[i], values[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the users' vesting stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to be set.\\n     * TODO: remove - it was designed as a disposable function to initialize vesting checkpoints\\n     */\\n    function _setVestingStake(uint256 lockedTS, uint96 value) internal {\\n        require(\\n            lockedTS > kickoffTS,\\n            \\\"Invalid lock dates: must greater than contract creation timestamp\\\"\\n        );\\n\\n        // locked date must be multiples of 14 days / TWO_WEEKS\\n        require(\\n            (lockedTS - kickoffTS) % TWO_WEEKS == 0,\\n            \\\"Invalid lock dates: not multiples of 14 days\\\"\\n        );\\n\\n        // locked date must not exceed the MAX_DURATION\\n        require(\\n            lockedTS - block.timestamp <= MAX_DURATION,\\n            \\\"Invalid lock dates: exceed max duration\\\"\\n        );\\n\\n        // the value must not exceed the total staked at the given locked date\\n        uint32 nStakeCheckpoints = numTotalStakingCheckpoints[lockedTS];\\n        uint96 totalStaked = totalStakingCheckpoints[lockedTS][nStakeCheckpoints - 1].stake;\\n        require(\\n            value <= totalStaked,\\n            \\\"Invalid stake amount: greater than the total staked for given date\\\"\\n        );\\n\\n        uint32 nCheckpoints = numVestingCheckpoints[lockedTS];\\n        uint32 blockNumber;\\n\\n        Checkpoint memory recentCP = vestingCheckpoints[lockedTS][nCheckpoints - 1];\\n        if (nCheckpoints == 0) blockNumber = uint32(block.number) - 1;\\n        else blockNumber = recentCP.fromBlock + 1;\\n\\n        vestingCheckpoints[lockedTS][nCheckpoints] = Checkpoint(blockNumber, value);\\n        numVestingCheckpoints[lockedTS] = nCheckpoints + 1;\\n\\n        emit VestingStakeSet(lockedTS, value);\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The lock date. Adjusted to the next valid lock date, if necessary.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorUserStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96) {\\n        uint96 priorStake = _getPriorUserStakeByDate(account, date, blockNumber);\\n        // @dev we need to modify function in order to workaround issue with Vesting.withdrawTokens:\\n        //\\t\\treturn 1 instead of 0 if message sender is a contract.\\n        if (priorStake == 0 && _isVestingContract(msg.sender)) {\\n            priorStake = 1;\\n        }\\n        return priorStake;\\n    }\\n\\n    /*************************** Weighted Vesting Stake computation for fee sharing *******************************/\\n\\n    /**\\n     * @notice Determine the prior weighted vested amount for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     * TODO: WeightedStaking::getPriorVestingWeightedStake is using the variable name \\\"votes\\\"\\n     * to add up token stake, and that could be misleading.\\n     *\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorVestingWeightedStake(uint256 blockNumber, uint256 date)\\n        external\\n        view\\n        returns (uint96 votes)\\n    {\\n        /// @dev If date is not an exact break point, start weight computation from the previous break point (alternative would be the next).\\n        uint256 start = _timestampToLockDate(date);\\n        uint256 end = start + MAX_DURATION;\\n\\n        /// @dev Max 78 iterations.\\n        for (uint256 i = start; i <= end; i += TWO_WEEKS) {\\n            uint96 weightedStake = _weightedVestingStakeByDate(i, start, blockNumber);\\n            if (weightedStake > 0) {\\n                votes = add96(votes, weightedStake, \\\"WS15\\\"); // overflow on total weight\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * @param date The staking date to compute the power for. Adjusted to the previous valid lock date, if necessary.\\n     * @param startDate The date for which we need to know the power of the stake. Adjusted to the previous valid lock date, if necessary.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedVestingStakeByDate(\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power) {\\n        date = _timestampToLockDate(date);\\n        startDate = _timestampToLockDate(startDate);\\n        power = _weightedVestingStakeByDate(date, startDate, blockNumber);\\n    }\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * @param date The staking date to compute the power for.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function _weightedVestingStakeByDate(\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) internal view returns (uint96 power) {\\n        uint96 staked = _getPriorVestingStakeByDate(date, blockNumber);\\n        if (staked > 0) {\\n            uint96 weight = _computeWeightByDate(date, startDate);\\n            power = mul96(staked, weight, \\\"WS16\\\") / WEIGHT_FACTOR; // multiplication overflow\\n        } else {\\n            power = 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of vested stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param date The lock date. Adjusted to the next valid lock date, if necessary.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorVestingStakeByDate(uint256 date, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96)\\n    {\\n        date = _adjustDateForOrigin(date);\\n        return _getPriorVestingStakeByDate(date, blockNumber);\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of vested stake for an account until a\\n     * \\t\\tcertain lock date as of a block number.\\n     * @dev All functions of Staking contract use this internal version,\\n     * \\t\\twe need to modify public function in order to workaround issue with Vesting.withdrawTokens:\\n     * return 1 instead of 0 if message sender is a contract.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function _getPriorVestingStakeByDate(uint256 date, uint256 blockNumber)\\n        internal\\n        view\\n        returns (uint96)\\n    {\\n        require(blockNumber < _getCurrentBlockNumber(), \\\"not determined\\\"); // WS17\\n\\n        uint32 nCheckpoints = numVestingCheckpoints[date];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        /// @dev First check most recent balance.\\n        if (vestingCheckpoints[date][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return vestingCheckpoints[date][nCheckpoints - 1].stake;\\n        }\\n\\n        /// @dev Next check implicit zero balance.\\n        if (vestingCheckpoints[date][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; /// @dev ceil, avoiding overflow.\\n            Checkpoint memory cp = vestingCheckpoints[date][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.stake;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return vestingCheckpoints[date][lower].stake;\\n    }\\n\\n    /**\\n     * @notice Add vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function addContractCodeHash(address vesting) external onlyAuthorized whenNotFrozen {\\n        bytes32 codeHash = _getCodeHash(vesting);\\n        vestingCodeHashes[codeHash] = true;\\n        emit ContractCodeHashAdded(codeHash);\\n    }\\n\\n    /**\\n     * @notice Remove vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function removeContractCodeHash(address vesting) external onlyAuthorized whenNotFrozen {\\n        bytes32 codeHash = _getCodeHash(vesting);\\n        require(vestingCodeHashes[codeHash], \\\"not a registered vesting code hash\\\");\\n        vestingCodeHashes[codeHash] = false;\\n        emit ContractCodeHashRemoved(codeHash);\\n    }\\n\\n    /**\\n     * @notice Return flag whether the given address is a registered vesting contract.\\n     * @param stakerAddress the address to check\\n     */\\n    function isVestingContract(address stakerAddress) external view returns (bool) {\\n        bool isVesting;\\n        bytes32 codeHash = _getCodeHash(stakerAddress);\\n        if (address(vestingRegistryLogic) != address(0)) {\\n            isVesting = vestingRegistryLogic.isVestingAddress(stakerAddress);\\n        }\\n\\n        if (isVesting) return true;\\n        if (vestingCodeHashes[codeHash]) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Return hash of contract code\\n     */\\n    function _getCodeHash(address _contract) internal view returns (bytes32) {\\n        bytes32 codeHash;\\n        assembly {\\n            codeHash := extcodehash(_contract)\\n        }\\n        return codeHash;\\n    }\\n\\n    function getFunctionsList() external pure returns (bytes4[] memory) {\\n        bytes4[] memory functionsList = new bytes4[](9);\\n        functionsList[0] = this.setVestingRegistry.selector;\\n        functionsList[1] = this.setVestingStakes.selector;\\n        functionsList[2] = this.getPriorUserStakeByDate.selector;\\n        functionsList[3] = this.getPriorVestingWeightedStake.selector;\\n        functionsList[4] = this.getPriorVestingStakeByDate.selector;\\n        functionsList[5] = this.addContractCodeHash.selector;\\n        functionsList[6] = this.removeContractCodeHash.selector;\\n        functionsList[7] = this.isVestingContract.selector;\\n        functionsList[8] = this.weightedVestingStakeByDate.selector;\\n        return functionsList;\\n    }\\n}\\n\",\"keccak256\":\"0x9a77699de52567c38cccf3a4f4c2b2070c5c54589ed4a2ba8843610c63f9c089\"},\"contracts/governance/Staking/modules/shared/StakingShared.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./StakingStorageShared.sol\\\";\\nimport \\\"../../SafeMath96.sol\\\";\\nimport \\\"../../../../openzeppelin/SafeMath.sol\\\";\\nimport \\\"../../../../openzeppelin/Ownable.sol\\\";\\n\\n/**\\n * @title Staking modules shared functionality\\n */\\ncontract StakingShared is StakingStorageShared, SafeMath96 {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant FOUR_WEEKS = 4 weeks;\\n\\n    /**\\n     * @dev Throws if paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"paused\\\"); // SS03\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner or admin.\\n     */\\n    modifier onlyAuthorized() {\\n        require(isOwner() || admins[msg.sender], \\\"unauthorized\\\"); // SS01\\n        _;\\n    }\\n\\n    /**\\n\\t * @dev Throws if called by any account other than the owner or admin or pauser.\\n\\t \\n\\tmodifier onlyAuthorizedOrPauser() {\\n\\t\\trequire(isOwner() || admins[msg.sender] || pausers[msg.sender], \\\"unauthorized\\\"); // WS02\\n\\t\\t_;\\n\\t}\\n\\t*/\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner or pauser.\\n     */\\n    modifier onlyPauserOrOwner() {\\n        require(isOwner() || pausers[msg.sender], \\\"unauthorized\\\"); // SS02\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than pauser.\\n     * @notice Uncomment when needed\\n     */\\n    /*\\n\\tmodifier onlyPauser() {\\n\\t\\trequire(pausers[msg.sender], \\\"Not pauser\\\");\\n\\t\\t_;\\n\\t}\\n\\t*/\\n\\n    /**\\n     * @dev Throws if frozen.\\n     */\\n    modifier whenNotFrozen() {\\n        require(!frozen, \\\"paused\\\"); // SS04\\n        _;\\n    }\\n\\n    constructor() internal {\\n        // abstract\\n    }\\n\\n    function _notSameBlockAsStakingCheckpoint(uint256 lockDate, address stakeFor) internal view {\\n        uint32 nCheckpoints = numUserStakingCheckpoints[stakeFor][lockDate];\\n        bool notSameBlock =\\n            userStakingCheckpoints[stakeFor][lockDate][nCheckpoints - 1].fromBlock != block.number;\\n        require(notSameBlock, \\\"cannot be mined in the same block as last stake\\\"); // S20\\n    }\\n\\n    /**\\n     * @notice Unstaking is possible every 2 weeks only. This means, to\\n     * calculate the key value for the staking checkpoints, we need to\\n     * map the intended timestamp to the closest available date.\\n     * @param timestamp The unlocking timestamp.\\n     * @return The actual unlocking date (might be up to 2 weeks shorter than intended).\\n     * */\\n    function _timestampToLockDate(uint256 timestamp) internal view returns (uint256 lockDate) {\\n        // Optimize gas costs by reading kickoffTS from storage only once.\\n        uint256 start = kickoffTS;\\n        require(timestamp >= start, \\\"timestamp < contract creation\\\"); // WS23\\n        /**\\n         * @dev If staking timestamp does not match any of the unstaking dates\\n         * , set the lockDate to the closest one before the timestamp.\\n         * E.g. Passed timestamps lies 7 weeks after kickoff -> only stake for 6 weeks.\\n         * */\\n        uint256 periodFromKickoff = (timestamp - start) / TWO_WEEKS;\\n        lockDate = periodFromKickoff * TWO_WEEKS + start;\\n    }\\n\\n    /**\\n     * @notice Determine the current Block Number\\n     * @dev This is segregated from the _getPriorUserStakeByDate function to better test\\n     * advancing blocks functionality using Mock Contracts\\n     * */\\n    function _getCurrentBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account until a\\n     * \\t\\tcertain lock date as of a block number.\\n     * @dev All functions of Staking contract use this internal version,\\n     * \\t\\twe need to modify public function in order to workaround issue with Vesting.withdrawTokens:\\n     * return 1 instead of 0 if message sender is a contract.\\n     * @param account The address of the account to check.\\n     * @param date The lock date. Adjusted to the next valid lock date, if necessary.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function _getPriorUserStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) internal view returns (uint96) {\\n        require(blockNumber < _getCurrentBlockNumber(), \\\"not determined\\\"); // WS14\\n\\n        date = _adjustDateForOrigin(date);\\n        uint32 nCheckpoints = numUserStakingCheckpoints[account][date];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        /// @dev First check most recent balance.\\n        if (userStakingCheckpoints[account][date][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return userStakingCheckpoints[account][date][nCheckpoints - 1].stake;\\n        }\\n\\n        /// @dev Next check implicit zero balance.\\n        if (userStakingCheckpoints[account][date][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; /// @dev ceil, avoiding overflow.\\n            Checkpoint memory cp = userStakingCheckpoints[account][date][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.stake;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return userStakingCheckpoints[account][date][lower].stake;\\n    }\\n\\n    /**\\n     * @dev origin vesting contracts have different dates\\n     * we need to add 2 weeks to get end of period (by default, it's start)\\n     * @param date The staking date to compute the power for.\\n     * @return unlocking date.\\n     */\\n    function _adjustDateForOrigin(uint256 date) internal view returns (uint256) {\\n        uint256 adjustedDate = _timestampToLockDate(date);\\n        //origin vesting contracts have different dates\\n        //we need to add 2 weeks to get end of period (by default, it's start)\\n        if (adjustedDate != date) {\\n            date = adjustedDate + TWO_WEEKS;\\n        }\\n        return date;\\n    }\\n\\n    /**\\n     * @notice Compute the weight for a specific date.\\n     * @param date The unlocking date.\\n     * @param startDate We compute the weight for the tokens staked until 'date' on 'startDate'.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function _computeWeightByDate(uint256 date, uint256 startDate)\\n        internal\\n        pure\\n        returns (uint96 weight)\\n    {\\n        require(date >= startDate, \\\"date < startDate\\\"); // WS18\\n        uint256 remainingTime = (date - startDate);\\n        require(MAX_DURATION >= remainingTime, \\\"remaining time > max duration\\\"); // WS19\\n        /// @dev x = max days - remaining days\\n        uint96 x = uint96(MAX_DURATION - remainingTime) / (1 days);\\n        /// @dev w = (m^2 - x^2)/m^2 +1 (multiplied by the weight factor)\\n        weight = add96(\\n            WEIGHT_FACTOR,\\n            mul96(\\n                MAX_VOTING_WEIGHT * WEIGHT_FACTOR,\\n                sub96(\\n                    MAX_DURATION_POW_2,\\n                    x * x,\\n                    \\\"WS20\\\" /* weight underflow */\\n                ),\\n                \\\"WS21\\\" /* weight mul overflow */\\n            ) / MAX_DURATION_POW_2,\\n            \\\"WS22\\\" /* overflow on weight */\\n        );\\n    }\\n\\n    /**\\n     * @notice Return flag whether the given address is a registered vesting contract.\\n     * @param stakerAddress the address to check\\n     */\\n    function _isVestingContract(address stakerAddress) internal view returns (bool) {\\n        bool isVesting;\\n        bytes32 codeHash;\\n\\n        assembly {\\n            codeHash := extcodehash(stakerAddress)\\n        }\\n        if (address(vestingRegistryLogic) != address(0)) {\\n            isVesting = vestingRegistryLogic.isVestingAddress(stakerAddress);\\n        }\\n\\n        if (isVesting) return true;\\n        if (vestingCodeHashes[codeHash]) return true;\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x9604726ff96bc87aa63c050abe7e7c7221459f73942ec2127a4b732908704753\"},\"contracts/governance/Staking/modules/shared/StakingStorageShared.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../../../interfaces/IERC20.sol\\\";\\nimport \\\"../../../IFeeSharingCollector.sol\\\";\\nimport \\\"../../../Vesting/IVestingRegistry.sol\\\";\\n\\n/**\\n * @title StakingStorageShared contract is inherited by Staking modules.\\n * @notice Just the storage part of stacking contract, no functions,\\n * only constant, variables and required structures (mappings).\\n * Used by StackingProxy and Checkpoints contracts.\\n *\\n * What is SOV staking?\\n * The purpose of the SOV token is to provide a pseudonymous,\\n * censorship-resistant mechanism for governing the parameters of the Sovryn\\n * protocol, while aligning the incentives of protocol governors with the\\n * long-term success of the protocol. Any SOV token holder can choose to\\n * stake (lock up) their tokens for a fixed period of time in return for\\n * voting rights in the Bitocracy. Stakers are further incentivised through\\n * fee and slashing rewards.\\n * */\\ncontract StakingStorageShared is Ownable {\\n    /// @notice 2 weeks in seconds.\\n    uint256 constant TWO_WEEKS = 1209600;\\n\\n    /// @notice The maximum possible voting weight before adding +1 (actually 10, but need 9 for computation).\\n    uint96 public constant MAX_VOTING_WEIGHT = 9;\\n\\n    /// @notice weight is multiplied with this factor (for allowing decimals, like 1.2x).\\n    /// @dev MAX_VOTING_WEIGHT * WEIGHT_FACTOR needs to be < 792, because there are 100,000,000 SOV with 18 decimals\\n    uint96 public constant WEIGHT_FACTOR = 10;\\n\\n    /// @notice The maximum duration to stake tokens for.\\n    uint256 public constant MAX_DURATION = 1092 days;\\n\\n    /// @notice The maximum duration ^2\\n    uint96 constant MAX_DURATION_POW_2 = 1092 * 1092;\\n\\n    /// @notice Default weight scaling.\\n    uint96 constant DEFAULT_WEIGHT_SCALING = 3;\\n\\n    /// @notice Range for weight scaling.\\n    uint96 constant MIN_WEIGHT_SCALING = 1;\\n    uint96 constant MAX_WEIGHT_SCALING = 9;\\n\\n    /// @notice The timestamp of contract creation. Base for the staking period calculation.\\n    uint256 public kickoffTS;\\n\\n    string name = \\\"SOVStaking\\\";\\n\\n    /// @notice The token to be staked.\\n    IERC20 public SOVToken;\\n\\n    /// @notice A record of each accounts delegate.\\n    mapping(address => mapping(uint256 => address)) public delegates;\\n\\n    /// @notice If this flag is set to true, all tokens are unlocked immediately.\\n    bool public allUnlocked = false;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain.\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 lockDate,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice Used for stake migrations to a new staking contract with a different storage structure.\\n    address public newStakingContract;\\n\\n    /*************************** Checkpoints *******************************/\\n\\n    /// @notice A checkpoint for marking the stakes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 stake;\\n    }\\n\\n    /// @notice A record of tokens to be unstaked at a given time in total.\\n    /// For total voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev totalStakingCheckpoints[date][index] is a checkpoint.\\n    mapping(uint256 => mapping(uint32 => Checkpoint)) public totalStakingCheckpoints;\\n\\n    /// @notice The number of total staking checkpoints for each date.\\n    /// @dev numTotalStakingCheckpoints[date] is a number.\\n    mapping(uint256 => uint32) public numTotalStakingCheckpoints;\\n\\n    /// @notice A record of tokens to be unstaked at a given time which were delegated to a certain address.\\n    /// For delegatee voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev delegateStakingCheckpoints[delegatee][date][index] is a checkpoint.\\n    mapping(address => mapping(uint256 => mapping(uint32 => Checkpoint)))\\n        public delegateStakingCheckpoints;\\n\\n    /// @notice The number of total staking checkpoints for each date per delegate.\\n    /// @dev numDelegateStakingCheckpoints[delegatee][date] is a number.\\n    mapping(address => mapping(uint256 => uint32)) public numDelegateStakingCheckpoints;\\n\\n    /// @notice A record of tokens to be unstaked at a given time which per user address (address -> lockDate -> stake checkpoint)\\n    /// @dev userStakingCheckpoints[user][date][index] is a checkpoint.\\n    mapping(address => mapping(uint256 => mapping(uint32 => Checkpoint)))\\n        public userStakingCheckpoints;\\n\\n    /// @notice The number of total staking checkpoints for each date per user.\\n    /// @dev numUserStakingCheckpoints[user][date] is a number.\\n    mapping(address => mapping(uint256 => uint32)) public numUserStakingCheckpoints;\\n\\n    /// @notice A record of states for signing / validating signatures\\n    /// @dev nonces[user] is a number.\\n    mapping(address => uint256) public nonces;\\n\\n    /*************************** Slashing *******************************/\\n\\n    /// @notice the address of FeeSharingCollectorProxy contract, we need it for unstaking with slashing.\\n    IFeeSharingCollector public feeSharing;\\n\\n    /// @notice used for weight scaling when unstaking with slashing.\\n    uint96 public weightScaling = DEFAULT_WEIGHT_SCALING;\\n\\n    /// @notice List of vesting contracts, tokens for these contracts won't be slashed if unstaked by governance.\\n    /// @dev vestingWhitelist[contract] is true/false.\\n    mapping(address => bool) public vestingWhitelist;\\n\\n    /// @dev user => flag whether user has admin role.\\n    /// @dev multisig should be an admin, admin can invoke only governanceWithdrawVesting function,\\n    /// \\tthis function works only with Team Vesting contracts\\n    mapping(address => bool) public admins;\\n\\n    /// @dev vesting contract code hash => flag whether it's registered code hash\\n    mapping(bytes32 => bool) public vestingCodeHashes;\\n\\n    /// @notice A record of tokens to be unstaked from vesting contract at a given time (lockDate -> vest checkpoint)\\n    /// @dev vestingCheckpoints[date][index] is a checkpoint.\\n    mapping(uint256 => mapping(uint32 => Checkpoint)) public vestingCheckpoints;\\n\\n    /// @notice The number of total vesting checkpoints for each date.\\n    /// @dev numVestingCheckpoints[date] is a number.\\n    mapping(uint256 => uint32) public numVestingCheckpoints;\\n\\n    ///@notice vesting registry contract\\n    IVestingRegistry public vestingRegistryLogic;\\n\\n    /// @dev user => flag whether user has pauser role.\\n    mapping(address => bool) public pausers;\\n\\n    /// @dev Staking contract is paused\\n    bool public paused;\\n\\n    /// @dev Staking contract is frozen\\n    bool public frozen;\\n\\n    /// @dev max iterations that can be supported in 1 tx for the withdrawal\\n    uint256 internal maxVestingWithdrawIterations;\\n\\n    constructor() internal {\\n        //abstract\\n    }\\n}\\n\",\"keccak256\":\"0xf83eb462825c77f9c0629d15a52c8248cd1e9ce1e947c6ea93102d952790dca4\"},\"contracts/governance/Vesting/IVestingRegistry.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for upgradable Vesting Registry contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n */\\ninterface IVestingRegistry {\\n    function getVesting(address _tokenOwner) external view returns (address);\\n\\n    function getTeamVesting(address _tokenOwner) external view returns (address);\\n\\n    function setVestingRegistry(address _vestingRegistryProxy) external;\\n\\n    function isVestingAdress(address _vestingAddress) external view returns (bool); //name typo. to be deprecated.\\n\\n    function isVestingAddress(address _vestingAddress) external view returns (bool);\\n\\n    function isTeamVesting(address _vestingAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9f972c6eff9310beed9807757744bbaa0901c34df1cfff1eb5f58cf47b25904d\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) public view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) public returns (bool);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xea0bb1bf7d022130bb42a4efdfd875ef76ac5ac730a94ddd7b8c9949d4253855\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"},\"contracts/proxy/modules/interfaces/IFunctionsList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.17;\\n\\ninterface IFunctionsList {\\n    function getFunctionsList() external pure returns (bytes4[] memory functionSignatures);\\n}\\n\",\"keccak256\":\"0x38fb0166042329bc9ffcab69742f215efd135cdcf2d48b2202cb7f1546709101\"}},\"version\":1}",
    "bytecode": "0x60c0604052600a608081905269534f565374616b696e6760b01b60a09081526200002d9160029190620000ae565b506005805460ff19169055600d80546001600160a01b0316600360a01b179055600062000059620000a9565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000150565b335b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000f157805160ff191683800117855562000121565b8280016001018555821562000121579182015b828111156200012157825182559160200191906001019062000104565b506200012f92915062000133565b5090565b620000ab91905b808211156200012f57600081556001016200013a565b61233280620001606000396000f3fe608060405234801561001057600080fd5b50600436106102525760003560e01c806394c2ce5811610146578063c70a7e96116100c3578063d8ad326d11610087578063d8ad326d146104b2578063db27ec18146104c7578063dfb267c2146104da578063e7a324dc146104ed578063f2fde38b146104f5578063f3f197311461050857610252565b8063c70a7e961461045e578063ca6860df14610471578063cdbe715514610484578063cf7b684a14610497578063d27569e7146104aa57610252565b8063ae81dfe41161010a578063ae81dfe414610420578063b1724b4614610428578063ba21c6d714610430578063bb533cf214610443578063bf626ec11461045657610252565b806394c2ce58146103d75780639929e886146103ea578063a20d8d03146103f2578063a58848c514610405578063adae90021461040d57610252565b8063450b0601116101d45780637ecebe00116101985780637ecebe001461038157806380f51c12146103945780638da5cb5b146103a75780638f32d59b146103af5780639436e7d4146103b757610252565b8063450b06011461031f5780635c975abb1461033257806368cefccc1461033a5780636b6fde0e1461035b5780636e56c1dd1461036e57610252565b806317748adc1161021b57806317748adc146102ba57806320606b70146102cf57806325464cc5146102d757806327dd1b00146102ec578063429b62e51461030c57610252565b8062073f991461025757806303a18fa314610275578063054f7d9c1461028a57806307392cc01461029f578063104932cf146102b2575b600080fd5b61025f61051b565b60405161026c91906120dc565b60405180910390f35b61027d610521565b60405161026c91906120ea565b610292610530565b60405161026c91906120ce565b6102926102ad366004611af2565b61053e565b61027d610553565b6102c2610562565b60405161026c9190612210565b61025f610567565b6102ea6102e536600461197c565b61057e565b005b6102ff6102fa36600461199a565b61067b565b60405161026c91906120af565b61029261031a36600461197c565b6106a1565b6102ea61032d36600461197c565b6106b6565b610292610724565b61034d610348366004611a21565b61072d565b60405161026c929190612202565b61034d610369366004611a21565b610768565b6102ea61037c366004611a64565b6107a3565b61025f61038f36600461197c565b610880565b6102926103a236600461197c565b610892565b6102ff6108a7565b6102926108b6565b6103ca6103c5366004611af2565b6108da565b60405161026c91906121f4565b6103ca6103e536600461199a565b6108f2565b610292610915565b6102ea61040036600461197c565b61091e565b61027d6109db565b61029261041b36600461197c565b6109ea565b6102ff6109ff565b61025f610a13565b6102c261043e366004611b2f565b610a1b565b6103ca610451366004611af2565b610a46565b6102c2610a5e565b6102c261046c366004611b10565b610a74565b61029261047f36600461197c565b610a94565b6102c2610492366004611b10565b610b78565b6102c26104a53660046119d4565b610bf2565b6102c2610c30565b6104ba610c35565b60405161026c91906120bd565b6103ca6104d536600461199a565b610e18565b61034d6104e8366004611b50565b610e3b565b61025f610e70565b6102ea61050336600461197c565b610e7c565b61034d610516366004611b50565b610eac565b60015481565b600d546001600160a01b031681565b601554610100900460ff1681565b60106020526000908152604090205460ff1681565b6013546001600160a01b031681565b600981565b60405161057390612099565b604051809103902081565b6105866108b6565b806105a05750336000908152600f602052604090205460ff165b6105c55760405162461bcd60e51b81526004016105bc90612169565b60405180910390fd5b601554610100900460ff16156105ed5760405162461bcd60e51b81526004016105bc906121c9565b60006105f882610ee1565b60008181526010602052604090205490915060ff166106295760405162461bcd60e51b81526004016105bc906121b9565b60008181526010602052604090819020805460ff19169055517f8cead6971eb8b99e8ac394749afc2c5e2d248f86d94e57f49fec3338d3df82319061066f9083906120dc565b60405180910390a15050565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b600f6020526000908152604090205460ff1681565b6106be6108b6565b6106da5760405162461bcd60e51b81526004016105bc90612169565b601554610100900460ff16156107025760405162461bcd60e51b81526004016105bc906121c9565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b60155460ff1681565b600a60209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b600860209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b6107ab6108b6565b806107c55750336000908152600f602052604090205460ff165b6107e15760405162461bcd60e51b81526004016105bc90612169565b601554610100900460ff16156108095760405162461bcd60e51b81526004016105bc906121c9565b8281146108285760405162461bcd60e51b81526004016105bc90612129565b8260005b818110156108785761087086868381811061084357fe5b9050602002013585858481811061085657fe5b905060200201602061086b9190810190611b80565b610ee5565b60010161082c565b505050505050565b600c6020526000908152604090205481565b60146020526000908152604090205460ff1681565b6000546001600160a01b031690565b600080546001600160a01b03166108cb611116565b6001600160a01b031614905090565b60076020526000908152604090205463ffffffff1681565b600960209081526000928352604080842090915290825290205463ffffffff1681565b60055460ff1681565b6109266108b6565b806109405750336000908152600f602052604090205460ff165b61095c5760405162461bcd60e51b81526004016105bc90612169565b601554610100900460ff16156109845760405162461bcd60e51b81526004016105bc906121c9565b600061098f82610ee1565b60008181526010602052604090819020805460ff19166001179055519091507fa0d1b39aa503282227481fef744a0ec0b991b2546e6fa611e40f88d2d2770eef9061066f9083906120dc565b6003546001600160a01b031681565b600e6020526000908152604090205460ff1681565b60055461010090046001600160a01b031681565b63059fa60081565b6000610a268461111a565b9350610a318361111a565b9250610a3e84848461115a565b949350505050565b60126020526000908152604090205463ffffffff1681565b600d54600160a01b90046001600160601b031681565b6000610a7f836111de565b9250610a8b8383611203565b90505b92915050565b6000806000610aa284610ee1565b6013549091506001600160a01b031615610b3957601354604051633288436360e21b81526001600160a01b039091169063ca210d8c90610ae69087906004016120af565b60206040518083038186803b158015610afe57600080fd5b505afa158015610b12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b369190810190611ad4565b91505b8115610b4a57600192505050610b73565b60008181526010602052604090205460ff1615610b6c57600192505050610b73565b6000925050505b919050565b600080610b848361111a565b905063059fa6008101815b818111610be9576000610ba382858961115a565b90506001600160601b03811615610bde57610bdb8582604051806040016040528060048152602001635753313560e01b8152506113dc565b94505b506212750001610b8f565b50505092915050565b600080610c00858585611418565b90506001600160601b038116158015610c1d5750610c1d3361166d565b15610c26575060015b90505b9392505050565b600a81565b6040805160098082526101408201909252606091829190602082016101208038833901905050905063450b060160e01b81600081518110610c7257fe5b6001600160e01b0319909216602092830291909101909101528051636e56c1dd60e01b9082906001908110610ca357fe5b6001600160e01b03199092166020928302919091019091015280516367bdb42560e11b9082906002908110610cd457fe5b6001600160e01b031990921660209283029190910190910152805163cdbe715560e01b9082906003908110610d0557fe5b6001600160e01b03199092166020928302919091019091015280516363853f4b60e11b9082906004908110610d3657fe5b6001600160e01b031990921660209283029190910190910152805163a20d8d0360e01b9082906005908110610d6757fe5b6001600160e01b03199092166020928302919091019091015280516325464cc560e01b9082906006908110610d9857fe5b6001600160e01b031990921660209283029190910190910152805163ca6860df60e01b9082906007908110610dc957fe5b6001600160e01b031990921660209283029190910190910152805163ba21c6d760e01b9082906008908110610dfa57fe5b6001600160e01b031990921660209283029190910190910152905090565b600b60209081526000928352604080842090915290825290205463ffffffff1681565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b604051610573906120a4565b610e846108b6565b610ea05760405162461bcd60e51b81526004016105bc90612169565b610ea9816116b6565b50565b601160209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b3f90565b6001548211610f065760405162461bcd60e51b81526004016105bc90612109565b62127500600154830381610f1657fe5b0615610f345760405162461bcd60e51b81526004016105bc90612159565b63059fa6004283031115610f5a5760405162461bcd60e51b81526004016105bc90612149565b6000828152600760209081526040808320546006835281842063ffffffff9182166000198101909216855290925290912054600160201b90046001600160601b03908116908316811015610fc05760405162461bcd60e51b81526004016105bc906121a9565b60008481526012602052604081205463ffffffff1690610fde6118e5565b50600086815260116020908152604080832063ffffffff6000198701811685529083529281902081518083019092525480841682526001600160601b03600160201b909104169181019190915290831661103d57600143039150611045565b805160010191505b60408051808201825263ffffffff80851682526001600160601b03808a16602080850191825260008d8152601182528681208a861682528252868120955186549351909416600160201b026fffffffffffffffffffffffff000000001994861663ffffffff199485161794909416939093179094558b8252601290935283902080546001880190921691909216179055517ff9ab7366370e872310fc70951197eca2f2b3938b5589040856953f765dfcd11a9061110590899089906121d9565b60405180910390a150505050505050565b3390565b600154600090808310156111405760405162461bcd60e51b81526004016105bc90612119565b600062127500828503046212750002919091019392505050565b6000806111678584611203565b90506001600160601b038116156111d15760006111848686611737565b9050600a6001600160601b03166111b88383604051806040016040528060048152602001632ba9989b60e11b815250611844565b6001600160601b0316816111c857fe5b049250506111d6565b600091505b509392505050565b6000806111ea8361111a565b90508281146111fc5762127500810192505b5090919050565b600061120d6118a2565b821061122b5760405162461bcd60e51b81526004016105bc90612189565b60008381526012602052604090205463ffffffff168061124f576000915050610a8e565b600084815260116020908152604080832063ffffffff6000198601811685529252909120541683106112b75760008481526011602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610a8e565b600084815260116020908152604080832083805290915290205463ffffffff168310156112e8576000915050610a8e565b600060001982015b8163ffffffff168163ffffffff1611156113a157600282820363ffffffff1604810361131a6118e5565b50600087815260116020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b0316918101919091529087141561137c57602001519450610a8e9350505050565b805163ffffffff168711156113935781935061139a565b6001820392505b50506112f0565b50600085815260116020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b6000838301826001600160601b03808716908316101561140f5760405162461bcd60e51b81526004016105bc91906120f8565b50949350505050565b60006114226118a2565b82106114405760405162461bcd60e51b81526004016105bc90612189565b611449836111de565b6001600160a01b0385166000908152600b6020908152604080832084845290915290205490935063ffffffff1680611485576000915050610c29565b6001600160a01b0385166000908152600a60209081526040808320878452825280832063ffffffff600019860181168552925290912054168310611511576001600160a01b0385166000908152600a6020908152604080832087845282528083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610c29565b6001600160a01b0385166000908152600a60209081526040808320878452825280832083805290915290205463ffffffff16831015611554576000915050610c29565b600060001982015b8163ffffffff168163ffffffff16111561161f57600282820363ffffffff160481036115866118e5565b506001600160a01b0388166000908152600a602090815260408083208a8452825280832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b031691810191909152908714156115fa57602001519450610c299350505050565b805163ffffffff1687111561161157819350611618565b6001820392505b505061155c565b506001600160a01b0386166000908152600a60209081526040808320888452825280832063ffffffff909416835292905220546001600160601b03600160201b909104169150509392505050565b6013546000908190833f906001600160a01b031615610b3957601354604051633288436360e21b81526001600160a01b039091169063ca210d8c90610ae69087906004016120af565b6001600160a01b0381166116dc5760405162461bcd60e51b81526004016105bc90612139565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000818310156117595760405162461bcd60e51b81526004016105bc90612179565b81830363059fa6008111156117805760405162461bcd60e51b81526004016105bc90612199565b6000620151808263059fa600036001600160601b03168161179d57fe5b04905061183b600a621232106001600160601b0316611808600a6009026117e662123210878802604051806040016040528060048152602001630575332360e41b8152506118a6565b604051806040016040528060048152602001635753323160e01b815250611844565b6001600160601b03168161181857fe5b04604051806040016040528060048152602001632ba9991960e11b8152506113dc565b95945050505050565b60006001600160601b03841661185c57506000610c29565b8383026001600160601b03808516908087169083168161187857fe5b046001600160601b031614839061140f5760405162461bcd60e51b81526004016105bc91906120f8565b4390565b6000836001600160601b0316836001600160601b0316111582906118dd5760405162461bcd60e51b81526004016105bc91906120f8565b505050900390565b604080518082019091526000808252602082015290565b8035610a8e816122b7565b60008083601f84011261191957600080fd5b50813567ffffffffffffffff81111561193157600080fd5b60208301915083602082028301111561194957600080fd5b9250929050565b8051610a8e816122cb565b8035610a8e816122d4565b8035610a8e816122dd565b8035610a8e816122e6565b60006020828403121561198e57600080fd5b6000610a3e84846118fc565b600080604083850312156119ad57600080fd5b60006119b985856118fc565b92505060206119ca8582860161195b565b9150509250929050565b6000806000606084860312156119e957600080fd5b60006119f586866118fc565b9350506020611a068682870161195b565b9250506040611a178682870161195b565b9150509250925092565b600080600060608486031215611a3657600080fd5b6000611a4286866118fc565b9350506020611a538682870161195b565b9250506040611a1786828701611966565b60008060008060408587031215611a7a57600080fd5b843567ffffffffffffffff811115611a9157600080fd5b611a9d87828801611907565b9450945050602085013567ffffffffffffffff811115611abc57600080fd5b611ac887828801611907565b95989497509550505050565b600060208284031215611ae657600080fd5b6000610a3e8484611950565b600060208284031215611b0457600080fd5b6000610a3e848461195b565b60008060408385031215611b2357600080fd5b60006119b9858561195b565b600080600060608486031215611b4457600080fd5b60006119f5868661195b565b60008060408385031215611b6357600080fd5b6000611b6f858561195b565b92505060206119ca85828601611966565b600060208284031215611b9257600080fd5b6000610a3e8484611971565b6000611baa8383611c2c565b505060200190565b611bbb81612231565b82525050565b6000611bcc82612224565b611bd68185612228565b9350611be18361221e565b8060005b83811015611c0f578151611bf98882611b9e565b9750611c048361221e565b925050600101611be5565b509495945050505050565b611bbb8161223c565b611bbb81612241565b611bbb81612244565b611bbb81612272565b6000611c4982612224565b611c538185612228565b9350611c6381856020860161227d565b611c6c816122ad565b9093019392505050565b6000611c83604183612228565b7f496e76616c6964206c6f636b2064617465733a206d757374206772656174657281527f207468616e20636f6e7472616374206372656174696f6e2074696d657374616d6020820152600760fc1b604082015260600192915050565b6000611cec601d83612228565b7f74696d657374616d70203c20636f6e7472616374206372656174696f6e000000815260200192915050565b6000611d25600f83612228565b6e0c2e4e4c2f2e640dad2e6dac2e8c6d608b1b815260200192915050565b6000611d50602683612228565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000611d98602783612228565b7f496e76616c6964206c6f636b2064617465733a20657863656564206d617820648152663ab930ba34b7b760c91b602082015260400192915050565b6000611de1602c83612228565b7f496e76616c6964206c6f636b2064617465733a206e6f74206d756c7469706c6581526b73206f66203134206461797360a01b602082015260400192915050565b6000611e2f604383610b73565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000611e9a600c83612228565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000611ec2601083612228565b6f64617465203c2073746172744461746560801b815260200192915050565b6000611eee600e83612228565b6d1b9bdd0819195d195c9b5a5b995960921b815260200192915050565b6000611f18601d83612228565b7f72656d61696e696e672074696d65203e206d6178206475726174696f6e000000815260200192915050565b6000611f51604b83610b73565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206c6f636b446174652c75696e74323536206e6f6e63652c75696e7460208201526a323536206578706972792960a81b6040820152604b0192915050565b6000611fc4604283612228565b7f496e76616c6964207374616b6520616d6f756e743a206772656174657220746881527f616e2074686520746f74616c207374616b656420666f7220676976656e206461602082015261746560f01b604082015260600192915050565b600061202e602283612228565b7f6e6f74206120726567697374657265642076657374696e6720636f64652068618152610e6d60f31b602082015260400192915050565b6000612072600683612228565b651c185d5cd95960d21b815260200192915050565b611bbb8161225d565b611bbb81612266565b6000610a8e82611e22565b6000610a8e82611f44565b60208101610a8e8284611bb2565b60208082528101610a8b8184611bc1565b60208101610a8e8284611c1a565b60208101610a8e8284611c23565b60208101610a8e8284611c35565b60208082528101610a8b8184611c3e565b60208082528101610a8e81611c76565b60208082528101610a8e81611cdf565b60208082528101610a8e81611d18565b60208082528101610a8e81611d43565b60208082528101610a8e81611d8b565b60208082528101610a8e81611dd4565b60208082528101610a8e81611e8d565b60208082528101610a8e81611eb5565b60208082528101610a8e81611ee1565b60208082528101610a8e81611f0b565b60208082528101610a8e81611fb7565b60208082528101610a8e81612021565b60208082528101610a8e81612065565b604081016121e78285611c23565b610c296020830184612090565b60208101610a8e8284612087565b604081016121e78285612087565b60208101610a8e8284612090565b60200190565b5190565b90815260200190565b6000610a8e82612251565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b63ffffffff1690565b6001600160601b031690565b6000610a8e82612231565b60005b83811015612298578181015183820152602001612280565b838111156122a7576000848401525b50505050565b601f01601f191690565b6122c081612231565b8114610ea957600080fd5b6122c08161223c565b6122c081612241565b6122c08161225d565b6122c08161226656fea365627a7a723158201d05dc63f6acc6deee24f7df93d905098592211834efada9d9c4160bbdc8f2bf6c6578706572696d656e74616cf564736f6c63430005110040",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102525760003560e01c806394c2ce5811610146578063c70a7e96116100c3578063d8ad326d11610087578063d8ad326d146104b2578063db27ec18146104c7578063dfb267c2146104da578063e7a324dc146104ed578063f2fde38b146104f5578063f3f197311461050857610252565b8063c70a7e961461045e578063ca6860df14610471578063cdbe715514610484578063cf7b684a14610497578063d27569e7146104aa57610252565b8063ae81dfe41161010a578063ae81dfe414610420578063b1724b4614610428578063ba21c6d714610430578063bb533cf214610443578063bf626ec11461045657610252565b806394c2ce58146103d75780639929e886146103ea578063a20d8d03146103f2578063a58848c514610405578063adae90021461040d57610252565b8063450b0601116101d45780637ecebe00116101985780637ecebe001461038157806380f51c12146103945780638da5cb5b146103a75780638f32d59b146103af5780639436e7d4146103b757610252565b8063450b06011461031f5780635c975abb1461033257806368cefccc1461033a5780636b6fde0e1461035b5780636e56c1dd1461036e57610252565b806317748adc1161021b57806317748adc146102ba57806320606b70146102cf57806325464cc5146102d757806327dd1b00146102ec578063429b62e51461030c57610252565b8062073f991461025757806303a18fa314610275578063054f7d9c1461028a57806307392cc01461029f578063104932cf146102b2575b600080fd5b61025f61051b565b60405161026c91906120dc565b60405180910390f35b61027d610521565b60405161026c91906120ea565b610292610530565b60405161026c91906120ce565b6102926102ad366004611af2565b61053e565b61027d610553565b6102c2610562565b60405161026c9190612210565b61025f610567565b6102ea6102e536600461197c565b61057e565b005b6102ff6102fa36600461199a565b61067b565b60405161026c91906120af565b61029261031a36600461197c565b6106a1565b6102ea61032d36600461197c565b6106b6565b610292610724565b61034d610348366004611a21565b61072d565b60405161026c929190612202565b61034d610369366004611a21565b610768565b6102ea61037c366004611a64565b6107a3565b61025f61038f36600461197c565b610880565b6102926103a236600461197c565b610892565b6102ff6108a7565b6102926108b6565b6103ca6103c5366004611af2565b6108da565b60405161026c91906121f4565b6103ca6103e536600461199a565b6108f2565b610292610915565b6102ea61040036600461197c565b61091e565b61027d6109db565b61029261041b36600461197c565b6109ea565b6102ff6109ff565b61025f610a13565b6102c261043e366004611b2f565b610a1b565b6103ca610451366004611af2565b610a46565b6102c2610a5e565b6102c261046c366004611b10565b610a74565b61029261047f36600461197c565b610a94565b6102c2610492366004611b10565b610b78565b6102c26104a53660046119d4565b610bf2565b6102c2610c30565b6104ba610c35565b60405161026c91906120bd565b6103ca6104d536600461199a565b610e18565b61034d6104e8366004611b50565b610e3b565b61025f610e70565b6102ea61050336600461197c565b610e7c565b61034d610516366004611b50565b610eac565b60015481565b600d546001600160a01b031681565b601554610100900460ff1681565b60106020526000908152604090205460ff1681565b6013546001600160a01b031681565b600981565b60405161057390612099565b604051809103902081565b6105866108b6565b806105a05750336000908152600f602052604090205460ff165b6105c55760405162461bcd60e51b81526004016105bc90612169565b60405180910390fd5b601554610100900460ff16156105ed5760405162461bcd60e51b81526004016105bc906121c9565b60006105f882610ee1565b60008181526010602052604090205490915060ff166106295760405162461bcd60e51b81526004016105bc906121b9565b60008181526010602052604090819020805460ff19169055517f8cead6971eb8b99e8ac394749afc2c5e2d248f86d94e57f49fec3338d3df82319061066f9083906120dc565b60405180910390a15050565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b600f6020526000908152604090205460ff1681565b6106be6108b6565b6106da5760405162461bcd60e51b81526004016105bc90612169565b601554610100900460ff16156107025760405162461bcd60e51b81526004016105bc906121c9565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b60155460ff1681565b600a60209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b600860209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b6107ab6108b6565b806107c55750336000908152600f602052604090205460ff165b6107e15760405162461bcd60e51b81526004016105bc90612169565b601554610100900460ff16156108095760405162461bcd60e51b81526004016105bc906121c9565b8281146108285760405162461bcd60e51b81526004016105bc90612129565b8260005b818110156108785761087086868381811061084357fe5b9050602002013585858481811061085657fe5b905060200201602061086b9190810190611b80565b610ee5565b60010161082c565b505050505050565b600c6020526000908152604090205481565b60146020526000908152604090205460ff1681565b6000546001600160a01b031690565b600080546001600160a01b03166108cb611116565b6001600160a01b031614905090565b60076020526000908152604090205463ffffffff1681565b600960209081526000928352604080842090915290825290205463ffffffff1681565b60055460ff1681565b6109266108b6565b806109405750336000908152600f602052604090205460ff165b61095c5760405162461bcd60e51b81526004016105bc90612169565b601554610100900460ff16156109845760405162461bcd60e51b81526004016105bc906121c9565b600061098f82610ee1565b60008181526010602052604090819020805460ff19166001179055519091507fa0d1b39aa503282227481fef744a0ec0b991b2546e6fa611e40f88d2d2770eef9061066f9083906120dc565b6003546001600160a01b031681565b600e6020526000908152604090205460ff1681565b60055461010090046001600160a01b031681565b63059fa60081565b6000610a268461111a565b9350610a318361111a565b9250610a3e84848461115a565b949350505050565b60126020526000908152604090205463ffffffff1681565b600d54600160a01b90046001600160601b031681565b6000610a7f836111de565b9250610a8b8383611203565b90505b92915050565b6000806000610aa284610ee1565b6013549091506001600160a01b031615610b3957601354604051633288436360e21b81526001600160a01b039091169063ca210d8c90610ae69087906004016120af565b60206040518083038186803b158015610afe57600080fd5b505afa158015610b12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b369190810190611ad4565b91505b8115610b4a57600192505050610b73565b60008181526010602052604090205460ff1615610b6c57600192505050610b73565b6000925050505b919050565b600080610b848361111a565b905063059fa6008101815b818111610be9576000610ba382858961115a565b90506001600160601b03811615610bde57610bdb8582604051806040016040528060048152602001635753313560e01b8152506113dc565b94505b506212750001610b8f565b50505092915050565b600080610c00858585611418565b90506001600160601b038116158015610c1d5750610c1d3361166d565b15610c26575060015b90505b9392505050565b600a81565b6040805160098082526101408201909252606091829190602082016101208038833901905050905063450b060160e01b81600081518110610c7257fe5b6001600160e01b0319909216602092830291909101909101528051636e56c1dd60e01b9082906001908110610ca357fe5b6001600160e01b03199092166020928302919091019091015280516367bdb42560e11b9082906002908110610cd457fe5b6001600160e01b031990921660209283029190910190910152805163cdbe715560e01b9082906003908110610d0557fe5b6001600160e01b03199092166020928302919091019091015280516363853f4b60e11b9082906004908110610d3657fe5b6001600160e01b031990921660209283029190910190910152805163a20d8d0360e01b9082906005908110610d6757fe5b6001600160e01b03199092166020928302919091019091015280516325464cc560e01b9082906006908110610d9857fe5b6001600160e01b031990921660209283029190910190910152805163ca6860df60e01b9082906007908110610dc957fe5b6001600160e01b031990921660209283029190910190910152805163ba21c6d760e01b9082906008908110610dfa57fe5b6001600160e01b031990921660209283029190910190910152905090565b600b60209081526000928352604080842090915290825290205463ffffffff1681565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b604051610573906120a4565b610e846108b6565b610ea05760405162461bcd60e51b81526004016105bc90612169565b610ea9816116b6565b50565b601160209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b3f90565b6001548211610f065760405162461bcd60e51b81526004016105bc90612109565b62127500600154830381610f1657fe5b0615610f345760405162461bcd60e51b81526004016105bc90612159565b63059fa6004283031115610f5a5760405162461bcd60e51b81526004016105bc90612149565b6000828152600760209081526040808320546006835281842063ffffffff9182166000198101909216855290925290912054600160201b90046001600160601b03908116908316811015610fc05760405162461bcd60e51b81526004016105bc906121a9565b60008481526012602052604081205463ffffffff1690610fde6118e5565b50600086815260116020908152604080832063ffffffff6000198701811685529083529281902081518083019092525480841682526001600160601b03600160201b909104169181019190915290831661103d57600143039150611045565b805160010191505b60408051808201825263ffffffff80851682526001600160601b03808a16602080850191825260008d8152601182528681208a861682528252868120955186549351909416600160201b026fffffffffffffffffffffffff000000001994861663ffffffff199485161794909416939093179094558b8252601290935283902080546001880190921691909216179055517ff9ab7366370e872310fc70951197eca2f2b3938b5589040856953f765dfcd11a9061110590899089906121d9565b60405180910390a150505050505050565b3390565b600154600090808310156111405760405162461bcd60e51b81526004016105bc90612119565b600062127500828503046212750002919091019392505050565b6000806111678584611203565b90506001600160601b038116156111d15760006111848686611737565b9050600a6001600160601b03166111b88383604051806040016040528060048152602001632ba9989b60e11b815250611844565b6001600160601b0316816111c857fe5b049250506111d6565b600091505b509392505050565b6000806111ea8361111a565b90508281146111fc5762127500810192505b5090919050565b600061120d6118a2565b821061122b5760405162461bcd60e51b81526004016105bc90612189565b60008381526012602052604090205463ffffffff168061124f576000915050610a8e565b600084815260116020908152604080832063ffffffff6000198601811685529252909120541683106112b75760008481526011602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610a8e565b600084815260116020908152604080832083805290915290205463ffffffff168310156112e8576000915050610a8e565b600060001982015b8163ffffffff168163ffffffff1611156113a157600282820363ffffffff1604810361131a6118e5565b50600087815260116020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b0316918101919091529087141561137c57602001519450610a8e9350505050565b805163ffffffff168711156113935781935061139a565b6001820392505b50506112f0565b50600085815260116020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b6000838301826001600160601b03808716908316101561140f5760405162461bcd60e51b81526004016105bc91906120f8565b50949350505050565b60006114226118a2565b82106114405760405162461bcd60e51b81526004016105bc90612189565b611449836111de565b6001600160a01b0385166000908152600b6020908152604080832084845290915290205490935063ffffffff1680611485576000915050610c29565b6001600160a01b0385166000908152600a60209081526040808320878452825280832063ffffffff600019860181168552925290912054168310611511576001600160a01b0385166000908152600a6020908152604080832087845282528083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610c29565b6001600160a01b0385166000908152600a60209081526040808320878452825280832083805290915290205463ffffffff16831015611554576000915050610c29565b600060001982015b8163ffffffff168163ffffffff16111561161f57600282820363ffffffff160481036115866118e5565b506001600160a01b0388166000908152600a602090815260408083208a8452825280832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b031691810191909152908714156115fa57602001519450610c299350505050565b805163ffffffff1687111561161157819350611618565b6001820392505b505061155c565b506001600160a01b0386166000908152600a60209081526040808320888452825280832063ffffffff909416835292905220546001600160601b03600160201b909104169150509392505050565b6013546000908190833f906001600160a01b031615610b3957601354604051633288436360e21b81526001600160a01b039091169063ca210d8c90610ae69087906004016120af565b6001600160a01b0381166116dc5760405162461bcd60e51b81526004016105bc90612139565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000818310156117595760405162461bcd60e51b81526004016105bc90612179565b81830363059fa6008111156117805760405162461bcd60e51b81526004016105bc90612199565b6000620151808263059fa600036001600160601b03168161179d57fe5b04905061183b600a621232106001600160601b0316611808600a6009026117e662123210878802604051806040016040528060048152602001630575332360e41b8152506118a6565b604051806040016040528060048152602001635753323160e01b815250611844565b6001600160601b03168161181857fe5b04604051806040016040528060048152602001632ba9991960e11b8152506113dc565b95945050505050565b60006001600160601b03841661185c57506000610c29565b8383026001600160601b03808516908087169083168161187857fe5b046001600160601b031614839061140f5760405162461bcd60e51b81526004016105bc91906120f8565b4390565b6000836001600160601b0316836001600160601b0316111582906118dd5760405162461bcd60e51b81526004016105bc91906120f8565b505050900390565b604080518082019091526000808252602082015290565b8035610a8e816122b7565b60008083601f84011261191957600080fd5b50813567ffffffffffffffff81111561193157600080fd5b60208301915083602082028301111561194957600080fd5b9250929050565b8051610a8e816122cb565b8035610a8e816122d4565b8035610a8e816122dd565b8035610a8e816122e6565b60006020828403121561198e57600080fd5b6000610a3e84846118fc565b600080604083850312156119ad57600080fd5b60006119b985856118fc565b92505060206119ca8582860161195b565b9150509250929050565b6000806000606084860312156119e957600080fd5b60006119f586866118fc565b9350506020611a068682870161195b565b9250506040611a178682870161195b565b9150509250925092565b600080600060608486031215611a3657600080fd5b6000611a4286866118fc565b9350506020611a538682870161195b565b9250506040611a1786828701611966565b60008060008060408587031215611a7a57600080fd5b843567ffffffffffffffff811115611a9157600080fd5b611a9d87828801611907565b9450945050602085013567ffffffffffffffff811115611abc57600080fd5b611ac887828801611907565b95989497509550505050565b600060208284031215611ae657600080fd5b6000610a3e8484611950565b600060208284031215611b0457600080fd5b6000610a3e848461195b565b60008060408385031215611b2357600080fd5b60006119b9858561195b565b600080600060608486031215611b4457600080fd5b60006119f5868661195b565b60008060408385031215611b6357600080fd5b6000611b6f858561195b565b92505060206119ca85828601611966565b600060208284031215611b9257600080fd5b6000610a3e8484611971565b6000611baa8383611c2c565b505060200190565b611bbb81612231565b82525050565b6000611bcc82612224565b611bd68185612228565b9350611be18361221e565b8060005b83811015611c0f578151611bf98882611b9e565b9750611c048361221e565b925050600101611be5565b509495945050505050565b611bbb8161223c565b611bbb81612241565b611bbb81612244565b611bbb81612272565b6000611c4982612224565b611c538185612228565b9350611c6381856020860161227d565b611c6c816122ad565b9093019392505050565b6000611c83604183612228565b7f496e76616c6964206c6f636b2064617465733a206d757374206772656174657281527f207468616e20636f6e7472616374206372656174696f6e2074696d657374616d6020820152600760fc1b604082015260600192915050565b6000611cec601d83612228565b7f74696d657374616d70203c20636f6e7472616374206372656174696f6e000000815260200192915050565b6000611d25600f83612228565b6e0c2e4e4c2f2e640dad2e6dac2e8c6d608b1b815260200192915050565b6000611d50602683612228565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000611d98602783612228565b7f496e76616c6964206c6f636b2064617465733a20657863656564206d617820648152663ab930ba34b7b760c91b602082015260400192915050565b6000611de1602c83612228565b7f496e76616c6964206c6f636b2064617465733a206e6f74206d756c7469706c6581526b73206f66203134206461797360a01b602082015260400192915050565b6000611e2f604383610b73565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000611e9a600c83612228565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000611ec2601083612228565b6f64617465203c2073746172744461746560801b815260200192915050565b6000611eee600e83612228565b6d1b9bdd0819195d195c9b5a5b995960921b815260200192915050565b6000611f18601d83612228565b7f72656d61696e696e672074696d65203e206d6178206475726174696f6e000000815260200192915050565b6000611f51604b83610b73565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206c6f636b446174652c75696e74323536206e6f6e63652c75696e7460208201526a323536206578706972792960a81b6040820152604b0192915050565b6000611fc4604283612228565b7f496e76616c6964207374616b6520616d6f756e743a206772656174657220746881527f616e2074686520746f74616c207374616b656420666f7220676976656e206461602082015261746560f01b604082015260600192915050565b600061202e602283612228565b7f6e6f74206120726567697374657265642076657374696e6720636f64652068618152610e6d60f31b602082015260400192915050565b6000612072600683612228565b651c185d5cd95960d21b815260200192915050565b611bbb8161225d565b611bbb81612266565b6000610a8e82611e22565b6000610a8e82611f44565b60208101610a8e8284611bb2565b60208082528101610a8b8184611bc1565b60208101610a8e8284611c1a565b60208101610a8e8284611c23565b60208101610a8e8284611c35565b60208082528101610a8b8184611c3e565b60208082528101610a8e81611c76565b60208082528101610a8e81611cdf565b60208082528101610a8e81611d18565b60208082528101610a8e81611d43565b60208082528101610a8e81611d8b565b60208082528101610a8e81611dd4565b60208082528101610a8e81611e8d565b60208082528101610a8e81611eb5565b60208082528101610a8e81611ee1565b60208082528101610a8e81611f0b565b60208082528101610a8e81611fb7565b60208082528101610a8e81612021565b60208082528101610a8e81612065565b604081016121e78285611c23565b610c296020830184612090565b60208101610a8e8284612087565b604081016121e78285612087565b60208101610a8e8284612090565b60200190565b5190565b90815260200190565b6000610a8e82612251565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b63ffffffff1690565b6001600160601b031690565b6000610a8e82612231565b60005b83811015612298578181015183820152602001612280565b838111156122a7576000848401525b50505050565b601f01601f191690565b6122c081612231565b8114610ea957600080fd5b6122c08161223c565b6122c081612241565b6122c08161225d565b6122c08161226656fea365627a7a723158201d05dc63f6acc6deee24f7df93d905098592211834efada9d9c4160bbdc8f2bf6c6578706572696d656e74616cf564736f6c63430005110040",
    "devdoc": {
        "methods": {
            "addContractCodeHash(address)": {
                "details": "We need it to use isVestingContract() function instead of isContract()",
                "params": {
                    "vesting": "The address of Vesting contract."
                }
            },
            "getPriorUserStakeByDate(address,uint256,uint256)": {
                "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
                "params": {
                    "account": "The address of the account to check.",
                    "blockNumber": "The block number to get the vote balance at.",
                    "date": "The lock date. Adjusted to the next valid lock date, if necessary."
                },
                "return": "The number of votes the account had as of the given block."
            },
            "getPriorVestingStakeByDate(uint256,uint256)": {
                "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
                "params": {
                    "blockNumber": "The block number to get the vote balance at.",
                    "date": "The lock date. Adjusted to the next valid lock date, if necessary."
                },
                "return": "The number of votes the account had as of the given block."
            },
            "getPriorVestingWeightedStake(uint256,uint256)": {
                "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.     Used for fee sharing, not voting. TODO: WeightedStaking::getPriorVestingWeightedStake is using the variable name \"votes\" to add up token stake, and that could be misleading.",
                "params": {
                    "blockNumber": "The block number to get the vote balance at.",
                    "date": "The staking date to compute the power for."
                },
                "return": "The weighted stake the account had as of the given block."
            },
            "isOwner()": {
                "details": "Returns true if the caller is the current owner."
            },
            "isVestingContract(address)": {
                "params": {
                    "stakerAddress": "the address to check"
                }
            },
            "owner()": {
                "details": "Returns the address of the current owner."
            },
            "removeContractCodeHash(address)": {
                "details": "We need it to use isVestingContract() function instead of isContract()",
                "params": {
                    "vesting": "The address of Vesting contract."
                }
            },
            "setVestingRegistry(address)": {
                "details": "_vestingRegistryProxy can be set to 0 as this function can be reused by various other functionalities without the necessity of linking it with Vesting Registry",
                "params": {
                    "_vestingRegistryProxy": "the address of vesting registry proxy contract"
                }
            },
            "setVestingStakes(uint256[],uint96[])": {
                "params": {
                    "lockedDates": "The arrays of lock dates.",
                    "values": "The array of values to add to the staked balance. TODO: remove - it was designed as a disposable function to initialize vesting checkpoints"
                }
            },
            "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            },
            "weightedVestingStakeByDate(uint256,uint256,uint256)": {
                "params": {
                    "blockNumber": "The block number, needed for checkpointing.",
                    "date": "The staking date to compute the power for. Adjusted to the previous valid lock date, if necessary.",
                    "startDate": "The date for which we need to know the power of the stake. Adjusted to the previous valid lock date, if necessary."
                },
                "return": "The stacking power."
            }
        },
        "title": "Staking Vesting Module contract"
    },
    "userdoc": {
        "methods": {
            "addContractCodeHash(address)": {
                "notice": "Add vesting contract's code hash to a map of code hashes."
            },
            "getPriorUserStakeByDate(address,uint256,uint256)": {
                "notice": "Determine the prior number of stake for an account until a certain lock date as of a block number."
            },
            "getPriorVestingStakeByDate(uint256,uint256)": {
                "notice": "Determine the prior number of vested stake for an account until a certain lock date as of a block number."
            },
            "getPriorVestingWeightedStake(uint256,uint256)": {
                "notice": "Determine the prior weighted vested amount for an account as of a block number. Iterate through checkpoints adding up voting power."
            },
            "isVestingContract(address)": {
                "notice": "Return flag whether the given address is a registered vesting contract."
            },
            "removeContractCodeHash(address)": {
                "notice": "Remove vesting contract's code hash to a map of code hashes."
            },
            "setVestingRegistry(address)": {
                "notice": "sets vesting registry"
            },
            "setVestingStakes(uint256[],uint96[])": {
                "notice": "Sets the users' vesting stakes for a giving lock dates and writes checkpoints."
            },
            "weightedVestingStakeByDate(uint256,uint256,uint256)": {
                "notice": "Compute the voting power for a specific date. Power = stake * weight"
            }
        },
        "notice": "Implements interaction with Vesting functionality: vesting registry, vesting staking"
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 56900,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
            },
            {
                "astId": 26435,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "kickoffTS",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
            },
            {
                "astId": 26438,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "name",
                "offset": 0,
                "slot": "2",
                "type": "t_string_storage"
            },
            {
                "astId": 26440,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "SOVToken",
                "offset": 0,
                "slot": "3",
                "type": "t_contract(IERC20)35959"
            },
            {
                "astId": 26446,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "delegates",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
            },
            {
                "astId": 26449,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "allUnlocked",
                "offset": 0,
                "slot": "5",
                "type": "t_bool"
            },
            {
                "astId": 26461,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "newStakingContract",
                "offset": 1,
                "slot": "5",
                "type": "t_address"
            },
            {
                "astId": 26472,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "totalStakingCheckpoints",
                "offset": 0,
                "slot": "6",
                "type": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)26466_storage))"
            },
            {
                "astId": 26476,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "numTotalStakingCheckpoints",
                "offset": 0,
                "slot": "7",
                "type": "t_mapping(t_uint256,t_uint32)"
            },
            {
                "astId": 26484,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "delegateStakingCheckpoints",
                "offset": 0,
                "slot": "8",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)26466_storage)))"
            },
            {
                "astId": 26490,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "numDelegateStakingCheckpoints",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint32))"
            },
            {
                "astId": 26498,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "userStakingCheckpoints",
                "offset": 0,
                "slot": "10",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)26466_storage)))"
            },
            {
                "astId": 26504,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "numUserStakingCheckpoints",
                "offset": 0,
                "slot": "11",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint32))"
            },
            {
                "astId": 26508,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "nonces",
                "offset": 0,
                "slot": "12",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 26510,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "feeSharing",
                "offset": 0,
                "slot": "13",
                "type": "t_contract(IFeeSharingCollector)15409"
            },
            {
                "astId": 26513,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "weightScaling",
                "offset": 20,
                "slot": "13",
                "type": "t_uint96"
            },
            {
                "astId": 26517,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "vestingWhitelist",
                "offset": 0,
                "slot": "14",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 26521,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "admins",
                "offset": 0,
                "slot": "15",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 26525,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "vestingCodeHashes",
                "offset": 0,
                "slot": "16",
                "type": "t_mapping(t_bytes32,t_bool)"
            },
            {
                "astId": 26531,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "vestingCheckpoints",
                "offset": 0,
                "slot": "17",
                "type": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)26466_storage))"
            },
            {
                "astId": 26535,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "numVestingCheckpoints",
                "offset": 0,
                "slot": "18",
                "type": "t_mapping(t_uint256,t_uint32)"
            },
            {
                "astId": 26537,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "vestingRegistryLogic",
                "offset": 0,
                "slot": "19",
                "type": "t_contract(IVestingRegistry)28814"
            },
            {
                "astId": 26541,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "pausers",
                "offset": 0,
                "slot": "20",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 26543,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "paused",
                "offset": 0,
                "slot": "21",
                "type": "t_bool"
            },
            {
                "astId": 26545,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "frozen",
                "offset": 1,
                "slot": "21",
                "type": "t_bool"
            },
            {
                "astId": 26547,
                "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                "label": "maxVestingWithdrawIterations",
                "offset": 0,
                "slot": "22",
                "type": "t_uint256"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
            },
            "t_contract(IERC20)35959": {
                "encoding": "inplace",
                "label": "contract IERC20",
                "numberOfBytes": "20"
            },
            "t_contract(IFeeSharingCollector)15409": {
                "encoding": "inplace",
                "label": "contract IFeeSharingCollector",
                "numberOfBytes": "20"
            },
            "t_contract(IVestingRegistry)28814": {
                "encoding": "inplace",
                "label": "contract IVestingRegistry",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => address))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)26466_storage)))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => mapping(uint32 => struct StakingStorageShared.Checkpoint)))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)26466_storage))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint32))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => uint32))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_bytes32,t_bool)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_uint256,t_address)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
            },
            "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)26466_storage))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(uint32 => struct StakingStorageShared.Checkpoint))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint32,t_struct(Checkpoint)26466_storage)"
            },
            "t_mapping(t_uint256,t_uint32)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => uint32)",
                "numberOfBytes": "32",
                "value": "t_uint32"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)26466_storage)": {
                "encoding": "mapping",
                "key": "t_uint32",
                "label": "mapping(uint32 => struct StakingStorageShared.Checkpoint)",
                "numberOfBytes": "32",
                "value": "t_struct(Checkpoint)26466_storage"
            },
            "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)26466_storage": {
                "encoding": "inplace",
                "label": "struct StakingStorageShared.Checkpoint",
                "members": [
                    {
                        "astId": 26463,
                        "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                        "label": "fromBlock",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint32"
                    },
                    {
                        "astId": 26465,
                        "contract": "contracts/governance/Staking/modules/StakingVestingModule.sol:StakingVestingModule",
                        "label": "stake",
                        "offset": 4,
                        "slot": "0",
                        "type": "t_uint96"
                    }
                ],
                "numberOfBytes": "32"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            },
            "t_uint32": {
                "encoding": "inplace",
                "label": "uint32",
                "numberOfBytes": "4"
            },
            "t_uint96": {
                "encoding": "inplace",
                "label": "uint96",
                "numberOfBytes": "12"
            }
        }
    }
}
