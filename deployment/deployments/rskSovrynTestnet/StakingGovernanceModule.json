{
    "address": "0x6251FA9F1774DeA8cd69d8D34BFcBa4EbD2CBEd8",
    "abi": [
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "AdminAdded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "AdminRemoved",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32"
                }
            ],
            "name": "ContractCodeHashAdded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32"
                }
            ],
            "name": "ContractCodeHashRemoved",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "delegator",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lockedUntil",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "fromDelegate",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "toDelegate",
                    "type": "address"
                }
            ],
            "name": "DelegateChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "delegate",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lockedUntil",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "previousBalance",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "newBalance",
                    "type": "uint256"
                }
            ],
            "name": "DelegateStakeChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "staker",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "previousDate",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "newDate",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amountStaked",
                    "type": "uint256"
                }
            ],
            "name": "ExtendedStakingDuration",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "pauser",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "bool",
                    "name": "added",
                    "type": "bool"
                }
            ],
            "name": "PauserAddedOrRemoved",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bool",
                    "name": "setFrozen",
                    "type": "bool"
                }
            ],
            "name": "StakingFrozen",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bool",
                    "name": "setPaused",
                    "type": "bool"
                }
            ],
            "name": "StakingPaused",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "staker",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "until",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "receiver",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "bool",
                    "name": "isGovernance",
                    "type": "bool"
                }
            ],
            "name": "StakingWithdrawn",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "caller",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "receiver",
                    "type": "address"
                }
            ],
            "name": "TeamVestingCancelled",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "caller",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "receiver",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lastProcessedDate",
                    "type": "uint256"
                }
            ],
            "name": "TeamVestingPartiallyCancelled",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "staker",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lockedUntil",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "totalStaked",
                    "type": "uint256"
                }
            ],
            "name": "TokensStaked",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "TokensUnlocked",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lockedTS",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint96",
                    "name": "value",
                    "type": "uint96"
                }
            ],
            "name": "VestingStakeSet",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "vesting",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "receiver",
                    "type": "address"
                }
            ],
            "name": "VestingTokensWithdrawn",
            "type": "event"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "DELEGATION_TYPEHASH",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "DOMAIN_TYPEHASH",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "MAX_DURATION",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "MAX_VOTING_WEIGHT",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "SOVToken",
            "outputs": [
                {
                    "internalType": "contract IERC20",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "WEIGHT_FACTOR",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "admins",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "allUnlocked",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "delegatee",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "lockDate",
                    "type": "uint256"
                }
            ],
            "name": "delegate",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "delegateStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "delegates",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "feeSharing",
            "outputs": [
                {
                    "internalType": "contract IFeeSharingCollector",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "frozen",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "getCurrentVotes",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "getFunctionsList",
            "outputs": [
                {
                    "internalType": "bytes4[]",
                    "name": "",
                    "type": "bytes4[]"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "date",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "blockNumber",
                    "type": "uint256"
                }
            ],
            "name": "getPriorStakeByDateForDelegatee",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "date",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "blockNumber",
                    "type": "uint256"
                }
            ],
            "name": "getPriorTotalStakesForDate",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint32",
                    "name": "blockNumber",
                    "type": "uint32"
                },
                {
                    "internalType": "uint256",
                    "name": "time",
                    "type": "uint256"
                }
            ],
            "name": "getPriorTotalVotingPower",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "totalVotingPower",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "blockNumber",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "date",
                    "type": "uint256"
                }
            ],
            "name": "getPriorVotes",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "votes",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "isOwner",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "kickoffTS",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "newStakingContract",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "nonces",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numDelegateStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numTotalStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numUserStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numVestingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "paused",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "pausers",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "totalStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "userStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "vestingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "name": "vestingCodeHashes",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "vestingRegistryLogic",
            "outputs": [
                {
                    "internalType": "contract IVestingRegistry",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "vestingWhitelist",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "weightScaling",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "transactionHash": "0x1842ad8babdf0314a9c1362e17e6455dac0747cfa76871aa3f1cb2926c2cbaa6",
    "receipt": {
        "to": null,
        "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
        "contractAddress": "0x6251FA9F1774DeA8cd69d8D34BFcBa4EbD2CBEd8",
        "transactionIndex": 0,
        "gasUsed": "2631606",
        "logsBloom": "0x
        "blockHash": "0x4abbe097252c2683681c3c5a5c4757240df87016732f3986d4ce17e4fc009e54",
        "transactionHash": "0x1842ad8babdf0314a9c1362e17e6455dac0747cfa76871aa3f1cb2926c2cbaa6",
        "logs": [
            {
                "transactionIndex": 0,
                "blockNumber": 3655766,
                "transactionHash": "0x1842ad8babdf0314a9c1362e17e6455dac0747cfa76871aa3f1cb2926c2cbaa6",
                "address": "0x6251FA9F1774DeA8cd69d8D34BFcBa4EbD2CBEd8",
                "topics": [
                    "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x00000000000000000000000013be55487d37fe3c66ee7305e1e9c1ac85de75ae"
                ],
                "data": "0x",
                "logIndex": 0,
                "blockHash": "0x4abbe097252c2683681c3c5a5c4757240df87016732f3986d4ce17e4fc009e54"
            }
        ],
        "blockNumber": 3655766,
        "cumulativeGasUsed": "2631606",
        "status": 1,
        "byzantium": true
    },
    "args": [],
    "numDeployments": 2,
    "solcInputHash": "5aac57e986071e917d667feba06fc19b",
    "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ContractCodeHashAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ContractCodeHashRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateStakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"ExtendedStakingDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"PauserAddedOrRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"setFrozen\",\"type\":\"bool\"}],\"name\":\"StakingFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"setPaused\",\"type\":\"bool\"}],\"name\":\"StakingPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isGovernance\",\"type\":\"bool\"}],\"name\":\"StakingWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"TeamVestingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedDate\",\"type\":\"uint256\"}],\"name\":\"TeamVestingPartiallyCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedTS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"name\":\"VestingStakeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"VestingTokensWithdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VOTING_WEIGHT\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOVToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEIGHT_FACTOR\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"delegateStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeSharing\",\"outputs\":[{\"internalType\":\"contract IFeeSharingCollector\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFunctionsList\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"\",\"type\":\"bytes4[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorStakeByDateForDelegatee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorTotalStakesForDate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getPriorTotalVotingPower\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"totalVotingPower\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kickoffTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newStakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numDelegateStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numTotalStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numUserStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numVestingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"totalStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"userStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"vestingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vestingCodeHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingRegistryLogic\",\"outputs\":[{\"internalType\":\"contract IVestingRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weightScaling\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"delegate(address,uint256)\":{\"params\":{\"delegatee\":\"The address to delegate votes to.\",\"lockDate\":\"the date if the position to delegate.\"}},\"getCurrentVotes(address)\":{\"details\":\"This is a wrapper to simplify arguments. The actual computation is performed on WeightedStaking parent contract.\",\"params\":{\"account\":\"The address to get votes balance.\"},\"return\":\"The number of current votes for a user account.\"},\"getPriorStakeByDateForDelegatee(address,uint256,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check.\",\"blockNumber\":\"The block number to get the vote balance at.\",\"date\":\"The staking date to compute the power for. Adjusted to the next valid lock date, if necessary.\"},\"return\":\"The number of votes the account had as of the given block.\"},\"getPriorTotalStakesForDate(uint256,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"blockNumber\":\"The block number to get the vote balance at.\",\"date\":\"The date to check the stakes for. Adjusted to the next valid lock date, as necessary\"},\"return\":\"The total number of votes as of the given block.\"},\"getPriorTotalVotingPower(uint32,uint256)\":{\"params\":{\"blockNumber\":\"The block number, needed for checkpointing.\",\"time\":\"The timestamp for which to calculate the total voting power.\"},\"return\":\"The total voting power at the given time.\"},\"getPriorVotes(address,uint256,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.     Used for Voting, not for fee sharing.\",\"params\":{\"account\":\"The address of the account to check.\",\"blockNumber\":\"The block number to get the vote balance at.\",\"date\":\"The staking date to compute the power for.\"},\"return\":\"The number of votes the delegatee had as of the given block.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Staking Governance Module contract\"},\"userdoc\":{\"methods\":{\"delegate(address,uint256)\":{\"notice\":\"Delegate votes from `msg.sender` which are locked until lockDate to `delegatee`.\"},\"getCurrentVotes(address)\":{\"notice\":\"Get the current votes balance for a user account.\"},\"getPriorStakeByDateForDelegatee(address,uint256,uint256)\":{\"notice\":\"Determine the prior number of stake for an account as of a block number.\"},\"getPriorTotalStakesForDate(uint256,uint256)\":{\"notice\":\"Determine the prior number of stake for an unlocking date as of a block number.\"},\"getPriorTotalVotingPower(uint32,uint256)\":{\"notice\":\"Compute the total voting power at a given time.\"},\"getPriorVotes(address,uint256,uint256)\":{\"notice\":\"Determine the prior number of votes for a delegatee as of a block number. Iterate through checkpoints adding up voting power.\"}},\"notice\":\"Implements voting power and delegation functionality\"}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Staking/modules/StakingGovernanceModule.sol\":\"StakingGovernanceModule\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/governance/IFeeSharingCollector.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for contract governance/FeeSharingCollector/FeeSharingCollector.sol\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * */\\ninterface IFeeSharingCollector {\\n    function withdrawFees(address[] calldata _token) external;\\n\\n    function transferTokens(address _token, uint96 _amount) external;\\n\\n    function withdraw(\\n        address _loanPoolToken,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7794cb434d9395ea983dcf8ded48db5b68897a338429320f60172c4caa47fb40\"},\"contracts/governance/Staking/SafeMath96.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title SafeMath96 contract.\\n * @notice Improved Solidity's arithmetic operations with added overflow checks.\\n * @dev SafeMath96 uses uint96, unsigned integers of 96 bits length, so every\\n * integer from 0 to 2^96-1 can be operated.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * SafeMath restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this contract instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n * */\\ncontract SafeMath96 {\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe64(uint256 n, string memory errorMessage) internal pure returns (uint64) {\\n        require(n < 2**64, errorMessage);\\n        return uint64(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `+` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe addition a+b.\\n     * */\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Substracts two unsigned integers, reverting on underflow.\\n     * @dev Counterpart to Solidity's `-` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on underflow.\\n     * @return The safe substraction a-b.\\n     * */\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `*` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe product a*b.\\n     * */\\n    function mul96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint96 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Divides two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `/` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe division a/b.\\n     * */\\n    function div96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint96 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xc37b24a41212f26435849813104568112c9e151a60018f53d76c7d06e74782ce\"},\"contracts/governance/Staking/modules/StakingGovernanceModule.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./shared/CheckpointsShared.sol\\\";\\nimport \\\"../../../openzeppelin/Address.sol\\\";\\nimport \\\"./shared/StakingShared.sol\\\";\\nimport \\\"../../../proxy/modules/interfaces/IFunctionsList.sol\\\";\\nimport \\\"../../../rsk/RSKAddrValidator.sol\\\";\\nimport \\\"../../Vesting/IVesting.sol\\\";\\n\\n/**\\n * @title Staking Governance Module contract\\n * @notice Implements voting power and delegation functionality\\n * */\\ncontract StakingGovernanceModule is IFunctionsList, StakingShared, CheckpointsShared {\\n    using Address for address payable;\\n\\n    /************* TOTAL VOTING POWER COMPUTATION ************************/\\n\\n    /**\\n     * @notice Compute the total voting power at a given time.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @param time The timestamp for which to calculate the total voting power.\\n     * @return The total voting power at the given time.\\n     * */\\n    function getPriorTotalVotingPower(uint32 blockNumber, uint256 time)\\n        public\\n        view\\n        returns (uint96 totalVotingPower)\\n    {\\n        /// @dev Start the computation with the exact or previous unlocking date (voting weight remians the same until the next break point).\\n        uint256 start = _timestampToLockDate(time);\\n        uint256 end = start + MAX_DURATION;\\n\\n        /// @dev Max 78 iterations.\\n        for (uint256 i = start; i <= end; i += TWO_WEEKS) {\\n            totalVotingPower = add96(\\n                totalVotingPower,\\n                _totalPowerByDate(i, start, blockNumber),\\n                \\\"arrays mismatch\\\"\\n            ); // WS06\\n        }\\n    }\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * @param date The staking date to compute the power for.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function _totalPowerByDate(\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) internal view returns (uint96 power) {\\n        uint96 weight = _computeWeightByDate(date, startDate);\\n        uint96 staked = _getPriorTotalStakesForDate(date, blockNumber);\\n        /// @dev weight is multiplied by some factor to allow decimals.\\n        power = mul96(staked, weight, \\\"mul overflow\\\") / WEIGHT_FACTOR; // WS07\\n    }\\n\\n    /****************************** DELEGATED VOTING POWER COMPUTATION ************************/\\n\\n    /**\\n     * @notice Get the current votes balance for a user account.\\n     * @param account The address to get votes balance.\\n     * @dev This is a wrapper to simplify arguments. The actual computation is\\n     * performed on WeightedStaking parent contract.\\n     * @return The number of current votes for a user account.\\n     * */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        return getPriorVotes(account, block.number - 1, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for a delegatee as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will revert\\n     * to prevent misinformation.\\n     *      Used for Voting, not for fee sharing.\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The number of votes the delegatee had as of the given block.\\n     * */\\n    function getPriorVotes(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) public view returns (uint96 votes) {\\n        /// @dev If date is not an exact break point, start weight computation from the previous break point (alternative would be the next).\\n        uint256 start = _timestampToLockDate(date);\\n        uint256 end = start + MAX_DURATION;\\n\\n        /// @dev Max 78 iterations.\\n        for (uint256 i = start; i <= end; i += TWO_WEEKS) {\\n            votes = add96(\\n                votes,\\n                _totalPowerByDateForDelegatee(account, i, start, blockNumber),\\n                \\\"overflow - total VP\\\"\\n            ); // WS09\\n        }\\n    }\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * @param account The address of the account to check.\\n     * @param date The staking date to compute the power for.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function _totalPowerByDateForDelegatee(\\n        address account,\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) internal view returns (uint96 power) {\\n        uint96 weight = _computeWeightByDate(date, startDate);\\n        uint96 staked = _getPriorStakeByDateForDelegatee(account, date, blockNumber);\\n        power = mul96(staked, weight, \\\"mul overflow\\\") / WEIGHT_FACTOR; // WS10\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The staking date to compute the power for. Adjusted to the next valid lock date, if necessary.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorStakeByDateForDelegatee(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96) {\\n        date = _adjustDateForOrigin(date);\\n        return _getPriorStakeByDateForDelegatee(account, date, blockNumber);\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The staking date to compute the power for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function _getPriorStakeByDateForDelegatee(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) internal view returns (uint96) {\\n        require(blockNumber < _getCurrentBlockNumber(), \\\"not determined yet\\\"); // WS11\\n\\n        uint32 nCheckpoints = numDelegateStakingCheckpoints[account][date];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        /// @dev First check most recent balance.\\n        if (delegateStakingCheckpoints[account][date][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return delegateStakingCheckpoints[account][date][nCheckpoints - 1].stake;\\n        }\\n\\n        /// @dev Next check implicit zero balance.\\n        if (delegateStakingCheckpoints[account][date][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; /// @dev ceil, avoiding overflow.\\n            Checkpoint memory cp = delegateStakingCheckpoints[account][date][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.stake;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return delegateStakingCheckpoints[account][date][lower].stake;\\n    }\\n\\n    /**************** SHARED FUNCTIONS *********************/\\n\\n    /**\\n     * @notice Determine the prior number of stake for an unlocking date as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * @param date The date to check the stakes for. Adjusted to the next valid lock date, as necessary\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The total number of votes as of the given block.\\n     * */\\n    function getPriorTotalStakesForDate(uint256 date, uint256 blockNumber)\\n        public\\n        view\\n        returns (uint96)\\n    {\\n        date = _adjustDateForOrigin(date);\\n        return _getPriorTotalStakesForDate(date, blockNumber);\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of stake for an unlocking date as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * @param date The date to check the stakes for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The total number of votes as of the given block.\\n     * */\\n    function _getPriorTotalStakesForDate(uint256 date, uint256 blockNumber)\\n        internal\\n        view\\n        returns (uint96)\\n    {\\n        require(blockNumber < _getCurrentBlockNumber(), \\\"not determined\\\"); // WS08\\n\\n        uint32 nCheckpoints = numTotalStakingCheckpoints[date];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (totalStakingCheckpoints[date][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return totalStakingCheckpoints[date][nCheckpoints - 1].stake;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (totalStakingCheckpoints[date][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = totalStakingCheckpoints[date][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.stake;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return totalStakingCheckpoints[date][lower].stake;\\n    }\\n\\n    /**\\n     * @notice Set new delegatee. Move from user's current delegate to a new\\n     * delegatee the stake balance.\\n     * @param delegator The user address to move stake balance from its current delegatee.\\n     * @param delegatee The new delegatee. The address to move stake balance to.\\n     * @param lockedTS The lock date.\\n     * @dev Reverts if delegator balance or delegatee is not valid, unless the sender is a vesting contract.\\n     * */\\n    function _delegate(\\n        address delegator,\\n        address delegatee,\\n        uint256 lockedTS\\n    ) internal {\\n        address currentDelegate = delegates[delegator][lockedTS];\\n        uint96 delegatorBalance = _currentBalance(delegator, lockedTS);\\n\\n        // vesting contracts will in multiple cases try to delegate a zero balance\\n        // or to the existing delegatee\\n        if (_isVestingContract(msg.sender)) {\\n            if (delegatorBalance == 0 || currentDelegate == delegatee) {\\n                return;\\n            }\\n        } else {\\n            require(delegatorBalance > 0, \\\"no stake to delegate\\\");\\n            require(currentDelegate != delegatee, \\\"cannot delegate to the existing delegatee\\\");\\n        }\\n\\n        delegates[delegator][lockedTS] = delegatee;\\n\\n        emit DelegateChanged(delegator, lockedTS, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance, lockedTS);\\n    }\\n\\n    // @dev delegates tokens for lock date 2 weeks later than given lock date\\n    //\\t\\tif message sender is a contract\\n    function _delegateNext(\\n        address delegator,\\n        address delegatee,\\n        uint256 lockedTS\\n    ) internal {\\n        if (_isVestingContract(msg.sender)) {\\n            uint256 nextLock = lockedTS.add(TWO_WEEKS);\\n            address currentDelegate = delegates[delegator][nextLock];\\n            if (currentDelegate != delegatee) {\\n                _delegate(delegator, delegatee, nextLock);\\n            }\\n\\n            // @dev workaround for the issue with a delegation of the latest stake\\n            uint256 endDate = IVesting(msg.sender).endDate();\\n            nextLock = lockedTS.add(FOUR_WEEKS);\\n            if (nextLock == endDate) {\\n                currentDelegate = delegates[delegator][nextLock];\\n                if (currentDelegate != delegatee) {\\n                    _delegate(delegator, delegatee, nextLock);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Move an amount of delegate stake from a source address to a\\n     * destination address.\\n     * @param srcRep The address to get the staked amount from.\\n     * @param dstRep The address to send the staked amount to.\\n     * @param amount The staked amount to move.\\n     * @param lockedTS The lock date.\\n     * */\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint96 amount,\\n        uint256 lockedTS\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) _decreaseDelegateStake(srcRep, lockedTS, amount);\\n\\n            if (dstRep != address(0)) _increaseDelegateStake(dstRep, lockedTS, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieve CHAIN_ID of the executing chain.\\n     *\\n     * Chain identifier (chainID) introduced in EIP-155 protects transaction\\n     * included into one chain from being included into another chain.\\n     * Basically, chain identifier is an integer number being used in the\\n     * processes of signing transactions and verifying transaction signatures.\\n     *\\n     * @dev As of version 0.5.12, Solidity includes an assembly function\\n     * chainid() that provides access to the new CHAINID opcode.\\n     *\\n     * TODO: chainId is included in block. So you can get chain id like\\n     * block timestamp or block number: block.chainid;\\n     * */\\n    function _getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` which are locked until lockDate to `delegatee`.\\n     * @param delegatee The address to delegate votes to.\\n     * @param lockDate the date if the position to delegate.\\n     * */\\n    function delegate(address delegatee, uint256 lockDate) external whenNotPaused {\\n        require(delegatee != address(0), \\\"cannot delegate to the zero address\\\");\\n        _notSameBlockAsStakingCheckpoint(lockDate, msg.sender);\\n\\n        _delegate(msg.sender, delegatee, lockDate);\\n        // @dev delegates tokens for lock date 2 weeks later than given lock date\\n        //\\t\\tif message sender is a contract\\n        _delegateNext(msg.sender, delegatee, lockDate);\\n    }\\n\\n    function getFunctionsList() external pure returns (bytes4[] memory) {\\n        bytes4[] memory functionsList = new bytes4[](6);\\n        functionsList[0] = this.getPriorTotalVotingPower.selector;\\n        functionsList[1] = this.getCurrentVotes.selector;\\n        functionsList[2] = this.getPriorVotes.selector;\\n        functionsList[3] = this.getPriorStakeByDateForDelegatee.selector;\\n        functionsList[4] = this.getPriorTotalStakesForDate.selector;\\n        functionsList[5] = this.delegate.selector;\\n        return functionsList;\\n    }\\n}\\n\",\"keccak256\":\"0x4c1cf83f444128c584277faff9bc60319a714946ef4420a765825fc45e474a5c\"},\"contracts/governance/Staking/modules/shared/CheckpointsShared.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./StakingStorageShared.sol\\\";\\nimport \\\"../../SafeMath96.sol\\\";\\n\\n/**\\n * @title Checkpoints contract.\\n * @notice Increases and decreases storage values for users, delegatees and\\n * total daily stake.\\n * */\\ncontract CheckpointsShared is StakingStorageShared, SafeMath96 {\\n    /// @notice An event emitted when an account changes its delegate.\\n    event DelegateChanged(\\n        address indexed delegator,\\n        uint256 lockedUntil,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event emitted when a delegate account's stake balance changes.\\n    event DelegateStakeChanged(\\n        address indexed delegate,\\n        uint256 lockedUntil,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /// @notice An event emitted when tokens get staked.\\n    event TokensStaked(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 lockedUntil,\\n        uint256 totalStaked\\n    );\\n\\n    /// @notice An event emitted when staked tokens get withdrawn.\\n    event StakingWithdrawn(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 until,\\n        address indexed receiver,\\n        bool isGovernance\\n    );\\n\\n    /// @notice An event emitted when vesting tokens get withdrawn.\\n    event VestingTokensWithdrawn(address vesting, address receiver);\\n\\n    /// @notice An event emitted when the owner unlocks all tokens.\\n    event TokensUnlocked(uint256 amount);\\n\\n    /// @notice An event emitted when a staking period gets extended.\\n    event ExtendedStakingDuration(\\n        address indexed staker,\\n        uint256 previousDate,\\n        uint256 newDate,\\n        uint256 amountStaked\\n    );\\n\\n    event AdminAdded(address admin);\\n\\n    event AdminRemoved(address admin);\\n\\n    /// @param pauser address to grant power to pause the contract\\n    /// @param added true - added, false - removed\\n    event PauserAddedOrRemoved(address indexed pauser, bool indexed added);\\n\\n    /// @notice An event emitted when a staking is paused or unpaused\\n    /// @param setPaused true - pause, false - unpause\\n    event StakingPaused(bool indexed setPaused);\\n\\n    /// @notice An event emitted when a staking is frozen or unfrozen\\n    /// @param setFrozen true - freeze, false - unfreeze\\n    event StakingFrozen(bool indexed setFrozen);\\n\\n    event ContractCodeHashAdded(bytes32 hash);\\n\\n    event ContractCodeHashRemoved(bytes32 hash);\\n\\n    event VestingStakeSet(uint256 lockedTS, uint96 value);\\n\\n    event TeamVestingCancelled(address indexed caller, address receiver);\\n\\n    event TeamVestingPartiallyCancelled(\\n        address indexed caller,\\n        address receiver,\\n        uint256 lastProcessedDate\\n    );\\n\\n    constructor() internal {\\n        // abstract\\n    }\\n\\n    /**\\n     * @notice Increases the user's vesting stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseVestingStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numVestingCheckpoints[lockedTS];\\n        uint96 vested = vestingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newVest = add96(vested, value, \\\"CP01\\\"); // vested overflow\\n        _writeVestingCheckpoint(lockedTS, nCheckpoints, newVest);\\n    }\\n\\n    /**\\n     * @notice Decreases the user's vesting stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseVestingStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numVestingCheckpoints[lockedTS];\\n        uint96 vested = vestingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newVest = sub96(vested, value, \\\"CP02\\\"); // vested underflow\\n        _writeVestingCheckpoint(lockedTS, nCheckpoints, newVest);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the user vested amount.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newVest The new vest balance.\\n     * */\\n    function _writeVestingCheckpoint(\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newVest\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP03\\\"); // block num > 32 bits\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            vestingCheckpoints[lockedTS][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            vestingCheckpoints[lockedTS][nCheckpoints - 1].stake = newVest;\\n        } else {\\n            vestingCheckpoints[lockedTS][nCheckpoints] = Checkpoint(blockNumber, newVest);\\n            numVestingCheckpoints[lockedTS] = nCheckpoints + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases the user's stake for a giving lock date and writes a checkpoint.\\n     * @param account The user address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseUserStake(\\n        address account,\\n        uint256 lockedTS,\\n        uint96 value\\n    ) internal {\\n        uint32 nCheckpoints = numUserStakingCheckpoints[account][lockedTS];\\n        uint96 staked = userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = add96(staked, value, \\\"CP04\\\"); // staked overflow\\n        _writeUserCheckpoint(account, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Decreases the user's stake for a giving lock date and writes a checkpoint.\\n     * @param account The user address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseUserStake(\\n        address account,\\n        uint256 lockedTS,\\n        uint96 value\\n    ) internal {\\n        uint32 nCheckpoints = numUserStakingCheckpoints[account][lockedTS];\\n        uint96 staked = userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = sub96(staked, value, \\\"CP05\\\"); // staked underflow\\n        _writeUserCheckpoint(account, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the user stake.\\n     * @param account The user address.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newStake The new staked balance.\\n     * */\\n    function _writeUserCheckpoint(\\n        address account,\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newStake\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP06\\\"); // block number > 32 bits\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].stake = newStake;\\n        } else {\\n            userStakingCheckpoints[account][lockedTS][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newStake\\n            );\\n            numUserStakingCheckpoints[account][lockedTS] = nCheckpoints + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases the delegatee's stake for a giving lock date and writes a checkpoint.\\n     * @param delegatee The delegatee address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseDelegateStake(\\n        address delegatee,\\n        uint256 lockedTS,\\n        uint96 value\\n    ) internal {\\n        uint32 nCheckpoints = numDelegateStakingCheckpoints[delegatee][lockedTS];\\n        uint96 staked = delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = add96(staked, value, \\\"CP07\\\"); // block number > 32 bits\\n        _writeDelegateCheckpoint(delegatee, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Decreases the delegatee's stake for a giving lock date and writes a checkpoint.\\n     * @param delegatee The delegatee address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseDelegateStake(\\n        address delegatee,\\n        uint256 lockedTS,\\n        uint96 value\\n    ) internal {\\n        uint32 nCheckpoints = numDelegateStakingCheckpoints[delegatee][lockedTS];\\n        uint96 staked = delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = 0;\\n        // @dev We need to check delegate checkpoint value here,\\n        //\\t\\tbecause we had an issue in `stake` function:\\n        //\\t\\tdelegate checkpoint wasn't updating for the second and next stakes for the same date\\n        //\\t\\tif first stake was withdrawn completely and stake was delegated to the staker\\n        //\\t\\t(no delegation to another address).\\n        // @dev It can be greater than 0, but inconsistent after 3 transactions\\n        if (staked > value) {\\n            newStake = sub96(staked, value, \\\"CP08\\\"); // staked underflow\\n        }\\n        _writeDelegateCheckpoint(delegatee, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the delegate stake.\\n     * @param delegatee The delegate address.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newStake The new staked balance.\\n     * */\\n    function _writeDelegateCheckpoint(\\n        address delegatee,\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newStake\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP09\\\"); // block numb > 32 bits\\n        uint96 oldStake = delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake;\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].fromBlock ==\\n            blockNumber\\n        ) {\\n            delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake = newStake;\\n        } else {\\n            delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newStake\\n            );\\n            numDelegateStakingCheckpoints[delegatee][lockedTS] = nCheckpoints + 1;\\n        }\\n        emit DelegateStakeChanged(delegatee, lockedTS, oldStake, newStake);\\n    }\\n\\n    /**\\n     * @notice Increases the total stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseDailyStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numTotalStakingCheckpoints[lockedTS];\\n        uint96 staked = totalStakingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = add96(staked, value, \\\"CP10\\\"); // staked overflow\\n        _writeStakingCheckpoint(lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Decreases the total stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseDailyStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numTotalStakingCheckpoints[lockedTS];\\n        uint96 staked = totalStakingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = sub96(staked, value, \\\"CP11\\\"); // staked underflow\\n        _writeStakingCheckpoint(lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the total stake.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newStake The new staked balance.\\n     * */\\n    function _writeStakingCheckpoint(\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newStake\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP12\\\"); // block num > 32 bits\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            totalStakingCheckpoints[lockedTS][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            totalStakingCheckpoints[lockedTS][nCheckpoints - 1].stake = newStake;\\n        } else {\\n            totalStakingCheckpoints[lockedTS][nCheckpoints] = Checkpoint(blockNumber, newStake);\\n            numTotalStakingCheckpoints[lockedTS] = nCheckpoints + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the current balance of an account locked until a certain date.\\n     * @param account The user address.\\n     * @param lockDate The lock date.\\n     * @return The stake amount.\\n     * */\\n    function _currentBalance(address account, uint256 lockDate) internal view returns (uint96) {\\n        uint32 _numUnserStakingCheckpoints = numUserStakingCheckpoints[account][lockDate] - 1;\\n        return userStakingCheckpoints[account][lockDate][_numUnserStakingCheckpoints].stake;\\n    }\\n}\\n\",\"keccak256\":\"0x0008c67cca18adda882118e4543045905e7e75d8536034ffcc97526065784036\"},\"contracts/governance/Staking/modules/shared/StakingShared.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./StakingStorageShared.sol\\\";\\nimport \\\"../../SafeMath96.sol\\\";\\nimport \\\"../../../../openzeppelin/SafeMath.sol\\\";\\nimport \\\"../../../../openzeppelin/Ownable.sol\\\";\\n\\n/**\\n * @title Staking modules shared functionality\\n */\\ncontract StakingShared is StakingStorageShared, SafeMath96 {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant FOUR_WEEKS = 4 weeks;\\n\\n    /**\\n     * @dev Throws if paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"paused\\\"); // SS03\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner or admin.\\n     */\\n    modifier onlyAuthorized() {\\n        require(isOwner() || admins[msg.sender], \\\"unauthorized\\\"); // SS01\\n        _;\\n    }\\n\\n    /**\\n\\t * @dev Throws if called by any account other than the owner or admin or pauser.\\n\\t \\n\\tmodifier onlyAuthorizedOrPauser() {\\n\\t\\trequire(isOwner() || admins[msg.sender] || pausers[msg.sender], \\\"unauthorized\\\"); // WS02\\n\\t\\t_;\\n\\t}\\n\\t*/\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner or pauser.\\n     */\\n    modifier onlyPauserOrOwner() {\\n        require(isOwner() || pausers[msg.sender], \\\"unauthorized\\\"); // SS02\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than pauser.\\n     * @notice Uncomment when needed\\n     */\\n    /*\\n\\tmodifier onlyPauser() {\\n\\t\\trequire(pausers[msg.sender], \\\"Not pauser\\\");\\n\\t\\t_;\\n\\t}\\n\\t*/\\n\\n    /**\\n     * @dev Throws if frozen.\\n     */\\n    modifier whenNotFrozen() {\\n        require(!frozen, \\\"paused\\\"); // SS04\\n        _;\\n    }\\n\\n    constructor() internal {\\n        // abstract\\n    }\\n\\n    function _notSameBlockAsStakingCheckpoint(uint256 lockDate, address stakeFor) internal view {\\n        uint32 nCheckpoints = numUserStakingCheckpoints[stakeFor][lockDate];\\n        bool notSameBlock =\\n            userStakingCheckpoints[stakeFor][lockDate][nCheckpoints - 1].fromBlock != block.number;\\n        require(notSameBlock, \\\"cannot be mined in the same block as last stake\\\"); // S20\\n    }\\n\\n    /**\\n     * @notice Unstaking is possible every 2 weeks only. This means, to\\n     * calculate the key value for the staking checkpoints, we need to\\n     * map the intended timestamp to the closest available date.\\n     * @param timestamp The unlocking timestamp.\\n     * @return The actual unlocking date (might be up to 2 weeks shorter than intended).\\n     * */\\n    function _timestampToLockDate(uint256 timestamp) internal view returns (uint256 lockDate) {\\n        // Optimize gas costs by reading kickoffTS from storage only once.\\n        uint256 start = kickoffTS;\\n        require(timestamp >= start, \\\"timestamp < contract creation\\\"); // WS23\\n        /**\\n         * @dev If staking timestamp does not match any of the unstaking dates\\n         * , set the lockDate to the closest one before the timestamp.\\n         * E.g. Passed timestamps lies 7 weeks after kickoff -> only stake for 6 weeks.\\n         * */\\n        uint256 periodFromKickoff = (timestamp - start) / TWO_WEEKS;\\n        lockDate = periodFromKickoff * TWO_WEEKS + start;\\n    }\\n\\n    /**\\n     * @notice Determine the current Block Number\\n     * @dev This is segregated from the _getPriorUserStakeByDate function to better test\\n     * advancing blocks functionality using Mock Contracts\\n     * */\\n    function _getCurrentBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account until a\\n     * \\t\\tcertain lock date as of a block number.\\n     * @dev All functions of Staking contract use this internal version,\\n     * \\t\\twe need to modify public function in order to workaround issue with Vesting.withdrawTokens:\\n     * return 1 instead of 0 if message sender is a contract.\\n     * @param account The address of the account to check.\\n     * @param date The lock date. Adjusted to the next valid lock date, if necessary.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function _getPriorUserStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) internal view returns (uint96) {\\n        require(blockNumber < _getCurrentBlockNumber(), \\\"not determined\\\"); // WS14\\n\\n        date = _adjustDateForOrigin(date);\\n        uint32 nCheckpoints = numUserStakingCheckpoints[account][date];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        /// @dev First check most recent balance.\\n        if (userStakingCheckpoints[account][date][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return userStakingCheckpoints[account][date][nCheckpoints - 1].stake;\\n        }\\n\\n        /// @dev Next check implicit zero balance.\\n        if (userStakingCheckpoints[account][date][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; /// @dev ceil, avoiding overflow.\\n            Checkpoint memory cp = userStakingCheckpoints[account][date][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.stake;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return userStakingCheckpoints[account][date][lower].stake;\\n    }\\n\\n    /**\\n     * @dev origin vesting contracts have different dates\\n     * we need to add 2 weeks to get end of period (by default, it's start)\\n     * @param date The staking date to compute the power for.\\n     * @return unlocking date.\\n     */\\n    function _adjustDateForOrigin(uint256 date) internal view returns (uint256) {\\n        uint256 adjustedDate = _timestampToLockDate(date);\\n        //origin vesting contracts have different dates\\n        //we need to add 2 weeks to get end of period (by default, it's start)\\n        if (adjustedDate != date) {\\n            date = adjustedDate + TWO_WEEKS;\\n        }\\n        return date;\\n    }\\n\\n    /**\\n     * @notice Compute the weight for a specific date.\\n     * @param date The unlocking date.\\n     * @param startDate We compute the weight for the tokens staked until 'date' on 'startDate'.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function _computeWeightByDate(uint256 date, uint256 startDate)\\n        internal\\n        pure\\n        returns (uint96 weight)\\n    {\\n        require(date >= startDate, \\\"date < startDate\\\"); // WS18\\n        uint256 remainingTime = (date - startDate);\\n        require(MAX_DURATION >= remainingTime, \\\"remaining time > max duration\\\"); // WS19\\n        /// @dev x = max days - remaining days\\n        uint96 x = uint96(MAX_DURATION - remainingTime) / (1 days);\\n        /// @dev w = (m^2 - x^2)/m^2 +1 (multiplied by the weight factor)\\n        weight = add96(\\n            WEIGHT_FACTOR,\\n            mul96(\\n                MAX_VOTING_WEIGHT * WEIGHT_FACTOR,\\n                sub96(\\n                    MAX_DURATION_POW_2,\\n                    x * x,\\n                    \\\"weight underflow\\\" // WS20\\n                ),\\n                \\\"weight mul overflow\\\" // WS21\\n            ) / MAX_DURATION_POW_2,\\n            \\\"overflow on weight\\\" // WS22\\n        );\\n    }\\n\\n    /**\\n     * @notice Return flag whether the given address is a registered vesting contract.\\n     * @param stakerAddress the address to check\\n     */\\n    function _isVestingContract(address stakerAddress) internal view returns (bool) {\\n        bool isVesting;\\n        bytes32 codeHash;\\n\\n        assembly {\\n            codeHash := extcodehash(stakerAddress)\\n        }\\n        if (address(vestingRegistryLogic) != address(0)) {\\n            isVesting = vestingRegistryLogic.isVestingAddress(stakerAddress);\\n        }\\n\\n        if (isVesting) return true;\\n        if (vestingCodeHashes[codeHash]) return true;\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x4032aa3828ef2fefc034188429ac376f760f0a74cb002a724aef5e270adc0098\"},\"contracts/governance/Staking/modules/shared/StakingStorageShared.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../../../interfaces/IERC20.sol\\\";\\nimport \\\"../../../IFeeSharingCollector.sol\\\";\\nimport \\\"../../../Vesting/IVestingRegistry.sol\\\";\\n\\n/**\\n * @title StakingStorageShared contract is inherited by Staking modules.\\n * @notice Just the storage part of stacking contract, no functions,\\n * only constant, variables and required structures (mappings).\\n * Used by StackingProxy and Checkpoints contracts.\\n *\\n * What is SOV staking?\\n * The purpose of the SOV token is to provide a pseudonymous,\\n * censorship-resistant mechanism for governing the parameters of the Sovryn\\n * protocol, while aligning the incentives of protocol governors with the\\n * long-term success of the protocol. Any SOV token holder can choose to\\n * stake (lock up) their tokens for a fixed period of time in return for\\n * voting rights in the Bitocracy. Stakers are further incentivised through\\n * fee and slashing rewards.\\n * */\\ncontract StakingStorageShared is Ownable {\\n    /// @notice 2 weeks in seconds.\\n    uint256 constant TWO_WEEKS = 1209600;\\n\\n    /// @notice The maximum possible voting weight before adding +1 (actually 10, but need 9 for computation).\\n    uint96 public constant MAX_VOTING_WEIGHT = 9;\\n\\n    /// @notice weight is multiplied with this factor (for allowing decimals, like 1.2x).\\n    /// @dev MAX_VOTING_WEIGHT * WEIGHT_FACTOR needs to be < 792, because there are 100,000,000 SOV with 18 decimals\\n    uint96 public constant WEIGHT_FACTOR = 10;\\n\\n    /// @notice The maximum duration to stake tokens for.\\n    uint256 public constant MAX_DURATION = 1092 days;\\n\\n    /// @notice The maximum duration ^2\\n    uint96 constant MAX_DURATION_POW_2 = 1092 * 1092;\\n\\n    /// @notice Default weight scaling.\\n    uint96 constant DEFAULT_WEIGHT_SCALING = 3;\\n\\n    /// @notice Range for weight scaling.\\n    uint96 constant MIN_WEIGHT_SCALING = 1;\\n    uint96 constant MAX_WEIGHT_SCALING = 9;\\n\\n    /// @notice The timestamp of contract creation. Base for the staking period calculation.\\n    uint256 public kickoffTS;\\n\\n    string name = \\\"SOVStaking\\\";\\n\\n    /// @notice The token to be staked.\\n    IERC20 public SOVToken;\\n\\n    /// @notice A record of each accounts delegate.\\n    mapping(address => mapping(uint256 => address)) public delegates;\\n\\n    /// @notice If this flag is set to true, all tokens are unlocked immediately.\\n    bool public allUnlocked = false;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain.\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 lockDate,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice Used for stake migrations to a new staking contract with a different storage structure.\\n    address public newStakingContract;\\n\\n    /*************************** Checkpoints *******************************/\\n\\n    /// @notice A checkpoint for marking the stakes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 stake;\\n    }\\n\\n    /// @notice A record of tokens to be unstaked at a given time in total.\\n    /// For total voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev totalStakingCheckpoints[date][index] is a checkpoint.\\n    mapping(uint256 => mapping(uint32 => Checkpoint)) public totalStakingCheckpoints;\\n\\n    /// @notice The number of total staking checkpoints for each date.\\n    /// @dev numTotalStakingCheckpoints[date] is a number.\\n    mapping(uint256 => uint32) public numTotalStakingCheckpoints;\\n\\n    /// @notice A record of tokens to be unstaked at a given time which were delegated to a certain address.\\n    /// For delegatee voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev delegateStakingCheckpoints[delegatee][date][index] is a checkpoint.\\n    mapping(address => mapping(uint256 => mapping(uint32 => Checkpoint)))\\n        public delegateStakingCheckpoints;\\n\\n    /// @notice The number of total staking checkpoints for each date per delegate.\\n    /// @dev numDelegateStakingCheckpoints[delegatee][date] is a number.\\n    mapping(address => mapping(uint256 => uint32)) public numDelegateStakingCheckpoints;\\n\\n    /// @notice A record of tokens to be unstaked at a given time which per user address (address -> lockDate -> stake checkpoint)\\n    /// @dev userStakingCheckpoints[user][date][index] is a checkpoint.\\n    mapping(address => mapping(uint256 => mapping(uint32 => Checkpoint)))\\n        public userStakingCheckpoints;\\n\\n    /// @notice The number of total staking checkpoints for each date per user.\\n    /// @dev numUserStakingCheckpoints[user][date] is a number.\\n    mapping(address => mapping(uint256 => uint32)) public numUserStakingCheckpoints;\\n\\n    /// @notice A record of states for signing / validating signatures\\n    /// @dev nonces[user] is a number.\\n    mapping(address => uint256) public nonces;\\n\\n    /*************************** Slashing *******************************/\\n\\n    /// @notice the address of FeeSharingCollectorProxy contract, we need it for unstaking with slashing.\\n    IFeeSharingCollector public feeSharing;\\n\\n    /// @notice used for weight scaling when unstaking with slashing.\\n    uint96 public weightScaling = DEFAULT_WEIGHT_SCALING;\\n\\n    /// @notice List of vesting contracts, tokens for these contracts won't be slashed if unstaked by governance.\\n    /// @dev vestingWhitelist[contract] is true/false.\\n    mapping(address => bool) public vestingWhitelist;\\n\\n    /// @dev user => flag whether user has admin role.\\n    /// @dev multisig should be an admin, admin can invoke only governanceWithdrawVesting function,\\n    /// \\tthis function works only with Team Vesting contracts\\n    mapping(address => bool) public admins;\\n\\n    /// @dev vesting contract code hash => flag whether it's registered code hash\\n    mapping(bytes32 => bool) public vestingCodeHashes;\\n\\n    /// @notice A record of tokens to be unstaked from vesting contract at a given time (lockDate -> vest checkpoint)\\n    /// @dev vestingCheckpoints[date][index] is a checkpoint.\\n    mapping(uint256 => mapping(uint32 => Checkpoint)) public vestingCheckpoints;\\n\\n    /// @notice The number of total vesting checkpoints for each date.\\n    /// @dev numVestingCheckpoints[date] is a number.\\n    mapping(uint256 => uint32) public numVestingCheckpoints;\\n\\n    ///@notice vesting registry contract\\n    IVestingRegistry public vestingRegistryLogic;\\n\\n    /// @dev user => flag whether user has pauser role.\\n    mapping(address => bool) public pausers;\\n\\n    /// @dev Staking contract is paused\\n    bool public paused;\\n\\n    /// @dev Staking contract is frozen\\n    bool public frozen;\\n\\n    /// @dev max iterations that can be supported in 1 tx for the withdrawal\\n    uint256 internal maxVestingWithdrawIterations;\\n\\n    constructor() internal {\\n        //abstract\\n    }\\n}\\n\",\"keccak256\":\"0xf83eb462825c77f9c0629d15a52c8248cd1e9ce1e947c6ea93102d952790dca4\"},\"contracts/governance/Vesting/IVesting.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for Vesting contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * This interface is used by VestingLogic contract to implement stakeTokens function\\n * and on VestingRegistry contract to call IVesting(vesting).stakeTokens function\\n * at a vesting instance.\\n */\\ninterface IVesting {\\n    function duration() external returns (uint256);\\n\\n    function endDate() external returns (uint256);\\n\\n    function stakeTokens(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x373d8b2669d69d57ed11f1caf345e3a818f5c60019b3fff91acb01d323c0600c\"},\"contracts/governance/Vesting/IVestingRegistry.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for upgradable Vesting Registry contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n */\\ninterface IVestingRegistry {\\n    function getVesting(address _tokenOwner) external view returns (address);\\n\\n    function getTeamVesting(address _tokenOwner) external view returns (address);\\n\\n    function setVestingRegistry(address _vestingRegistryProxy) external;\\n\\n    function isVestingAdress(address _vestingAddress) external view returns (bool); //name typo. to be deprecated.\\n\\n    function isVestingAddress(address _vestingAddress) external view returns (bool);\\n\\n    function isTeamVesting(address _vestingAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9f972c6eff9310beed9807757744bbaa0901c34df1cfff1eb5f58cf47b25904d\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) public view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) public returns (bool);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xea0bb1bf7d022130bb42a4efdfd875ef76ac5ac730a94ddd7b8c9949d4253855\"},\"contracts/openzeppelin/Address.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html\\n     *   #use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x23df48a01dbac9b25e86c9131174fb7752bbc7e741e63f1aa982de22e055ad54\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"},\"contracts/proxy/modules/interfaces/IFunctionsList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.17;\\n\\ninterface IFunctionsList {\\n    function getFunctionsList() external pure returns (bytes4[] memory functionSignatures);\\n}\\n\",\"keccak256\":\"0x38fb0166042329bc9ffcab69742f215efd135cdcf2d48b2202cb7f1546709101\"},\"contracts/rsk/RSKAddrValidator.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.5.17;\\n\\nlibrary RSKAddrValidator {\\n    /*\\n     * @param addr it is an address to check that it does not originates from\\n     * signing with PK = ZERO. RSK has a small difference in which @ZERO_PK_ADDR is\\n     * also an address from PK = ZERO. So we check for both of them.\\n     * */\\n    function checkPKNotZero(address addr) internal pure returns (bool) {\\n        return (addr != 0xdcc703c0E500B653Ca82273B7BFAd8045D85a470 && addr != address(0));\\n    }\\n\\n    /*\\n     * Safely compares two addresses, checking they do not originate from\\n     * a zero private key.\\n     * */\\n    function safeEquals(address addr1, address addr2) internal pure returns (bool) {\\n        return (addr1 == addr2 &&\\n            addr1 != 0xdcc703c0E500B653Ca82273B7BFAd8045D85a470 &&\\n            addr1 != address(0));\\n    }\\n}\\n\",\"keccak256\":\"0xf25255f771a734eef130f68e899d00a71e2bcab4e6b109e06f61cff93ab58d74\"}},\"version\":1}",
    "bytecode": "0x60c0604052600a608081905269534f565374616b696e6760b01b60a09081526200002d9160029190620000ae565b506005805460ff19169055600d80546001600160a01b0316600360a01b179055600062000059620000a9565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000150565b335b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000f157805160ff191683800117855562000121565b8280016001018555821562000121579182015b828111156200012157825182559160200191906001019062000104565b506200012f92915062000133565b5090565b620000ab91905b808211156200012f57600081556001016200013a565b61247180620001606000396000f3fe608060405234801561001057600080fd5b50600436106102315760003560e01c80639436e7d411610130578063bf626ec1116100b8578063e7a324dc1161007c578063e7a324dc1461046d578063e97ffacb14610475578063f09cfc6414610488578063f2fde38b1461049b578063f3f19731146104ae57610231565b8063bf626ec114610422578063d27569e71461042a578063d8ad326d14610432578063db27ec1814610447578063dfb267c21461045a57610231565b8063adae9002116100ff578063adae9002146103d9578063ae81dfe4146103ec578063b1724b46146103f4578063b4b5ea57146103fc578063bb533cf21461040f57610231565b80639436e7d41461039657806394c2ce58146103b65780639929e886146103c9578063a58848c5146103d157610231565b806327dd1b00116101be5780637ecebe00116101825780637ecebe001461034d57806380f51c1214610360578063836eebee146103735780638da5cb5b146103865780638f32d59b1461038e57610231565b806327dd1b00146102de578063429b62e5146102fe5780635c975abb1461031157806368cefccc146103195780636b6fde0e1461033a57610231565b806307392cc01161020557806307392cc014610293578063104932cf146102a657806317748adc146102ae57806320606b70146102c35780632522d7ba146102cb57610231565b8062073f9914610236578063026e402b1461025457806303a18fa314610269578063054f7d9c1461027e575b600080fd5b61023e6104c1565b60405161024b9190612203565b60405180910390f35b610267610262366004611b8b565b6104c7565b005b61027161053d565b60405161024b9190612211565b61028661054c565b60405161024b91906121f5565b6102866102a1366004611c73565b61055a565b61027161056f565b6102b661057e565b60405161024b9190612351565b61023e610583565b6102b66102d9366004611cfe565b61059a565b6102f16102ec366004611b8b565b61060f565b60405161024b91906121d6565b61028661030c366004611b65565b610635565b61028661064a565b61032c610327366004611c12565b610653565b60405161024b929190612336565b61032c610348366004611c12565b61068e565b61023e61035b366004611b65565b6106c9565b61028661036e366004611b65565b6106db565b6102b6610381366004611bc5565b6106f0565b6102f1610765565b610286610774565b6103a96103a4366004611c73565b610798565b60405161024b9190612328565b6103a96103c4366004611b8b565b6107b0565b6102866107d3565b6102716107dc565b6102866103e7366004611b65565b6107eb565b6102f1610800565b61023e610814565b6102b661040a366004611b65565b61081c565b6103a961041d366004611c73565b610834565b6102b661084c565b6102b6610862565b61043a610867565b60405161024b91906121e4565b6103a9610455366004611b8b565b6109b5565b61032c610468366004611cce565b6109d8565b61023e610a0d565b6102b6610483366004611bc5565b610a19565b6102b6610496366004611caf565b610a3b565b6102676104a9366004611b65565b610a5b565b61032c6104bc366004611cce565b610a8b565b60015481565b60155460ff16156104f35760405162461bcd60e51b81526004016104ea906122f0565b60405180910390fd5b6001600160a01b0382166105195760405162461bcd60e51b81526004016104ea90612280565b6105238133610ac0565b61052e338383610b37565b610539338383610c99565b5050565b600d546001600160a01b031681565b601554610100900460ff1681565b60106020526000908152604090205460ff1681565b6013546001600160a01b031681565b600981565b60405161058f906121c0565b604051809103902081565b6000806105a683610dd3565b905063059fa6008101815b818111610606576105fa846105cd83868a63ffffffff16610e13565b6040518060400160405280600f81526020016e0c2e4e4c2f2e640dad2e6dac2e8c6d608b1b815250610e85565b935062127500016105b1565b50505092915050565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b600f6020526000908152604090205460ff1681565b60155460ff1681565b600a60209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b600860209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b600c6020526000908152604090205481565b60146020526000908152604090205460ff1681565b6000806106fc83610dd3565b905063059fa6008101815b81811161075b5761074f8461071e8984878b610ec1565b6040518060400160405280601381526020017206f766572666c6f77202d20746f74616c20565606c1b815250610e85565b93506212750001610707565b5050509392505050565b6000546001600160a01b031690565b600080546001600160a01b0316610789610f35565b6001600160a01b031614905090565b60076020526000908152604090205463ffffffff1681565b600960209081526000928352604080842090915290825290205463ffffffff1681565b60055460ff1681565b6003546001600160a01b031681565b600e6020526000908152604090205460ff1681565b60055461010090046001600160a01b031681565b63059fa60081565b600061082c8260014303426106f0565b90505b919050565b60126020526000908152604090205463ffffffff1681565b600d54600160a01b90046001600160601b031681565b600a81565b60408051600680825260e082019092526060918291906020820160c080388339019050509050632522d7ba60e01b816000815181106108a257fe5b6001600160e01b031990921660209283029190910190910152805163b4b5ea5760e01b90829060019081106108d357fe5b6001600160e01b03199092166020928302919091019091015280516341b775f760e11b908290600290811061090457fe5b6001600160e01b031990921660209283029190910190910152805163e97ffacb60e01b908290600390811061093557fe5b6001600160e01b0319909216602092830291909101909101528051633c273f1960e21b908290600490811061096657fe5b6001600160e01b031990921660209283029190910190910152805163026e402b60e01b908290600590811061099757fe5b6001600160e01b031990921660209283029190910190910152905090565b600b60209081526000928352604080842090915290825290205463ffffffff1681565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b60405161058f906121cb565b6000610a2483610f39565b9250610a31848484610f5e565b90505b9392505050565b6000610a4683610f39565b9250610a5283836111a7565b90505b92915050565b610a63610774565b610a7f5760405162461bcd60e51b81526004016104ea90612270565b610a8881611380565b50565b601160209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6001600160a01b0381166000818152600b60209081526040808320868452825280832054938352600a8252808320868452825280832060001963ffffffff9586169081018616855292529091205490911643141580610b315760405162461bcd60e51b81526004016104ea906122c0565b50505050565b6001600160a01b03808416600090815260046020908152604080832085845290915281205490911690610b6a8584611401565b9050610b7533611464565b15610bb2576001600160601b0381161580610ba15750836001600160a01b0316826001600160a01b0316145b15610bad575050610c94565b610c0d565b6000816001600160601b031611610bdb5760405162461bcd60e51b81526004016104ea90612260565b836001600160a01b0316826001600160a01b03161415610c0d5760405162461bcd60e51b81526004016104ea906122d0565b6001600160a01b0385811660008181526004602090815260408083208884529091529081902080546001600160a01b03191688851690811790915590519092851691907fb846dc53d3621f480d692e73f4473156d20f23ff6b2c8237b7130b883226cca990610c7d908890612203565b60405180910390a4610c918285838661153d565b50505b505050565b610ca233611464565b15610c94576000610cbc826212750063ffffffff6115a116565b6001600160a01b0380861660009081526004602090815260408083208584529091529020549192509081169084168114610cfb57610cfb858584610b37565b6000336001600160a01b031663c24a0f8b6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610d3857600080fd5b505af1158015610d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d709190810190611c91565b9050610d85846224ea0063ffffffff6115a116565b925080831415610dcb576001600160a01b0380871660009081526004602090815260408083208784529091529020548116925085168214610dcb57610dcb868685610b37565b505050505050565b60015460009080831015610df95760405162461bcd60e51b81526004016104ea90612230565b600062127500828503046212750002919091019392505050565b600080610e2085856115c6565b90506000610e2e86856111a7565b9050600a6001600160601b0316610e6a82846040518060400160405280600c81526020016b6d756c206f766572666c6f7760a01b8152506116fc565b6001600160601b031681610e7a57fe5b049695505050505050565b6000838301826001600160601b038087169083161015610eb85760405162461bcd60e51b81526004016104ea919061221f565b50949350505050565b600080610ece85856115c6565b90506000610edd878786610f5e565b9050600a6001600160601b0316610f1982846040518060400160405280600c81526020016b6d756c206f766572666c6f7760a01b8152506116fc565b6001600160601b031681610f2957fe5b04979650505050505050565b3390565b600080610f4583610dd3565b9050828114610f575762127500810192505b5090919050565b6000610f6861175a565b8210610f865760405162461bcd60e51b81526004016104ea906122e0565b6001600160a01b038416600090815260096020908152604080832086845290915290205463ffffffff1680610fbf576000915050610a34565b6001600160a01b0385166000908152600860209081526040808320878452825280832063ffffffff60001986018116855292529091205416831061104b576001600160a01b038516600090815260086020908152604080832087845282528083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610a34565b6001600160a01b0385166000908152600860209081526040808320878452825280832083805290915290205463ffffffff1683101561108e576000915050610a34565b600060001982015b8163ffffffff168163ffffffff16111561115957600282820363ffffffff160481036110c0611b17565b506001600160a01b03881660009081526008602090815260408083208a8452825280832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b0316918101919091529087141561113457602001519450610a349350505050565b805163ffffffff1687111561114b57819350611152565b6001820392505b5050611096565b506001600160a01b0386166000908152600860209081526040808320888452825280832063ffffffff909416835292905220546001600160601b03600160201b909104169150509392505050565b60006111b161175a565b82106111cf5760405162461bcd60e51b81526004016104ea906122a0565b60008381526007602052604090205463ffffffff16806111f3576000915050610a55565b600084815260066020908152604080832063ffffffff60001986018116855292529091205416831061125b5760008481526006602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610a55565b600084815260066020908152604080832083805290915290205463ffffffff1683101561128c576000915050610a55565b600060001982015b8163ffffffff168163ffffffff16111561134557600282820363ffffffff160481036112be611b17565b50600087815260066020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b0316918101919091529087141561132057602001519450610a559350505050565b805163ffffffff168711156113375781935061133e565b6001820392505b5050611294565b50600085815260066020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b6001600160a01b0381166113a65760405162461bcd60e51b81526004016104ea90612240565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000818152600b60209081526040808320858452825280832054938352600a8252808320858452825280832060001963ffffffff95861601909416835292905220546001600160601b03600160201b9091041692915050565b6013546000908190833f906001600160a01b03161561150057601354604051633288436360e21b81526001600160a01b039091169063ca210d8c906114ad9087906004016121d6565b60206040518083038186803b1580156114c557600080fd5b505afa1580156114d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114fd9190810190611c55565b91505b81156115115760019250505061082f565b60008181526010602052604090205460ff16156115335760019250505061082f565b5060009392505050565b826001600160a01b0316846001600160a01b03161415801561156857506000826001600160601b0316115b15610b31576001600160a01b038416156115875761158784828461175e565b6001600160a01b03831615610b3157610b318382846117ff565b600082820183811015610a525760405162461bcd60e51b81526004016104ea90612250565b6000818310156115e85760405162461bcd60e51b81526004016104ea90612290565b81830363059fa60081111561160f5760405162461bcd60e51b81526004016104ea906122b0565b6000620151808263059fa600036001600160601b03168161162c57fe5b0490506116f3600a621232106001600160601b03166116b2600a600902611681621232108788026040518060400160405280601081526020016f77656967687420756e646572666c6f7760801b815250611888565b60405180604001604052806013815260200172776569676874206d756c206f766572666c6f7760681b8152506116fc565b6001600160601b0316816116c257fe5b04604051806040016040528060128152602001711bdd995c999b1bddc81bdb881dd95a59da1d60721b815250610e85565b95945050505050565b60006001600160601b03841661171457506000610a34565b8383026001600160601b03808516908087169083168161173057fe5b046001600160601b0316148390610eb85760405162461bcd60e51b81526004016104ea919061221f565b4390565b6001600160a01b038316600081815260096020908152604080832086845282528083205493835260088252808320868452825280832063ffffffff94851660001981019095168452909152812054600160201b90046001600160601b03908116919084168211156117f3576117f0828560405180604001604052806004815260200163086a060760e31b815250611888565b90505b610dcb868685846118c7565b6001600160a01b038316600081815260096020908152604080832086845282528083205493835260088252808320868452825280832063ffffffff94851660001981019095168452825280832054815180830190925260048252634350303760e01b92820192909252600160201b9091046001600160601b031691906117f09083908690610e85565b6000836001600160601b0316836001600160601b0316111582906118bf5760405162461bcd60e51b81526004016104ea919061221f565b505050900390565b60006118ef43604051806040016040528060048152602001634350303960e01b815250611ae8565b6001600160a01b03861660009081526008602090815260408083208884528252808320600019880163ffffffff9081168552925290912054919250600160201b9091046001600160601b03169084161580159061198557506001600160a01b0386166000908152600860209081526040808320888452825280832063ffffffff6000198901811685529252909120548382169116145b156119ec576001600160a01b03861660009081526008602090815260408083208884528252808320600019880163ffffffff168452909152902080546fffffffffffffffffffffffff000000001916600160201b6001600160601b03861602179055611a9b565b60408051808201825263ffffffff80851682526001600160601b0380871660208085019182526001600160a01b038c166000818152600883528781208d825283528781208c871682528352878120965187549451909516600160201b026fffffffffffffffffffffffff000000001995871663ffffffff19958616179590951694909417909555938252600984528482208a835290935292909220805460018801909316929091169190911790555b856001600160a01b03167fc7b38fb25352e6f351f57e2c922f84db5c97e09a6246bbe1d2eedfcdb01c4c62868386604051611ad893929190612300565b60405180910390a2505050505050565b600081600160201b8410611b0f5760405162461bcd60e51b81526004016104ea919061221f565b509192915050565b604080518082019091526000808252602082015290565b8035610a55816123ff565b8051610a5581612413565b8035610a558161241c565b8051610a558161241c565b8035610a5581612425565b600060208284031215611b7757600080fd5b6000611b838484611b2e565b949350505050565b60008060408385031215611b9e57600080fd5b6000611baa8585611b2e565b9250506020611bbb85828601611b44565b9150509250929050565b600080600060608486031215611bda57600080fd5b6000611be68686611b2e565b9350506020611bf786828701611b44565b9250506040611c0886828701611b44565b9150509250925092565b600080600060608486031215611c2757600080fd5b6000611c338686611b2e565b9350506020611c4486828701611b44565b9250506040611c0886828701611b5a565b600060208284031215611c6757600080fd5b6000611b838484611b39565b600060208284031215611c8557600080fd5b6000611b838484611b44565b600060208284031215611ca357600080fd5b6000611b838484611b4f565b60008060408385031215611cc257600080fd5b6000611baa8585611b44565b60008060408385031215611ce157600080fd5b6000611ced8585611b44565b9250506020611bbb85828601611b5a565b60008060408385031215611d1157600080fd5b6000611baa8585611b5a565b6000611d298383611dab565b505060200190565b611d3a81612372565b82525050565b6000611d4b82612365565b611d558185612369565b9350611d608361235f565b8060005b83811015611d8e578151611d788882611d1d565b9750611d838361235f565b925050600101611d64565b509495945050505050565b611d3a8161237d565b611d3a81612382565b611d3a81612385565b611d3a816123b3565b6000611dc882612365565b611dd28185612369565b9350611de28185602086016123c9565b611deb816123f5565b9093019392505050565b6000611e02601d83612369565b7f74696d657374616d70203c20636f6e7472616374206372656174696f6e000000815260200192915050565b6000611e3b602683612369565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000611e83601b83612369565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b6000611ebc601483612369565b736e6f207374616b6520746f2064656c656761746560601b815260200192915050565b6000611eec60438361082f565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000611f57600c83612369565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000611f7f602383612369565b7f63616e6e6f742064656c656761746520746f20746865207a65726f206164647281526265737360e81b602082015260400192915050565b6000611fc4601083612369565b6f64617465203c2073746172744461746560801b815260200192915050565b6000611ff0600e83612369565b6d1b9bdd0819195d195c9b5a5b995960921b815260200192915050565b600061201a601d83612369565b7f72656d61696e696e672074696d65203e206d6178206475726174696f6e000000815260200192915050565b6000612053602f83612369565b7f63616e6e6f74206265206d696e656420696e207468652073616d6520626c6f6381526e6b206173206c617374207374616b6560881b602082015260400192915050565b60006120a4604b8361082f565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206c6f636b446174652c75696e74323536206e6f6e63652c75696e7460208201526a323536206578706972792960a81b6040820152604b0192915050565b6000612117602983612369565b7f63616e6e6f742064656c656761746520746f20746865206578697374696e672081526864656c65676174656560b81b602082015260400192915050565b6000612162601283612369565b711b9bdd0819195d195c9b5a5b9959081e595d60721b815260200192915050565b6000612190600683612369565b651c185d5cd95960d21b815260200192915050565b611d3a8161239e565b611d3a816123be565b611d3a816123a7565b6000610a5582611edf565b6000610a5582612097565b60208101610a558284611d31565b60208082528101610a528184611d40565b60208101610a558284611d99565b60208101610a558284611da2565b60208101610a558284611db4565b60208082528101610a528184611dbd565b6020808252810161082c81611df5565b6020808252810161082c81611e2e565b6020808252810161082c81611e76565b6020808252810161082c81611eaf565b6020808252810161082c81611f4a565b6020808252810161082c81611f72565b6020808252810161082c81611fb7565b6020808252810161082c81611fe3565b6020808252810161082c8161200d565b6020808252810161082c81612046565b6020808252810161082c8161210a565b6020808252810161082c81612155565b6020808252810161082c81612183565b6060810161230e8286611da2565b61231b60208301856121ae565b611b8360408301846121ae565b60208101610a5582846121a5565b6040810161234482856121a5565b610a3460208301846121b7565b60208101610a5582846121b7565b60200190565b5190565b90815260200190565b600061082c82612392565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b63ffffffff1690565b6001600160601b031690565b600061082c82612372565b600061082c826123a7565b60005b838110156123e45781810151838201526020016123cc565b83811115610b315750506000910152565b601f01601f191690565b61240881612372565b8114610a8857600080fd5b6124088161237d565b61240881612382565b6124088161239e56fea365627a7a723158201b56f4609ab5c2aef28757bc82c7fb6103fc7c32f176b747aa04585391b02bbe6c6578706572696d656e74616cf564736f6c63430005110040",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102315760003560e01c80639436e7d411610130578063bf626ec1116100b8578063e7a324dc1161007c578063e7a324dc1461046d578063e97ffacb14610475578063f09cfc6414610488578063f2fde38b1461049b578063f3f19731146104ae57610231565b8063bf626ec114610422578063d27569e71461042a578063d8ad326d14610432578063db27ec1814610447578063dfb267c21461045a57610231565b8063adae9002116100ff578063adae9002146103d9578063ae81dfe4146103ec578063b1724b46146103f4578063b4b5ea57146103fc578063bb533cf21461040f57610231565b80639436e7d41461039657806394c2ce58146103b65780639929e886146103c9578063a58848c5146103d157610231565b806327dd1b00116101be5780637ecebe00116101825780637ecebe001461034d57806380f51c1214610360578063836eebee146103735780638da5cb5b146103865780638f32d59b1461038e57610231565b806327dd1b00146102de578063429b62e5146102fe5780635c975abb1461031157806368cefccc146103195780636b6fde0e1461033a57610231565b806307392cc01161020557806307392cc014610293578063104932cf146102a657806317748adc146102ae57806320606b70146102c35780632522d7ba146102cb57610231565b8062073f9914610236578063026e402b1461025457806303a18fa314610269578063054f7d9c1461027e575b600080fd5b61023e6104c1565b60405161024b9190612203565b60405180910390f35b610267610262366004611b8b565b6104c7565b005b61027161053d565b60405161024b9190612211565b61028661054c565b60405161024b91906121f5565b6102866102a1366004611c73565b61055a565b61027161056f565b6102b661057e565b60405161024b9190612351565b61023e610583565b6102b66102d9366004611cfe565b61059a565b6102f16102ec366004611b8b565b61060f565b60405161024b91906121d6565b61028661030c366004611b65565b610635565b61028661064a565b61032c610327366004611c12565b610653565b60405161024b929190612336565b61032c610348366004611c12565b61068e565b61023e61035b366004611b65565b6106c9565b61028661036e366004611b65565b6106db565b6102b6610381366004611bc5565b6106f0565b6102f1610765565b610286610774565b6103a96103a4366004611c73565b610798565b60405161024b9190612328565b6103a96103c4366004611b8b565b6107b0565b6102866107d3565b6102716107dc565b6102866103e7366004611b65565b6107eb565b6102f1610800565b61023e610814565b6102b661040a366004611b65565b61081c565b6103a961041d366004611c73565b610834565b6102b661084c565b6102b6610862565b61043a610867565b60405161024b91906121e4565b6103a9610455366004611b8b565b6109b5565b61032c610468366004611cce565b6109d8565b61023e610a0d565b6102b6610483366004611bc5565b610a19565b6102b6610496366004611caf565b610a3b565b6102676104a9366004611b65565b610a5b565b61032c6104bc366004611cce565b610a8b565b60015481565b60155460ff16156104f35760405162461bcd60e51b81526004016104ea906122f0565b60405180910390fd5b6001600160a01b0382166105195760405162461bcd60e51b81526004016104ea90612280565b6105238133610ac0565b61052e338383610b37565b610539338383610c99565b5050565b600d546001600160a01b031681565b601554610100900460ff1681565b60106020526000908152604090205460ff1681565b6013546001600160a01b031681565b600981565b60405161058f906121c0565b604051809103902081565b6000806105a683610dd3565b905063059fa6008101815b818111610606576105fa846105cd83868a63ffffffff16610e13565b6040518060400160405280600f81526020016e0c2e4e4c2f2e640dad2e6dac2e8c6d608b1b815250610e85565b935062127500016105b1565b50505092915050565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b600f6020526000908152604090205460ff1681565b60155460ff1681565b600a60209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b600860209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b600c6020526000908152604090205481565b60146020526000908152604090205460ff1681565b6000806106fc83610dd3565b905063059fa6008101815b81811161075b5761074f8461071e8984878b610ec1565b6040518060400160405280601381526020017206f766572666c6f77202d20746f74616c20565606c1b815250610e85565b93506212750001610707565b5050509392505050565b6000546001600160a01b031690565b600080546001600160a01b0316610789610f35565b6001600160a01b031614905090565b60076020526000908152604090205463ffffffff1681565b600960209081526000928352604080842090915290825290205463ffffffff1681565b60055460ff1681565b6003546001600160a01b031681565b600e6020526000908152604090205460ff1681565b60055461010090046001600160a01b031681565b63059fa60081565b600061082c8260014303426106f0565b90505b919050565b60126020526000908152604090205463ffffffff1681565b600d54600160a01b90046001600160601b031681565b600a81565b60408051600680825260e082019092526060918291906020820160c080388339019050509050632522d7ba60e01b816000815181106108a257fe5b6001600160e01b031990921660209283029190910190910152805163b4b5ea5760e01b90829060019081106108d357fe5b6001600160e01b03199092166020928302919091019091015280516341b775f760e11b908290600290811061090457fe5b6001600160e01b031990921660209283029190910190910152805163e97ffacb60e01b908290600390811061093557fe5b6001600160e01b0319909216602092830291909101909101528051633c273f1960e21b908290600490811061096657fe5b6001600160e01b031990921660209283029190910190910152805163026e402b60e01b908290600590811061099757fe5b6001600160e01b031990921660209283029190910190910152905090565b600b60209081526000928352604080842090915290825290205463ffffffff1681565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b60405161058f906121cb565b6000610a2483610f39565b9250610a31848484610f5e565b90505b9392505050565b6000610a4683610f39565b9250610a5283836111a7565b90505b92915050565b610a63610774565b610a7f5760405162461bcd60e51b81526004016104ea90612270565b610a8881611380565b50565b601160209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6001600160a01b0381166000818152600b60209081526040808320868452825280832054938352600a8252808320868452825280832060001963ffffffff9586169081018616855292529091205490911643141580610b315760405162461bcd60e51b81526004016104ea906122c0565b50505050565b6001600160a01b03808416600090815260046020908152604080832085845290915281205490911690610b6a8584611401565b9050610b7533611464565b15610bb2576001600160601b0381161580610ba15750836001600160a01b0316826001600160a01b0316145b15610bad575050610c94565b610c0d565b6000816001600160601b031611610bdb5760405162461bcd60e51b81526004016104ea90612260565b836001600160a01b0316826001600160a01b03161415610c0d5760405162461bcd60e51b81526004016104ea906122d0565b6001600160a01b0385811660008181526004602090815260408083208884529091529081902080546001600160a01b03191688851690811790915590519092851691907fb846dc53d3621f480d692e73f4473156d20f23ff6b2c8237b7130b883226cca990610c7d908890612203565b60405180910390a4610c918285838661153d565b50505b505050565b610ca233611464565b15610c94576000610cbc826212750063ffffffff6115a116565b6001600160a01b0380861660009081526004602090815260408083208584529091529020549192509081169084168114610cfb57610cfb858584610b37565b6000336001600160a01b031663c24a0f8b6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610d3857600080fd5b505af1158015610d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d709190810190611c91565b9050610d85846224ea0063ffffffff6115a116565b925080831415610dcb576001600160a01b0380871660009081526004602090815260408083208784529091529020548116925085168214610dcb57610dcb868685610b37565b505050505050565b60015460009080831015610df95760405162461bcd60e51b81526004016104ea90612230565b600062127500828503046212750002919091019392505050565b600080610e2085856115c6565b90506000610e2e86856111a7565b9050600a6001600160601b0316610e6a82846040518060400160405280600c81526020016b6d756c206f766572666c6f7760a01b8152506116fc565b6001600160601b031681610e7a57fe5b049695505050505050565b6000838301826001600160601b038087169083161015610eb85760405162461bcd60e51b81526004016104ea919061221f565b50949350505050565b600080610ece85856115c6565b90506000610edd878786610f5e565b9050600a6001600160601b0316610f1982846040518060400160405280600c81526020016b6d756c206f766572666c6f7760a01b8152506116fc565b6001600160601b031681610f2957fe5b04979650505050505050565b3390565b600080610f4583610dd3565b9050828114610f575762127500810192505b5090919050565b6000610f6861175a565b8210610f865760405162461bcd60e51b81526004016104ea906122e0565b6001600160a01b038416600090815260096020908152604080832086845290915290205463ffffffff1680610fbf576000915050610a34565b6001600160a01b0385166000908152600860209081526040808320878452825280832063ffffffff60001986018116855292529091205416831061104b576001600160a01b038516600090815260086020908152604080832087845282528083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610a34565b6001600160a01b0385166000908152600860209081526040808320878452825280832083805290915290205463ffffffff1683101561108e576000915050610a34565b600060001982015b8163ffffffff168163ffffffff16111561115957600282820363ffffffff160481036110c0611b17565b506001600160a01b03881660009081526008602090815260408083208a8452825280832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b0316918101919091529087141561113457602001519450610a349350505050565b805163ffffffff1687111561114b57819350611152565b6001820392505b5050611096565b506001600160a01b0386166000908152600860209081526040808320888452825280832063ffffffff909416835292905220546001600160601b03600160201b909104169150509392505050565b60006111b161175a565b82106111cf5760405162461bcd60e51b81526004016104ea906122a0565b60008381526007602052604090205463ffffffff16806111f3576000915050610a55565b600084815260066020908152604080832063ffffffff60001986018116855292529091205416831061125b5760008481526006602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610a55565b600084815260066020908152604080832083805290915290205463ffffffff1683101561128c576000915050610a55565b600060001982015b8163ffffffff168163ffffffff16111561134557600282820363ffffffff160481036112be611b17565b50600087815260066020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b0316918101919091529087141561132057602001519450610a559350505050565b805163ffffffff168711156113375781935061133e565b6001820392505b5050611294565b50600085815260066020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b6001600160a01b0381166113a65760405162461bcd60e51b81526004016104ea90612240565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000818152600b60209081526040808320858452825280832054938352600a8252808320858452825280832060001963ffffffff95861601909416835292905220546001600160601b03600160201b9091041692915050565b6013546000908190833f906001600160a01b03161561150057601354604051633288436360e21b81526001600160a01b039091169063ca210d8c906114ad9087906004016121d6565b60206040518083038186803b1580156114c557600080fd5b505afa1580156114d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114fd9190810190611c55565b91505b81156115115760019250505061082f565b60008181526010602052604090205460ff16156115335760019250505061082f565b5060009392505050565b826001600160a01b0316846001600160a01b03161415801561156857506000826001600160601b0316115b15610b31576001600160a01b038416156115875761158784828461175e565b6001600160a01b03831615610b3157610b318382846117ff565b600082820183811015610a525760405162461bcd60e51b81526004016104ea90612250565b6000818310156115e85760405162461bcd60e51b81526004016104ea90612290565b81830363059fa60081111561160f5760405162461bcd60e51b81526004016104ea906122b0565b6000620151808263059fa600036001600160601b03168161162c57fe5b0490506116f3600a621232106001600160601b03166116b2600a600902611681621232108788026040518060400160405280601081526020016f77656967687420756e646572666c6f7760801b815250611888565b60405180604001604052806013815260200172776569676874206d756c206f766572666c6f7760681b8152506116fc565b6001600160601b0316816116c257fe5b04604051806040016040528060128152602001711bdd995c999b1bddc81bdb881dd95a59da1d60721b815250610e85565b95945050505050565b60006001600160601b03841661171457506000610a34565b8383026001600160601b03808516908087169083168161173057fe5b046001600160601b0316148390610eb85760405162461bcd60e51b81526004016104ea919061221f565b4390565b6001600160a01b038316600081815260096020908152604080832086845282528083205493835260088252808320868452825280832063ffffffff94851660001981019095168452909152812054600160201b90046001600160601b03908116919084168211156117f3576117f0828560405180604001604052806004815260200163086a060760e31b815250611888565b90505b610dcb868685846118c7565b6001600160a01b038316600081815260096020908152604080832086845282528083205493835260088252808320868452825280832063ffffffff94851660001981019095168452825280832054815180830190925260048252634350303760e01b92820192909252600160201b9091046001600160601b031691906117f09083908690610e85565b6000836001600160601b0316836001600160601b0316111582906118bf5760405162461bcd60e51b81526004016104ea919061221f565b505050900390565b60006118ef43604051806040016040528060048152602001634350303960e01b815250611ae8565b6001600160a01b03861660009081526008602090815260408083208884528252808320600019880163ffffffff9081168552925290912054919250600160201b9091046001600160601b03169084161580159061198557506001600160a01b0386166000908152600860209081526040808320888452825280832063ffffffff6000198901811685529252909120548382169116145b156119ec576001600160a01b03861660009081526008602090815260408083208884528252808320600019880163ffffffff168452909152902080546fffffffffffffffffffffffff000000001916600160201b6001600160601b03861602179055611a9b565b60408051808201825263ffffffff80851682526001600160601b0380871660208085019182526001600160a01b038c166000818152600883528781208d825283528781208c871682528352878120965187549451909516600160201b026fffffffffffffffffffffffff000000001995871663ffffffff19958616179590951694909417909555938252600984528482208a835290935292909220805460018801909316929091169190911790555b856001600160a01b03167fc7b38fb25352e6f351f57e2c922f84db5c97e09a6246bbe1d2eedfcdb01c4c62868386604051611ad893929190612300565b60405180910390a2505050505050565b600081600160201b8410611b0f5760405162461bcd60e51b81526004016104ea919061221f565b509192915050565b604080518082019091526000808252602082015290565b8035610a55816123ff565b8051610a5581612413565b8035610a558161241c565b8051610a558161241c565b8035610a5581612425565b600060208284031215611b7757600080fd5b6000611b838484611b2e565b949350505050565b60008060408385031215611b9e57600080fd5b6000611baa8585611b2e565b9250506020611bbb85828601611b44565b9150509250929050565b600080600060608486031215611bda57600080fd5b6000611be68686611b2e565b9350506020611bf786828701611b44565b9250506040611c0886828701611b44565b9150509250925092565b600080600060608486031215611c2757600080fd5b6000611c338686611b2e565b9350506020611c4486828701611b44565b9250506040611c0886828701611b5a565b600060208284031215611c6757600080fd5b6000611b838484611b39565b600060208284031215611c8557600080fd5b6000611b838484611b44565b600060208284031215611ca357600080fd5b6000611b838484611b4f565b60008060408385031215611cc257600080fd5b6000611baa8585611b44565b60008060408385031215611ce157600080fd5b6000611ced8585611b44565b9250506020611bbb85828601611b5a565b60008060408385031215611d1157600080fd5b6000611baa8585611b5a565b6000611d298383611dab565b505060200190565b611d3a81612372565b82525050565b6000611d4b82612365565b611d558185612369565b9350611d608361235f565b8060005b83811015611d8e578151611d788882611d1d565b9750611d838361235f565b925050600101611d64565b509495945050505050565b611d3a8161237d565b611d3a81612382565b611d3a81612385565b611d3a816123b3565b6000611dc882612365565b611dd28185612369565b9350611de28185602086016123c9565b611deb816123f5565b9093019392505050565b6000611e02601d83612369565b7f74696d657374616d70203c20636f6e7472616374206372656174696f6e000000815260200192915050565b6000611e3b602683612369565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000611e83601b83612369565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b6000611ebc601483612369565b736e6f207374616b6520746f2064656c656761746560601b815260200192915050565b6000611eec60438361082f565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000611f57600c83612369565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000611f7f602383612369565b7f63616e6e6f742064656c656761746520746f20746865207a65726f206164647281526265737360e81b602082015260400192915050565b6000611fc4601083612369565b6f64617465203c2073746172744461746560801b815260200192915050565b6000611ff0600e83612369565b6d1b9bdd0819195d195c9b5a5b995960921b815260200192915050565b600061201a601d83612369565b7f72656d61696e696e672074696d65203e206d6178206475726174696f6e000000815260200192915050565b6000612053602f83612369565b7f63616e6e6f74206265206d696e656420696e207468652073616d6520626c6f6381526e6b206173206c617374207374616b6560881b602082015260400192915050565b60006120a4604b8361082f565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206c6f636b446174652c75696e74323536206e6f6e63652c75696e7460208201526a323536206578706972792960a81b6040820152604b0192915050565b6000612117602983612369565b7f63616e6e6f742064656c656761746520746f20746865206578697374696e672081526864656c65676174656560b81b602082015260400192915050565b6000612162601283612369565b711b9bdd0819195d195c9b5a5b9959081e595d60721b815260200192915050565b6000612190600683612369565b651c185d5cd95960d21b815260200192915050565b611d3a8161239e565b611d3a816123be565b611d3a816123a7565b6000610a5582611edf565b6000610a5582612097565b60208101610a558284611d31565b60208082528101610a528184611d40565b60208101610a558284611d99565b60208101610a558284611da2565b60208101610a558284611db4565b60208082528101610a528184611dbd565b6020808252810161082c81611df5565b6020808252810161082c81611e2e565b6020808252810161082c81611e76565b6020808252810161082c81611eaf565b6020808252810161082c81611f4a565b6020808252810161082c81611f72565b6020808252810161082c81611fb7565b6020808252810161082c81611fe3565b6020808252810161082c8161200d565b6020808252810161082c81612046565b6020808252810161082c8161210a565b6020808252810161082c81612155565b6020808252810161082c81612183565b6060810161230e8286611da2565b61231b60208301856121ae565b611b8360408301846121ae565b60208101610a5582846121a5565b6040810161234482856121a5565b610a3460208301846121b7565b60208101610a5582846121b7565b60200190565b5190565b90815260200190565b600061082c82612392565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b63ffffffff1690565b6001600160601b031690565b600061082c82612372565b600061082c826123a7565b60005b838110156123e45781810151838201526020016123cc565b83811115610b315750506000910152565b601f01601f191690565b61240881612372565b8114610a8857600080fd5b6124088161237d565b61240881612382565b6124088161239e56fea365627a7a723158201b56f4609ab5c2aef28757bc82c7fb6103fc7c32f176b747aa04585391b02bbe6c6578706572696d656e74616cf564736f6c63430005110040",
    "devdoc": {
        "methods": {
            "delegate(address,uint256)": {
                "params": {
                    "delegatee": "The address to delegate votes to.",
                    "lockDate": "the date if the position to delegate."
                }
            },
            "getCurrentVotes(address)": {
                "details": "This is a wrapper to simplify arguments. The actual computation is performed on WeightedStaking parent contract.",
                "params": {
                    "account": "The address to get votes balance."
                },
                "return": "The number of current votes for a user account."
            },
            "getPriorStakeByDateForDelegatee(address,uint256,uint256)": {
                "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
                "params": {
                    "account": "The address of the account to check.",
                    "blockNumber": "The block number to get the vote balance at.",
                    "date": "The staking date to compute the power for. Adjusted to the next valid lock date, if necessary."
                },
                "return": "The number of votes the account had as of the given block."
            },
            "getPriorTotalStakesForDate(uint256,uint256)": {
                "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
                "params": {
                    "blockNumber": "The block number to get the vote balance at.",
                    "date": "The date to check the stakes for. Adjusted to the next valid lock date, as necessary"
                },
                "return": "The total number of votes as of the given block."
            },
            "getPriorTotalVotingPower(uint32,uint256)": {
                "params": {
                    "blockNumber": "The block number, needed for checkpointing.",
                    "time": "The timestamp for which to calculate the total voting power."
                },
                "return": "The total voting power at the given time."
            },
            "getPriorVotes(address,uint256,uint256)": {
                "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.     Used for Voting, not for fee sharing.",
                "params": {
                    "account": "The address of the account to check.",
                    "blockNumber": "The block number to get the vote balance at.",
                    "date": "The staking date to compute the power for."
                },
                "return": "The number of votes the delegatee had as of the given block."
            },
            "isOwner()": {
                "details": "Returns true if the caller is the current owner."
            },
            "owner()": {
                "details": "Returns the address of the current owner."
            },
            "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            }
        },
        "title": "Staking Governance Module contract"
    },
    "userdoc": {
        "methods": {
            "delegate(address,uint256)": {
                "notice": "Delegate votes from `msg.sender` which are locked until lockDate to `delegatee`."
            },
            "getCurrentVotes(address)": {
                "notice": "Get the current votes balance for a user account."
            },
            "getPriorStakeByDateForDelegatee(address,uint256,uint256)": {
                "notice": "Determine the prior number of stake for an account as of a block number."
            },
            "getPriorTotalStakesForDate(uint256,uint256)": {
                "notice": "Determine the prior number of stake for an unlocking date as of a block number."
            },
            "getPriorTotalVotingPower(uint32,uint256)": {
                "notice": "Compute the total voting power at a given time."
            },
            "getPriorVotes(address,uint256,uint256)": {
                "notice": "Determine the prior number of votes for a delegatee as of a block number. Iterate through checkpoints adding up voting power."
            }
        },
        "notice": "Implements voting power and delegation functionality"
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 52587,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
            },
            {
                "astId": 22109,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "kickoffTS",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
            },
            {
                "astId": 22112,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "name",
                "offset": 0,
                "slot": "2",
                "type": "t_string_storage"
            },
            {
                "astId": 22114,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "SOVToken",
                "offset": 0,
                "slot": "3",
                "type": "t_contract(IERC20)31656"
            },
            {
                "astId": 22120,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "delegates",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
            },
            {
                "astId": 22123,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "allUnlocked",
                "offset": 0,
                "slot": "5",
                "type": "t_bool"
            },
            {
                "astId": 22135,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "newStakingContract",
                "offset": 1,
                "slot": "5",
                "type": "t_address"
            },
            {
                "astId": 22146,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "totalStakingCheckpoints",
                "offset": 0,
                "slot": "6",
                "type": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)22140_storage))"
            },
            {
                "astId": 22150,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "numTotalStakingCheckpoints",
                "offset": 0,
                "slot": "7",
                "type": "t_mapping(t_uint256,t_uint32)"
            },
            {
                "astId": 22158,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "delegateStakingCheckpoints",
                "offset": 0,
                "slot": "8",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)22140_storage)))"
            },
            {
                "astId": 22164,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "numDelegateStakingCheckpoints",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint32))"
            },
            {
                "astId": 22172,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "userStakingCheckpoints",
                "offset": 0,
                "slot": "10",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)22140_storage)))"
            },
            {
                "astId": 22178,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "numUserStakingCheckpoints",
                "offset": 0,
                "slot": "11",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint32))"
            },
            {
                "astId": 22182,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "nonces",
                "offset": 0,
                "slot": "12",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 22184,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "feeSharing",
                "offset": 0,
                "slot": "13",
                "type": "t_contract(IFeeSharingCollector)15397"
            },
            {
                "astId": 22187,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "weightScaling",
                "offset": 20,
                "slot": "13",
                "type": "t_uint96"
            },
            {
                "astId": 22191,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "vestingWhitelist",
                "offset": 0,
                "slot": "14",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 22195,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "admins",
                "offset": 0,
                "slot": "15",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 22199,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "vestingCodeHashes",
                "offset": 0,
                "slot": "16",
                "type": "t_mapping(t_bytes32,t_bool)"
            },
            {
                "astId": 22205,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "vestingCheckpoints",
                "offset": 0,
                "slot": "17",
                "type": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)22140_storage))"
            },
            {
                "astId": 22209,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "numVestingCheckpoints",
                "offset": 0,
                "slot": "18",
                "type": "t_mapping(t_uint256,t_uint32)"
            },
            {
                "astId": 22211,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "vestingRegistryLogic",
                "offset": 0,
                "slot": "19",
                "type": "t_contract(IVestingRegistry)24488"
            },
            {
                "astId": 22215,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "pausers",
                "offset": 0,
                "slot": "20",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 22217,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "paused",
                "offset": 0,
                "slot": "21",
                "type": "t_bool"
            },
            {
                "astId": 22219,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "frozen",
                "offset": 1,
                "slot": "21",
                "type": "t_bool"
            },
            {
                "astId": 22221,
                "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                "label": "maxVestingWithdrawIterations",
                "offset": 0,
                "slot": "22",
                "type": "t_uint256"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
            },
            "t_contract(IERC20)31656": {
                "encoding": "inplace",
                "label": "contract IERC20",
                "numberOfBytes": "20"
            },
            "t_contract(IFeeSharingCollector)15397": {
                "encoding": "inplace",
                "label": "contract IFeeSharingCollector",
                "numberOfBytes": "20"
            },
            "t_contract(IVestingRegistry)24488": {
                "encoding": "inplace",
                "label": "contract IVestingRegistry",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => address))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)22140_storage)))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => mapping(uint32 => struct StakingStorageShared.Checkpoint)))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)22140_storage))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint32))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => uint32))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_bytes32,t_bool)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_uint256,t_address)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
            },
            "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)22140_storage))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(uint32 => struct StakingStorageShared.Checkpoint))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint32,t_struct(Checkpoint)22140_storage)"
            },
            "t_mapping(t_uint256,t_uint32)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => uint32)",
                "numberOfBytes": "32",
                "value": "t_uint32"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)22140_storage)": {
                "encoding": "mapping",
                "key": "t_uint32",
                "label": "mapping(uint32 => struct StakingStorageShared.Checkpoint)",
                "numberOfBytes": "32",
                "value": "t_struct(Checkpoint)22140_storage"
            },
            "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)22140_storage": {
                "encoding": "inplace",
                "label": "struct StakingStorageShared.Checkpoint",
                "members": [
                    {
                        "astId": 22137,
                        "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                        "label": "fromBlock",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint32"
                    },
                    {
                        "astId": 22139,
                        "contract": "contracts/governance/Staking/modules/StakingGovernanceModule.sol:StakingGovernanceModule",
                        "label": "stake",
                        "offset": 4,
                        "slot": "0",
                        "type": "t_uint96"
                    }
                ],
                "numberOfBytes": "32"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            },
            "t_uint32": {
                "encoding": "inplace",
                "label": "uint32",
                "numberOfBytes": "4"
            },
            "t_uint96": {
                "encoding": "inplace",
                "label": "uint96",
                "numberOfBytes": "12"
            }
        }
    }
}
