{
    "address": "0xaAbdFEFC6Be0a9e876FB16fe5f3f05B3580B9377",
    "abi": [
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "AdminAdded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "AdminRemoved",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32"
                }
            ],
            "name": "ContractCodeHashAdded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes32",
                    "name": "hash",
                    "type": "bytes32"
                }
            ],
            "name": "ContractCodeHashRemoved",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "delegator",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lockedUntil",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "fromDelegate",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "toDelegate",
                    "type": "address"
                }
            ],
            "name": "DelegateChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "delegate",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lockedUntil",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "previousBalance",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "newBalance",
                    "type": "uint256"
                }
            ],
            "name": "DelegateStakeChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "staker",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "previousDate",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "newDate",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amountStaked",
                    "type": "uint256"
                }
            ],
            "name": "ExtendedStakingDuration",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "pauser",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "bool",
                    "name": "added",
                    "type": "bool"
                }
            ],
            "name": "PauserAddedOrRemoved",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bool",
                    "name": "setFrozen",
                    "type": "bool"
                }
            ],
            "name": "StakingFrozen",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bool",
                    "name": "setPaused",
                    "type": "bool"
                }
            ],
            "name": "StakingPaused",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "staker",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "until",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "receiver",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "bool",
                    "name": "isGovernance",
                    "type": "bool"
                }
            ],
            "name": "StakingWithdrawn",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "caller",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "receiver",
                    "type": "address"
                }
            ],
            "name": "TeamVestingCancelled",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "caller",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "receiver",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lastProcessedDate",
                    "type": "uint256"
                }
            ],
            "name": "TeamVestingPartiallyCancelled",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "staker",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lockedUntil",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "totalStaked",
                    "type": "uint256"
                }
            ],
            "name": "TokensStaked",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "TokensUnlocked",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lockedTS",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint96",
                    "name": "value",
                    "type": "uint96"
                }
            ],
            "name": "VestingStakeSet",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "vesting",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "receiver",
                    "type": "address"
                }
            ],
            "name": "VestingTokensWithdrawn",
            "type": "event"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "DELEGATION_TYPEHASH",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "DOMAIN_TYPEHASH",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "MAX_DURATION",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "MAX_VOTING_WEIGHT",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "SOVToken",
            "outputs": [
                {
                    "internalType": "contract IERC20",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "WEIGHT_FACTOR",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "admins",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "allUnlocked",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "balance",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "delegateStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "delegates",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "previousLock",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "until",
                    "type": "uint256"
                }
            ],
            "name": "extendStakingDuration",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "feeSharing",
            "outputs": [
                {
                    "internalType": "contract IFeeSharingCollector",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "frozen",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "lockedTS",
                    "type": "uint256"
                }
            ],
            "name": "getCurrentStakedUntil",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "getFunctionsList",
            "outputs": [
                {
                    "internalType": "bytes4[]",
                    "name": "",
                    "type": "bytes4[]"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "getStakes",
            "outputs": [
                {
                    "internalType": "uint256[]",
                    "name": "dates",
                    "type": "uint256[]"
                },
                {
                    "internalType": "uint96[]",
                    "name": "stakes",
                    "type": "uint96[]"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "isOwner",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "kickoffTS",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "newStakingContract",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "nonces",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numDelegateStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numTotalStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numUserStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "numVestingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "paused",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "pausers",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_sender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_token",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "_data",
                    "type": "bytes"
                }
            ],
            "name": "receiveApproval",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "uint96",
                    "name": "amount",
                    "type": "uint96"
                },
                {
                    "internalType": "uint256",
                    "name": "until",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "stakeFor",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "delegatee",
                    "type": "address"
                }
            ],
            "name": "stake",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "cliff",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "duration",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "intervalLength",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "stakeFor",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "delegatee",
                    "type": "address"
                }
            ],
            "name": "stakeBySchedule",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                },
                {
                    "internalType": "uint96",
                    "name": "amount",
                    "type": "uint96"
                },
                {
                    "internalType": "uint256",
                    "name": "until",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "stakeFor",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "delegatee",
                    "type": "address"
                }
            ],
            "name": "stakeWithApproval",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "cliff",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "duration",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "intervalLength",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "stakeFor",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "delegatee",
                    "type": "address"
                }
            ],
            "name": "stakesBySchedule",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "timestamp",
                    "type": "uint256"
                }
            ],
            "name": "timestampToLockDate",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "totalStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "userStakingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "",
                    "type": "uint32"
                }
            ],
            "name": "vestingCheckpoints",
            "outputs": [
                {
                    "internalType": "uint32",
                    "name": "fromBlock",
                    "type": "uint32"
                },
                {
                    "internalType": "uint96",
                    "name": "stake",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "name": "vestingCodeHashes",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "vestingRegistryLogic",
            "outputs": [
                {
                    "internalType": "contract IVestingRegistry",
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "vestingWhitelist",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "weightScaling",
            "outputs": [
                {
                    "internalType": "uint96",
                    "name": "",
                    "type": "uint96"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "transactionHash": "0xe8969df05d844c36fdfffd57125425d7c8b469115c0746aea8855df7e642cbe0",
    "receipt": {
        "to": null,
        "from": "0x8C9143221F2b72Fcef391893c3a02Cf0fE84f50b",
        "contractAddress": "0xaAbdFEFC6Be0a9e876FB16fe5f3f05B3580B9377",
        "transactionIndex": 0,
        "gasUsed": "3984187",
        "logsBloom": "0x
        "blockHash": "0xcf89f5545ecc904c02fbc91161c1bcdbd537266b0c16ef12efd57e769cea3b83",
        "transactionHash": "0xe8969df05d844c36fdfffd57125425d7c8b469115c0746aea8855df7e642cbe0",
        "logs": [
            {
                "transactionIndex": 0,
                "blockNumber": 3556938,
                "transactionHash": "0xe8969df05d844c36fdfffd57125425d7c8b469115c0746aea8855df7e642cbe0",
                "address": "0xaAbdFEFC6Be0a9e876FB16fe5f3f05B3580B9377",
                "topics": [
                    "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x0000000000000000000000008c9143221f2b72fcef391893c3a02cf0fe84f50b"
                ],
                "data": "0x",
                "logIndex": 0,
                "blockHash": "0xcf89f5545ecc904c02fbc91161c1bcdbd537266b0c16ef12efd57e769cea3b83"
            }
        ],
        "blockNumber": 3556938,
        "cumulativeGasUsed": "3984187",
        "status": 1,
        "byzantium": true
    },
    "args": [],
    "numDeployments": 1,
    "solcInputHash": "015b019a6db9133c2258981a8efcf2d8",
    "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ContractCodeHashAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ContractCodeHashRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateStakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"ExtendedStakingDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"PauserAddedOrRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"setFrozen\",\"type\":\"bool\"}],\"name\":\"StakingFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"setPaused\",\"type\":\"bool\"}],\"name\":\"StakingPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isGovernance\",\"type\":\"bool\"}],\"name\":\"StakingWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"TeamVestingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedDate\",\"type\":\"uint256\"}],\"name\":\"TeamVestingPartiallyCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedTS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"name\":\"VestingStakeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"VestingTokensWithdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VOTING_WEIGHT\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOVToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEIGHT_FACTOR\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"delegateStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"previousLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"}],\"name\":\"extendStakingDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeSharing\",\"outputs\":[{\"internalType\":\"contract IFeeSharingCollector\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedTS\",\"type\":\"uint256\"}],\"name\":\"getCurrentStakedUntil\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFunctionsList\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"\",\"type\":\"bytes4[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStakes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"dates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint96[]\",\"name\":\"stakes\",\"type\":\"uint96[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kickoffTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newStakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numDelegateStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numTotalStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numUserStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numVestingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeFor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intervalLength\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeFor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"stakeBySchedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeFor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"stakeWithApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intervalLength\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeFor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"stakesBySchedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"timestampToLockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"totalStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"userStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"vestingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vestingCodeHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingRegistryLogic\",\"outputs\":[{\"internalType\":\"contract IVestingRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weightScaling\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"balanceOf(address)\":{\"details\":\"Iterate checkpoints adding up stakes.\",\"params\":{\"account\":\"The address of the account to get the balance of.\"},\"return\":\"The number of tokens held.\"},\"extendStakingDuration(uint256,uint256)\":{\"params\":{\"previousLock\":\"The old unlocking timestamp.\",\"until\":\"The new unlocking timestamp in seconds.\"}},\"getCurrentStakedUntil(uint256)\":{\"params\":{\"lockedTS\":\"The timestamp to get the staked tokens for.\"}},\"getStakes(address)\":{\"params\":{\"account\":\"The address to get stakes.\"},\"return\":\"The arrays of dates and stakes.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveApproval(address,uint256,address,bytes)\":{\"params\":{\"_data\":\"The data will be used for low level call.\"}},\"stake(uint96,uint256,address,address)\":{\"params\":{\"amount\":\"The number of tokens to stake.\",\"delegatee\":\"The address of the delegatee or 0x0 if there is none.\",\"stakeFor\":\"The address to stake the tokens for or 0x0 if staking for oneself.\",\"until\":\"Timestamp indicating the date until which to stake.\"}},\"stakeBySchedule(uint256,uint256,uint256,uint256,address,address)\":{\"params\":{\"amount\":\"The amount of tokens to stake.\",\"cliff\":\"The time interval to the first withdraw.\",\"delegatee\":\"The address of the delegatee or 0x0 if there is none.\",\"duration\":\"The staking duration.\",\"intervalLength\":\"The length of each staking interval when cliff passed.\",\"stakeFor\":\"The address to stake the tokens for or 0x0 if staking for oneself.\"}},\"stakeWithApproval(address,uint96,uint256,address,address)\":{\"details\":\"This function will be invoked from receiveApprovalSOV.approveAndCall -> this.receiveApproval -> this.stakeWithApproval\",\"params\":{\"amount\":\"The number of tokens to stake.\",\"delegatee\":\"The address of the delegatee or 0x0 if there is none.\",\"sender\":\"The sender of SOV.approveAndCall\",\"stakeFor\":\"The address to stake the tokens for or 0x0 if staking for oneself.\",\"until\":\"Timestamp indicating the date until which to stake.\"}},\"stakesBySchedule(uint256,uint256,uint256,uint256,address,address)\":{\"details\":\"DO NOT USE this misspelled function. Use stakeBySchedule function instead. This function cannot be deprecated while we have non-upgradeable vesting contracts.\"},\"timestampToLockDate(uint256)\":{\"params\":{\"timestamp\":\"The unlocking timestamp.\"},\"return\":\"The actual unlocking date (might be up to 2 weeks shorter than intended).\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Staking contract staking functionality module\"},\"userdoc\":{\"methods\":{\"balanceOf(address)\":{\"notice\":\"Get the number of staked tokens held by the user account.\"},\"extendStakingDuration(uint256,uint256)\":{\"notice\":\"Extend the staking duration until the specified date.\"},\"getCurrentStakedUntil(uint256)\":{\"notice\":\"Get the current number of tokens staked for a day.\"},\"getStakes(address)\":{\"notice\":\"Get list of stakes for a user account.\"},\"receiveApproval(address,uint256,address,bytes)\":{\"notice\":\"Receives approval from SOV token.\"},\"stake(uint96,uint256,address,address)\":{\"notice\":\"Stake the given amount for the given duration of time.\"},\"stakeBySchedule(uint256,uint256,uint256,uint256,address,address)\":{\"notice\":\"Stake tokens according to the vesting schedule.\"},\"stakeWithApproval(address,uint96,uint256,address,address)\":{\"notice\":\"Stake the given amount for the given duration of time.\"},\"timestampToLockDate(uint256)\":{\"notice\":\"Unstaking is possible every 2 weeks only. This means, to calculate the key value for the staking checkpoints, we need to map the intended timestamp to the closest available date.\"}},\"notice\":\"Implements staking functionality*\"}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Staking/modules/StakingStakeModule.sol\":\"StakingStakeModule\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/governance/ApprovalReceiver.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"./ErrorDecoder.sol\\\";\\nimport \\\"../token/IApproveAndCall.sol\\\";\\n\\n/**\\n * @title Base contract for receiving approval from SOV token.\\n */\\ncontract ApprovalReceiver is ErrorDecoder, IApproveAndCall {\\n    modifier onlyThisContract() {\\n        // Accepts calls only from receiveApproval function.\\n        require(msg.sender == address(this), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _data The data will be used for low level call.\\n     */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external {\\n        // Accepts calls only from SOV token.\\n        require(msg.sender == _getToken(), \\\"unauthorized\\\");\\n        require(msg.sender == _token, \\\"unauthorized\\\");\\n\\n        // Only allowed methods.\\n        bool isAllowed = false;\\n        bytes4[] memory selectors = _getSelectors();\\n        bytes4 sig = _getSig(_data);\\n        for (uint256 i = 0; i < selectors.length; i++) {\\n            if (sig == selectors[i]) {\\n                isAllowed = true;\\n                break;\\n            }\\n        }\\n        require(isAllowed, \\\"method is not allowed\\\");\\n\\n        // Check sender and amount.\\n        address sender;\\n        uint256 amount;\\n        (, sender, amount) = abi.decode(\\n            abi.encodePacked(bytes28(0), _data),\\n            (bytes32, address, uint256)\\n        );\\n        require(sender == _sender, \\\"sender mismatch\\\");\\n        require(amount == _amount, \\\"amount mismatch\\\");\\n\\n        _call(_data);\\n    }\\n\\n    /**\\n     * @notice Returns token address, only this address can be a sender for receiveApproval.\\n     * @dev Should be overridden in child contracts, otherwise error will be thrown.\\n     * @return By default, 0x. When overriden, the token address making the call.\\n     */\\n    function _getToken() internal view returns (address) {\\n        return address(0);\\n    }\\n\\n    /**\\n     * @notice Returns list of function selectors allowed to be invoked.\\n     * @dev Should be overridden in child contracts, otherwise error will be thrown.\\n     * @return By default, empty array. When overriden, allowed selectors.\\n     */\\n    function _getSelectors() internal pure returns (bytes4[] memory) {\\n        return new bytes4[](0);\\n    }\\n\\n    /**\\n     * @notice Makes call and reverts w/ enhanced error message.\\n     * @param _data Error message as bytes.\\n     */\\n    function _call(bytes memory _data) internal {\\n        (bool success, bytes memory returnData) = address(this).call(_data);\\n        if (!success) {\\n            if (returnData.length <= ERROR_MESSAGE_SHIFT) {\\n                revert(\\\"receiveApproval: Transaction execution reverted.\\\");\\n            } else {\\n                revert(_addErrorMessage(\\\"receiveApproval: \\\", string(returnData)));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Extracts the called function selector, a hash of the signature.\\n     * @dev The first four bytes of the call data for a function call specifies\\n     * the function to be called. It is the first (left, high-order in big-endian)\\n     * four bytes of the Keccak-256 (SHA-3) hash of the signature of the function.\\n     * Solidity doesn't yet support a casting of byte[4] to bytes4.\\n     * Example:\\n     *  msg.data:\\n     *    0xcdcd77c000000000000000000000000000000000000000000000000000000000000\\n     *    000450000000000000000000000000000000000000000000000000000000000000001\\n     *  selector (or method ID): 0xcdcd77c0\\n     *  signature: baz(uint32,bool)\\n     * @param _data The msg.data from the low level call.\\n     * @return sig First 4 bytes of msg.data i.e. the selector, hash of the signature.\\n     */\\n    function _getSig(bytes memory _data) internal pure returns (bytes4 sig) {\\n        assembly {\\n            sig := mload(add(_data, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfec344456774fa83b0885dd71825ccb6780be8db63c394f3ca09107977c65429\"},\"contracts/governance/ErrorDecoder.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Base contract to properly handle returned data on failed calls\\n * @dev On EVM if the return data length of a call is less than 68,\\n * then the transaction fails silently without a revert message!\\n *\\n * As described in the Solidity documentation\\n * https://solidity.readthedocs.io/en/v0.5.17/control-structures.html#revert\\n * the revert reason is an ABI-encoded string consisting of:\\n * 0x08c379a0 // Function selector (method id) for \\\"Error(string)\\\" signature\\n * 0x0000000000000000000000000000000000000000000000000000000000000020 // Data offset\\n * 0x000000000000000000000000000000000000000000000000000000000000001a // String length\\n * 0x4e6f7420656e6f7567682045746865722070726f76696465642e000000000000 // String data\\n *\\n * Another example, debug data from test:\\n *   0x08c379a0\\n *   0000000000000000000000000000000000000000000000000000000000000020\\n *   0000000000000000000000000000000000000000000000000000000000000034\\n *   54696d656c6f636b3a3a73657444656c61793a2044656c6179206d7573742065\\n *   7863656564206d696e696d756d2064656c61792e000000000000000000000000\\n *\\n * Parsed into:\\n *   Data offset: 20\\n *   Length: 34\\n *   Error message:\\n *     54696d656c6f636b3a3a73657444656c61793a2044656c6179206d7573742065\\n *     7863656564206d696e696d756d2064656c61792e000000000000000000000000\\n */\\ncontract ErrorDecoder {\\n    uint256 constant ERROR_MESSAGE_SHIFT = 68; // EVM silent revert error string length\\n\\n    /**\\n     * @notice Concats two error strings taking into account ERROR_MESSAGE_SHIFT.\\n     * @param str1 First string, usually a hardcoded context written by dev.\\n     * @param str2 Second string, usually the error message from the reverted call.\\n     * @return The concatenated error string\\n     */\\n    function _addErrorMessage(string memory str1, string memory str2)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory bytesStr1 = bytes(str1);\\n        bytes memory bytesStr2 = bytes(str2);\\n        string memory str12 =\\n            new string(bytesStr1.length + bytesStr2.length - ERROR_MESSAGE_SHIFT);\\n        bytes memory bytesStr12 = bytes(str12);\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < bytesStr1.length; i++) {\\n            bytesStr12[j++] = bytesStr1[i];\\n        }\\n        for (uint256 i = ERROR_MESSAGE_SHIFT; i < bytesStr2.length; i++) {\\n            bytesStr12[j++] = bytesStr2[i];\\n        }\\n        return string(bytesStr12);\\n    }\\n}\\n\",\"keccak256\":\"0xa0fa7986924aab574ca9e7c265f8c7bf00671ba1d86dbad143df7c14455f1c6a\"},\"contracts/governance/IFeeSharingCollector.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for contract governance/FeeSharingCollector/FeeSharingCollector.sol\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * */\\ninterface IFeeSharingCollector {\\n    function withdrawFees(address[] calldata _token) external;\\n\\n    function transferTokens(address _token, uint96 _amount) external;\\n\\n    function withdraw(\\n        address _loanPoolToken,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7794cb434d9395ea983dcf8ded48db5b68897a338429320f60172c4caa47fb40\"},\"contracts/governance/Staking/SafeMath96.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title SafeMath96 contract.\\n * @notice Improved Solidity's arithmetic operations with added overflow checks.\\n * @dev SafeMath96 uses uint96, unsigned integers of 96 bits length, so every\\n * integer from 0 to 2^96-1 can be operated.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * SafeMath restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this contract instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n * */\\ncontract SafeMath96 {\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe64(uint256 n, string memory errorMessage) internal pure returns (uint64) {\\n        require(n < 2**64, errorMessage);\\n        return uint64(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `+` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe addition a+b.\\n     * */\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Substracts two unsigned integers, reverting on underflow.\\n     * @dev Counterpart to Solidity's `-` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on underflow.\\n     * @return The safe substraction a-b.\\n     * */\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `*` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe product a*b.\\n     * */\\n    function mul96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint96 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Divides two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `/` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe division a/b.\\n     * */\\n    function div96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint96 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xc37b24a41212f26435849813104568112c9e151a60018f53d76c7d06e74782ce\"},\"contracts/governance/Staking/modules/StakingStakeModule.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../proxy/modules/interfaces/IFunctionsList.sol\\\";\\nimport \\\"./shared/CheckpointsShared.sol\\\";\\nimport \\\"../../ApprovalReceiver.sol\\\";\\nimport \\\"./shared/StakingShared.sol\\\";\\n\\n/**\\n * @title Staking contract staking functionality module\\n * @notice Implements staking functionality\\n **/\\ncontract StakingStakeModule is IFunctionsList, StakingShared, CheckpointsShared, ApprovalReceiver {\\n    using SafeMath for uint256;\\n\\n    /// @notice An event emitted when tokens get staked.\\n    event TokensStaked(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 lockedUntil,\\n        uint256 totalStaked\\n    );\\n\\n    /// @notice An event emitted when a staking period gets extended.\\n    event ExtendedStakingDuration(\\n        address indexed staker,\\n        uint256 previousDate,\\n        uint256 newDate,\\n        uint256 amountStaked\\n    );\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stake(\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external whenNotPaused whenNotFrozen {\\n        _stake(msg.sender, amount, until, stakeFor, delegatee, false);\\n    }\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @dev This function will be invoked from receiveApproval\\n     * @dev SOV.approveAndCall -> this.receiveApproval -> this.stakeWithApproval\\n     * @param sender The sender of SOV.approveAndCall\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n\\n    function stakeWithApproval(\\n        address sender,\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external onlyThisContract whenNotPaused whenNotFrozen {\\n        _stake(sender, amount, until, stakeFor, delegatee, false);\\n    }\\n\\n    /**\\n     * @notice Send sender's tokens to this contract and update its staked balance.\\n     * @param sender The sender of the tokens.\\n     * @param amount The number of tokens to send.\\n     * @param until The date until which the tokens will be staked.\\n     * @param stakeFor The beneficiary whose stake will be increased.\\n     * @param delegatee The address of the delegatee or stakeFor if default 0x0.\\n     * @param timeAdjusted Whether fixing date to stacking periods or not.\\n     * */\\n    function _stake(\\n        address sender,\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee,\\n        bool timeAdjusted\\n    ) internal {\\n        _stakeOptionalTokenTransfer(\\n            sender,\\n            amount,\\n            until,\\n            stakeFor,\\n            delegatee,\\n            timeAdjusted,\\n            true // transfer SOV\\n        );\\n    }\\n\\n    /**\\n     * @notice Send sender's tokens to this contract and update its staked balance.\\n     * @param sender The sender of the tokens.\\n     * @param amount The number of tokens to send.\\n     * @param until The date until which the tokens will be staked.\\n     * @param stakeFor The beneficiary whose stake will be increased.\\n     * @param delegatee The address of the delegatee or stakeFor if default 0x0.\\n     * @param timeAdjusted Whether fixing date to stacking periods or not.\\n     * @param transferToken Should transfer SOV - false for multiple iterations like in stakeBySchedule\\n     * */\\n    function _stakeOptionalTokenTransfer(\\n        address sender,\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee,\\n        bool timeAdjusted,\\n        bool transferToken\\n    ) internal {\\n        require(amount > 0, \\\"amount needs to be bigger than 0\\\"); // S01\\n\\n        if (!timeAdjusted) {\\n            until = _timestampToLockDate(until);\\n        }\\n        require(\\n            until > block.timestamp,\\n            \\\"Staking::_timestampToLockDate: staking period too short\\\"\\n        ); // S02\\n\\n        /// @dev Stake for the sender if not specified otherwise.\\n        if (stakeFor == address(0)) {\\n            stakeFor = sender;\\n        }\\n        // must wait a block before staking again for that same deadline\\n        _notSameBlockAsStakingCheckpoint(until, stakeFor);\\n\\n        /// @dev Delegate for stakeFor if not specified otherwise.\\n        if (delegatee == address(0)) {\\n            delegatee = stakeFor;\\n        }\\n\\n        /// @dev Do not stake longer than the max duration.\\n        if (!timeAdjusted) {\\n            uint256 latest = _timestampToLockDate(block.timestamp + MAX_DURATION);\\n            if (until > latest) until = latest;\\n        }\\n\\n        uint96 previousBalance = _currentBalance(stakeFor, until);\\n\\n        /// @dev Increase stake.\\n        _increaseStake(sender, amount, stakeFor, until, transferToken);\\n\\n        // @dev Previous version wasn't working properly for the following case:\\n        //\\t\\tdelegate checkpoint wasn't updating for the second and next stakes for the same date\\n        //\\t\\tif  first stake was withdrawn completely and stake was delegated to the staker\\n        //\\t\\t(no delegation to another address).\\n        address previousDelegatee = delegates[stakeFor][until];\\n        if (previousDelegatee != delegatee) {\\n            // @dev only the user that stakes for himself is allowed to delegate VP to another address\\n            // which works with vesting stakes and prevents vulnerability of delegating VP to an arbitrary address from\\n            // any address\\n            if (delegatee != stakeFor) {\\n                require(\\n                    stakeFor == sender,\\n                    \\\"Only stakeFor account is allowed to change delegatee\\\"\\n                );\\n            }\\n\\n            /// @dev Update delegatee.\\n            delegates[stakeFor][until] = delegatee;\\n\\n            /// @dev Decrease stake on previous balance for previous delegatee.\\n            _decreaseDelegateStake(previousDelegatee, until, previousBalance);\\n\\n            /// @dev Add previousBalance to amount.\\n            amount = add96(previousBalance, amount, \\\"S03\\\");\\n        }\\n\\n        /// @dev Increase stake.\\n        _increaseDelegateStake(delegatee, until, amount);\\n        emit DelegateChanged(stakeFor, until, previousDelegatee, delegatee);\\n    }\\n\\n    /**\\n     * @notice Extend the staking duration until the specified date.\\n     * @param previousLock The old unlocking timestamp.\\n     * @param until The new unlocking timestamp in seconds.\\n     * */\\n    function extendStakingDuration(uint256 previousLock, uint256 until)\\n        external\\n        whenNotPaused\\n        whenNotFrozen\\n    {\\n        previousLock = _timestampToLockDate(previousLock);\\n        until = _timestampToLockDate(until);\\n\\n        _notSameBlockAsStakingCheckpoint(previousLock, msg.sender);\\n\\n        /// @dev Do not exceed the max duration, no overflow possible.\\n        uint256 latest = _timestampToLockDate(block.timestamp + MAX_DURATION);\\n        if (until > latest) until = latest;\\n\\n        require(previousLock < until, \\\"must increase staking duration\\\"); // S04\\n\\n        /// @dev Update checkpoints.\\n        /// @dev TODO James: Can reading stake at block.number -1 cause trouble with multiple tx in a block?\\n        uint96 amount = _getPriorUserStakeByDate(msg.sender, previousLock, block.number - 1);\\n        require(amount > 0, \\\"no stakes till the prev lock date\\\"); // S05\\n        _decreaseUserStake(msg.sender, previousLock, amount);\\n        _increaseUserStake(msg.sender, until, amount);\\n\\n        if (_isVestingContract(msg.sender)) {\\n            _decreaseVestingStake(previousLock, amount);\\n            _increaseVestingStake(until, amount);\\n        }\\n\\n        _decreaseDailyStake(previousLock, amount);\\n        _increaseDailyStake(until, amount);\\n\\n        /// @dev Delegate might change: if there is already a delegate set for the until date, it will remain the delegate for this position\\n        address delegateFrom = delegates[msg.sender][previousLock];\\n        delegates[msg.sender][previousLock] = address(0); //the previousLock delegates nullifying before reading that form `until` guards in case delegateTo == until\\n        address delegateTo = delegates[msg.sender][until];\\n        if (delegateTo == address(0)) {\\n            delegateTo = delegateFrom;\\n            delegates[msg.sender][until] = delegateFrom;\\n        }\\n        _decreaseDelegateStake(delegateFrom, previousLock, amount);\\n        _increaseDelegateStake(delegateTo, until, amount);\\n\\n        emit ExtendedStakingDuration(msg.sender, previousLock, until, amount);\\n    }\\n\\n    /**\\n     * @notice Send sender's tokens to this contract and update its staked balance.\\n     * @param sender The sender of the tokens.\\n     * @param amount The number of tokens to send.\\n     * @param stakeFor The beneficiary whose stake will be increased.\\n     * @param until The date until which the tokens will be staked.\\n     * @param transferToken if false - token transfer should be handled separately\\n     * */\\n    function _increaseStake(\\n        address sender,\\n        uint96 amount,\\n        address stakeFor,\\n        uint256 until,\\n        bool transferToken\\n    ) internal {\\n        /// @dev Retrieve the SOV tokens.\\n        if (transferToken)\\n            require(\\n                SOVToken.transferFrom(sender, address(this), amount),\\n                \\\"Should transfer tokens successfully\\\"\\n            ); // IS10\\n\\n        /// @dev Increase staked balance.\\n        uint96 balance = _currentBalance(stakeFor, until);\\n        balance = add96(balance, amount, \\\"IS20\\\"); // increaseStake: overflow\\n\\n        /// @dev Update checkpoints.\\n        _increaseDailyStake(until, amount);\\n        _increaseUserStake(stakeFor, until, amount);\\n\\n        if (_isVestingContract(stakeFor)) _increaseVestingStake(until, amount);\\n\\n        emit TokensStaked(stakeFor, amount, until, balance);\\n    }\\n\\n    /**\\n     * @dev DO NOT USE this misspelled function. Use stakeBySchedule function instead.\\n     * This function cannot be deprecated while we have non-upgradeable vesting contracts.\\n     * */\\n    function stakesBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external whenNotPaused whenNotFrozen {\\n        _stakeBySchedule(amount, cliff, duration, intervalLength, stakeFor, delegatee);\\n    }\\n\\n    /**\\n     * @notice Stake tokens according to the vesting schedule.\\n     * @param amount The amount of tokens to stake.\\n     * @param cliff The time interval to the first withdraw.\\n     * @param duration The staking duration.\\n     * @param intervalLength The length of each staking interval when cliff passed.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external whenNotPaused whenNotFrozen {\\n        _stakeBySchedule(amount, cliff, duration, intervalLength, stakeFor, delegatee);\\n    }\\n\\n    /**\\n     * @notice Stake tokens according to the vesting schedule.\\n     * @param amount The amount of tokens to stake.\\n     * @param cliff The time interval to the first withdraw.\\n     * @param duration The staking duration.\\n     * @param intervalLength The length of each staking interval when cliff passed.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function _stakeBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) internal {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(duration <= MAX_DURATION, \\\"Invalid duration\\\");\\n        require(intervalLength > 0, \\\"Invalid interval length\\\");\\n        require(intervalLength % TWO_WEEKS == 0, \\\"Invalid interval length\\\");\\n        if (delegatee != stakeFor && delegatee != address(0)) {\\n            require(\\n                stakeFor == msg.sender,\\n                \\\"Only stakeFor account is allowed to change delegatee\\\"\\n            );\\n        }\\n        /**\\n         * @dev Stake them until lock dates according to the vesting schedule.\\n         * Note: because staking is only possible in periods of 2 weeks,\\n         * the total duration might end up a bit shorter than specified\\n         * depending on the date of staking.\\n         * */\\n        uint256 start = _timestampToLockDate(block.timestamp + cliff);\\n        uint256 end = _timestampToLockDate(block.timestamp + duration);\\n        uint256 numIntervals = (end - start) / intervalLength + 1;\\n        uint256 stakedPerInterval = amount / numIntervals;\\n\\n        /// @dev transferring total SOV amount before staking\\n        require(\\n            SOVToken.transferFrom(msg.sender, address(this), amount),\\n            \\\"Should transfer tokens successfully\\\"\\n        ); // SS10\\n        /// @dev stakedPerInterval might lose some dust on rounding. Add it to the first staking date.\\n        if (numIntervals >= 1) {\\n            _stakeOptionalTokenTransfer(\\n                msg.sender,\\n                uint96(amount - stakedPerInterval * (numIntervals - 1)),\\n                start,\\n                stakeFor,\\n                delegatee,\\n                true,\\n                false\\n            );\\n        }\\n        /// @dev Stake the rest in 4 week intervals.\\n        for (uint256 i = start + intervalLength; i <= end; i += intervalLength) {\\n            /// @dev Stakes for itself, delegates to the owner.\\n            _notSameBlockAsStakingCheckpoint(i, stakeFor); // must wait a block before staking again for that same deadline\\n            _stakeOptionalTokenTransfer(\\n                msg.sender,\\n                uint96(stakedPerInterval),\\n                i,\\n                stakeFor,\\n                delegatee,\\n                true,\\n                false\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the number of staked tokens held by the user account.\\n     * @dev Iterate checkpoints adding up stakes.\\n     * @param account The address of the account to get the balance of.\\n     * @return The number of tokens held.\\n     * */\\n    function balanceOf(address account) external view returns (uint96 balance) {\\n        for (uint256 i = kickoffTS; i <= block.timestamp + MAX_DURATION; i += TWO_WEEKS) {\\n            balance = add96(balance, _currentBalance(account, i), \\\"S12\\\"); // Staking::balanceOf: overflow\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the current number of tokens staked for a day.\\n     * @param lockedTS The timestamp to get the staked tokens for.\\n     * */\\n    function getCurrentStakedUntil(uint256 lockedTS) external view returns (uint96) {\\n        uint32 nCheckpoints = numTotalStakingCheckpoints[lockedTS];\\n        return nCheckpoints > 0 ? totalStakingCheckpoints[lockedTS][nCheckpoints - 1].stake : 0;\\n    }\\n\\n    /**\\n     * @notice Get list of stakes for a user account.\\n     * @param account The address to get stakes.\\n     * @return The arrays of dates and stakes.\\n     * */\\n    function getStakes(address account)\\n        external\\n        view\\n        returns (uint256[] memory dates, uint96[] memory stakes)\\n    {\\n        uint256 latest = _timestampToLockDate(block.timestamp + MAX_DURATION);\\n\\n        /// @dev Calculate stakes.\\n        uint256 count = 0;\\n        /// @dev We need to iterate from first possible stake date after deployment to the latest from current time.\\n        for (uint256 i = kickoffTS + TWO_WEEKS; i <= latest; i += TWO_WEEKS) {\\n            if (_currentBalance(account, i) > 0) {\\n                count++;\\n            }\\n        }\\n        dates = new uint256[](count);\\n        stakes = new uint96[](count);\\n\\n        /// @dev We need to iterate from first possible stake date after deployment to the latest from current time.\\n        uint256 j = 0;\\n        for (uint256 i = kickoffTS + TWO_WEEKS; i <= latest; i += TWO_WEEKS) {\\n            uint96 balance = _currentBalance(account, i);\\n            if (balance > 0) {\\n                dates[j] = i;\\n                stakes[j] = balance;\\n                j++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Overrides default ApprovalReceiver._getToken function to\\n     * register SOV token on this contract.\\n     * @return The address of SOV token.\\n     * */\\n    function _getToken() internal view returns (address) {\\n        return address(SOVToken);\\n    }\\n\\n    /**\\n     * @notice Overrides default ApprovalReceiver._getSelectors function to\\n     * register stakeWithApproval selector on this contract.\\n     * @return The array of registered selectors on this contract.\\n     */\\n    function _getSelectors() internal pure returns (bytes4[] memory) {\\n        bytes4[] memory selectors = new bytes4[](1);\\n        selectors[0] = this.stakeWithApproval.selector;\\n        return selectors;\\n    }\\n\\n    /**\\n     * @notice Unstaking is possible every 2 weeks only. This means, to\\n     * calculate the key value for the staking checkpoints, we need to\\n     * map the intended timestamp to the closest available date.\\n     * @param timestamp The unlocking timestamp.\\n     * @return The actual unlocking date (might be up to 2 weeks shorter than intended).\\n     * */\\n    function timestampToLockDate(uint256 timestamp) external view returns (uint256) {\\n        return _timestampToLockDate(timestamp);\\n    }\\n\\n    function getFunctionsList() external pure returns (bytes4[] memory) {\\n        bytes4[] memory functionsList = new bytes4[](10);\\n        functionsList[0] = this.stake.selector;\\n        functionsList[1] = this.stakeWithApproval.selector;\\n        functionsList[2] = this.extendStakingDuration.selector;\\n        functionsList[3] = this.stakesBySchedule.selector;\\n        functionsList[4] = this.stakeBySchedule.selector;\\n        functionsList[5] = this.balanceOf.selector;\\n        functionsList[6] = this.getCurrentStakedUntil.selector;\\n        functionsList[7] = this.getStakes.selector;\\n        functionsList[8] = this.timestampToLockDate.selector;\\n        functionsList[9] = this.receiveApproval.selector;\\n        return functionsList;\\n    }\\n}\\n\",\"keccak256\":\"0xdf2c21962cb848c6f8b0a308f455afc04c716c17e1b062329937436615fc181d\"},\"contracts/governance/Staking/modules/shared/CheckpointsShared.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./StakingStorageShared.sol\\\";\\nimport \\\"../../SafeMath96.sol\\\";\\n\\n/**\\n * @title Checkpoints contract.\\n * @notice Increases and decreases storage values for users, delegatees and\\n * total daily stake.\\n * */\\ncontract CheckpointsShared is StakingStorageShared, SafeMath96 {\\n    /// @notice An event emitted when an account changes its delegate.\\n    event DelegateChanged(\\n        address indexed delegator,\\n        uint256 lockedUntil,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event emitted when a delegate account's stake balance changes.\\n    event DelegateStakeChanged(\\n        address indexed delegate,\\n        uint256 lockedUntil,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /// @notice An event emitted when tokens get staked.\\n    event TokensStaked(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 lockedUntil,\\n        uint256 totalStaked\\n    );\\n\\n    /// @notice An event emitted when staked tokens get withdrawn.\\n    event StakingWithdrawn(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 until,\\n        address indexed receiver,\\n        bool isGovernance\\n    );\\n\\n    /// @notice An event emitted when vesting tokens get withdrawn.\\n    event VestingTokensWithdrawn(address vesting, address receiver);\\n\\n    /// @notice An event emitted when the owner unlocks all tokens.\\n    event TokensUnlocked(uint256 amount);\\n\\n    /// @notice An event emitted when a staking period gets extended.\\n    event ExtendedStakingDuration(\\n        address indexed staker,\\n        uint256 previousDate,\\n        uint256 newDate,\\n        uint256 amountStaked\\n    );\\n\\n    event AdminAdded(address admin);\\n\\n    event AdminRemoved(address admin);\\n\\n    /// @param pauser address to grant power to pause the contract\\n    /// @param added true - added, false - removed\\n    event PauserAddedOrRemoved(address indexed pauser, bool indexed added);\\n\\n    /// @notice An event emitted when a staking is paused or unpaused\\n    /// @param setPaused true - pause, false - unpause\\n    event StakingPaused(bool indexed setPaused);\\n\\n    /// @notice An event emitted when a staking is frozen or unfrozen\\n    /// @param setFrozen true - freeze, false - unfreeze\\n    event StakingFrozen(bool indexed setFrozen);\\n\\n    event ContractCodeHashAdded(bytes32 hash);\\n\\n    event ContractCodeHashRemoved(bytes32 hash);\\n\\n    event VestingStakeSet(uint256 lockedTS, uint96 value);\\n\\n    event TeamVestingCancelled(address indexed caller, address receiver);\\n\\n    event TeamVestingPartiallyCancelled(\\n        address indexed caller,\\n        address receiver,\\n        uint256 lastProcessedDate\\n    );\\n\\n    constructor() internal {\\n        // abstract\\n    }\\n\\n    /**\\n     * @notice Increases the user's vesting stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseVestingStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numVestingCheckpoints[lockedTS];\\n        uint96 vested = vestingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newVest = add96(vested, value, \\\"CP01\\\"); // vested overflow\\n        _writeVestingCheckpoint(lockedTS, nCheckpoints, newVest);\\n    }\\n\\n    /**\\n     * @notice Decreases the user's vesting stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseVestingStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numVestingCheckpoints[lockedTS];\\n        uint96 vested = vestingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newVest = sub96(vested, value, \\\"CP02\\\"); // vested underflow\\n        _writeVestingCheckpoint(lockedTS, nCheckpoints, newVest);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the user vested amount.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newVest The new vest balance.\\n     * */\\n    function _writeVestingCheckpoint(\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newVest\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP03\\\"); // block num > 32 bits\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            vestingCheckpoints[lockedTS][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            vestingCheckpoints[lockedTS][nCheckpoints - 1].stake = newVest;\\n        } else {\\n            vestingCheckpoints[lockedTS][nCheckpoints] = Checkpoint(blockNumber, newVest);\\n            numVestingCheckpoints[lockedTS] = nCheckpoints + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases the user's stake for a giving lock date and writes a checkpoint.\\n     * @param account The user address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseUserStake(\\n        address account,\\n        uint256 lockedTS,\\n        uint96 value\\n    ) internal {\\n        uint32 nCheckpoints = numUserStakingCheckpoints[account][lockedTS];\\n        uint96 staked = userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = add96(staked, value, \\\"CP04\\\"); // staked overflow\\n        _writeUserCheckpoint(account, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Decreases the user's stake for a giving lock date and writes a checkpoint.\\n     * @param account The user address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseUserStake(\\n        address account,\\n        uint256 lockedTS,\\n        uint96 value\\n    ) internal {\\n        uint32 nCheckpoints = numUserStakingCheckpoints[account][lockedTS];\\n        uint96 staked = userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = sub96(staked, value, \\\"CP05\\\"); // staked underflow\\n        _writeUserCheckpoint(account, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the user stake.\\n     * @param account The user address.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newStake The new staked balance.\\n     * */\\n    function _writeUserCheckpoint(\\n        address account,\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newStake\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP06\\\"); // block number > 32 bits\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].stake = newStake;\\n        } else {\\n            userStakingCheckpoints[account][lockedTS][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newStake\\n            );\\n            numUserStakingCheckpoints[account][lockedTS] = nCheckpoints + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases the delegatee's stake for a giving lock date and writes a checkpoint.\\n     * @param delegatee The delegatee address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseDelegateStake(\\n        address delegatee,\\n        uint256 lockedTS,\\n        uint96 value\\n    ) internal {\\n        uint32 nCheckpoints = numDelegateStakingCheckpoints[delegatee][lockedTS];\\n        uint96 staked = delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = add96(staked, value, \\\"CP07\\\"); // block number > 32 bits\\n        _writeDelegateCheckpoint(delegatee, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Decreases the delegatee's stake for a giving lock date and writes a checkpoint.\\n     * @param delegatee The delegatee address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseDelegateStake(\\n        address delegatee,\\n        uint256 lockedTS,\\n        uint96 value\\n    ) internal {\\n        uint32 nCheckpoints = numDelegateStakingCheckpoints[delegatee][lockedTS];\\n        uint96 staked = delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = 0;\\n        // @dev We need to check delegate checkpoint value here,\\n        //\\t\\tbecause we had an issue in `stake` function:\\n        //\\t\\tdelegate checkpoint wasn't updating for the second and next stakes for the same date\\n        //\\t\\tif first stake was withdrawn completely and stake was delegated to the staker\\n        //\\t\\t(no delegation to another address).\\n        // @dev It can be greater than 0, but inconsistent after 3 transactions\\n        if (staked > value) {\\n            newStake = sub96(staked, value, \\\"CP08\\\"); // staked underflow\\n        }\\n        _writeDelegateCheckpoint(delegatee, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the delegate stake.\\n     * @param delegatee The delegate address.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newStake The new staked balance.\\n     * */\\n    function _writeDelegateCheckpoint(\\n        address delegatee,\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newStake\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP09\\\"); // block numb > 32 bits\\n        uint96 oldStake = delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake;\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].fromBlock ==\\n            blockNumber\\n        ) {\\n            delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake = newStake;\\n        } else {\\n            delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newStake\\n            );\\n            numDelegateStakingCheckpoints[delegatee][lockedTS] = nCheckpoints + 1;\\n        }\\n        emit DelegateStakeChanged(delegatee, lockedTS, oldStake, newStake);\\n    }\\n\\n    /**\\n     * @notice Increases the total stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseDailyStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numTotalStakingCheckpoints[lockedTS];\\n        uint96 staked = totalStakingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = add96(staked, value, \\\"CP10\\\"); // staked overflow\\n        _writeStakingCheckpoint(lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Decreases the total stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseDailyStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numTotalStakingCheckpoints[lockedTS];\\n        uint96 staked = totalStakingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = sub96(staked, value, \\\"CP11\\\"); // staked underflow\\n        _writeStakingCheckpoint(lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the total stake.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newStake The new staked balance.\\n     * */\\n    function _writeStakingCheckpoint(\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newStake\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP12\\\"); // block num > 32 bits\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            totalStakingCheckpoints[lockedTS][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            totalStakingCheckpoints[lockedTS][nCheckpoints - 1].stake = newStake;\\n        } else {\\n            totalStakingCheckpoints[lockedTS][nCheckpoints] = Checkpoint(blockNumber, newStake);\\n            numTotalStakingCheckpoints[lockedTS] = nCheckpoints + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the current balance of an account locked until a certain date.\\n     * @param account The user address.\\n     * @param lockDate The lock date.\\n     * @return The stake amount.\\n     * */\\n    function _currentBalance(address account, uint256 lockDate) internal view returns (uint96) {\\n        uint32 _numUnserStakingCheckpoints = numUserStakingCheckpoints[account][lockDate] - 1;\\n        return userStakingCheckpoints[account][lockDate][_numUnserStakingCheckpoints].stake;\\n    }\\n}\\n\",\"keccak256\":\"0x0008c67cca18adda882118e4543045905e7e75d8536034ffcc97526065784036\"},\"contracts/governance/Staking/modules/shared/StakingShared.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./StakingStorageShared.sol\\\";\\nimport \\\"../../SafeMath96.sol\\\";\\nimport \\\"../../../../openzeppelin/SafeMath.sol\\\";\\nimport \\\"../../../../openzeppelin/Ownable.sol\\\";\\n\\n/**\\n * @title Staking modules shared functionality\\n */\\ncontract StakingShared is StakingStorageShared, SafeMath96 {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant FOUR_WEEKS = 4 weeks;\\n\\n    /**\\n     * @dev Throws if paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"paused\\\"); // SS03\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner or admin.\\n     */\\n    modifier onlyAuthorized() {\\n        require(isOwner() || admins[msg.sender], \\\"unauthorized\\\"); // SS01\\n        _;\\n    }\\n\\n    /**\\n\\t * @dev Throws if called by any account other than the owner or admin or pauser.\\n\\t \\n\\tmodifier onlyAuthorizedOrPauser() {\\n\\t\\trequire(isOwner() || admins[msg.sender] || pausers[msg.sender], \\\"unauthorized\\\"); // WS02\\n\\t\\t_;\\n\\t}\\n\\t*/\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner or pauser.\\n     */\\n    modifier onlyPauserOrOwner() {\\n        require(isOwner() || pausers[msg.sender], \\\"unauthorized\\\"); // SS02\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than pauser.\\n     * @notice Uncomment when needed\\n     */\\n    /*\\n\\tmodifier onlyPauser() {\\n\\t\\trequire(pausers[msg.sender], \\\"Not pauser\\\");\\n\\t\\t_;\\n\\t}\\n\\t*/\\n\\n    /**\\n     * @dev Throws if frozen.\\n     */\\n    modifier whenNotFrozen() {\\n        require(!frozen, \\\"paused\\\"); // SS04\\n        _;\\n    }\\n\\n    constructor() internal {\\n        // abstract\\n    }\\n\\n    function _notSameBlockAsStakingCheckpoint(uint256 lockDate, address stakeFor) internal view {\\n        uint32 nCheckpoints = numUserStakingCheckpoints[stakeFor][lockDate];\\n        bool notSameBlock =\\n            userStakingCheckpoints[stakeFor][lockDate][nCheckpoints - 1].fromBlock != block.number;\\n        require(notSameBlock, \\\"cannot be mined in the same block as last stake\\\"); // S20\\n    }\\n\\n    /**\\n     * @notice Unstaking is possible every 2 weeks only. This means, to\\n     * calculate the key value for the staking checkpoints, we need to\\n     * map the intended timestamp to the closest available date.\\n     * @param timestamp The unlocking timestamp.\\n     * @return The actual unlocking date (might be up to 2 weeks shorter than intended).\\n     * */\\n    function _timestampToLockDate(uint256 timestamp) internal view returns (uint256 lockDate) {\\n        // Optimize gas costs by reading kickoffTS from storage only once.\\n        uint256 start = kickoffTS;\\n        require(timestamp >= start, \\\"timestamp < contract creation\\\"); // WS23\\n        /**\\n         * @dev If staking timestamp does not match any of the unstaking dates\\n         * , set the lockDate to the closest one before the timestamp.\\n         * E.g. Passed timestamps lies 7 weeks after kickoff -> only stake for 6 weeks.\\n         * */\\n        uint256 periodFromKickoff = (timestamp - start) / TWO_WEEKS;\\n        lockDate = periodFromKickoff * TWO_WEEKS + start;\\n    }\\n\\n    /**\\n     * @notice Determine the current Block Number\\n     * @dev This is segregated from the _getPriorUserStakeByDate function to better test\\n     * advancing blocks functionality using Mock Contracts\\n     * */\\n    function _getCurrentBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account until a\\n     * \\t\\tcertain lock date as of a block number.\\n     * @dev All functions of Staking contract use this internal version,\\n     * \\t\\twe need to modify public function in order to workaround issue with Vesting.withdrawTokens:\\n     * return 1 instead of 0 if message sender is a contract.\\n     * @param account The address of the account to check.\\n     * @param date The lock date. Adjusted to the next valid lock date, if necessary.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function _getPriorUserStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) internal view returns (uint96) {\\n        require(blockNumber < _getCurrentBlockNumber(), \\\"not determined\\\"); // WS14\\n\\n        date = _adjustDateForOrigin(date);\\n        uint32 nCheckpoints = numUserStakingCheckpoints[account][date];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        /// @dev First check most recent balance.\\n        if (userStakingCheckpoints[account][date][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return userStakingCheckpoints[account][date][nCheckpoints - 1].stake;\\n        }\\n\\n        /// @dev Next check implicit zero balance.\\n        if (userStakingCheckpoints[account][date][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; /// @dev ceil, avoiding overflow.\\n            Checkpoint memory cp = userStakingCheckpoints[account][date][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.stake;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return userStakingCheckpoints[account][date][lower].stake;\\n    }\\n\\n    /**\\n     * @dev origin vesting contracts have different dates\\n     * we need to add 2 weeks to get end of period (by default, it's start)\\n     * @param date The staking date to compute the power for.\\n     * @return unlocking date.\\n     */\\n    function _adjustDateForOrigin(uint256 date) internal view returns (uint256) {\\n        uint256 adjustedDate = _timestampToLockDate(date);\\n        //origin vesting contracts have different dates\\n        //we need to add 2 weeks to get end of period (by default, it's start)\\n        if (adjustedDate != date) {\\n            date = adjustedDate + TWO_WEEKS;\\n        }\\n        return date;\\n    }\\n\\n    /**\\n     * @notice Compute the weight for a specific date.\\n     * @param date The unlocking date.\\n     * @param startDate We compute the weight for the tokens staked until 'date' on 'startDate'.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function _computeWeightByDate(uint256 date, uint256 startDate)\\n        internal\\n        pure\\n        returns (uint96 weight)\\n    {\\n        require(date >= startDate, \\\"date < startDate\\\"); // WS18\\n        uint256 remainingTime = (date - startDate);\\n        require(MAX_DURATION >= remainingTime, \\\"remaining time > max duration\\\"); // WS19\\n        /// @dev x = max days - remaining days\\n        uint96 x = uint96(MAX_DURATION - remainingTime) / (1 days);\\n        /// @dev w = (m^2 - x^2)/m^2 +1 (multiplied by the weight factor)\\n        weight = add96(\\n            WEIGHT_FACTOR,\\n            mul96(\\n                MAX_VOTING_WEIGHT * WEIGHT_FACTOR,\\n                sub96(\\n                    MAX_DURATION_POW_2,\\n                    x * x,\\n                    \\\"WS20\\\" /* weight underflow */\\n                ),\\n                \\\"WS21\\\" /* weight mul overflow */\\n            ) / MAX_DURATION_POW_2,\\n            \\\"WS22\\\" /* overflow on weight */\\n        );\\n    }\\n\\n    /**\\n     * @notice Return flag whether the given address is a registered vesting contract.\\n     * @param stakerAddress the address to check\\n     */\\n    function _isVestingContract(address stakerAddress) internal view returns (bool) {\\n        bool isVesting;\\n        bytes32 codeHash;\\n\\n        assembly {\\n            codeHash := extcodehash(stakerAddress)\\n        }\\n        if (address(vestingRegistryLogic) != address(0)) {\\n            isVesting = vestingRegistryLogic.isVestingAddress(stakerAddress);\\n        }\\n\\n        if (isVesting) return true;\\n        if (vestingCodeHashes[codeHash]) return true;\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x9604726ff96bc87aa63c050abe7e7c7221459f73942ec2127a4b732908704753\"},\"contracts/governance/Staking/modules/shared/StakingStorageShared.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../../../interfaces/IERC20.sol\\\";\\nimport \\\"../../../IFeeSharingCollector.sol\\\";\\nimport \\\"../../../Vesting/IVestingRegistry.sol\\\";\\n\\n/**\\n * @title StakingStorageShared contract is inherited by Staking modules.\\n * @notice Just the storage part of stacking contract, no functions,\\n * only constant, variables and required structures (mappings).\\n * Used by StackingProxy and Checkpoints contracts.\\n *\\n * What is SOV staking?\\n * The purpose of the SOV token is to provide a pseudonymous,\\n * censorship-resistant mechanism for governing the parameters of the Sovryn\\n * protocol, while aligning the incentives of protocol governors with the\\n * long-term success of the protocol. Any SOV token holder can choose to\\n * stake (lock up) their tokens for a fixed period of time in return for\\n * voting rights in the Bitocracy. Stakers are further incentivised through\\n * fee and slashing rewards.\\n * */\\ncontract StakingStorageShared is Ownable {\\n    /// @notice 2 weeks in seconds.\\n    uint256 constant TWO_WEEKS = 1209600;\\n\\n    /// @notice The maximum possible voting weight before adding +1 (actually 10, but need 9 for computation).\\n    uint96 public constant MAX_VOTING_WEIGHT = 9;\\n\\n    /// @notice weight is multiplied with this factor (for allowing decimals, like 1.2x).\\n    /// @dev MAX_VOTING_WEIGHT * WEIGHT_FACTOR needs to be < 792, because there are 100,000,000 SOV with 18 decimals\\n    uint96 public constant WEIGHT_FACTOR = 10;\\n\\n    /// @notice The maximum duration to stake tokens for.\\n    uint256 public constant MAX_DURATION = 1092 days;\\n\\n    /// @notice The maximum duration ^2\\n    uint96 constant MAX_DURATION_POW_2 = 1092 * 1092;\\n\\n    /// @notice Default weight scaling.\\n    uint96 constant DEFAULT_WEIGHT_SCALING = 3;\\n\\n    /// @notice Range for weight scaling.\\n    uint96 constant MIN_WEIGHT_SCALING = 1;\\n    uint96 constant MAX_WEIGHT_SCALING = 9;\\n\\n    /// @notice The timestamp of contract creation. Base for the staking period calculation.\\n    uint256 public kickoffTS;\\n\\n    string name = \\\"SOVStaking\\\";\\n\\n    /// @notice The token to be staked.\\n    IERC20 public SOVToken;\\n\\n    /// @notice A record of each accounts delegate.\\n    mapping(address => mapping(uint256 => address)) public delegates;\\n\\n    /// @notice If this flag is set to true, all tokens are unlocked immediately.\\n    bool public allUnlocked = false;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain.\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 lockDate,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice Used for stake migrations to a new staking contract with a different storage structure.\\n    address public newStakingContract;\\n\\n    /*************************** Checkpoints *******************************/\\n\\n    /// @notice A checkpoint for marking the stakes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 stake;\\n    }\\n\\n    /// @notice A record of tokens to be unstaked at a given time in total.\\n    /// For total voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev totalStakingCheckpoints[date][index] is a checkpoint.\\n    mapping(uint256 => mapping(uint32 => Checkpoint)) public totalStakingCheckpoints;\\n\\n    /// @notice The number of total staking checkpoints for each date.\\n    /// @dev numTotalStakingCheckpoints[date] is a number.\\n    mapping(uint256 => uint32) public numTotalStakingCheckpoints;\\n\\n    /// @notice A record of tokens to be unstaked at a given time which were delegated to a certain address.\\n    /// For delegatee voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev delegateStakingCheckpoints[delegatee][date][index] is a checkpoint.\\n    mapping(address => mapping(uint256 => mapping(uint32 => Checkpoint)))\\n        public delegateStakingCheckpoints;\\n\\n    /// @notice The number of total staking checkpoints for each date per delegate.\\n    /// @dev numDelegateStakingCheckpoints[delegatee][date] is a number.\\n    mapping(address => mapping(uint256 => uint32)) public numDelegateStakingCheckpoints;\\n\\n    /// @notice A record of tokens to be unstaked at a given time which per user address (address -> lockDate -> stake checkpoint)\\n    /// @dev userStakingCheckpoints[user][date][index] is a checkpoint.\\n    mapping(address => mapping(uint256 => mapping(uint32 => Checkpoint)))\\n        public userStakingCheckpoints;\\n\\n    /// @notice The number of total staking checkpoints for each date per user.\\n    /// @dev numUserStakingCheckpoints[user][date] is a number.\\n    mapping(address => mapping(uint256 => uint32)) public numUserStakingCheckpoints;\\n\\n    /// @notice A record of states for signing / validating signatures\\n    /// @dev nonces[user] is a number.\\n    mapping(address => uint256) public nonces;\\n\\n    /*************************** Slashing *******************************/\\n\\n    /// @notice the address of FeeSharingCollectorProxy contract, we need it for unstaking with slashing.\\n    IFeeSharingCollector public feeSharing;\\n\\n    /// @notice used for weight scaling when unstaking with slashing.\\n    uint96 public weightScaling = DEFAULT_WEIGHT_SCALING;\\n\\n    /// @notice List of vesting contracts, tokens for these contracts won't be slashed if unstaked by governance.\\n    /// @dev vestingWhitelist[contract] is true/false.\\n    mapping(address => bool) public vestingWhitelist;\\n\\n    /// @dev user => flag whether user has admin role.\\n    /// @dev multisig should be an admin, admin can invoke only governanceWithdrawVesting function,\\n    /// \\tthis function works only with Team Vesting contracts\\n    mapping(address => bool) public admins;\\n\\n    /// @dev vesting contract code hash => flag whether it's registered code hash\\n    mapping(bytes32 => bool) public vestingCodeHashes;\\n\\n    /// @notice A record of tokens to be unstaked from vesting contract at a given time (lockDate -> vest checkpoint)\\n    /// @dev vestingCheckpoints[date][index] is a checkpoint.\\n    mapping(uint256 => mapping(uint32 => Checkpoint)) public vestingCheckpoints;\\n\\n    /// @notice The number of total vesting checkpoints for each date.\\n    /// @dev numVestingCheckpoints[date] is a number.\\n    mapping(uint256 => uint32) public numVestingCheckpoints;\\n\\n    ///@notice vesting registry contract\\n    IVestingRegistry public vestingRegistryLogic;\\n\\n    /// @dev user => flag whether user has pauser role.\\n    mapping(address => bool) public pausers;\\n\\n    /// @dev Staking contract is paused\\n    bool public paused;\\n\\n    /// @dev Staking contract is frozen\\n    bool public frozen;\\n\\n    /// @dev max iterations that can be supported in 1 tx for the withdrawal\\n    uint256 internal maxVestingWithdrawIterations;\\n\\n    constructor() internal {\\n        //abstract\\n    }\\n}\\n\",\"keccak256\":\"0xf83eb462825c77f9c0629d15a52c8248cd1e9ce1e947c6ea93102d952790dca4\"},\"contracts/governance/Vesting/IVestingRegistry.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for upgradable Vesting Registry contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n */\\ninterface IVestingRegistry {\\n    function getVesting(address _tokenOwner) external view returns (address);\\n\\n    function getTeamVesting(address _tokenOwner) external view returns (address);\\n\\n    function setVestingRegistry(address _vestingRegistryProxy) external;\\n\\n    function isVestingAdress(address _vestingAddress) external view returns (bool); //name typo. to be deprecated.\\n\\n    function isVestingAddress(address _vestingAddress) external view returns (bool);\\n\\n    function isTeamVesting(address _vestingAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9f972c6eff9310beed9807757744bbaa0901c34df1cfff1eb5f58cf47b25904d\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) public view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) public returns (bool);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xea0bb1bf7d022130bb42a4efdfd875ef76ac5ac730a94ddd7b8c9949d4253855\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"},\"contracts/proxy/modules/interfaces/IFunctionsList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.17;\\n\\ninterface IFunctionsList {\\n    function getFunctionsList() external pure returns (bytes4[] memory functionSignatures);\\n}\\n\",\"keccak256\":\"0x38fb0166042329bc9ffcab69742f215efd135cdcf2d48b2202cb7f1546709101\"},\"contracts/token/IApproveAndCall.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for contract governance/ApprovalReceiver.sol\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n */\\ninterface IApproveAndCall {\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _sender The sender of SOV.approveAndCall function.\\n     * @param _amount The amount was approved.\\n     * @param _token The address of token.\\n     * @param _data The data will be used for low level call.\\n     * */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0ca93f8436a4d81d80de5ea9214139b490d96f708f09c975a0869ce9abc61635\"}},\"version\":1}",
    "bytecode": "0x60c0604052600a608081905269534f565374616b696e6760b01b60a09081526200002d9160029190620000ae565b506005805460ff19169055600d80546001600160a01b0316600360a01b179055600062000059620000a9565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000150565b335b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000f157805160ff191683800117855562000121565b8280016001018555821562000121579182015b828111156200012157825182559160200191906001019062000104565b506200012f92915062000133565b5090565b620000ab91905b808211156200012f57600081556001016200013a565b61383a80620001606000396000f3fe608060405234801561001057600080fd5b506004361061025d5760003560e01c80638f32d59b11610146578063bf626ec1116100c3578063db27ec1811610087578063db27ec18146104cd578063dfb267c2146104e0578063e7a324dc146104f3578063eefb8c47146104fb578063f2fde38b1461050e578063f3f19731146105215761025d565b8063bf626ec114610495578063c1b79b051461033d578063d27569e71461049d578063d5c38464146104a5578063d8ad326d146104b85761025d565b8063a58848c51161010a578063a58848c514610457578063adae90021461045f578063ae81dfe414610472578063b1724b461461047a578063bb533cf2146104825761025d565b80638f32d59b146104015780638f4ffcb1146104095780639436e7d41461041c57806394c2ce581461043c5780639929e8861461044f5761025d565b8063429b62e5116101df57806370a08231116101a357806370a082311461038c57806372ec97951461039f5780637ba6f458146103b25780637ecebe00146103d357806380f51c12146103e65780638da5cb5b146103f95761025d565b8063429b62e51461032a5780634b2fea1e1461033d5780635c975abb1461035057806368cefccc146103585780636b6fde0e146103795761025d565b8063104932cf11610226578063104932cf146102d257806317748adc146102da57806320606b70146102ef57806325629ec0146102f757806327dd1b001461030a5761025d565b8062073f991461026257806303a18fa314610280578063054f7d9c1461029557806307392cc0146102aa5780630c09ddfd146102bd575b600080fd5b61026a610534565b604051610277919061352a565b60405180910390f35b61028861053a565b6040516102779190613538565b61029d610549565b604051610277919061351c565b61029d6102b8366004612b5e565b610557565b6102d06102cb366004612acb565b61056c565b005b6102886105f5565b6102e2610604565b60405161027791906136e6565b61026a610609565b6102d0610305366004612c95565b610620565b61031d6103183660046129c6565b610680565b6040516102779190613488565b61029d6103383660046129a0565b6106a6565b6102d061034b366004612bde565b6106bb565b61029d61071c565b61036b610366366004612a7e565b610725565b6040516102779291906136cb565b61036b610387366004612a7e565b610760565b6102e261039a3660046129a0565b61079b565b61026a6103ad366004612b5e565b6107f0565b6103c56103c03660046129a0565b610803565b6040516102779291906134f7565b61026a6103e13660046129a0565b61093e565b61029d6103f43660046129a0565b610950565b61031d610965565b61029d610974565b6102d0610417366004612a00565b610998565b61042f61042a366004612b5e565b610b8c565b60405161027791906136bd565b61042f61044a3660046129c6565b610ba4565b61029d610bc7565b610288610bd0565b61029d61046d3660046129a0565b610bdf565b61031d610bf4565b61026a610c08565b61042f610490366004612b5e565b610c10565b6102e2610c28565b6102e2610c3e565b6102e26104b3366004612b5e565b610c43565b6104c0610ca0565b60405161027791906134e6565b61042f6104db3660046129c6565b610eb4565b61036b6104ee366004612c65565b610ed7565b61026a610f0c565b6102d0610509366004612bbf565b610f18565b6102d061051c3660046129a0565b611124565b61036b61052f366004612c65565b611154565b60015481565b600d546001600160a01b031681565b601554610100900460ff1681565b60106020526000908152604090205460ff1681565b3330146105945760405162461bcd60e51b815260040161058b90613607565b60405180910390fd5b60155460ff16156105b75760405162461bcd60e51b815260040161058b90613677565b601554610100900460ff16156105df5760405162461bcd60e51b815260040161058b90613677565b6105ee85858585856000611189565b5050505050565b6013546001600160a01b031681565b600981565b60405161061590613472565b604051809103902081565b60155460ff16156106435760405162461bcd60e51b815260040161058b90613677565b601554610100900460ff161561066b5760405162461bcd60e51b815260040161058b90613677565b61067a33858585856000611189565b50505050565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b600f6020526000908152604090205460ff1681565b60155460ff16156106de5760405162461bcd60e51b815260040161058b90613677565b601554610100900460ff16156107065760405162461bcd60e51b815260040161058b90613677565b610714868686868686611199565b505050505050565b60155460ff1681565b600a60209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b600860209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b6001546000905b63059fa600420181116107ea576107de826107bd85846113b3565b6040518060400160405280600381526020016229989960e91b815250611416565b915062127500016107a2565b50919050565b60006107fb82611452565b90505b919050565b606080600061081763059fa6004201611452565b60015490915060009062127500015b82811161085957600061083987836113b3565b6001600160601b0316111561084f576001909101905b6212750001610826565b5080604051908082528060200260200182016040528015610884578160200160208202803883390190505b509350806040519080825280602002602001820160405280156108b1578160200160208202803883390190505b5060015490935060009062127500015b8381116109355760006108d488836113b3565b90506001600160601b0381161561092a57818784815181106108f257fe5b6020026020010181815250508086848151811061090b57fe5b6001600160601b03909216602092830291909101909101526001909201915b5062127500016108c1565b50505050915091565b600c6020526000908152604090205481565b60146020526000908152604090205460ff1681565b6000546001600160a01b031690565b600080546001600160a01b0316610989611492565b6001600160a01b031614905090565b6109a0611496565b6001600160a01b0316336001600160a01b0316146109d05760405162461bcd60e51b815260040161058b90613607565b336001600160a01b038416146109f85760405162461bcd60e51b815260040161058b90613607565b60006060610a046114a5565b90506000610a4785858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114df92505050565b905060005b8251811015610a9557828181518110610a6157fe5b60200260200101516001600160e01b031916826001600160e01b0319161415610a8d5760019350610a95565b600101610a4c565b5082610ab35760405162461bcd60e51b815260040161058b906135a7565b600080600060201b8787604051602001610acf93929190613440565b604051602081830303815290604052806020019051610af19190810190612b7c565b9093509150506001600160a01b03808316908b1614610b225760405162461bcd60e51b815260040161058b906135d7565b888114610b415760405162461bcd60e51b815260040161058b90613667565b610b8087878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114e692505050565b50505050505050505050565b60076020526000908152604090205463ffffffff1681565b600960209081526000928352604080842090915290825290205463ffffffff1681565b60055460ff1681565b6003546001600160a01b031681565b600e6020526000908152604090205460ff1681565b60055461010090046001600160a01b031681565b63059fa60081565b60126020526000908152604090205463ffffffff1681565b600d54600160a01b90046001600160601b031681565b600a81565b60008181526007602052604081205463ffffffff1680610c64576000610c99565b6000838152600660209081526040808320600019850163ffffffff168452909152902054600160201b90046001600160601b03165b9392505050565b60408051600a808252610160820190925260609182919060208201610140803883390190505090506325629ec060e01b81600081518110610cdd57fe5b6001600160e01b0319909216602092830291909101909101528051630c09ddfd60e01b9082906001908110610d0e57fe5b6001600160e01b031990921660209283029190910190910152805163eefb8c4760e01b9082906002908110610d3f57fe5b6001600160e01b0319909216602092830291909101909101528051632597f50f60e11b9082906003908110610d7057fe5b6001600160e01b031990921660209283029190910190910152805163c1b79b0560e01b9082906004908110610da157fe5b6001600160e01b03199092166020928302919091019091015280516370a0823160e01b9082906005908110610dd257fe5b6001600160e01b0319909216602092830291909101909101528051633570e11960e21b9082906006908110610e0357fe5b6001600160e01b0319909216602092830291909101909101528051630f74de8b60e31b9082906007908110610e3457fe5b6001600160e01b03199092166020928302919091019091015280516372ec979560e01b9082906008908110610e6557fe5b6001600160e01b0319909216602092830291909101909101528051638f4ffcb160e01b9082906009908110610e9657fe5b6001600160e01b031990921660209283029190910190910152905090565b600b60209081526000928352604080842090915290825290205463ffffffff1681565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6040516106159061347d565b60155460ff1615610f3b5760405162461bcd60e51b815260040161058b90613677565b601554610100900460ff1615610f635760405162461bcd60e51b815260040161058b90613677565b610f6c82611452565b9150610f7781611452565b9050610f8382336115c0565b6000610f9463059fa6004201611452565b905080821115610fa2578091505b818310610fc15760405162461bcd60e51b815260040161058b90613657565b6000610fd1338560014303611631565b90506000816001600160601b031611610ffc5760405162461bcd60e51b815260040161058b906135c7565b611007338583611886565b61101233848361191d565b61101b336119a6565b156110345761102a8482611a7f565b6110348382611af9565b61103e8482611b66565b6110488382611be0565b33600090815260046020908152604080832087845290915280822080546001600160a01b031981169091558583529120546001600160a01b039182169116806110c15750336000908152600460209081526040808320878452909152902080546001600160a01b0319166001600160a01b038316179055805b6110cc828785611c4d565b6110d7818685611cee565b336001600160a01b03167f809d79c94c86576d61afef75495b8df415224bf885310fed7ea315039f8c5b4c87878660405161111493929190613687565b60405180910390a2505050505050565b61112c610974565b6111485760405162461bcd60e51b815260040161058b90613607565b61115181611d77565b50565b601160209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6107148686868686866001611df8565b600086116111b95760405162461bcd60e51b815260040161058b906135b7565b63059fa6008411156111dd5760405162461bcd60e51b815260040161058b90613587565b600083116111fd5760405162461bcd60e51b815260040161058b90613617565b621275008306156112205760405162461bcd60e51b815260040161058b90613617565b816001600160a01b0316816001600160a01b03161415801561124a57506001600160a01b03811615155b15611277576001600160a01b03821633146112775760405162461bcd60e51b815260040161058b90613647565b6000611284864201611452565b90506000611293864201611452565b9050600085838303816112a257fe5b0460010190506000818a816112b357fe5b6003546040516323b872dd60e01b81529290910492506001600160a01b0316906323b872dd906112eb90339030908f90600401613496565b602060405180830381600087803b15801561130557600080fd5b505af1158015611319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061133d9190810190612b40565b6113595760405162461bcd60e51b815260040161058b90613597565b6001821061137957611379336001840383028c0386898960016000611df8565b8387015b8381116113a65761138e81886115c0565b61139f3383838a8a60016000611df8565b870161137d565b5050505050505050505050565b6001600160a01b0382166000818152600b60209081526040808320858452825280832054938352600a8252808320858452825280832063ffffffff9485166000190190941683529290522054600160201b90046001600160601b03165b92915050565b6000838301826001600160601b0380871690831610156114495760405162461bcd60e51b815260040161058b9190613546565b50949350505050565b600154600090808310156114785760405162461bcd60e51b815260040161058b90613557565b600062127500828503046212750002919091019392505050565b3390565b6003546001600160a01b031690565b60408051600180825281830190925260609182919060208083019080388339019050509050630c09ddfd60e01b81600081518110610e9657fe5b6020015190565b60006060306001600160a01b0316836040516115029190613466565b6000604051808303816000865af19150503d806000811461153f576040519150601f19603f3d011682016040523d82523d6000602084013e611544565b606091505b5091509150816115bb57604481511161156f5760405162461bcd60e51b815260040161058b90613567565b6115a26040518060400160405280601181526020017003932b1b2b4bb32a0b8383937bb30b61d1607d1b81525082612012565b60405162461bcd60e51b815260040161058b9190613546565b505050565b6001600160a01b0381166000818152600b60209081526040808320868452825280832054938352600a8252808320868452825280832060001963ffffffff958616908101861685529252909120549091164314158061067a5760405162461bcd60e51b815260040161058b90613637565b600061163b61210c565b82106116595760405162461bcd60e51b815260040161058b90613627565b61166283612110565b6001600160a01b0385166000908152600b6020908152604080832084845290915290205490935063ffffffff168061169e576000915050610c99565b6001600160a01b0385166000908152600a60209081526040808320878452825280832063ffffffff60001986018116855292529091205416831061172a576001600160a01b0385166000908152600a6020908152604080832087845282528083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610c99565b6001600160a01b0385166000908152600a60209081526040808320878452825280832083805290915290205463ffffffff1683101561176d576000915050610c99565b600060001982015b8163ffffffff168163ffffffff16111561183857600282820363ffffffff1604810361179f6128f3565b506001600160a01b0388166000908152600a602090815260408083208a8452825280832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b0316918101919091529087141561181357602001519450610c999350505050565b805163ffffffff1687111561182a57819350611831565b6001820392505b5050611775565b506001600160a01b0386166000908152600a60209081526040808320888452825280832063ffffffff909416835292905220546001600160601b03600160201b909104169150509392505050565b6001600160a01b0383166000818152600b60209081526040808320868452825280832054938352600a8252808320868452825280832063ffffffff94851660001981019095168452825280832054815180830190925260048252634350303560e01b92820192909252600160201b9091046001600160601b0316919061190f9083908690612135565b905061071486868584612174565b6001600160a01b0383166000818152600b60209081526040808320868452825280832054938352600a8252808320868452825280832063ffffffff948516600019810190951684528252808320548151808301909252600482526310d40c0d60e21b92820192909252600160201b9091046001600160601b0316919061190f9083908690611416565b6013546000908190833f906001600160a01b031615611a4257601354604051633288436360e21b81526001600160a01b039091169063ca210d8c906119ef908790600401613488565b60206040518083038186803b158015611a0757600080fd5b505afa158015611a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a3f9190810190612b40565b91505b8115611a53576001925050506107fe565b60008181526010602052604090205460ff1615611a75576001925050506107fe565b5060009392505050565b6000828152601260209081526040808320546011835281842063ffffffff918216600019810190921685528352818420548251808401909352600483526321a8181960e11b9383019390935292600160201b9092046001600160601b03169190611aec9083908690612135565b90506105ee8584836122f6565b6000828152601260209081526040808320546011835281842063ffffffff91821660001981019092168552835281842054825180840190935260048352634350303160e01b9383019390935292600160201b9092046001600160601b03169190611aec9083908690611416565b6000828152600760209081526040808320546006835281842063ffffffff91821660001981019092168552835281842054825180840190935260048352634350313160e01b9383019390935292600160201b9092046001600160601b03169190611bd39083908690612135565b90506105ee858483612436565b6000828152600760209081526040808320546006835281842063ffffffff91821660001981019092168552835281842054825180840190935260048352630435031360e41b9383019390935292600160201b9092046001600160601b03169190611bd39083908690611416565b6001600160a01b038316600081815260096020908152604080832086845282528083205493835260088252808320868452825280832063ffffffff94851660001981019095168452909152812054600160201b90046001600160601b0390811691908416821115611ce257611cdf828560405180604001604052806004815260200163086a060760e31b815250612135565b90505b61071486868584612576565b6001600160a01b038316600081815260096020908152604080832086845282528083205493835260088252808320868452825280832063ffffffff94851660001981019095168452825280832054815180830190925260048252634350303760e01b92820192909252600160201b9091046001600160601b03169190611cdf9083908690611416565b6001600160a01b038116611d9d5760405162461bcd60e51b815260040161058b90613577565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000866001600160601b031611611e215760405162461bcd60e51b815260040161058b906135e7565b81611e3257611e2f85611452565b94505b428511611e515760405162461bcd60e51b815260040161058b906135f7565b6001600160a01b038416611e63578693505b611e6d85856115c0565b6001600160a01b038316611e7f578392505b81611ea5576000611e9563059fa6004201611452565b905080861115611ea3578095505b505b6000611eb185876113b3565b9050611ec0888887898661277b565b6001600160a01b0380861660009081526004602090815260408083208a845290915290205481169085168114611fa757856001600160a01b0316856001600160a01b031614611f3a57886001600160a01b0316866001600160a01b031614611f3a5760405162461bcd60e51b815260040161058b90613647565b6001600160a01b0386811660009081526004602090815260408083208b8452909152902080546001600160a01b031916918716919091179055611f7e818884611c4d565b611fa482896040518060400160405280600381526020016253303360e81b815250611416565b97505b611fb285888a611cee565b846001600160a01b0316816001600160a01b0316876001600160a01b03167fb846dc53d3621f480d692e73f4473156d20f23ff6b2c8237b7130b883226cca98a604051611fff919061352a565b60405180910390a4505050505050505050565b6060808390506060839050606060448251845101036040519080825280601f01601f191660200182016040528015612051576020820181803883390190505b509050806000805b85518110156120aa5785818151811061206e57fe5b602001015160f81c60f81b83838060010194508151811061208b57fe5b60200101906001600160f81b031916908160001a905350600101612059565b5060445b84518110156120ff578481815181106120c357fe5b602001015160f81c60f81b8383806001019450815181106120e057fe5b60200101906001600160f81b031916908160001a9053506001016120ae565b5090979650505050505050565b4390565b60008061211c83611452565b905082811461212e5762127500810192505b5090919050565b6000836001600160601b0316836001600160601b03161115829061216c5760405162461bcd60e51b815260040161058b9190613546565b505050900390565b600061219c436040518060400160405280600481526020016321a8181b60e11b8152506128c4565b905060008363ffffffff161180156121ed57506001600160a01b0385166000908152600a60209081526040808320878452825280832063ffffffff6000198801811685529252909120548282169116145b1561224e576001600160a01b0385166000908152600a602090815260408083208784528252808320600019870163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b038516021790556105ee565b60408051808201825263ffffffff92831681526001600160601b0393841660208083019182526001600160a01b03989098166000818152600a8a528481208982528a5284812088871682528a52848120935184549351909716600160201b02600160201b600160801b031997871663ffffffff19948516179790971696909617909255908452600b875281842095845294909552939020805460019092019093169116179055565b600061231e43604051806040016040528060048152602001634350303360e01b8152506128c4565b905060008363ffffffff1611801561235d5750600084815260116020908152604080832063ffffffff6000198801811685529252909120548282169116145b156123ac576000848152601160209081526040808320600019870163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b0385160217905561067a565b60408051808201825263ffffffff92831681526001600160601b0393841660208083019182526000888152601182528481208887168252825284812093518454935163ffffffff1994851691881691909117600160201b600160801b031916600160201b919098160296909617909255958452601290529091208054909316600190920116179055565b600061245e436040518060400160405280600481526020016321a8189960e11b8152506128c4565b905060008363ffffffff1611801561249d5750600084815260066020908152604080832063ffffffff6000198801811685529252909120548282169116145b156124ec576000848152600660209081526040808320600019870163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b0385160217905561067a565b60408051808201825263ffffffff92831681526001600160601b0393841660208083019182526000888152600682528481208887168252825284812093518454935163ffffffff1994851691881691909117600160201b600160801b031916600160201b919098160296909617909255958452600790529091208054909316600190920116179055565b600061259e43604051806040016040528060048152602001634350303960e01b8152506128c4565b6001600160a01b03861660009081526008602090815260408083208884528252808320600019880163ffffffff9081168552925290912054919250600160201b9091046001600160601b03169084161580159061263457506001600160a01b0386166000908152600860209081526040808320888452825280832063ffffffff6000198901811685529252909120548382169116145b15612695576001600160a01b03861660009081526008602090815260408083208884528252808320600019880163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b0386160217905561273e565b60408051808201825263ffffffff80851682526001600160601b0380871660208085019182526001600160a01b038c166000818152600883528781208d825283528781208c871682528352878120965187549451909516600160201b02600160201b600160801b031995871663ffffffff19958616179590951694909417909555938252600984528482208a835290935292909220805460018801909316929091169190911790555b856001600160a01b03167fc7b38fb25352e6f351f57e2c922f84db5c97e09a6246bbe1d2eedfcdb01c4c62868386604051611114939291906136a2565b8015612823576003546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906127b5908890309089906004016134be565b602060405180830381600087803b1580156127cf57600080fd5b505af11580156127e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128079190810190612b40565b6128235760405162461bcd60e51b815260040161058b90613597565b600061282f84846113b3565b90506128588186604051806040016040528060048152602001630495332360e41b815250611416565b90506128648386611be0565b61286f84848761191d565b612878846119a6565b15612887576128878386611af9565b836001600160a01b03167f0fc5b1bac0416800b42a669229a346b6e5a15db3896339dbdc5fa376e1e4570a868584604051611114939291906136f4565b600081600160201b84106128eb5760405162461bcd60e51b815260040161058b9190613546565b509192915050565b604080518082019091526000808252602082015290565b8035611410816137bf565b8051611410816137bf565b8051611410816137d3565b8035611410816137dc565b8051611410816137dc565b60008083601f84011261295357600080fd5b50813567ffffffffffffffff81111561296b57600080fd5b60208301915083600182028301111561298357600080fd5b9250929050565b8035611410816137e5565b8035611410816137ee565b6000602082840312156129b257600080fd5b60006129be848461290a565b949350505050565b600080604083850312156129d957600080fd5b60006129e5858561290a565b92505060206129f68582860161292b565b9150509250929050565b600080600080600060808688031215612a1857600080fd5b6000612a24888861290a565b9550506020612a358882890161292b565b9450506040612a468882890161290a565b935050606086013567ffffffffffffffff811115612a6357600080fd5b612a6f88828901612941565b92509250509295509295909350565b600080600060608486031215612a9357600080fd5b6000612a9f868661290a565b9350506020612ab08682870161292b565b9250506040612ac18682870161298a565b9150509250925092565b600080600080600060a08688031215612ae357600080fd5b6000612aef888861290a565b9550506020612b0088828901612995565b9450506040612b118882890161292b565b9350506060612b228882890161290a565b9250506080612b338882890161290a565b9150509295509295909350565b600060208284031215612b5257600080fd5b60006129be8484612920565b600060208284031215612b7057600080fd5b60006129be848461292b565b600080600060608486031215612b9157600080fd5b6000612b9d8686612936565b9350506020612bae86828701612915565b9250506040612ac186828701612936565b60008060408385031215612bd257600080fd5b60006129e5858561292b565b60008060008060008060c08789031215612bf757600080fd5b6000612c03898961292b565b9650506020612c1489828a0161292b565b9550506040612c2589828a0161292b565b9450506060612c3689828a0161292b565b9350506080612c4789828a0161290a565b92505060a0612c5889828a0161290a565b9150509295509295509295565b60008060408385031215612c7857600080fd5b6000612c84858561292b565b92505060206129f68582860161298a565b60008060008060808587031215612cab57600080fd5b6000612cb78787612995565b9450506020612cc88782880161292b565b9350506040612cd98782880161290a565b9250506060612cea8782880161290a565b91505092959194509250565b6000612d028383612e52565b505060200190565b6000612d028383612e49565b6000612d028383613437565b612d2b81613760565b82525050565b612d2b81613715565b6000612d4582613708565b612d4f818561370c565b9350612d5a83613702565b8060005b83811015612d88578151612d728882612cf6565b9750612d7d83613702565b925050600101612d5e565b509495945050505050565b6000612d9e82613708565b612da8818561370c565b9350612db383613702565b8060005b83811015612d88578151612dcb8882612d0a565b9750612dd683613702565b925050600101612db7565b6000612dec82613708565b612df6818561370c565b9350612e0183613702565b8060005b83811015612d88578151612e198882612d16565b9750612e2483613702565b925050600101612e05565b612d2b81613720565b612d2b612e4482613725565b61372f565b612d2b8161372f565b612d2b81613732565b6000612e6783856107fe565b9350612e7483858461377d565b50500190565b6000612e8582613708565b612e8f81856107fe565b9350612e9f818560208601613789565b9290920192915050565b612d2b81613767565b6000612ebd82613708565b612ec7818561370c565b9350612ed7818560208601613789565b612ee0816137b5565b9093019392505050565b6000612ef7601d8361370c565b7f74696d657374616d70203c20636f6e7472616374206372656174696f6e000000815260200192915050565b6000612f3060308361370c565b7f72656365697665417070726f76616c3a205472616e73616374696f6e2065786581526f31baba34b7b7103932bb32b93a32b21760811b602082015260400192915050565b6000612f8260268361370c565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000612fca60108361370c565b6f24b73b30b634b210323ab930ba34b7b760811b815260200192915050565b6000612ff660238361370c565b7f53686f756c64207472616e7366657220746f6b656e73207375636365737366758152626c6c7960e81b602082015260400192915050565b600061303b60158361370c565b741b595d1a1bd9081a5cc81b9bdd08185b1b1bddd959605a1b815260200192915050565b600061306c600e8361370c565b6d125b9d985b1a5908185b5bdd5b9d60921b815260200192915050565b600061309660218361370c565b7f6e6f207374616b65732074696c6c207468652070726576206c6f636b206461748152606560f81b602082015260400192915050565b60006130d9600f8361370c565b6e0e6cadcc8cae440dad2e6dac2e8c6d608b1b815260200192915050565b600061310460208361370c565b7f616d6f756e74206e6565647320746f20626520626967676572207468616e2030815260200192915050565b600061313d60378361370c565b7f5374616b696e673a3a5f74696d657374616d70546f4c6f636b446174653a207381527f74616b696e6720706572696f6420746f6f2073686f7274000000000000000000602082015260400192915050565b600061319c6043836107fe565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000613207600c8361370c565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b600061322f60178361370c565b7f496e76616c696420696e74657276616c206c656e677468000000000000000000815260200192915050565b6000613268600e8361370c565b6d1b9bdd0819195d195c9b5a5b995960921b815260200192915050565b6000613292602f8361370c565b7f63616e6e6f74206265206d696e656420696e207468652073616d6520626c6f6381526e6b206173206c617374207374616b6560881b602082015260400192915050565b60006132e3604b836107fe565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206c6f636b446174652c75696e74323536206e6f6e63652c75696e7460208201526a323536206578706972792960a81b6040820152604b0192915050565b600061335660348361370c565b7f4f6e6c79207374616b65466f72206163636f756e7420697320616c6c6f77656481527320746f206368616e67652064656c65676174656560601b602082015260400192915050565b60006133ac601e8361370c565b7f6d75737420696e637265617365207374616b696e67206475726174696f6e0000815260200192915050565b60006133e5600f8361370c565b6e0c2dadeeadce840dad2e6dac2e8c6d608b1b815260200192915050565b600061341060068361370c565b651c185d5cd95960d21b815260200192915050565b612d2b8161374b565b612d2b81613772565b612d2b81613754565b600061344c8286612e38565b601c8201915061345d828486612e5b565b95945050505050565b6000610c998284612e7a565b60006114108261318f565b6000611410826132d6565b602081016114108284612d31565b606081016134a48286612d22565b6134b16020830185612d31565b6129be6040830184612e49565b606081016134cc8286612d31565b6134d96020830185612d31565b6129be604083018461342e565b60208082528101610c998184612d3a565b604080825281016135088185612d93565b905081810360208301526129be8184612de1565b602081016114108284612e2f565b602081016114108284612e49565b602081016114108284612ea9565b60208082528101610c998184612eb2565b602080825281016107fb81612eea565b602080825281016107fb81612f23565b602080825281016107fb81612f75565b602080825281016107fb81612fbd565b602080825281016107fb81612fe9565b602080825281016107fb8161302e565b602080825281016107fb8161305f565b602080825281016107fb81613089565b602080825281016107fb816130cc565b602080825281016107fb816130f7565b602080825281016107fb81613130565b602080825281016107fb816131fa565b602080825281016107fb81613222565b602080825281016107fb8161325b565b602080825281016107fb81613285565b602080825281016107fb81613349565b602080825281016107fb8161339f565b602080825281016107fb816133d8565b602080825281016107fb81613403565b606081016136958286612e49565b6134d96020830185612e49565b606081016136b08286612e49565b6134d9602083018561342e565b602081016114108284613425565b604081016136d98285613425565b610c996020830184613437565b602081016114108284613437565b60608101613695828661342e565b60200190565b5190565b90815260200190565b60006107fb8261373f565b151590565b63ffffffff191690565b90565b6001600160e01b03191690565b6001600160a01b031690565b63ffffffff1690565b6001600160601b031690565b60006107fb825b60006107fb82613715565b60006107fb82613754565b82818337506000910152565b60005b838110156137a457818101518382015260200161378c565b8381111561067a5750506000910152565b601f01601f191690565b6137c881613715565b811461115157600080fd5b6137c881613720565b6137c88161372f565b6137c88161374b565b6137c88161375456fea365627a7a7231582004f50d99759a163e42414664d6467d6ab39e7362597542c493d53cfbb0257a5e6c6578706572696d656e74616cf564736f6c63430005110040",
    "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025d5760003560e01c80638f32d59b11610146578063bf626ec1116100c3578063db27ec1811610087578063db27ec18146104cd578063dfb267c2146104e0578063e7a324dc146104f3578063eefb8c47146104fb578063f2fde38b1461050e578063f3f19731146105215761025d565b8063bf626ec114610495578063c1b79b051461033d578063d27569e71461049d578063d5c38464146104a5578063d8ad326d146104b85761025d565b8063a58848c51161010a578063a58848c514610457578063adae90021461045f578063ae81dfe414610472578063b1724b461461047a578063bb533cf2146104825761025d565b80638f32d59b146104015780638f4ffcb1146104095780639436e7d41461041c57806394c2ce581461043c5780639929e8861461044f5761025d565b8063429b62e5116101df57806370a08231116101a357806370a082311461038c57806372ec97951461039f5780637ba6f458146103b25780637ecebe00146103d357806380f51c12146103e65780638da5cb5b146103f95761025d565b8063429b62e51461032a5780634b2fea1e1461033d5780635c975abb1461035057806368cefccc146103585780636b6fde0e146103795761025d565b8063104932cf11610226578063104932cf146102d257806317748adc146102da57806320606b70146102ef57806325629ec0146102f757806327dd1b001461030a5761025d565b8062073f991461026257806303a18fa314610280578063054f7d9c1461029557806307392cc0146102aa5780630c09ddfd146102bd575b600080fd5b61026a610534565b604051610277919061352a565b60405180910390f35b61028861053a565b6040516102779190613538565b61029d610549565b604051610277919061351c565b61029d6102b8366004612b5e565b610557565b6102d06102cb366004612acb565b61056c565b005b6102886105f5565b6102e2610604565b60405161027791906136e6565b61026a610609565b6102d0610305366004612c95565b610620565b61031d6103183660046129c6565b610680565b6040516102779190613488565b61029d6103383660046129a0565b6106a6565b6102d061034b366004612bde565b6106bb565b61029d61071c565b61036b610366366004612a7e565b610725565b6040516102779291906136cb565b61036b610387366004612a7e565b610760565b6102e261039a3660046129a0565b61079b565b61026a6103ad366004612b5e565b6107f0565b6103c56103c03660046129a0565b610803565b6040516102779291906134f7565b61026a6103e13660046129a0565b61093e565b61029d6103f43660046129a0565b610950565b61031d610965565b61029d610974565b6102d0610417366004612a00565b610998565b61042f61042a366004612b5e565b610b8c565b60405161027791906136bd565b61042f61044a3660046129c6565b610ba4565b61029d610bc7565b610288610bd0565b61029d61046d3660046129a0565b610bdf565b61031d610bf4565b61026a610c08565b61042f610490366004612b5e565b610c10565b6102e2610c28565b6102e2610c3e565b6102e26104b3366004612b5e565b610c43565b6104c0610ca0565b60405161027791906134e6565b61042f6104db3660046129c6565b610eb4565b61036b6104ee366004612c65565b610ed7565b61026a610f0c565b6102d0610509366004612bbf565b610f18565b6102d061051c3660046129a0565b611124565b61036b61052f366004612c65565b611154565b60015481565b600d546001600160a01b031681565b601554610100900460ff1681565b60106020526000908152604090205460ff1681565b3330146105945760405162461bcd60e51b815260040161058b90613607565b60405180910390fd5b60155460ff16156105b75760405162461bcd60e51b815260040161058b90613677565b601554610100900460ff16156105df5760405162461bcd60e51b815260040161058b90613677565b6105ee85858585856000611189565b5050505050565b6013546001600160a01b031681565b600981565b60405161061590613472565b604051809103902081565b60155460ff16156106435760405162461bcd60e51b815260040161058b90613677565b601554610100900460ff161561066b5760405162461bcd60e51b815260040161058b90613677565b61067a33858585856000611189565b50505050565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b600f6020526000908152604090205460ff1681565b60155460ff16156106de5760405162461bcd60e51b815260040161058b90613677565b601554610100900460ff16156107065760405162461bcd60e51b815260040161058b90613677565b610714868686868686611199565b505050505050565b60155460ff1681565b600a60209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b600860209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b6001546000905b63059fa600420181116107ea576107de826107bd85846113b3565b6040518060400160405280600381526020016229989960e91b815250611416565b915062127500016107a2565b50919050565b60006107fb82611452565b90505b919050565b606080600061081763059fa6004201611452565b60015490915060009062127500015b82811161085957600061083987836113b3565b6001600160601b0316111561084f576001909101905b6212750001610826565b5080604051908082528060200260200182016040528015610884578160200160208202803883390190505b509350806040519080825280602002602001820160405280156108b1578160200160208202803883390190505b5060015490935060009062127500015b8381116109355760006108d488836113b3565b90506001600160601b0381161561092a57818784815181106108f257fe5b6020026020010181815250508086848151811061090b57fe5b6001600160601b03909216602092830291909101909101526001909201915b5062127500016108c1565b50505050915091565b600c6020526000908152604090205481565b60146020526000908152604090205460ff1681565b6000546001600160a01b031690565b600080546001600160a01b0316610989611492565b6001600160a01b031614905090565b6109a0611496565b6001600160a01b0316336001600160a01b0316146109d05760405162461bcd60e51b815260040161058b90613607565b336001600160a01b038416146109f85760405162461bcd60e51b815260040161058b90613607565b60006060610a046114a5565b90506000610a4785858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114df92505050565b905060005b8251811015610a9557828181518110610a6157fe5b60200260200101516001600160e01b031916826001600160e01b0319161415610a8d5760019350610a95565b600101610a4c565b5082610ab35760405162461bcd60e51b815260040161058b906135a7565b600080600060201b8787604051602001610acf93929190613440565b604051602081830303815290604052806020019051610af19190810190612b7c565b9093509150506001600160a01b03808316908b1614610b225760405162461bcd60e51b815260040161058b906135d7565b888114610b415760405162461bcd60e51b815260040161058b90613667565b610b8087878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114e692505050565b50505050505050505050565b60076020526000908152604090205463ffffffff1681565b600960209081526000928352604080842090915290825290205463ffffffff1681565b60055460ff1681565b6003546001600160a01b031681565b600e6020526000908152604090205460ff1681565b60055461010090046001600160a01b031681565b63059fa60081565b60126020526000908152604090205463ffffffff1681565b600d54600160a01b90046001600160601b031681565b600a81565b60008181526007602052604081205463ffffffff1680610c64576000610c99565b6000838152600660209081526040808320600019850163ffffffff168452909152902054600160201b90046001600160601b03165b9392505050565b60408051600a808252610160820190925260609182919060208201610140803883390190505090506325629ec060e01b81600081518110610cdd57fe5b6001600160e01b0319909216602092830291909101909101528051630c09ddfd60e01b9082906001908110610d0e57fe5b6001600160e01b031990921660209283029190910190910152805163eefb8c4760e01b9082906002908110610d3f57fe5b6001600160e01b0319909216602092830291909101909101528051632597f50f60e11b9082906003908110610d7057fe5b6001600160e01b031990921660209283029190910190910152805163c1b79b0560e01b9082906004908110610da157fe5b6001600160e01b03199092166020928302919091019091015280516370a0823160e01b9082906005908110610dd257fe5b6001600160e01b0319909216602092830291909101909101528051633570e11960e21b9082906006908110610e0357fe5b6001600160e01b0319909216602092830291909101909101528051630f74de8b60e31b9082906007908110610e3457fe5b6001600160e01b03199092166020928302919091019091015280516372ec979560e01b9082906008908110610e6557fe5b6001600160e01b0319909216602092830291909101909101528051638f4ffcb160e01b9082906009908110610e9657fe5b6001600160e01b031990921660209283029190910190910152905090565b600b60209081526000928352604080842090915290825290205463ffffffff1681565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6040516106159061347d565b60155460ff1615610f3b5760405162461bcd60e51b815260040161058b90613677565b601554610100900460ff1615610f635760405162461bcd60e51b815260040161058b90613677565b610f6c82611452565b9150610f7781611452565b9050610f8382336115c0565b6000610f9463059fa6004201611452565b905080821115610fa2578091505b818310610fc15760405162461bcd60e51b815260040161058b90613657565b6000610fd1338560014303611631565b90506000816001600160601b031611610ffc5760405162461bcd60e51b815260040161058b906135c7565b611007338583611886565b61101233848361191d565b61101b336119a6565b156110345761102a8482611a7f565b6110348382611af9565b61103e8482611b66565b6110488382611be0565b33600090815260046020908152604080832087845290915280822080546001600160a01b031981169091558583529120546001600160a01b039182169116806110c15750336000908152600460209081526040808320878452909152902080546001600160a01b0319166001600160a01b038316179055805b6110cc828785611c4d565b6110d7818685611cee565b336001600160a01b03167f809d79c94c86576d61afef75495b8df415224bf885310fed7ea315039f8c5b4c87878660405161111493929190613687565b60405180910390a2505050505050565b61112c610974565b6111485760405162461bcd60e51b815260040161058b90613607565b61115181611d77565b50565b601160209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6107148686868686866001611df8565b600086116111b95760405162461bcd60e51b815260040161058b906135b7565b63059fa6008411156111dd5760405162461bcd60e51b815260040161058b90613587565b600083116111fd5760405162461bcd60e51b815260040161058b90613617565b621275008306156112205760405162461bcd60e51b815260040161058b90613617565b816001600160a01b0316816001600160a01b03161415801561124a57506001600160a01b03811615155b15611277576001600160a01b03821633146112775760405162461bcd60e51b815260040161058b90613647565b6000611284864201611452565b90506000611293864201611452565b9050600085838303816112a257fe5b0460010190506000818a816112b357fe5b6003546040516323b872dd60e01b81529290910492506001600160a01b0316906323b872dd906112eb90339030908f90600401613496565b602060405180830381600087803b15801561130557600080fd5b505af1158015611319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061133d9190810190612b40565b6113595760405162461bcd60e51b815260040161058b90613597565b6001821061137957611379336001840383028c0386898960016000611df8565b8387015b8381116113a65761138e81886115c0565b61139f3383838a8a60016000611df8565b870161137d565b5050505050505050505050565b6001600160a01b0382166000818152600b60209081526040808320858452825280832054938352600a8252808320858452825280832063ffffffff9485166000190190941683529290522054600160201b90046001600160601b03165b92915050565b6000838301826001600160601b0380871690831610156114495760405162461bcd60e51b815260040161058b9190613546565b50949350505050565b600154600090808310156114785760405162461bcd60e51b815260040161058b90613557565b600062127500828503046212750002919091019392505050565b3390565b6003546001600160a01b031690565b60408051600180825281830190925260609182919060208083019080388339019050509050630c09ddfd60e01b81600081518110610e9657fe5b6020015190565b60006060306001600160a01b0316836040516115029190613466565b6000604051808303816000865af19150503d806000811461153f576040519150601f19603f3d011682016040523d82523d6000602084013e611544565b606091505b5091509150816115bb57604481511161156f5760405162461bcd60e51b815260040161058b90613567565b6115a26040518060400160405280601181526020017003932b1b2b4bb32a0b8383937bb30b61d1607d1b81525082612012565b60405162461bcd60e51b815260040161058b9190613546565b505050565b6001600160a01b0381166000818152600b60209081526040808320868452825280832054938352600a8252808320868452825280832060001963ffffffff958616908101861685529252909120549091164314158061067a5760405162461bcd60e51b815260040161058b90613637565b600061163b61210c565b82106116595760405162461bcd60e51b815260040161058b90613627565b61166283612110565b6001600160a01b0385166000908152600b6020908152604080832084845290915290205490935063ffffffff168061169e576000915050610c99565b6001600160a01b0385166000908152600a60209081526040808320878452825280832063ffffffff60001986018116855292529091205416831061172a576001600160a01b0385166000908152600a6020908152604080832087845282528083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610c99565b6001600160a01b0385166000908152600a60209081526040808320878452825280832083805290915290205463ffffffff1683101561176d576000915050610c99565b600060001982015b8163ffffffff168163ffffffff16111561183857600282820363ffffffff1604810361179f6128f3565b506001600160a01b0388166000908152600a602090815260408083208a8452825280832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b0316918101919091529087141561181357602001519450610c999350505050565b805163ffffffff1687111561182a57819350611831565b6001820392505b5050611775565b506001600160a01b0386166000908152600a60209081526040808320888452825280832063ffffffff909416835292905220546001600160601b03600160201b909104169150509392505050565b6001600160a01b0383166000818152600b60209081526040808320868452825280832054938352600a8252808320868452825280832063ffffffff94851660001981019095168452825280832054815180830190925260048252634350303560e01b92820192909252600160201b9091046001600160601b0316919061190f9083908690612135565b905061071486868584612174565b6001600160a01b0383166000818152600b60209081526040808320868452825280832054938352600a8252808320868452825280832063ffffffff948516600019810190951684528252808320548151808301909252600482526310d40c0d60e21b92820192909252600160201b9091046001600160601b0316919061190f9083908690611416565b6013546000908190833f906001600160a01b031615611a4257601354604051633288436360e21b81526001600160a01b039091169063ca210d8c906119ef908790600401613488565b60206040518083038186803b158015611a0757600080fd5b505afa158015611a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a3f9190810190612b40565b91505b8115611a53576001925050506107fe565b60008181526010602052604090205460ff1615611a75576001925050506107fe565b5060009392505050565b6000828152601260209081526040808320546011835281842063ffffffff918216600019810190921685528352818420548251808401909352600483526321a8181960e11b9383019390935292600160201b9092046001600160601b03169190611aec9083908690612135565b90506105ee8584836122f6565b6000828152601260209081526040808320546011835281842063ffffffff91821660001981019092168552835281842054825180840190935260048352634350303160e01b9383019390935292600160201b9092046001600160601b03169190611aec9083908690611416565b6000828152600760209081526040808320546006835281842063ffffffff91821660001981019092168552835281842054825180840190935260048352634350313160e01b9383019390935292600160201b9092046001600160601b03169190611bd39083908690612135565b90506105ee858483612436565b6000828152600760209081526040808320546006835281842063ffffffff91821660001981019092168552835281842054825180840190935260048352630435031360e41b9383019390935292600160201b9092046001600160601b03169190611bd39083908690611416565b6001600160a01b038316600081815260096020908152604080832086845282528083205493835260088252808320868452825280832063ffffffff94851660001981019095168452909152812054600160201b90046001600160601b0390811691908416821115611ce257611cdf828560405180604001604052806004815260200163086a060760e31b815250612135565b90505b61071486868584612576565b6001600160a01b038316600081815260096020908152604080832086845282528083205493835260088252808320868452825280832063ffffffff94851660001981019095168452825280832054815180830190925260048252634350303760e01b92820192909252600160201b9091046001600160601b03169190611cdf9083908690611416565b6001600160a01b038116611d9d5760405162461bcd60e51b815260040161058b90613577565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000866001600160601b031611611e215760405162461bcd60e51b815260040161058b906135e7565b81611e3257611e2f85611452565b94505b428511611e515760405162461bcd60e51b815260040161058b906135f7565b6001600160a01b038416611e63578693505b611e6d85856115c0565b6001600160a01b038316611e7f578392505b81611ea5576000611e9563059fa6004201611452565b905080861115611ea3578095505b505b6000611eb185876113b3565b9050611ec0888887898661277b565b6001600160a01b0380861660009081526004602090815260408083208a845290915290205481169085168114611fa757856001600160a01b0316856001600160a01b031614611f3a57886001600160a01b0316866001600160a01b031614611f3a5760405162461bcd60e51b815260040161058b90613647565b6001600160a01b0386811660009081526004602090815260408083208b8452909152902080546001600160a01b031916918716919091179055611f7e818884611c4d565b611fa482896040518060400160405280600381526020016253303360e81b815250611416565b97505b611fb285888a611cee565b846001600160a01b0316816001600160a01b0316876001600160a01b03167fb846dc53d3621f480d692e73f4473156d20f23ff6b2c8237b7130b883226cca98a604051611fff919061352a565b60405180910390a4505050505050505050565b6060808390506060839050606060448251845101036040519080825280601f01601f191660200182016040528015612051576020820181803883390190505b509050806000805b85518110156120aa5785818151811061206e57fe5b602001015160f81c60f81b83838060010194508151811061208b57fe5b60200101906001600160f81b031916908160001a905350600101612059565b5060445b84518110156120ff578481815181106120c357fe5b602001015160f81c60f81b8383806001019450815181106120e057fe5b60200101906001600160f81b031916908160001a9053506001016120ae565b5090979650505050505050565b4390565b60008061211c83611452565b905082811461212e5762127500810192505b5090919050565b6000836001600160601b0316836001600160601b03161115829061216c5760405162461bcd60e51b815260040161058b9190613546565b505050900390565b600061219c436040518060400160405280600481526020016321a8181b60e11b8152506128c4565b905060008363ffffffff161180156121ed57506001600160a01b0385166000908152600a60209081526040808320878452825280832063ffffffff6000198801811685529252909120548282169116145b1561224e576001600160a01b0385166000908152600a602090815260408083208784528252808320600019870163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b038516021790556105ee565b60408051808201825263ffffffff92831681526001600160601b0393841660208083019182526001600160a01b03989098166000818152600a8a528481208982528a5284812088871682528a52848120935184549351909716600160201b02600160201b600160801b031997871663ffffffff19948516179790971696909617909255908452600b875281842095845294909552939020805460019092019093169116179055565b600061231e43604051806040016040528060048152602001634350303360e01b8152506128c4565b905060008363ffffffff1611801561235d5750600084815260116020908152604080832063ffffffff6000198801811685529252909120548282169116145b156123ac576000848152601160209081526040808320600019870163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b0385160217905561067a565b60408051808201825263ffffffff92831681526001600160601b0393841660208083019182526000888152601182528481208887168252825284812093518454935163ffffffff1994851691881691909117600160201b600160801b031916600160201b919098160296909617909255958452601290529091208054909316600190920116179055565b600061245e436040518060400160405280600481526020016321a8189960e11b8152506128c4565b905060008363ffffffff1611801561249d5750600084815260066020908152604080832063ffffffff6000198801811685529252909120548282169116145b156124ec576000848152600660209081526040808320600019870163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b0385160217905561067a565b60408051808201825263ffffffff92831681526001600160601b0393841660208083019182526000888152600682528481208887168252825284812093518454935163ffffffff1994851691881691909117600160201b600160801b031916600160201b919098160296909617909255958452600790529091208054909316600190920116179055565b600061259e43604051806040016040528060048152602001634350303960e01b8152506128c4565b6001600160a01b03861660009081526008602090815260408083208884528252808320600019880163ffffffff9081168552925290912054919250600160201b9091046001600160601b03169084161580159061263457506001600160a01b0386166000908152600860209081526040808320888452825280832063ffffffff6000198901811685529252909120548382169116145b15612695576001600160a01b03861660009081526008602090815260408083208884528252808320600019880163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b0386160217905561273e565b60408051808201825263ffffffff80851682526001600160601b0380871660208085019182526001600160a01b038c166000818152600883528781208d825283528781208c871682528352878120965187549451909516600160201b02600160201b600160801b031995871663ffffffff19958616179590951694909417909555938252600984528482208a835290935292909220805460018801909316929091169190911790555b856001600160a01b03167fc7b38fb25352e6f351f57e2c922f84db5c97e09a6246bbe1d2eedfcdb01c4c62868386604051611114939291906136a2565b8015612823576003546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906127b5908890309089906004016134be565b602060405180830381600087803b1580156127cf57600080fd5b505af11580156127e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128079190810190612b40565b6128235760405162461bcd60e51b815260040161058b90613597565b600061282f84846113b3565b90506128588186604051806040016040528060048152602001630495332360e41b815250611416565b90506128648386611be0565b61286f84848761191d565b612878846119a6565b15612887576128878386611af9565b836001600160a01b03167f0fc5b1bac0416800b42a669229a346b6e5a15db3896339dbdc5fa376e1e4570a868584604051611114939291906136f4565b600081600160201b84106128eb5760405162461bcd60e51b815260040161058b9190613546565b509192915050565b604080518082019091526000808252602082015290565b8035611410816137bf565b8051611410816137bf565b8051611410816137d3565b8035611410816137dc565b8051611410816137dc565b60008083601f84011261295357600080fd5b50813567ffffffffffffffff81111561296b57600080fd5b60208301915083600182028301111561298357600080fd5b9250929050565b8035611410816137e5565b8035611410816137ee565b6000602082840312156129b257600080fd5b60006129be848461290a565b949350505050565b600080604083850312156129d957600080fd5b60006129e5858561290a565b92505060206129f68582860161292b565b9150509250929050565b600080600080600060808688031215612a1857600080fd5b6000612a24888861290a565b9550506020612a358882890161292b565b9450506040612a468882890161290a565b935050606086013567ffffffffffffffff811115612a6357600080fd5b612a6f88828901612941565b92509250509295509295909350565b600080600060608486031215612a9357600080fd5b6000612a9f868661290a565b9350506020612ab08682870161292b565b9250506040612ac18682870161298a565b9150509250925092565b600080600080600060a08688031215612ae357600080fd5b6000612aef888861290a565b9550506020612b0088828901612995565b9450506040612b118882890161292b565b9350506060612b228882890161290a565b9250506080612b338882890161290a565b9150509295509295909350565b600060208284031215612b5257600080fd5b60006129be8484612920565b600060208284031215612b7057600080fd5b60006129be848461292b565b600080600060608486031215612b9157600080fd5b6000612b9d8686612936565b9350506020612bae86828701612915565b9250506040612ac186828701612936565b60008060408385031215612bd257600080fd5b60006129e5858561292b565b60008060008060008060c08789031215612bf757600080fd5b6000612c03898961292b565b9650506020612c1489828a0161292b565b9550506040612c2589828a0161292b565b9450506060612c3689828a0161292b565b9350506080612c4789828a0161290a565b92505060a0612c5889828a0161290a565b9150509295509295509295565b60008060408385031215612c7857600080fd5b6000612c84858561292b565b92505060206129f68582860161298a565b60008060008060808587031215612cab57600080fd5b6000612cb78787612995565b9450506020612cc88782880161292b565b9350506040612cd98782880161290a565b9250506060612cea8782880161290a565b91505092959194509250565b6000612d028383612e52565b505060200190565b6000612d028383612e49565b6000612d028383613437565b612d2b81613760565b82525050565b612d2b81613715565b6000612d4582613708565b612d4f818561370c565b9350612d5a83613702565b8060005b83811015612d88578151612d728882612cf6565b9750612d7d83613702565b925050600101612d5e565b509495945050505050565b6000612d9e82613708565b612da8818561370c565b9350612db383613702565b8060005b83811015612d88578151612dcb8882612d0a565b9750612dd683613702565b925050600101612db7565b6000612dec82613708565b612df6818561370c565b9350612e0183613702565b8060005b83811015612d88578151612e198882612d16565b9750612e2483613702565b925050600101612e05565b612d2b81613720565b612d2b612e4482613725565b61372f565b612d2b8161372f565b612d2b81613732565b6000612e6783856107fe565b9350612e7483858461377d565b50500190565b6000612e8582613708565b612e8f81856107fe565b9350612e9f818560208601613789565b9290920192915050565b612d2b81613767565b6000612ebd82613708565b612ec7818561370c565b9350612ed7818560208601613789565b612ee0816137b5565b9093019392505050565b6000612ef7601d8361370c565b7f74696d657374616d70203c20636f6e7472616374206372656174696f6e000000815260200192915050565b6000612f3060308361370c565b7f72656365697665417070726f76616c3a205472616e73616374696f6e2065786581526f31baba34b7b7103932bb32b93a32b21760811b602082015260400192915050565b6000612f8260268361370c565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000612fca60108361370c565b6f24b73b30b634b210323ab930ba34b7b760811b815260200192915050565b6000612ff660238361370c565b7f53686f756c64207472616e7366657220746f6b656e73207375636365737366758152626c6c7960e81b602082015260400192915050565b600061303b60158361370c565b741b595d1a1bd9081a5cc81b9bdd08185b1b1bddd959605a1b815260200192915050565b600061306c600e8361370c565b6d125b9d985b1a5908185b5bdd5b9d60921b815260200192915050565b600061309660218361370c565b7f6e6f207374616b65732074696c6c207468652070726576206c6f636b206461748152606560f81b602082015260400192915050565b60006130d9600f8361370c565b6e0e6cadcc8cae440dad2e6dac2e8c6d608b1b815260200192915050565b600061310460208361370c565b7f616d6f756e74206e6565647320746f20626520626967676572207468616e2030815260200192915050565b600061313d60378361370c565b7f5374616b696e673a3a5f74696d657374616d70546f4c6f636b446174653a207381527f74616b696e6720706572696f6420746f6f2073686f7274000000000000000000602082015260400192915050565b600061319c6043836107fe565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000613207600c8361370c565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b600061322f60178361370c565b7f496e76616c696420696e74657276616c206c656e677468000000000000000000815260200192915050565b6000613268600e8361370c565b6d1b9bdd0819195d195c9b5a5b995960921b815260200192915050565b6000613292602f8361370c565b7f63616e6e6f74206265206d696e656420696e207468652073616d6520626c6f6381526e6b206173206c617374207374616b6560881b602082015260400192915050565b60006132e3604b836107fe565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206c6f636b446174652c75696e74323536206e6f6e63652c75696e7460208201526a323536206578706972792960a81b6040820152604b0192915050565b600061335660348361370c565b7f4f6e6c79207374616b65466f72206163636f756e7420697320616c6c6f77656481527320746f206368616e67652064656c65676174656560601b602082015260400192915050565b60006133ac601e8361370c565b7f6d75737420696e637265617365207374616b696e67206475726174696f6e0000815260200192915050565b60006133e5600f8361370c565b6e0c2dadeeadce840dad2e6dac2e8c6d608b1b815260200192915050565b600061341060068361370c565b651c185d5cd95960d21b815260200192915050565b612d2b8161374b565b612d2b81613772565b612d2b81613754565b600061344c8286612e38565b601c8201915061345d828486612e5b565b95945050505050565b6000610c998284612e7a565b60006114108261318f565b6000611410826132d6565b602081016114108284612d31565b606081016134a48286612d22565b6134b16020830185612d31565b6129be6040830184612e49565b606081016134cc8286612d31565b6134d96020830185612d31565b6129be604083018461342e565b60208082528101610c998184612d3a565b604080825281016135088185612d93565b905081810360208301526129be8184612de1565b602081016114108284612e2f565b602081016114108284612e49565b602081016114108284612ea9565b60208082528101610c998184612eb2565b602080825281016107fb81612eea565b602080825281016107fb81612f23565b602080825281016107fb81612f75565b602080825281016107fb81612fbd565b602080825281016107fb81612fe9565b602080825281016107fb8161302e565b602080825281016107fb8161305f565b602080825281016107fb81613089565b602080825281016107fb816130cc565b602080825281016107fb816130f7565b602080825281016107fb81613130565b602080825281016107fb816131fa565b602080825281016107fb81613222565b602080825281016107fb8161325b565b602080825281016107fb81613285565b602080825281016107fb81613349565b602080825281016107fb8161339f565b602080825281016107fb816133d8565b602080825281016107fb81613403565b606081016136958286612e49565b6134d96020830185612e49565b606081016136b08286612e49565b6134d9602083018561342e565b602081016114108284613425565b604081016136d98285613425565b610c996020830184613437565b602081016114108284613437565b60608101613695828661342e565b60200190565b5190565b90815260200190565b60006107fb8261373f565b151590565b63ffffffff191690565b90565b6001600160e01b03191690565b6001600160a01b031690565b63ffffffff1690565b6001600160601b031690565b60006107fb825b60006107fb82613715565b60006107fb82613754565b82818337506000910152565b60005b838110156137a457818101518382015260200161378c565b8381111561067a5750506000910152565b601f01601f191690565b6137c881613715565b811461115157600080fd5b6137c881613720565b6137c88161372f565b6137c88161374b565b6137c88161375456fea365627a7a7231582004f50d99759a163e42414664d6467d6ab39e7362597542c493d53cfbb0257a5e6c6578706572696d656e74616cf564736f6c63430005110040",
    "devdoc": {
        "methods": {
            "balanceOf(address)": {
                "details": "Iterate checkpoints adding up stakes.",
                "params": {
                    "account": "The address of the account to get the balance of."
                },
                "return": "The number of tokens held."
            },
            "extendStakingDuration(uint256,uint256)": {
                "params": {
                    "previousLock": "The old unlocking timestamp.",
                    "until": "The new unlocking timestamp in seconds."
                }
            },
            "getCurrentStakedUntil(uint256)": {
                "params": {
                    "lockedTS": "The timestamp to get the staked tokens for."
                }
            },
            "getStakes(address)": {
                "params": {
                    "account": "The address to get stakes."
                },
                "return": "The arrays of dates and stakes."
            },
            "isOwner()": {
                "details": "Returns true if the caller is the current owner."
            },
            "owner()": {
                "details": "Returns the address of the current owner."
            },
            "receiveApproval(address,uint256,address,bytes)": {
                "params": {
                    "_data": "The data will be used for low level call."
                }
            },
            "stake(uint96,uint256,address,address)": {
                "params": {
                    "amount": "The number of tokens to stake.",
                    "delegatee": "The address of the delegatee or 0x0 if there is none.",
                    "stakeFor": "The address to stake the tokens for or 0x0 if staking for oneself.",
                    "until": "Timestamp indicating the date until which to stake."
                }
            },
            "stakeBySchedule(uint256,uint256,uint256,uint256,address,address)": {
                "params": {
                    "amount": "The amount of tokens to stake.",
                    "cliff": "The time interval to the first withdraw.",
                    "delegatee": "The address of the delegatee or 0x0 if there is none.",
                    "duration": "The staking duration.",
                    "intervalLength": "The length of each staking interval when cliff passed.",
                    "stakeFor": "The address to stake the tokens for or 0x0 if staking for oneself."
                }
            },
            "stakeWithApproval(address,uint96,uint256,address,address)": {
                "details": "This function will be invoked from receiveApprovalSOV.approveAndCall -> this.receiveApproval -> this.stakeWithApproval",
                "params": {
                    "amount": "The number of tokens to stake.",
                    "delegatee": "The address of the delegatee or 0x0 if there is none.",
                    "sender": "The sender of SOV.approveAndCall",
                    "stakeFor": "The address to stake the tokens for or 0x0 if staking for oneself.",
                    "until": "Timestamp indicating the date until which to stake."
                }
            },
            "stakesBySchedule(uint256,uint256,uint256,uint256,address,address)": {
                "details": "DO NOT USE this misspelled function. Use stakeBySchedule function instead. This function cannot be deprecated while we have non-upgradeable vesting contracts."
            },
            "timestampToLockDate(uint256)": {
                "params": {
                    "timestamp": "The unlocking timestamp."
                },
                "return": "The actual unlocking date (might be up to 2 weeks shorter than intended)."
            },
            "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            }
        },
        "title": "Staking contract staking functionality module"
    },
    "userdoc": {
        "methods": {
            "balanceOf(address)": {
                "notice": "Get the number of staked tokens held by the user account."
            },
            "extendStakingDuration(uint256,uint256)": {
                "notice": "Extend the staking duration until the specified date."
            },
            "getCurrentStakedUntil(uint256)": {
                "notice": "Get the current number of tokens staked for a day."
            },
            "getStakes(address)": {
                "notice": "Get list of stakes for a user account."
            },
            "receiveApproval(address,uint256,address,bytes)": {
                "notice": "Receives approval from SOV token."
            },
            "stake(uint96,uint256,address,address)": {
                "notice": "Stake the given amount for the given duration of time."
            },
            "stakeBySchedule(uint256,uint256,uint256,uint256,address,address)": {
                "notice": "Stake tokens according to the vesting schedule."
            },
            "stakeWithApproval(address,uint96,uint256,address,address)": {
                "notice": "Stake the given amount for the given duration of time."
            },
            "timestampToLockDate(uint256)": {
                "notice": "Unstaking is possible every 2 weeks only. This means, to calculate the key value for the staking checkpoints, we need to map the intended timestamp to the closest available date."
            }
        },
        "notice": "Implements staking functionality*"
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 56900,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
            },
            {
                "astId": 26435,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "kickoffTS",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
            },
            {
                "astId": 26438,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "name",
                "offset": 0,
                "slot": "2",
                "type": "t_string_storage"
            },
            {
                "astId": 26440,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "SOVToken",
                "offset": 0,
                "slot": "3",
                "type": "t_contract(IERC20)35959"
            },
            {
                "astId": 26446,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "delegates",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
            },
            {
                "astId": 26449,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "allUnlocked",
                "offset": 0,
                "slot": "5",
                "type": "t_bool"
            },
            {
                "astId": 26461,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "newStakingContract",
                "offset": 1,
                "slot": "5",
                "type": "t_address"
            },
            {
                "astId": 26472,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "totalStakingCheckpoints",
                "offset": 0,
                "slot": "6",
                "type": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)26466_storage))"
            },
            {
                "astId": 26476,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "numTotalStakingCheckpoints",
                "offset": 0,
                "slot": "7",
                "type": "t_mapping(t_uint256,t_uint32)"
            },
            {
                "astId": 26484,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "delegateStakingCheckpoints",
                "offset": 0,
                "slot": "8",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)26466_storage)))"
            },
            {
                "astId": 26490,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "numDelegateStakingCheckpoints",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint32))"
            },
            {
                "astId": 26498,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "userStakingCheckpoints",
                "offset": 0,
                "slot": "10",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)26466_storage)))"
            },
            {
                "astId": 26504,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "numUserStakingCheckpoints",
                "offset": 0,
                "slot": "11",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint32))"
            },
            {
                "astId": 26508,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "nonces",
                "offset": 0,
                "slot": "12",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 26510,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "feeSharing",
                "offset": 0,
                "slot": "13",
                "type": "t_contract(IFeeSharingCollector)15409"
            },
            {
                "astId": 26513,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "weightScaling",
                "offset": 20,
                "slot": "13",
                "type": "t_uint96"
            },
            {
                "astId": 26517,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "vestingWhitelist",
                "offset": 0,
                "slot": "14",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 26521,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "admins",
                "offset": 0,
                "slot": "15",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 26525,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "vestingCodeHashes",
                "offset": 0,
                "slot": "16",
                "type": "t_mapping(t_bytes32,t_bool)"
            },
            {
                "astId": 26531,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "vestingCheckpoints",
                "offset": 0,
                "slot": "17",
                "type": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)26466_storage))"
            },
            {
                "astId": 26535,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "numVestingCheckpoints",
                "offset": 0,
                "slot": "18",
                "type": "t_mapping(t_uint256,t_uint32)"
            },
            {
                "astId": 26537,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "vestingRegistryLogic",
                "offset": 0,
                "slot": "19",
                "type": "t_contract(IVestingRegistry)28814"
            },
            {
                "astId": 26541,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "pausers",
                "offset": 0,
                "slot": "20",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 26543,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "paused",
                "offset": 0,
                "slot": "21",
                "type": "t_bool"
            },
            {
                "astId": 26545,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "frozen",
                "offset": 1,
                "slot": "21",
                "type": "t_bool"
            },
            {
                "astId": 26547,
                "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                "label": "maxVestingWithdrawIterations",
                "offset": 0,
                "slot": "22",
                "type": "t_uint256"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
            },
            "t_contract(IERC20)35959": {
                "encoding": "inplace",
                "label": "contract IERC20",
                "numberOfBytes": "20"
            },
            "t_contract(IFeeSharingCollector)15409": {
                "encoding": "inplace",
                "label": "contract IFeeSharingCollector",
                "numberOfBytes": "20"
            },
            "t_contract(IVestingRegistry)28814": {
                "encoding": "inplace",
                "label": "contract IVestingRegistry",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => address))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_address)"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)26466_storage)))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => mapping(uint32 => struct StakingStorageShared.Checkpoint)))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)26466_storage))"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint32))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(uint256 => uint32))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint256,t_uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_bytes32,t_bool)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_uint256,t_address)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
            },
            "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)26466_storage))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(uint32 => struct StakingStorageShared.Checkpoint))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint32,t_struct(Checkpoint)26466_storage)"
            },
            "t_mapping(t_uint256,t_uint32)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => uint32)",
                "numberOfBytes": "32",
                "value": "t_uint32"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)26466_storage)": {
                "encoding": "mapping",
                "key": "t_uint32",
                "label": "mapping(uint32 => struct StakingStorageShared.Checkpoint)",
                "numberOfBytes": "32",
                "value": "t_struct(Checkpoint)26466_storage"
            },
            "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)26466_storage": {
                "encoding": "inplace",
                "label": "struct StakingStorageShared.Checkpoint",
                "members": [
                    {
                        "astId": 26463,
                        "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                        "label": "fromBlock",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint32"
                    },
                    {
                        "astId": 26465,
                        "contract": "contracts/governance/Staking/modules/StakingStakeModule.sol:StakingStakeModule",
                        "label": "stake",
                        "offset": 4,
                        "slot": "0",
                        "type": "t_uint96"
                    }
                ],
                "numberOfBytes": "32"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            },
            "t_uint32": {
                "encoding": "inplace",
                "label": "uint32",
                "numberOfBytes": "4"
            },
            "t_uint96": {
                "encoding": "inplace",
                "label": "uint96",
                "numberOfBytes": "12"
            }
        }
    }
}
