{
    "address": "0x7591844Ce1B7cB5A6eC207455fC7c68EAf93b7AA",
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "caller",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "loanPoolToken",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint32",
            "name": "maxCheckpoints",
            "type": "uint32"
          }
        ],
        "name": "DividendsCollected",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "caller",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "newStakingContract",
            "type": "address"
          }
        ],
        "name": "MigratedToNewStakingContract",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "caller",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "TokensStaked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "caller",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "startFrom",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "end",
            "type": "uint256"
          }
        ],
        "name": "TokensWithdrawn",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "caller",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "delegatee",
            "type": "address"
          }
        ],
        "name": "VotesDelegated",
        "type": "event"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "SOV",
        "outputs": [
          {
            "internalType": "contract IERC20",
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "cliff",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "internalType": "address",
            "name": "_loanPoolToken",
            "type": "address"
          },
          {
            "internalType": "uint32",
            "name": "_maxCheckpoints",
            "type": "uint32"
          },
          {
            "internalType": "address",
            "name": "_receiver",
            "type": "address"
          }
        ],
        "name": "collectDividends",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "internalType": "address",
            "name": "_delegatee",
            "type": "address"
          }
        ],
        "name": "delegate",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "duration",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "endDate",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "feeSharingCollector",
        "outputs": [
          {
            "internalType": "contract IFeeSharingCollector",
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "isOwner",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "migrateToNewStakingContract",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "internalType": "address",
            "name": "_sender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          }
        ],
        "name": "receiveApproval",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "stakeTokens",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "internalType": "address",
            "name": "_sender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "stakeTokensWithApproval",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "staking",
        "outputs": [
          {
            "internalType": "contract IStaking",
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "startDate",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "tokenOwner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "name": "withdrawTokens",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "startFrom",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "maxWithdrawIterations",
            "type": "uint256"
          }
        ],
        "name": "withdrawTokensStartingFrom",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "transactionHash": "0x883e20e13af56b53a72fb37f026aeabb9052a26985d63a4682b70ecbb05995eb",
    "receipt": {
      "to": null,
      "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
      "contractAddress": "0x7591844Ce1B7cB5A6eC207455fC7c68EAf93b7AA",
      "transactionIndex": 0,
      "gasUsed": "1958750",
      "logsBloom": "0x
      "blockHash": "0xdf0e8a7362e338129d45882595ed2276d17b3910072cc97b76bcca57e1676a67",
      "transactionHash": "0x883e20e13af56b53a72fb37f026aeabb9052a26985d63a4682b70ecbb05995eb",
      "logs": [
        {
          "transactionIndex": 0,
          "blockNumber": 5982790,
          "transactionHash": "0x883e20e13af56b53a72fb37f026aeabb9052a26985d63a4682b70ecbb05995eb",
          "address": "0x7591844Ce1B7cB5A6eC207455fC7c68EAf93b7AA",
          "topics": [
            "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x00000000000000000000000013be55487d37fe3c66ee7305e1e9c1ac85de75ae"
          ],
          "data": "0x",
          "logIndex": 0,
          "blockHash": "0xdf0e8a7362e338129d45882595ed2276d17b3910072cc97b76bcca57e1676a67"
        }
      ],
      "blockNumber": 5982790,
      "cumulativeGasUsed": "1958750",
      "status": 1,
      "byzantium": true
    },
    "args": [],
    "numDeployments": 1,
    "solcInputHash": "aca886878e9e0827277d5a4711a5589b",
    "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanPoolToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxCheckpoints\",\"type\":\"uint32\"}],\"name\":\"DividendsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStakingContract\",\"type\":\"address\"}],\"name\":\"MigratedToNewStakingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"VotesDelegated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOV\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanPoolToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_maxCheckpoints\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"collectDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeSharingCollector\",\"outputs\":[{\"internalType\":\"contract IFeeSharingCollector\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrateToNewStakingContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokensWithApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdrawIterations\",\"type\":\"uint256\"}],\"name\":\"withdrawTokensStartingFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Deployed by a VestingFactory contract.\",\"methods\":{\"collectDividends(address,uint32,address)\":{\"params\":{\"_loanPoolToken\":\"The loan pool token address.\",\"_maxCheckpoints\":\"Maximum number of checkpoints to be processed.\",\"_receiver\":\"The receiver of tokens or msg.sender\"}},\"delegate(address)\":{\"params\":{\"_delegatee\":\"The address to delegate votes to.\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveApproval(address,uint256,address,bytes)\":{\"params\":{\"_data\":\"The data will be used for low level call.\"}},\"stakeTokens(uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to stake.\"}},\"stakeTokensWithApproval(address,uint256)\":{\"details\":\"This function will be invoked from receiveApproval.SOV.approveAndCall -> this.receiveApproval -> this.stakeTokensWithApproval\",\"params\":{\"_amount\":\"The amount of tokens to stake.\",\"_sender\":\"The sender of SOV.approveAndCall\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawTokens(address)\":{\"params\":{\"receiver\":\"The receiving address.\"}},\"withdrawTokensStartingFrom(address,uint256,uint256)\":{\"params\":{\"maxWithdrawIterations\":\"max withdrawal iteration to work around block gas limit issue.\",\"receiver\":\"The receiving address.\",\"startFrom\":\"The start value for the iterations.\"}}},\"title\":\"Vesting Logic contract.\"},\"userdoc\":{\"methods\":{\"collectDividends(address,uint32,address)\":{\"notice\":\"Collect dividends from fee sharing proxy.\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` which are locked until lockDate to `delegatee`.\"},\"migrateToNewStakingContract()\":{\"notice\":\"Allows the owners to migrate the positions to a new staking contract.\"},\"receiveApproval(address,uint256,address,bytes)\":{\"notice\":\"Receives approval from SOV token.\"},\"stakeTokens(uint256)\":{\"notice\":\"Stakes tokens according to the vesting schedule.\"},\"stakeTokensWithApproval(address,uint256)\":{\"notice\":\"Stakes tokens according to the vesting schedule.\"},\"withdrawTokens(address)\":{\"notice\":\"Withdraws unlocked tokens from the staking contract and forwards them to an address specified by the token owner.\"},\"withdrawTokensStartingFrom(address,uint256,uint256)\":{\"notice\":\"Withdraws unlocked tokens partially (based on the max withdraw iteration that has been set) from the staking contract and forwards them to an address specified by the token owner.\"}},\"notice\":\"Staking, delegating and withdrawal functionality.\"}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Vesting/VestingLogic.sol\":\"VestingLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/governance/ApprovalReceiver.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"./ErrorDecoder.sol\\\";\\nimport \\\"../token/IApproveAndCall.sol\\\";\\n\\n/**\\n * @title Base contract for receiving approval from SOV token.\\n */\\ncontract ApprovalReceiver is ErrorDecoder, IApproveAndCall {\\n    modifier onlyThisContract() {\\n        // Accepts calls only from receiveApproval function.\\n        require(msg.sender == address(this), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _data The data will be used for low level call.\\n     */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external {\\n        // Accepts calls only from SOV token.\\n        require(msg.sender == _getToken(), \\\"unauthorized\\\");\\n        require(msg.sender == _token, \\\"unauthorized\\\");\\n\\n        // Only allowed methods.\\n        bool isAllowed = false;\\n        bytes4[] memory selectors = _getSelectors();\\n        bytes4 sig = _getSig(_data);\\n        for (uint256 i = 0; i < selectors.length; i++) {\\n            if (sig == selectors[i]) {\\n                isAllowed = true;\\n                break;\\n            }\\n        }\\n        require(isAllowed, \\\"method is not allowed\\\");\\n\\n        // Check sender and amount.\\n        address sender;\\n        uint256 amount;\\n        (, sender, amount) = abi.decode(\\n            abi.encodePacked(bytes28(0), _data),\\n            (bytes32, address, uint256)\\n        );\\n        require(sender == _sender, \\\"sender mismatch\\\");\\n        require(amount == _amount, \\\"amount mismatch\\\");\\n\\n        _call(_data);\\n    }\\n\\n    /**\\n     * @notice Returns token address, only this address can be a sender for receiveApproval.\\n     * @dev Should be overridden in child contracts, otherwise error will be thrown.\\n     * @return By default, 0x. When overriden, the token address making the call.\\n     */\\n    function _getToken() internal view returns (address) {\\n        return address(0);\\n    }\\n\\n    /**\\n     * @notice Returns list of function selectors allowed to be invoked.\\n     * @dev Should be overridden in child contracts, otherwise error will be thrown.\\n     * @return By default, empty array. When overriden, allowed selectors.\\n     */\\n    function _getSelectors() internal pure returns (bytes4[] memory) {\\n        return new bytes4[](0);\\n    }\\n\\n    /**\\n     * @notice Makes call and reverts w/ enhanced error message.\\n     * @param _data Error message as bytes.\\n     */\\n    function _call(bytes memory _data) internal {\\n        (bool success, bytes memory returnData) = address(this).call(_data);\\n        if (!success) {\\n            if (returnData.length <= ERROR_MESSAGE_SHIFT) {\\n                revert(\\\"receiveApproval: Transaction execution reverted.\\\");\\n            } else {\\n                revert(_addErrorMessage(\\\"receiveApproval: \\\", string(returnData)));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Extracts the called function selector, a hash of the signature.\\n     * @dev The first four bytes of the call data for a function call specifies\\n     * the function to be called. It is the first (left, high-order in big-endian)\\n     * four bytes of the Keccak-256 (SHA-3) hash of the signature of the function.\\n     * Solidity doesn't yet support a casting of byte[4] to bytes4.\\n     * Example:\\n     *  msg.data:\\n     *    0xcdcd77c000000000000000000000000000000000000000000000000000000000000\\n     *    000450000000000000000000000000000000000000000000000000000000000000001\\n     *  selector (or method ID): 0xcdcd77c0\\n     *  signature: baz(uint32,bool)\\n     * @param _data The msg.data from the low level call.\\n     * @return sig First 4 bytes of msg.data i.e. the selector, hash of the signature.\\n     */\\n    function _getSig(bytes memory _data) internal pure returns (bytes4 sig) {\\n        assembly {\\n            sig := mload(add(_data, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfec344456774fa83b0885dd71825ccb6780be8db63c394f3ca09107977c65429\"},\"contracts/governance/ErrorDecoder.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Base contract to properly handle returned data on failed calls\\n * @dev On EVM if the return data length of a call is less than 68,\\n * then the transaction fails silently without a revert message!\\n *\\n * As described in the Solidity documentation\\n * https://solidity.readthedocs.io/en/v0.5.17/control-structures.html#revert\\n * the revert reason is an ABI-encoded string consisting of:\\n * 0x08c379a0 // Function selector (method id) for \\\"Error(string)\\\" signature\\n * 0x0000000000000000000000000000000000000000000000000000000000000020 // Data offset\\n * 0x000000000000000000000000000000000000000000000000000000000000001a // String length\\n * 0x4e6f7420656e6f7567682045746865722070726f76696465642e000000000000 // String data\\n *\\n * Another example, debug data from test:\\n *   0x08c379a0\\n *   0000000000000000000000000000000000000000000000000000000000000020\\n *   0000000000000000000000000000000000000000000000000000000000000034\\n *   54696d656c6f636b3a3a73657444656c61793a2044656c6179206d7573742065\\n *   7863656564206d696e696d756d2064656c61792e000000000000000000000000\\n *\\n * Parsed into:\\n *   Data offset: 20\\n *   Length: 34\\n *   Error message:\\n *     54696d656c6f636b3a3a73657444656c61793a2044656c6179206d7573742065\\n *     7863656564206d696e696d756d2064656c61792e000000000000000000000000\\n */\\ncontract ErrorDecoder {\\n    uint256 constant ERROR_MESSAGE_SHIFT = 68; // EVM silent revert error string length\\n\\n    /**\\n     * @notice Concats two error strings taking into account ERROR_MESSAGE_SHIFT.\\n     * @param str1 First string, usually a hardcoded context written by dev.\\n     * @param str2 Second string, usually the error message from the reverted call.\\n     * @return The concatenated error string\\n     */\\n    function _addErrorMessage(string memory str1, string memory str2)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory bytesStr1 = bytes(str1);\\n        bytes memory bytesStr2 = bytes(str2);\\n        string memory str12 =\\n            new string(bytesStr1.length + bytesStr2.length - ERROR_MESSAGE_SHIFT);\\n        bytes memory bytesStr12 = bytes(str12);\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < bytesStr1.length; i++) {\\n            bytesStr12[j++] = bytesStr1[i];\\n        }\\n        for (uint256 i = ERROR_MESSAGE_SHIFT; i < bytesStr2.length; i++) {\\n            bytesStr12[j++] = bytesStr2[i];\\n        }\\n        return string(bytesStr12);\\n    }\\n}\\n\",\"keccak256\":\"0xa0fa7986924aab574ca9e7c265f8c7bf00671ba1d86dbad143df7c14455f1c6a\"},\"contracts/governance/IFeeSharingCollector.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for contract governance/FeeSharingCollector/FeeSharingCollector.sol\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * */\\ninterface IFeeSharingCollector {\\n    function withdrawFees(address[] calldata _token) external;\\n\\n    function transferTokens(address _token, uint96 _amount) external;\\n\\n    function withdraw(\\n        address _loanPoolToken,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7794cb434d9395ea983dcf8ded48db5b68897a338429320f60172c4caa47fb40\"},\"contracts/governance/Staking/interfaces/IStaking.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Interface for Staking modules governance/Staking/modules\\n */\\n\\ninterface IStaking {\\n    /*************************** StakingAdminModule ***************************/\\n\\n    /**\\n     * @notice Add account to Admins ACL.\\n     * @param _admin The addresses of the account to grant permissions.\\n     * */\\n    function addAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Remove account from Admins ACL.\\n     * @param _admin The addresses of the account to revoke permissions.\\n     * */\\n    function removeAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Add account to pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function addPauser(address _pauser) external;\\n\\n    /**\\n     * @notice Remove account from pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function removePauser(address _pauser) external;\\n\\n    /**\\n     * @notice Pause/unpause contract\\n     * @param _pause true when pausing, false when unpausing\\n     * */\\n    function pauseUnpause(bool _pause) external;\\n\\n    /**\\n     * @notice Freeze contract - disable all functions\\n     * @param _freeze true when freezing, false when unfreezing\\n     * @dev When freezing, pause is always applied too. When unfreezing, the contract is left in paused stated.\\n     * */\\n    function freezeUnfreeze(bool _freeze) external;\\n\\n    /**\\n     * @notice Allows the owner to set a fee sharing proxy contract.\\n     * We need it for unstaking with slashing.\\n     * @param _feeSharing The address of FeeSharingCollectorProxy contract.\\n     * */\\n    function setFeeSharing(address _feeSharing) external;\\n\\n    /**\\n     * @notice Allow the owner to set weight scaling.\\n     * We need it for unstaking with slashing.\\n     * @param _weightScaling The weight scaling.\\n     * */\\n    function setWeightScaling(uint96 _weightScaling) external;\\n\\n    /**\\n     * @notice Allow the owner to set a new staking contract.\\n     * As a consequence it allows the stakers to migrate their positions\\n     * to the new contract.\\n     * @dev Doesn't have any influence as long as migrateToNewStakingContract\\n     * is not implemented.\\n     * @param _newStakingContract The address of the new staking contract.\\n     * */\\n    function setNewStakingContract(address _newStakingContract) external;\\n\\n    /**\\n     * @notice Allow a staker to migrate his positions to the new staking contract.\\n     * @dev Staking contract needs to be set before by the owner.\\n     * Currently not implemented, just needed for the interface.\\n     *      In case it's needed at some point in the future,\\n     *      the implementation needs to be changed first.\\n     * */\\n    function migrateToNewStakingContract() external; // dummy - not implemented as of now\\n\\n    /*************************** StakingGovernanceModule ***************************/\\n\\n    /**\\n     * @notice Compute the total voting power at a given time.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @param time The timestamp for which to calculate the total voting power.\\n     * @return The total voting power at the given time.\\n     * */\\n    function getPriorTotalVotingPower(uint32 blockNumber, uint256 time)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Get the current votes balance for a user account.\\n     * @param account The address to get votes balance.\\n     * @dev This is a wrapper to simplify arguments. The actual computation is\\n     * performed on WeightedStaking parent contract.\\n     * @return The number of current votes for a user account.\\n     * */\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of votes for a delegatee as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will revert\\n     * to prevent misinformation.\\n     *      Used for Voting, not for fee sharing.\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The number of votes the delegatee had as of the given block.\\n     * */\\n    function getPriorVotes(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The staking date to compute the power for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorStakeByDateForDelegatee(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an unlocking date as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * TODO: WeightedStaking::getPriorTotalStakesForDate should probably better\\n     * be internal instead of a public function.\\n     * @param date The date to check the stakes for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorTotalStakesForDate(uint256 date, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` which are locked until lockDate to `delegatee`.\\n     * @param delegatee The address to delegate votes to.\\n     * @param lockDate the date if the position to delegate.\\n     * */\\n    function delegate(address delegatee, uint256 lockDate) external;\\n\\n    /*************************** StakingStakeModule ***************************/\\n\\n    event TokensStaked(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 lockedUntil,\\n        uint256 totalStaked\\n    );\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stake(\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @dev This function will be invoked from receiveApproval\\n     * @dev SOV.approveAndCall -> this.receiveApproval -> this.stakeWithApproval\\n     * @param sender The sender of SOV.approveAndCall\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeWithApproval(\\n        address sender,\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _data The data will be used for low level call.\\n     */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Extend the staking duration until the specified date.\\n     * @param previousLock The old unlocking timestamp.\\n     * @param until The new unlocking timestamp in seconds.\\n     * */\\n    function extendStakingDuration(uint256 previousLock, uint256 until) external;\\n\\n    /**\\n     * @dev DO NOT USE this misspelled function. Use stakeBySchedule function instead.\\n     * This function cannot be deprecated while we have non-upgradeable vesting contracts.\\n     * */\\n    function stakesBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Stake tokens according to the vesting schedule.\\n     * @param amount The amount of tokens to stake.\\n     * @param cliff The time interval to the first withdraw.\\n     * @param duration The staking duration.\\n     * @param intervalLength The length of each staking interval when cliff passed.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Get the number of staked tokens held by the user account.\\n     * @dev Iterate checkpoints adding up stakes.\\n     * @param account The address of the account to get the balance of.\\n     * @return The number of tokens held.\\n     * */\\n    function balanceOf(address account) external view returns (uint96 balance);\\n\\n    /**\\n     * @notice Get the current number of tokens staked for a day.\\n     * @param lockedTS The timestamp to get the staked tokens for.\\n     * */\\n    function getCurrentStakedUntil(uint256 lockedTS) external view returns (uint96);\\n\\n    /**\\n     * @notice Get list of stakes for a user account.\\n     * @param account The address to get stakes.\\n     * @return The arrays of dates and stakes.\\n     * */\\n    function getStakes(address account)\\n        external\\n        view\\n        returns (uint256[] memory dates, uint96[] memory stakes);\\n\\n    /**\\n     * @notice Unstaking is possible every 2 weeks only. This means, to\\n     * calculate the key value for the staking checkpoints, we need to\\n     * map the intended timestamp to the closest available date.\\n     * @param timestamp The unlocking timestamp.\\n     * @return The actual unlocking date (might be up to 2 weeks shorter than intended).\\n     * */\\n    function timestampToLockDate(uint256 timestamp) external view returns (uint256);\\n\\n    /*************************** StakingStorageModule ***************************/\\n\\n    /// @notice The maximum duration to stake tokens\\n    /// @return MAX_DURATION to stake tokens\\n    function getStorageMaxDurationToStakeTokens() external pure returns (uint256);\\n\\n    /// @notice The maximum possible voting weight before adding +1 (actually 10, but need 9 for computation).\\n    /// @return uint256(MAX_VOTING_WEIGHT);\\n    function getStorageMaxVotingWeight() external pure returns (uint256);\\n\\n    /// @notice weight is multiplied with this factor (for allowing decimals, like 1.2x).\\n    /// @dev MAX_VOTING_WEIGHT * WEIGHT_FACTOR needs to be < 792, because there are 100,000,000 SOV with 18 decimals\\n    /// @return uint256(WEIGHT_FACTOR);\\n    function getStorageWeightFactor() external pure returns (uint256);\\n\\n    /// @return uint256(DEFAULT_WEIGHT_SCALING);\\n    function getStorageDefaultWeightScaling() external pure returns (uint256);\\n\\n    /// @notice return (uint256(MIN_WEIGHT_SCALING), uint256(MAX_WEIGHT_SCALING))\\n    function getStorageRangeForWeightScaling()\\n        external\\n        pure\\n        returns (uint256 minWeightScaling, uint256 maxWeightScaling);\\n\\n    /// @notice The EIP-712 typehash for the contract's domain.\\n    /// @return uint256(DOMAIN_TYPEHASH);\\n    function getStorageDomainTypehash() external pure returns (uint256);\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\\n    /// @return uint256(DELEGATION_TYPEHASH);\\n    function getStorageDelegationTypehash() external pure returns (uint256);\\n\\n    /// @return name;\\n    function getStorageName() external view returns (string memory);\\n\\n    /// AUTOGENERATED FUNCTIONS FROM THE STAKING STORAGE PUBLIC VARIABLES ///\\n\\n    /// @notice The timestamp of contract creation. Base for the staking period calculation.\\n    function kickoffTS() external view returns (uint256);\\n\\n    /// @notice The token to be staked\\n    function SOVToken() external view returns (address);\\n\\n    /// @notice Stakers delegated voting power\\n    /// @param staker - the delegating address\\n    /// @param until - delegated voting\\n    /// @return _delegate - voting power delegated to address\\n    function delegates(address staker, uint256 until) external view returns (address _delegate);\\n\\n    /// @notice If this flag is set to true, all tokens are unlocked immediately\\n    /// see function unlockAllTokens() for details\\n    function allUnlocked() external view returns (bool);\\n\\n    /// @notice Used for stake migrations to a new staking contract with a different storage structure\\n    function newStakingContract() external view returns (address);\\n\\n    /// CHECKPOINTS\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 stake;\\n    }\\n\\n    /// @notice A record of tokens to be unstaked at a given time in total.\\n    /// For total voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev totalStakingCheckpoints[date][index] is a checkpoint\\n    function totalStakingCheckpoints(uint256 date, uint32 index)\\n        external\\n        view\\n        returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date.\\n    /// @dev numTotalStakingCheckpoints[date] is a number.\\n    function numTotalStakingCheckpoints(uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which were delegated to a certain address.\\n    /// For delegatee voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev delegateStakingCheckpoints[delegatee][date][index] is a checkpoint.\\n    function delegateStakingCheckpoints(\\n        address delagatee,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per delegate.\\n    /// @dev numDelegateStakingCheckpoints[delegatee][date] is a number.\\n    function numDelegateStakingCheckpoints(address delegatee, uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which per user address (address -> lockDate -> stake checkpoint)\\n    /// @dev userStakingCheckpoints[user][date][index] is a checkpoint.\\n    function userStakingCheckpoints(\\n        address user,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per user.\\n    /// @dev numUserStakingCheckpoints[user][date] is a number\\n    function numUserStakingCheckpoints(address user, uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of states for signing / validating signatures\\n    /// @dev nonces[user] is a number.\\n    function nonces(address user) external view returns (uint256 nonce);\\n\\n    /// SLASHING ///\\n\\n    /// @notice the address of FeeSharingCollectorProxy contract, we need it for unstaking with slashing.\\n    function feeSharing() external view returns (address);\\n\\n    /// @notice used for weight scaling when unstaking with slashing.\\n    /// @return uint96 DEFAULT_WEIGHT_SCALING\\n    function weightScaling() external view returns (uint96);\\n\\n    /// @notice List of vesting contracts, tokens for these contracts won't be slashed if unstaked by governance.\\n    /// @dev vestingWhitelist[contract] is true/false.\\n    function vestingWhitelist(address isWhitelisted) external view returns (bool);\\n\\n    /// @dev user => flag whether user has admin role.\\n    /// @dev multisig should be an admin, admin can invoke only governanceWithdrawVesting function,\\n    /// \\tthis function works only with Team Vesting contracts\\n    function admins(address isAdmin) external view returns (bool);\\n\\n    /// @dev vesting contract code hash => flag whether it's registered code hash\\n    function vestingCodeHashes(bytes32 vestingLogicCodeHash) external view returns (bool);\\n\\n    /// @notice A record of tokens to be unstaked from vesting contract at a given time (lockDate -> vest checkpoint)\\n    /// @dev vestingCheckpoints[date][index] is a checkpoint.\\n    function vestingCheckpoints(uint256 date, uint32 index)\\n        external\\n        view\\n        returns (Checkpoint memory);\\n\\n    /// @notice The number of total vesting checkpoints for each date.\\n    /// @dev numVestingCheckpoints[date] is a number.\\n    function numVestingCheckpoints(uint256 date) external view returns (uint32 checkpointsQty);\\n\\n    ///@notice vesting registry contract PROXY address\\n    function vestingRegistryLogic() external view returns (address);\\n\\n    /// @dev user => flag whether user has pauser role.\\n    function pausers(address isPauser) external view returns (bool);\\n\\n    /// @dev Staking contract is paused\\n    function paused() external view returns (bool);\\n\\n    /// @dev Staking contract is frozen\\n    function frozen() external view returns (bool);\\n\\n    /*************************** StakingVestingModule ***************************/\\n\\n    event VestingStakeSet(uint256 lockedTS, uint96 value);\\n\\n    /**\\n     * @notice Return flag whether the given address is a registered vesting contract.\\n     * @param stakerAddress the address to check\\n     */\\n    function isVestingContract(address stakerAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Remove vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function removeContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Add vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function addContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Determine the prior number of vested stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorVestingStakeByDate(uint256 date, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * @param date The staking date to compute the power for. Adjusted to the next valid lock date, if necessary.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedVestingStakeByDate(\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Determine the prior weighted vested amount for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     * TODO: WeightedStaking::getPriorVestingWeightedStake is using the variable name \\\"votes\\\"\\n     * to add up token stake, and that could be misleading.\\n     *\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorVestingWeightedStake(uint256 blockNumber, uint256 date)\\n        external\\n        view\\n        returns (uint96 votes);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorUserStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Sets the users' vesting stakes for a giving lock dates and writes checkpoints.\\n     * @param lockedDates The arrays of lock dates.\\n     * @param values The array of values to add to the staked balance.\\n     */\\n    function setVestingStakes(uint256[] calldata lockedDates, uint96[] calldata values) external;\\n\\n    /**\\n     * @notice sets vesting registry\\n     * @param _vestingRegistryProxy the address of vesting registry proxy contract\\n     * @dev _vestingRegistryProxy can be set to 0 as this function can be reused by\\n     * various other functionalities without the necessity of linking it with Vesting Registry\\n     */\\n    function setVestingRegistry(address _vestingRegistryProxy) external;\\n\\n    /*************************** StakingWithdrawModule ***************************/\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens if they are unlocked.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * */\\n    function withdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting\\n     * @dev **WARNING** This function should not be no longer used by Sovryn Protocol.\\n     * Sovryn protocol will use the cancelTeamVesting function for the withdrawal moving forward.\\n     * */\\n    function governanceWithdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw tokens for vesting contract.\\n     * @param vesting The address of Vesting contract.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting.\\n     * */\\n    function governanceWithdrawVesting(address vesting, address receiver) external;\\n\\n    /**\\n     * @notice Get available and punished amount for withdrawing.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * */\\n    function getWithdrawAmounts(uint96 amount, uint256 until)\\n        external\\n        view\\n        returns (uint96, uint96);\\n\\n    /**\\n     * @notice Allow the owner to unlock all tokens in case the staking contract\\n     * is going to be replaced\\n     * Note: Not reversible on purpose. once unlocked, everything is unlocked.\\n     * The owner should not be able to just quickly unlock to withdraw his own\\n     * tokens and lock again.\\n     * @dev Last resort.\\n     * */\\n    function unlockAllTokens() external;\\n\\n    /*************************** WeightedStakingModule ***************************/\\n\\n    /**\\n     * @notice Determine the prior weighted stake for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     *\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The date/timestamp of the unstaking time.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorWeightedStake(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96 priorWeightedStake);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * TODO: WeightedStaking::weightedStakeByDate should probably better\\n     * be internal instead of a public function.\\n     * @param account The user address.\\n     * @param date The staking date to compute the power for.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Compute the weight for a specific date.\\n     * @param date The unlocking date.\\n     * @param startDate We compute the weight for the tokens staked until 'date' on 'startDate'.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function computeWeightByDate(uint256 date, uint256 startDate)\\n        external\\n        pure\\n        returns (uint96 weight);\\n\\n    /**\\n     * @notice Returns public constant MAX_DURATION\\n     * preserved for backwards compatibility\\n     * Use getStorageMaxDurationToStakeTokens()\\n     * @return uint96 MAX_DURATION for staking\\n     **/\\n    function MAX_DURATION() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() external view returns (bool);\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @notice Governance withdraw vesting directly through staking contract.\\n     * This direct withdraw vesting solves the out of gas issue when there are too many iterations when withdrawing.\\n     * This function only allows cancelling vesting contract of the TeamVesting type.\\n     *\\n     * @param vesting The vesting address.\\n     * @param receiver The receiving address.\\n     * @param startFrom The start value for the iterations.\\n     */\\n    function cancelTeamVesting(\\n        address vesting,\\n        address receiver,\\n        uint256 startFrom\\n    ) external;\\n\\n    /**\\n     * @notice Max iteration for direct withdrawal from staking to prevent out of gas issue.\\n     *\\n     * @return max iteration value.\\n     */\\n    function getMaxVestingWithdrawIterations() external view returns (uint256);\\n\\n    /**\\n     * @dev set max withdraw iterations.\\n     *\\n     * @param maxIterations new max iterations value.\\n     */\\n    function setMaxVestingWithdrawIterations(uint256 maxIterations) external;\\n}\\n\",\"keccak256\":\"0x720bd2cc1042cb4abc2bd3a6839131638eafd3d224571ad9ac21cae36625ec2e\"},\"contracts/governance/Vesting/IVesting.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for Vesting contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * This interface is used by VestingLogic contract to implement stakeTokens function\\n * and on VestingRegistry contract to call IVesting(vesting).stakeTokens function\\n * at a vesting instance.\\n */\\ninterface IVesting {\\n    function duration() external returns (uint256);\\n\\n    function endDate() external returns (uint256);\\n\\n    function stakeTokens(uint256 amount) external;\\n\\n    function tokenOwner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3482a1e27402655f85f5ff2cb06e0876e9bb94e1a63446a09e33babd60274b4b\"},\"contracts/governance/Vesting/VestingLogic.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../Staking/interfaces/IStaking.sol\\\";\\nimport \\\"../IFeeSharingCollector.sol\\\";\\nimport \\\"./IVesting.sol\\\";\\nimport \\\"../ApprovalReceiver.sol\\\";\\nimport \\\"./VestingStorage.sol\\\";\\nimport \\\"../../openzeppelin/SafeMath.sol\\\";\\n\\n/**\\n * @title Vesting Logic contract.\\n * @notice Staking, delegating and withdrawal functionality.\\n * @dev Deployed by a VestingFactory contract.\\n * */\\ncontract VestingLogic is IVesting, VestingStorage, ApprovalReceiver {\\n    using SafeMath for uint256;\\n    /* Events */\\n\\n    event TokensStaked(address indexed caller, uint256 amount);\\n    event VotesDelegated(address indexed caller, address delegatee);\\n    event TokensWithdrawn(\\n        address indexed caller,\\n        address receiver,\\n        uint256 startFrom,\\n        uint256 end\\n    );\\n    event DividendsCollected(\\n        address indexed caller,\\n        address loanPoolToken,\\n        address receiver,\\n        uint32 maxCheckpoints\\n    );\\n    event MigratedToNewStakingContract(address indexed caller, address newStakingContract);\\n\\n    /* Modifiers */\\n\\n    /**\\n     * @dev Throws if called by any account other than the token owner or the contract owner.\\n     */\\n    modifier onlyOwners() {\\n        require(msg.sender == tokenOwner || isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the token owner.\\n     */\\n    modifier onlyTokenOwner() {\\n        require(msg.sender == tokenOwner, \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice Stakes tokens according to the vesting schedule.\\n     * @param _amount The amount of tokens to stake.\\n     * */\\n    function stakeTokens(uint256 _amount) public {\\n        _stakeTokens(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Stakes tokens according to the vesting schedule.\\n     * @dev This function will be invoked from receiveApproval.\\n     * @dev SOV.approveAndCall -> this.receiveApproval -> this.stakeTokensWithApproval\\n     * @param _sender The sender of SOV.approveAndCall\\n     * @param _amount The amount of tokens to stake.\\n     * */\\n    function stakeTokensWithApproval(address _sender, uint256 _amount) public onlyThisContract {\\n        _stakeTokens(_sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Stakes tokens according to the vesting schedule. Low level function.\\n     * @dev Once here the allowance of tokens is taken for granted.\\n     * @param _sender The sender of tokens to stake.\\n     * @param _amount The amount of tokens to stake.\\n     * */\\n    function _stakeTokens(address _sender, uint256 _amount) internal {\\n        /// @dev Maybe better to allow staking unil the cliff was reached.\\n        if (startDate == 0) {\\n            startDate = staking.timestampToLockDate(block.timestamp);\\n        }\\n        endDate = staking.timestampToLockDate(block.timestamp + duration);\\n\\n        /// @dev Transfer the tokens to this contract.\\n        bool success = SOV.transferFrom(_sender, address(this), _amount);\\n        require(success);\\n\\n        /// @dev Allow the staking contract to access them.\\n        SOV.approve(address(staking), _amount);\\n\\n        staking.stakeBySchedule(_amount, cliff, duration, FOUR_WEEKS, address(this), tokenOwner);\\n\\n        emit TokensStaked(_sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` which are locked until lockDate\\n     * to `delegatee`.\\n     * @param _delegatee The address to delegate votes to.\\n     * */\\n    function delegate(address _delegatee) public onlyTokenOwner {\\n        require(_delegatee != address(0), \\\"delegatee address invalid\\\");\\n\\n        /// @dev Withdraw for each unlocked position.\\n        /// @dev Don't change FOUR_WEEKS to TWO_WEEKS, a lot of vestings already deployed with FOUR_WEEKS\\n        ///\\t\\tworkaround found, but it doesn't work with TWO_WEEKS\\n        for (uint256 i = startDate + cliff; i <= endDate; i += FOUR_WEEKS) {\\n            staking.delegate(_delegatee, i);\\n        }\\n        emit VotesDelegated(msg.sender, _delegatee);\\n    }\\n\\n    /**\\n     * @notice Withdraws unlocked tokens from the staking contract and\\n     * forwards them to an address specified by the token owner.\\n     * @param receiver The receiving address.\\n     * */\\n    function withdrawTokens(address receiver) public onlyOwners {\\n        uint256 startFrom = startDate + cliff;\\n        _withdrawTokens(receiver, startFrom, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Withdraws unlocked tokens partially (based on the max withdraw iteration that has been set) from the staking contract and\\n     * forwards them to an address specified by the token owner.\\n     * @param receiver The receiving address.\\n     * @param startFrom The start value for the iterations.\\n     * @param maxWithdrawIterations max withdrawal iteration to work around block gas limit issue.\\n     * */\\n    function withdrawTokensStartingFrom(\\n        address receiver,\\n        uint256 startFrom,\\n        uint256 maxWithdrawIterations\\n    ) public onlyOwners {\\n        uint256 defaultStartFrom = startDate + cliff;\\n\\n        startFrom = _timestampToLockDate(startFrom);\\n        startFrom = startFrom < defaultStartFrom ? defaultStartFrom : startFrom;\\n\\n        // @dev max iterations need to be decreased by 1, otherwise the iteration will always be surplus by 1\\n        uint256 maxWithdrawDate = (startFrom + (FOUR_WEEKS * (maxWithdrawIterations.sub(1))));\\n        uint256 endAt = endDate < maxWithdrawDate ? endDate : maxWithdrawDate;\\n        _withdrawTokens(receiver, startFrom, endAt);\\n    }\\n\\n    /**\\n     * @notice Withdraws tokens from the staking contract and forwards them\\n     * to an address specified by the token owner. Low level function.\\n     * @dev Once here the caller permission is taken for granted.\\n     * @param receiver The receiving address.\\n     * @param startFrom start withdrawal from date.\\n     * @param endAt end time for regular withdrawal\\n     * or just unlocked tokens (false).\\n     * */\\n    function _withdrawTokens(\\n        address receiver,\\n        uint256 startFrom,\\n        uint256 endAt\\n    ) internal {\\n        require(receiver != address(0), \\\"receiver address invalid\\\");\\n\\n        uint96 stake;\\n\\n        /// @dev Usually we just need to iterate over the possible dates until now.\\n        uint256 end;\\n\\n        if (staking.allUnlocked()) {\\n            end = endAt < endDate ? endAt : endDate;\\n        } else {\\n            end = endAt < block.timestamp ? endAt : block.timestamp;\\n            if (end > endDate) end = endDate;\\n        }\\n\\n        /// @dev Withdraw for each unlocked position.\\n        /// @dev Don't change FOUR_WEEKS to TWO_WEEKS, a lot of vestings already deployed with FOUR_WEEKS\\n        ///\\t\\tworkaround found, but it doesn't work with TWO_WEEKS\\n        for (uint256 i = startFrom; i <= end; i += FOUR_WEEKS) {\\n            /// @dev Read amount to withdraw.\\n            stake = staking.getPriorUserStakeByDate(address(this), i, block.number - 1);\\n\\n            /// @dev Withdraw if > 0\\n            if (stake > 0) {\\n                staking.withdraw(stake, i, receiver);\\n            }\\n        }\\n\\n        emit TokensWithdrawn(msg.sender, receiver, startFrom, end);\\n    }\\n\\n    /**\\n     * @notice Collect dividends from fee sharing proxy.\\n     * @param _loanPoolToken The loan pool token address.\\n     * @param _maxCheckpoints Maximum number of checkpoints to be processed.\\n     * @param _receiver The receiver of tokens or msg.sender\\n     * */\\n    function collectDividends(\\n        address _loanPoolToken,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    ) public onlyOwners {\\n        require(_receiver != address(0), \\\"receiver address invalid\\\");\\n\\n        /// @dev Invokes the fee sharing proxy.\\n        feeSharingCollector.withdraw(_loanPoolToken, _maxCheckpoints, _receiver);\\n\\n        emit DividendsCollected(msg.sender, _loanPoolToken, _receiver, _maxCheckpoints);\\n    }\\n\\n    /**\\n     * @notice Allows the owners to migrate the positions\\n     * to a new staking contract.\\n     * */\\n    function migrateToNewStakingContract() public onlyOwners {\\n        staking.migrateToNewStakingContract();\\n        staking = IStaking(staking.newStakingContract());\\n        emit MigratedToNewStakingContract(msg.sender, address(staking));\\n    }\\n\\n    /**\\n     * @notice Overrides default ApprovalReceiver._getToken function to\\n     * register SOV token on this contract.\\n     * @return The address of SOV token.\\n     * */\\n    function _getToken() internal view returns (address) {\\n        return address(SOV);\\n    }\\n\\n    /**\\n     * @notice Overrides default ApprovalReceiver._getSelectors function to\\n     * register stakeTokensWithApproval selector on this contract.\\n     * @return The array of registered selectors on this contract.\\n     * */\\n    function _getSelectors() internal pure returns (bytes4[] memory) {\\n        bytes4[] memory selectors = new bytes4[](1);\\n        selectors[0] = this.stakeTokensWithApproval.selector;\\n        return selectors;\\n    }\\n\\n    function _timestampToLockDate(uint256 timestamp) internal view returns (uint256 lockDate) {\\n        // Optimize gas costs by reading kickoffTS from storage only once.\\n        uint256 start = startDate + cliff;\\n        require(timestamp >= start, \\\"timestamp < contract creation\\\"); // WS23\\n        /**\\n         * @dev If staking timestamp does not match any of the unstaking dates\\n         * , set the lockDate to the closest one before the timestamp.\\n         * E.g. Passed timestamps lies 7 weeks after kickoff -> only stake for 6 weeks.\\n         * */\\n        uint256 periodFromKickoff = (timestamp - start) / FOUR_WEEKS;\\n        lockDate = periodFromKickoff * FOUR_WEEKS + start;\\n    }\\n}\\n\",\"keccak256\":\"0x991b246a9930d8f2605d3088965159f15fd8a0e4ddbb64b9f21d4706d89a8ef8\"},\"contracts/governance/Vesting/VestingStorage.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../Staking/interfaces/IStaking.sol\\\";\\nimport \\\"../IFeeSharingCollector.sol\\\";\\n\\n/**\\n * @title Vesting Storage Contract.\\n *\\n * @notice This contract is just the storage required for vesting.\\n * It is parent of VestingLogic and TeamVesting.\\n *\\n * @dev Use Ownable as a parent to align storage structure for Logic and Proxy contracts.\\n * */\\ncontract VestingStorage is Ownable {\\n    /// @notice The SOV token contract.\\n    IERC20 public SOV;\\n\\n    /// @notice The staking contract address.\\n    IStaking public staking;\\n\\n    /// @notice The owner of the vested tokens.\\n    address public tokenOwner;\\n\\n    /// @notice Fee sharing Proxy.\\n    IFeeSharingCollector public feeSharingCollector;\\n\\n    /// @notice The cliff. After this time period the tokens begin to unlock.\\n    uint256 public cliff;\\n\\n    /// @notice The duration. After this period all tokens will have been unlocked.\\n    uint256 public duration;\\n\\n    /// @notice The start date of the vesting.\\n    uint256 public startDate;\\n\\n    /// @notice The end date of the vesting.\\n    uint256 public endDate;\\n\\n    /// @notice Constant used for computing the vesting dates.\\n    uint256 constant FOUR_WEEKS = 4 weeks;\\n}\\n\",\"keccak256\":\"0xf70f579d357d8f0aa0839824c1a1d66713c3cd42a58118d2893a35b52baaa140\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _who) external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbc0c9bb48f19651930ec9aff366b2e11a1abf89c846e4b2d52d8102b15ce6721\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"},\"contracts/token/IApproveAndCall.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for contract governance/ApprovalReceiver.sol\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n */\\ninterface IApproveAndCall {\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _sender The sender of SOV.approveAndCall function.\\n     * @param _amount The amount was approved.\\n     * @param _token The address of token.\\n     * @param _data The data will be used for low level call.\\n     * */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0ca93f8436a4d81d80de5ea9214139b490d96f708f09c975a0869ce9abc61635\"}},\"version\":1}",
    "bytecode": "0x608060405260006100176001600160e01b0361006616565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006a565b3390565b611b7f806100796000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806362dc2f35116100ad5780638f32d59b116100715780638f32d59b1461020a5780638f4ffcb11461021f578063a3e6761014610232578063c24a0f8b1461023a578063f2fde38b1461024257610121565b806362dc2f35146101b45780636b7dbb2d146101c75780637547c7a3146101cf57806381e45268146101e25780638da5cb5b146101f557610121565b80634552a7ae116100f45780634552a7ae1461016957806349df728c1461017e5780634cf088d9146101915780635419675f146101995780635c19a95c146101a157610121565b806308dcb360146101265780630b97bc86146101445780630fb5a6b41461015957806313d033c014610161575b600080fd5b61012e610255565b60405161013b919061192c565b60405180910390f35b61014c610264565b60405161013b91906119db565b61014c61026a565b61014c610270565b61017c61017736600461141e565b610276565b005b61017c61018c366004611322565b610320565b61012e61036e565b61017c61037d565b61017c6101af366004611322565b6104fe565b61017c6101c236600461146b565b610615565b61012e610722565b61017c6101dd36600461150f565b610731565b61017c6101f0366004611366565b61073e565b6101fd610767565b60405161013b9190611862565b610212610776565b60405161013b919061191e565b61017c61022d3660046113a0565b61079a565b6101fd61098e565b61014c61099d565b61017c610250366004611322565b6109a3565b6001546001600160a01b031681565b60075481565b60065481565b60055481565b6003546001600160a01b03163314806102925750610292610776565b6102b75760405162461bcd60e51b81526004016102ae9061199b565b60405180910390fd5b600554600754016102c7836109d0565b92508083106102d657826102d8565b805b925060006102ed83600163ffffffff610a1416565b6224ea00028401905060008160085410610307578161030b565b6008545b9050610318868683610a5f565b505050505050565b6003546001600160a01b031633148061033c575061033c610776565b6103585760405162461bcd60e51b81526004016102ae9061199b565b6005546007540161036a828242610a5f565b5050565b6002546001600160a01b031681565b6003546001600160a01b03163314806103995750610399610776565b6103b55760405162461bcd60e51b81526004016102ae9061199b565b600260009054906101000a90046001600160a01b03166001600160a01b0316635419675f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561040557600080fd5b505af1158015610419573d6000803e3d6000fd5b50505050600260009054906101000a90046001600160a01b03166001600160a01b031663ae81dfe46040518163ffffffff1660e01b815260040160206040518083038186803b15801561046b57600080fd5b505afa15801561047f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104a39190810190611348565b600280546001600160a01b0319166001600160a01b03928316179081905560405133927f9613f431247983a83a2b3667aa63a5174194ac89328dfadc69be44409521b3c1926104f492911690611862565b60405180910390a2565b6003546001600160a01b031633146105285760405162461bcd60e51b81526004016102ae9061199b565b6001600160a01b03811661054e5760405162461bcd60e51b81526004016102ae906119ab565b600554600754015b60085481116105d05760025460405163026e402b60e01b81526001600160a01b039091169063026e402b9061059190859085906004016118c0565b600060405180830381600087803b1580156105ab57600080fd5b505af11580156105bf573d6000803e3d6000fd5b505050506224ea0081019050610556565b50336001600160a01b03167f734a802cc194e2139bfcc08e10336f24dfa14fd2c5ab70268d8706c0558670668260405161060a9190611862565b60405180910390a250565b6003546001600160a01b03163314806106315750610631610776565b61064d5760405162461bcd60e51b81526004016102ae9061199b565b6001600160a01b0381166106735760405162461bcd60e51b81526004016102ae906119bb565b6004805460405163a965b3a960e01b81526001600160a01b039091169163a965b3a9916106a691879187918791016118f6565b600060405180830381600087803b1580156106c057600080fd5b505af11580156106d4573d6000803e3d6000fd5b50505050336001600160a01b03167f5fa0b381cb4bdbc7063d1e5c78b90a634a6d6a12d6cb6fabe450fd4b8d1eab0184838560405161071593929190611898565b60405180910390a2505050565b6004546001600160a01b031681565b61073b3382610cb2565b50565b33301461075d5760405162461bcd60e51b81526004016102ae9061199b565b61036a8282610cb2565b6000546001600160a01b031690565b600080546001600160a01b031661078b610f94565b6001600160a01b031614905090565b6107a2610f98565b6001600160a01b0316336001600160a01b0316146107d25760405162461bcd60e51b81526004016102ae9061199b565b336001600160a01b038416146107fa5760405162461bcd60e51b81526004016102ae9061199b565b60006060610806610fa7565b9050600061084985858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fff92505050565b905060005b82518110156108975782818151811061086357fe5b60200260200101516001600160e01b031916826001600160e01b031916141561088f5760019350610897565b60010161084e565b50826108b55760405162461bcd60e51b81526004016102ae9061197b565b600080600060201b87876040516020016108d193929190611830565b6040516020818303038152906040528060200190516108f391908101906114cc565b9093509150506001600160a01b03808316908b16146109245760405162461bcd60e51b81526004016102ae9061198b565b8881146109435760405162461bcd60e51b81526004016102ae906119cb565b61098287878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061100692505050565b50505050505050505050565b6003546001600160a01b031681565b60085481565b6109ab610776565b6109c75760405162461bcd60e51b81526004016102ae9061199b565b61073b816110e0565b60055460075460009101808310156109fa5760405162461bcd60e51b81526004016102ae9061194b565b60006224ea00828503046224ea0002919091019392505050565b6000610a5683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611161565b90505b92915050565b6001600160a01b038316610a855760405162461bcd60e51b81526004016102ae906119bb565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316639929e8866040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad657600080fd5b505afa158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b0e91908101906114ae565b15610b2d576008548310610b2457600854610b26565b825b9050610b4d565b428310610b3a5742610b3c565b825b9050600854811115610b4d57506008545b835b818111610c65576002546040516367bdb42560e11b81526001600160a01b039091169063cf7b684a90610b8e90309085906000194301906004016118db565b60206040518083038186803b158015610ba657600080fd5b505afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bde919081019061154b565b92506bffffffffffffffffffffffff831615610c5b576002546040516336adb29160e21b81526001600160a01b039091169063dab6ca4490610c2890869085908b90600401611a43565b600060405180830381600087803b158015610c4257600080fd5b505af1158015610c56573d6000803e3d6000fd5b505050505b6224ea0001610b4f565b50336001600160a01b03167f6b83b455c317523498e4e86849438d4356ad79ba6b355a5e6d5bc05eca6c780f868684604051610ca3939291906118db565b60405180910390a25050505050565b600754610d3d576002546040516372ec979560e01b81526001600160a01b03909116906372ec979590610ce99042906004016119db565b60206040518083038186803b158015610d0157600080fd5b505afa158015610d15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d39919081019061152d565b6007555b6002546006546040516372ec979560e01b81526001600160a01b03909216916372ec979591610d739142909101906004016119db565b60206040518083038186803b158015610d8b57600080fd5b505afa158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dc3919081019061152d565b6008556001546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd90610dfb90869030908790600401611870565b602060405180830381600087803b158015610e1557600080fd5b505af1158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e4d91908101906114ae565b905080610e5957600080fd5b60015460025460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610e8f9291169086906004016118c0565b602060405180830381600087803b158015610ea957600080fd5b505af1158015610ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ee191908101906114ae565b5060025460055460065460035460405163c1b79b0560e01b81526001600160a01b039485169463c1b79b0594610f29948994919390926224ea009230929116906004016119e9565b600060405180830381600087803b158015610f4357600080fd5b505af1158015610f57573d6000803e3d6000fd5b50505050826001600160a01b03167fb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef8360405161071591906119db565b3390565b6001546001600160a01b031690565b604080516001808252818301909252606091829190602080830190803883390190505090506381e4526860e01b81600081518110610fe157fe5b6001600160e01b031990921660209283029190910190910152905090565b6020015190565b60006060306001600160a01b0316836040516110229190611856565b6000604051808303816000865af19150503d806000811461105f576040519150601f19603f3d011682016040523d82523d6000602084013e611064565b606091505b5091509150816110db57604481511161108f5760405162461bcd60e51b81526004016102ae9061195b565b6110c26040518060400160405280601181526020017003932b1b2b4bb32a0b8383937bb30b61d1607d1b81525082611192565b60405162461bcd60e51b81526004016102ae919061193a565b505050565b6001600160a01b0381166111065760405162461bcd60e51b81526004016102ae9061196b565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600081848411156111855760405162461bcd60e51b81526004016102ae919061193a565b50508183035b9392505050565b6060808390506060839050606060448251845101036040519080825280601f01601f1916602001820160405280156111d1576020820181803883390190505b509050806000805b855181101561122a578581815181106111ee57fe5b602001015160f81c60f81b83838060010194508151811061120b57fe5b60200101906001600160f81b031916908160001a9053506001016111d9565b5060445b845181101561127f5784818151811061124357fe5b602001015160f81c60f81b83838060010194508151811061126057fe5b60200101906001600160f81b031916908160001a90535060010161122e565b5090979650505050505050565b8035610a5981611b04565b8051610a5981611b04565b8051610a5981611b18565b8051610a5981611b21565b60008083601f8401126112ca57600080fd5b50813567ffffffffffffffff8111156112e257600080fd5b6020830191508360018202830111156112fa57600080fd5b9250929050565b8035610a5981611b21565b8035610a5981611b2a565b8051610a5981611b33565b60006020828403121561133457600080fd5b6000611340848461128c565b949350505050565b60006020828403121561135a57600080fd5b60006113408484611297565b6000806040838503121561137957600080fd5b6000611385858561128c565b925050602061139685828601611301565b9150509250929050565b6000806000806000608086880312156113b857600080fd5b60006113c4888861128c565b95505060206113d588828901611301565b94505060406113e68882890161128c565b935050606086013567ffffffffffffffff81111561140357600080fd5b61140f888289016112b8565b92509250509295509295909350565b60008060006060848603121561143357600080fd5b600061143f868661128c565b935050602061145086828701611301565b925050604061146186828701611301565b9150509250925092565b60008060006060848603121561148057600080fd5b600061148c868661128c565b935050602061149d8682870161130c565b92505060406114618682870161128c565b6000602082840312156114c057600080fd5b600061134084846112a2565b6000806000606084860312156114e157600080fd5b60006114ed86866112ad565b93505060206114fe86828701611297565b9250506040611461868287016112ad565b60006020828403121561152157600080fd5b60006113408484611301565b60006020828403121561153f57600080fd5b600061134084846112ad565b60006020828403121561155d57600080fd5b60006113408484611317565b61157281611a70565b82525050565b61157281611a7b565b61157261158d82611a80565b611a8a565b600061159e8385611a62565b93506115ab838584611abe565b50500190565b60006115bc82611a5e565b6115c68185611a62565b93506115d6818560208601611aca565b9290920192915050565b61157281611ab3565b60006115f482611a5e565b6115fe8185611a67565b935061160e818560208601611aca565b61161781611afa565b9093019392505050565b600061162e601d83611a67565b7f74696d657374616d70203c20636f6e7472616374206372656174696f6e000000815260200192915050565b6000611667603083611a67565b7f72656365697665417070726f76616c3a205472616e73616374696f6e2065786581526f31baba34b7b7103932bb32b93a32b21760811b602082015260400192915050565b60006116b9602683611a67565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000611701601583611a67565b741b595d1a1bd9081a5cc81b9bdd08185b1b1bddd959605a1b815260200192915050565b6000611732600f83611a67565b6e0e6cadcc8cae440dad2e6dac2e8c6d608b1b815260200192915050565b600061175d600c83611a67565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000611785601983611a67565b7f64656c656761746565206164647265737320696e76616c696400000000000000815260200192915050565b60006117be601883611a67565b7f7265636569766572206164647265737320696e76616c69640000000000000000815260200192915050565b60006117f7600f83611a67565b6e0c2dadeeadce840dad2e6dac2e8c6d608b1b815260200192915050565b61157281611a8a565b61157281611a99565b61157281611aa2565b600061183c8286611581565b601c8201915061184d828486611592565b95945050505050565b600061118b82846115b1565b60208101610a598284611569565b6060810161187e8286611569565b61188b6020830185611569565b6113406040830184611815565b606081016118a68286611569565b6118b36020830185611569565b611340604083018461181e565b604081016118ce8285611569565b61118b6020830184611815565b606081016118e98286611569565b61188b6020830185611815565b606081016119048286611569565b611911602083018561181e565b6113406040830184611569565b60208101610a598284611578565b60208101610a5982846115e0565b60208082528101610a5681846115e9565b60208082528101610a5981611621565b60208082528101610a598161165a565b60208082528101610a59816116ac565b60208082528101610a59816116f4565b60208082528101610a5981611725565b60208082528101610a5981611750565b60208082528101610a5981611778565b60208082528101610a59816117b1565b60208082528101610a59816117ea565b60208101610a598284611815565b60c081016119f78289611815565b611a046020830188611815565b611a116040830187611815565b611a1e6060830186611815565b611a2b6080830185611569565b611a3860a0830184611569565b979650505050505050565b60608101611a518286611827565b6119116020830185611815565b5190565b919050565b90815260200190565b6000610a5982611a8d565b151590565b63ffffffff191690565b90565b6001600160a01b031690565b63ffffffff1690565b6bffffffffffffffffffffffff1690565b6000610a5982611a70565b82818337506000910152565b60005b83811015611ae5578181015183820152602001611acd565b83811115611af4576000848401525b50505050565b601f01601f191690565b611b0d81611a70565b811461073b57600080fd5b611b0d81611a7b565b611b0d81611a8a565b611b0d81611a99565b611b0d81611aa256fea365627a7a72315820a89ede248f65f6f968df90376cf30f13581a3027604ed8923bf505e54a09ee6b6c6578706572696d656e74616cf564736f6c63430005110040",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806362dc2f35116100ad5780638f32d59b116100715780638f32d59b1461020a5780638f4ffcb11461021f578063a3e6761014610232578063c24a0f8b1461023a578063f2fde38b1461024257610121565b806362dc2f35146101b45780636b7dbb2d146101c75780637547c7a3146101cf57806381e45268146101e25780638da5cb5b146101f557610121565b80634552a7ae116100f45780634552a7ae1461016957806349df728c1461017e5780634cf088d9146101915780635419675f146101995780635c19a95c146101a157610121565b806308dcb360146101265780630b97bc86146101445780630fb5a6b41461015957806313d033c014610161575b600080fd5b61012e610255565b60405161013b919061192c565b60405180910390f35b61014c610264565b60405161013b91906119db565b61014c61026a565b61014c610270565b61017c61017736600461141e565b610276565b005b61017c61018c366004611322565b610320565b61012e61036e565b61017c61037d565b61017c6101af366004611322565b6104fe565b61017c6101c236600461146b565b610615565b61012e610722565b61017c6101dd36600461150f565b610731565b61017c6101f0366004611366565b61073e565b6101fd610767565b60405161013b9190611862565b610212610776565b60405161013b919061191e565b61017c61022d3660046113a0565b61079a565b6101fd61098e565b61014c61099d565b61017c610250366004611322565b6109a3565b6001546001600160a01b031681565b60075481565b60065481565b60055481565b6003546001600160a01b03163314806102925750610292610776565b6102b75760405162461bcd60e51b81526004016102ae9061199b565b60405180910390fd5b600554600754016102c7836109d0565b92508083106102d657826102d8565b805b925060006102ed83600163ffffffff610a1416565b6224ea00028401905060008160085410610307578161030b565b6008545b9050610318868683610a5f565b505050505050565b6003546001600160a01b031633148061033c575061033c610776565b6103585760405162461bcd60e51b81526004016102ae9061199b565b6005546007540161036a828242610a5f565b5050565b6002546001600160a01b031681565b6003546001600160a01b03163314806103995750610399610776565b6103b55760405162461bcd60e51b81526004016102ae9061199b565b600260009054906101000a90046001600160a01b03166001600160a01b0316635419675f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561040557600080fd5b505af1158015610419573d6000803e3d6000fd5b50505050600260009054906101000a90046001600160a01b03166001600160a01b031663ae81dfe46040518163ffffffff1660e01b815260040160206040518083038186803b15801561046b57600080fd5b505afa15801561047f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104a39190810190611348565b600280546001600160a01b0319166001600160a01b03928316179081905560405133927f9613f431247983a83a2b3667aa63a5174194ac89328dfadc69be44409521b3c1926104f492911690611862565b60405180910390a2565b6003546001600160a01b031633146105285760405162461bcd60e51b81526004016102ae9061199b565b6001600160a01b03811661054e5760405162461bcd60e51b81526004016102ae906119ab565b600554600754015b60085481116105d05760025460405163026e402b60e01b81526001600160a01b039091169063026e402b9061059190859085906004016118c0565b600060405180830381600087803b1580156105ab57600080fd5b505af11580156105bf573d6000803e3d6000fd5b505050506224ea0081019050610556565b50336001600160a01b03167f734a802cc194e2139bfcc08e10336f24dfa14fd2c5ab70268d8706c0558670668260405161060a9190611862565b60405180910390a250565b6003546001600160a01b03163314806106315750610631610776565b61064d5760405162461bcd60e51b81526004016102ae9061199b565b6001600160a01b0381166106735760405162461bcd60e51b81526004016102ae906119bb565b6004805460405163a965b3a960e01b81526001600160a01b039091169163a965b3a9916106a691879187918791016118f6565b600060405180830381600087803b1580156106c057600080fd5b505af11580156106d4573d6000803e3d6000fd5b50505050336001600160a01b03167f5fa0b381cb4bdbc7063d1e5c78b90a634a6d6a12d6cb6fabe450fd4b8d1eab0184838560405161071593929190611898565b60405180910390a2505050565b6004546001600160a01b031681565b61073b3382610cb2565b50565b33301461075d5760405162461bcd60e51b81526004016102ae9061199b565b61036a8282610cb2565b6000546001600160a01b031690565b600080546001600160a01b031661078b610f94565b6001600160a01b031614905090565b6107a2610f98565b6001600160a01b0316336001600160a01b0316146107d25760405162461bcd60e51b81526004016102ae9061199b565b336001600160a01b038416146107fa5760405162461bcd60e51b81526004016102ae9061199b565b60006060610806610fa7565b9050600061084985858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fff92505050565b905060005b82518110156108975782818151811061086357fe5b60200260200101516001600160e01b031916826001600160e01b031916141561088f5760019350610897565b60010161084e565b50826108b55760405162461bcd60e51b81526004016102ae9061197b565b600080600060201b87876040516020016108d193929190611830565b6040516020818303038152906040528060200190516108f391908101906114cc565b9093509150506001600160a01b03808316908b16146109245760405162461bcd60e51b81526004016102ae9061198b565b8881146109435760405162461bcd60e51b81526004016102ae906119cb565b61098287878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061100692505050565b50505050505050505050565b6003546001600160a01b031681565b60085481565b6109ab610776565b6109c75760405162461bcd60e51b81526004016102ae9061199b565b61073b816110e0565b60055460075460009101808310156109fa5760405162461bcd60e51b81526004016102ae9061194b565b60006224ea00828503046224ea0002919091019392505050565b6000610a5683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611161565b90505b92915050565b6001600160a01b038316610a855760405162461bcd60e51b81526004016102ae906119bb565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316639929e8866040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad657600080fd5b505afa158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b0e91908101906114ae565b15610b2d576008548310610b2457600854610b26565b825b9050610b4d565b428310610b3a5742610b3c565b825b9050600854811115610b4d57506008545b835b818111610c65576002546040516367bdb42560e11b81526001600160a01b039091169063cf7b684a90610b8e90309085906000194301906004016118db565b60206040518083038186803b158015610ba657600080fd5b505afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bde919081019061154b565b92506bffffffffffffffffffffffff831615610c5b576002546040516336adb29160e21b81526001600160a01b039091169063dab6ca4490610c2890869085908b90600401611a43565b600060405180830381600087803b158015610c4257600080fd5b505af1158015610c56573d6000803e3d6000fd5b505050505b6224ea0001610b4f565b50336001600160a01b03167f6b83b455c317523498e4e86849438d4356ad79ba6b355a5e6d5bc05eca6c780f868684604051610ca3939291906118db565b60405180910390a25050505050565b600754610d3d576002546040516372ec979560e01b81526001600160a01b03909116906372ec979590610ce99042906004016119db565b60206040518083038186803b158015610d0157600080fd5b505afa158015610d15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d39919081019061152d565b6007555b6002546006546040516372ec979560e01b81526001600160a01b03909216916372ec979591610d739142909101906004016119db565b60206040518083038186803b158015610d8b57600080fd5b505afa158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dc3919081019061152d565b6008556001546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd90610dfb90869030908790600401611870565b602060405180830381600087803b158015610e1557600080fd5b505af1158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e4d91908101906114ae565b905080610e5957600080fd5b60015460025460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610e8f9291169086906004016118c0565b602060405180830381600087803b158015610ea957600080fd5b505af1158015610ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ee191908101906114ae565b5060025460055460065460035460405163c1b79b0560e01b81526001600160a01b039485169463c1b79b0594610f29948994919390926224ea009230929116906004016119e9565b600060405180830381600087803b158015610f4357600080fd5b505af1158015610f57573d6000803e3d6000fd5b50505050826001600160a01b03167fb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef8360405161071591906119db565b3390565b6001546001600160a01b031690565b604080516001808252818301909252606091829190602080830190803883390190505090506381e4526860e01b81600081518110610fe157fe5b6001600160e01b031990921660209283029190910190910152905090565b6020015190565b60006060306001600160a01b0316836040516110229190611856565b6000604051808303816000865af19150503d806000811461105f576040519150601f19603f3d011682016040523d82523d6000602084013e611064565b606091505b5091509150816110db57604481511161108f5760405162461bcd60e51b81526004016102ae9061195b565b6110c26040518060400160405280601181526020017003932b1b2b4bb32a0b8383937bb30b61d1607d1b81525082611192565b60405162461bcd60e51b81526004016102ae919061193a565b505050565b6001600160a01b0381166111065760405162461bcd60e51b81526004016102ae9061196b565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600081848411156111855760405162461bcd60e51b81526004016102ae919061193a565b50508183035b9392505050565b6060808390506060839050606060448251845101036040519080825280601f01601f1916602001820160405280156111d1576020820181803883390190505b509050806000805b855181101561122a578581815181106111ee57fe5b602001015160f81c60f81b83838060010194508151811061120b57fe5b60200101906001600160f81b031916908160001a9053506001016111d9565b5060445b845181101561127f5784818151811061124357fe5b602001015160f81c60f81b83838060010194508151811061126057fe5b60200101906001600160f81b031916908160001a90535060010161122e565b5090979650505050505050565b8035610a5981611b04565b8051610a5981611b04565b8051610a5981611b18565b8051610a5981611b21565b60008083601f8401126112ca57600080fd5b50813567ffffffffffffffff8111156112e257600080fd5b6020830191508360018202830111156112fa57600080fd5b9250929050565b8035610a5981611b21565b8035610a5981611b2a565b8051610a5981611b33565b60006020828403121561133457600080fd5b6000611340848461128c565b949350505050565b60006020828403121561135a57600080fd5b60006113408484611297565b6000806040838503121561137957600080fd5b6000611385858561128c565b925050602061139685828601611301565b9150509250929050565b6000806000806000608086880312156113b857600080fd5b60006113c4888861128c565b95505060206113d588828901611301565b94505060406113e68882890161128c565b935050606086013567ffffffffffffffff81111561140357600080fd5b61140f888289016112b8565b92509250509295509295909350565b60008060006060848603121561143357600080fd5b600061143f868661128c565b935050602061145086828701611301565b925050604061146186828701611301565b9150509250925092565b60008060006060848603121561148057600080fd5b600061148c868661128c565b935050602061149d8682870161130c565b92505060406114618682870161128c565b6000602082840312156114c057600080fd5b600061134084846112a2565b6000806000606084860312156114e157600080fd5b60006114ed86866112ad565b93505060206114fe86828701611297565b9250506040611461868287016112ad565b60006020828403121561152157600080fd5b60006113408484611301565b60006020828403121561153f57600080fd5b600061134084846112ad565b60006020828403121561155d57600080fd5b60006113408484611317565b61157281611a70565b82525050565b61157281611a7b565b61157261158d82611a80565b611a8a565b600061159e8385611a62565b93506115ab838584611abe565b50500190565b60006115bc82611a5e565b6115c68185611a62565b93506115d6818560208601611aca565b9290920192915050565b61157281611ab3565b60006115f482611a5e565b6115fe8185611a67565b935061160e818560208601611aca565b61161781611afa565b9093019392505050565b600061162e601d83611a67565b7f74696d657374616d70203c20636f6e7472616374206372656174696f6e000000815260200192915050565b6000611667603083611a67565b7f72656365697665417070726f76616c3a205472616e73616374696f6e2065786581526f31baba34b7b7103932bb32b93a32b21760811b602082015260400192915050565b60006116b9602683611a67565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000611701601583611a67565b741b595d1a1bd9081a5cc81b9bdd08185b1b1bddd959605a1b815260200192915050565b6000611732600f83611a67565b6e0e6cadcc8cae440dad2e6dac2e8c6d608b1b815260200192915050565b600061175d600c83611a67565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000611785601983611a67565b7f64656c656761746565206164647265737320696e76616c696400000000000000815260200192915050565b60006117be601883611a67565b7f7265636569766572206164647265737320696e76616c69640000000000000000815260200192915050565b60006117f7600f83611a67565b6e0c2dadeeadce840dad2e6dac2e8c6d608b1b815260200192915050565b61157281611a8a565b61157281611a99565b61157281611aa2565b600061183c8286611581565b601c8201915061184d828486611592565b95945050505050565b600061118b82846115b1565b60208101610a598284611569565b6060810161187e8286611569565b61188b6020830185611569565b6113406040830184611815565b606081016118a68286611569565b6118b36020830185611569565b611340604083018461181e565b604081016118ce8285611569565b61118b6020830184611815565b606081016118e98286611569565b61188b6020830185611815565b606081016119048286611569565b611911602083018561181e565b6113406040830184611569565b60208101610a598284611578565b60208101610a5982846115e0565b60208082528101610a5681846115e9565b60208082528101610a5981611621565b60208082528101610a598161165a565b60208082528101610a59816116ac565b60208082528101610a59816116f4565b60208082528101610a5981611725565b60208082528101610a5981611750565b60208082528101610a5981611778565b60208082528101610a59816117b1565b60208082528101610a59816117ea565b60208101610a598284611815565b60c081016119f78289611815565b611a046020830188611815565b611a116040830187611815565b611a1e6060830186611815565b611a2b6080830185611569565b611a3860a0830184611569565b979650505050505050565b60608101611a518286611827565b6119116020830185611815565b5190565b919050565b90815260200190565b6000610a5982611a8d565b151590565b63ffffffff191690565b90565b6001600160a01b031690565b63ffffffff1690565b6bffffffffffffffffffffffff1690565b6000610a5982611a70565b82818337506000910152565b60005b83811015611ae5578181015183820152602001611acd565b83811115611af4576000848401525b50505050565b601f01601f191690565b611b0d81611a70565b811461073b57600080fd5b611b0d81611a7b565b611b0d81611a8a565b611b0d81611a99565b611b0d81611aa256fea365627a7a72315820a89ede248f65f6f968df90376cf30f13581a3027604ed8923bf505e54a09ee6b6c6578706572696d656e74616cf564736f6c63430005110040",
    "devdoc": {
      "details": "Deployed by a VestingFactory contract.",
      "methods": {
        "collectDividends(address,uint32,address)": {
          "params": {
            "_loanPoolToken": "The loan pool token address.",
            "_maxCheckpoints": "Maximum number of checkpoints to be processed.",
            "_receiver": "The receiver of tokens or msg.sender"
          }
        },
        "delegate(address)": {
          "params": {
            "_delegatee": "The address to delegate votes to."
          }
        },
        "isOwner()": {
          "details": "Returns true if the caller is the current owner."
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "receiveApproval(address,uint256,address,bytes)": {
          "params": {
            "_data": "The data will be used for low level call."
          }
        },
        "stakeTokens(uint256)": {
          "params": {
            "_amount": "The amount of tokens to stake."
          }
        },
        "stakeTokensWithApproval(address,uint256)": {
          "details": "This function will be invoked from receiveApproval.SOV.approveAndCall -> this.receiveApproval -> this.stakeTokensWithApproval",
          "params": {
            "_amount": "The amount of tokens to stake.",
            "_sender": "The sender of SOV.approveAndCall"
          }
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        },
        "withdrawTokens(address)": {
          "params": {
            "receiver": "The receiving address."
          }
        },
        "withdrawTokensStartingFrom(address,uint256,uint256)": {
          "params": {
            "maxWithdrawIterations": "max withdrawal iteration to work around block gas limit issue.",
            "receiver": "The receiving address.",
            "startFrom": "The start value for the iterations."
          }
        }
      },
      "title": "Vesting Logic contract."
    },
    "userdoc": {
      "methods": {
        "collectDividends(address,uint32,address)": {
          "notice": "Collect dividends from fee sharing proxy."
        },
        "delegate(address)": {
          "notice": "Delegate votes from `msg.sender` which are locked until lockDate to `delegatee`."
        },
        "migrateToNewStakingContract()": {
          "notice": "Allows the owners to migrate the positions to a new staking contract."
        },
        "receiveApproval(address,uint256,address,bytes)": {
          "notice": "Receives approval from SOV token."
        },
        "stakeTokens(uint256)": {
          "notice": "Stakes tokens according to the vesting schedule."
        },
        "stakeTokensWithApproval(address,uint256)": {
          "notice": "Stakes tokens according to the vesting schedule."
        },
        "withdrawTokens(address)": {
          "notice": "Withdraws unlocked tokens from the staking contract and forwards them to an address specified by the token owner."
        },
        "withdrawTokensStartingFrom(address,uint256,uint256)": {
          "notice": "Withdraws unlocked tokens partially (based on the max withdraw iteration that has been set) from the staking contract and forwards them to an address specified by the token owner."
        }
      },
      "notice": "Staking, delegating and withdrawal functionality."
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 54767,
          "contract": "contracts/governance/Vesting/VestingLogic.sol:VestingLogic",
          "label": "_owner",
          "offset": 0,
          "slot": "0",
          "type": "t_address"
        },
        {
          "astId": 32151,
          "contract": "contracts/governance/Vesting/VestingLogic.sol:VestingLogic",
          "label": "SOV",
          "offset": 0,
          "slot": "1",
          "type": "t_contract(IERC20)33453"
        },
        {
          "astId": 32153,
          "contract": "contracts/governance/Vesting/VestingLogic.sol:VestingLogic",
          "label": "staking",
          "offset": 0,
          "slot": "2",
          "type": "t_contract(IStaking)17840"
        },
        {
          "astId": 32155,
          "contract": "contracts/governance/Vesting/VestingLogic.sol:VestingLogic",
          "label": "tokenOwner",
          "offset": 0,
          "slot": "3",
          "type": "t_address"
        },
        {
          "astId": 32157,
          "contract": "contracts/governance/Vesting/VestingLogic.sol:VestingLogic",
          "label": "feeSharingCollector",
          "offset": 0,
          "slot": "4",
          "type": "t_contract(IFeeSharingCollector)17012"
        },
        {
          "astId": 32159,
          "contract": "contracts/governance/Vesting/VestingLogic.sol:VestingLogic",
          "label": "cliff",
          "offset": 0,
          "slot": "5",
          "type": "t_uint256"
        },
        {
          "astId": 32161,
          "contract": "contracts/governance/Vesting/VestingLogic.sol:VestingLogic",
          "label": "duration",
          "offset": 0,
          "slot": "6",
          "type": "t_uint256"
        },
        {
          "astId": 32163,
          "contract": "contracts/governance/Vesting/VestingLogic.sol:VestingLogic",
          "label": "startDate",
          "offset": 0,
          "slot": "7",
          "type": "t_uint256"
        },
        {
          "astId": 32165,
          "contract": "contracts/governance/Vesting/VestingLogic.sol:VestingLogic",
          "label": "endDate",
          "offset": 0,
          "slot": "8",
          "type": "t_uint256"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_contract(IERC20)33453": {
          "encoding": "inplace",
          "label": "contract IERC20",
          "numberOfBytes": "20"
        },
        "t_contract(IFeeSharingCollector)17012": {
          "encoding": "inplace",
          "label": "contract IFeeSharingCollector",
          "numberOfBytes": "20"
        },
        "t_contract(IStaking)17840": {
          "encoding": "inplace",
          "label": "contract IStaking",
          "numberOfBytes": "20"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    }
  }