{
  "address": "0x24B3687966C4f05e48ED5A3B9c14F56d9ad5BF6B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueBefore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueAfter",
          "type": "uint256"
        }
      ],
      "name": "AllowanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "burner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "loanToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        }
      ],
      "name": "FlashBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "TINY_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "baseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanAmountPaid",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "useLM",
          "type": "bool"
        }
      ],
      "name": "burnToBTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanAmountPaid",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "checkpointSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "earlyAccessToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getListFunctionSignatures",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "functionSignatures",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes32",
          "name": "moduleName",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kinkLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "liquidityMiningAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loanParamsIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "loanTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lowUtilBaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lowUtilRateMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxScaleRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useLM",
          "type": "bool"
        }
      ],
      "name": "mintWithBTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rateMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sovrynContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stakingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "string",
          "name": "source",
          "type": "string"
        }
      ],
      "name": "stringToBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "result",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "targetLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "target_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalAssetBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "transactionLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "wrbtcTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5fb60abafeb8115812b48a8d31ede5c586c5231030ea79d7be8b8d6839cf30e9",
  "receipt": {
    "to": null,
    "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
    "contractAddress": "0x24B3687966C4f05e48ED5A3B9c14F56d9ad5BF6B",
    "transactionIndex": 0,
    "gasUsed": "3379417",
    "logsBloom": "0x
    "blockHash": "0xbab25807aa2d484285f8cffbbe1001bfcbd073faf65a893839323563271f6c71",
    "transactionHash": "0x5fb60abafeb8115812b48a8d31ede5c586c5231030ea79d7be8b8d6839cf30e9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5708844,
        "transactionHash": "0x5fb60abafeb8115812b48a8d31ede5c586c5231030ea79d7be8b8d6839cf30e9",
        "address": "0x24B3687966C4f05e48ED5A3B9c14F56d9ad5BF6B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000013be55487d37fe3c66ee7305e1e9c1ac85de75ae"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbab25807aa2d484285f8cffbbe1001bfcbd073faf65a893839323563271f6c71"
      }
    ],
    "blockNumber": 5708844,
    "cumulativeGasUsed": "3379417",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "95f62a041e12061a65b869c91b08367b",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueAfter\",\"type\":\"uint256\"}],\"name\":\"AllowanceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"}],\"name\":\"FlashBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"TINY_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanAmountPaid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useLM\",\"type\":\"bool\"}],\"name\":\"burnToBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanAmountPaid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkpointSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyAccessToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getListFunctionSignatures\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"functionSignatures\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes32\",\"name\":\"moduleName\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kinkLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityMiningAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loanParamsIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowUtilBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowUtilRateMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxScaleRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useLM\",\"type\":\"bool\"}],\"name\":\"mintWithBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sovrynContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAssetBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transactionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wrbtcTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"params\":{\"_owner\":\"The account owner of the iTokens.\",\"_spender\":\"The account allowed to send the iTokens.\"},\"return\":\"The number of iTokens an account is allowing the spender  to send on its behalf.\"},\"approve(address,uint256)\":{\"params\":{\"_spender\":\"The account address that will be able to spend the tokens.\",\"_value\":\"The amount of tokens allowed to spend.\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"The account owner of the iTokens.\"},\"return\":\"The number of iTokens an account owns.\"},\"burn(address,uint256)\":{\"params\":{\"burnAmount\":\"The amount of loan tokens to redeem.\",\"receiver\":\"The account getting the minted tokens.\"},\"return\":\"The amount of underlying tokens payed to lender.\"},\"getListFunctionSignatures()\":{\"details\":\"This function will return the list of function signature in this contract that are available for public call Then this function will be called by LoanTokenLogicBeacon, and the function signatures will be registred in LoanTokenLogicBeacon.To save the gas we can just directly return the list of function signature from this pure function. The other workaround (fancy way) is we can create a storage for the list of the function signature, and then we can store each function signature to that storage from the constructor. Then, in this function we just need to return that storage variable.\",\"return\":\"The list of function signatures (bytes4[])\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"mint(address,uint256)\":{\"params\":{\"depositAmount\":\"The amount of underlying tokens provided on the  loan. (Not the number of loan tokens to mint).\",\"receiver\":\"The account getting the minted tokens.\"},\"return\":\"The amount of loan tokens minted.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"tokenPrice()\":{\"return\":\"The loan token price.\"},\"totalAssetBorrow()\":{\"return\":\"The total amount of loan tokens on debt.\"},\"totalSupply()\":{\"return\":\"The total number of iTokens in existence as of now.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{\"allowance(address,address)\":{\"notice\":\"Get the amount of iTokens allowed to be spent by a  given account on behalf of the owner.\"},\"approve(address,uint256)\":{\"notice\":\"Set an amount as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an {Approval} event.\"},\"balanceOf(address)\":{\"notice\":\"Get the amount of iTokens owned by an account.\"},\"burn(address,uint256)\":{\"notice\":\"Burn loan token wrapper. Adds a pay-out transfer after calling low level _burnToken function. In order to withdraw funds to the pool, call burn on the respective loan token contract. This will burn your loan tokens and send you the underlying token in exchange.\"},\"getListFunctionSignatures()\":{\"notice\":\"This function is MANDATORY, which will be called by LoanTokenLogicBeacon and be registered. Every new public function, the signature needs to be included in this function.\"},\"mint(address,uint256)\":{\"notice\":\"Mint loan token wrapper. Adds a check before calling low level _mintToken function. The function retrieves the tokens from the message sender, so make sure to first approve the loan token contract to access your funds. This is done by calling approve(address spender, uint amount) on the ERC20 token contract, where spender is the loan token contract address and amount is the amount to be deposited.\"},\"tokenPrice()\":{\"notice\":\"Loan token price calculation considering unpaid interests.\"},\"totalAssetBorrow()\":{\"notice\":\"Get the total amount of loan tokens on debt. Calls protocol getTotalPrincipal function. In the context of borrowing, principal is the initial size of a loan. It can also be the amount still owed on a loan. If you take out a $50,000 mortgage, for example, the principal is $50,000. If you pay off $30,000, the principal balance now consists of the remaining $20,000.\"},\"totalSupply()\":{\"notice\":\"Get the total supply of iTokens.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol\":\"LoanTokenLogicWrbtcLM\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/connectors/loantoken/AdvancedToken.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./AdvancedTokenStorage.sol\\\";\\n\\n/**\\n * @title Advanced Token contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized margin\\n * trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * AdvancedToken implements standard ERC-20 approval, mint and burn token functionality.\\n * Logic (AdvancedToken) is kept aside from storage (AdvancedTokenStorage).\\n *\\n * For example, LoanTokenLogicDai contract uses AdvancedToken::_mint() to mint\\n * its Loan Dai iTokens.\\n * */\\ncontract AdvancedToken is AdvancedTokenStorage {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Set an amount as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * @param _spender The account address that will be able to spend the tokens.\\n     * @param _value The amount of tokens allowed to spend.\\n     * */\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice The iToken minting process. Meant to issue Loan iTokens.\\n     * Lenders are able to open an iToken position, by minting them.\\n     * This function is called by LoanTokenLogicStandard::_mintToken\\n     * @param _to The recipient of the minted tTokens.\\n     * @param _tokenAmount The amount of iTokens to be minted.\\n     * @param _assetAmount The amount of lended tokens (asset to lend).\\n     * @param _price The price of the lended tokens.\\n     * @return The updated balance of the recipient.\\n     * */\\n    function _mint(\\n        address _to,\\n        uint256 _tokenAmount,\\n        uint256 _assetAmount,\\n        uint256 _price\\n    ) internal returns (uint256) {\\n        require(_to != address(0), \\\"15\\\");\\n\\n        uint256 _balance = balances[_to].add(_tokenAmount);\\n        balances[_to] = _balance;\\n\\n        totalSupply_ = totalSupply_.add(_tokenAmount);\\n\\n        emit Mint(_to, _tokenAmount, _assetAmount, _price);\\n        emit Transfer(address(0), _to, _tokenAmount);\\n\\n        return _balance;\\n    }\\n\\n    /**\\n     * @notice The iToken burning process. Meant to destroy Loan iTokens.\\n     * Lenders are able to close an iToken position, by burning them.\\n     * This function is called by LoanTokenLogicStandard::_burnToken\\n     * @param _who The owner of the iTokens to burn.\\n     * @param _tokenAmount The amount of iTokens to burn.\\n     * @param _assetAmount The amount of lended tokens.\\n     * @param _price The price of the lended tokens.\\n     * @return The updated balance of the iTokens owner.\\n     * */\\n    function _burn(\\n        address _who,\\n        uint256 _tokenAmount,\\n        uint256 _assetAmount,\\n        uint256 _price\\n    ) internal returns (uint256) {\\n        //bzx compare\\n        //TODO: Unit test\\n        uint256 _balance = balances[_who].sub(_tokenAmount, \\\"16\\\");\\n\\n        // a rounding error may leave dust behind, so we clear this out\\n        if (_balance <= 10) {\\n            // We can't leave such small balance quantities.\\n            _tokenAmount = _tokenAmount.add(_balance);\\n            _balance = 0;\\n        }\\n        balances[_who] = _balance;\\n\\n        totalSupply_ = totalSupply_.sub(_tokenAmount);\\n\\n        emit Burn(_who, _tokenAmount, _assetAmount, _price);\\n        emit Transfer(_who, address(0), _tokenAmount);\\n        return _balance;\\n    }\\n}\\n\",\"keccak256\":\"0x4e7606dcb24cd7f3a4e5c1a153975fd65156f7239cb281034c84d64b0dfc5dd0\"},\"contracts/connectors/loantoken/AdvancedTokenStorage.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./LoanTokenBase.sol\\\";\\n\\n/**\\n * @title Advanced Token Storage contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * AdvancedTokenStorage implements standard ERC-20 getters functionality:\\n * totalSupply, balanceOf, allowance and some events.\\n * iToken logic is divided into several contracts AdvancedToken,\\n * AdvancedTokenStorage and LoanTokenBase.\\n * */\\ncontract AdvancedTokenStorage is LoanTokenBase {\\n    using SafeMath for uint256;\\n\\n    /* Events */\\n\\n    /// topic: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// topic: 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// topic: 0x628e75c63c1873bcd3885f7aee9f58ee36f60dc789b2a6b3a978c4189bc548ba\\n    event AllowanceUpdate(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 valueBefore,\\n        uint256 valueAfter\\n    );\\n\\n    /// topic: 0xb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb\\n    event Mint(address indexed minter, uint256 tokenAmount, uint256 assetAmount, uint256 price);\\n\\n    /// topic: 0x743033787f4738ff4d6a7225ce2bd0977ee5f86b91a902a58f5e4d0b297b4644\\n    event Burn(address indexed burner, uint256 tokenAmount, uint256 assetAmount, uint256 price);\\n\\n    /// topic: 0xc688ff9bd4a1c369dd44c5cf64efa9db6652fb6b280aa765cd43f17d256b816e\\n    event FlashBorrow(address borrower, address target, address loanToken, uint256 loanAmount);\\n\\n    /* Storage */\\n\\n    mapping(address => uint256) internal balances;\\n    mapping(address => mapping(address => uint256)) internal allowed;\\n    uint256 internal totalSupply_;\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice Get the total supply of iTokens.\\n     * @return The total number of iTokens in existence as of now.\\n     * */\\n    function totalSupply() public view returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    /**\\n     * @notice Get the amount of iTokens owned by an account.\\n     * @param _owner The account owner of the iTokens.\\n     * @return The number of iTokens an account owns.\\n     * */\\n    function balanceOf(address _owner) public view returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n    /**\\n     * @notice Get the amount of iTokens allowed to be spent by a\\n     *   given account on behalf of the owner.\\n     * @param _owner The account owner of the iTokens.\\n     * @param _spender The account allowed to send the iTokens.\\n     * @return The number of iTokens an account is allowing the spender\\n     *   to send on its behalf.\\n     * */\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\n        return allowed[_owner][_spender];\\n    }\\n}\\n\",\"keccak256\":\"0x08afb0584442da1baf29938b6ff797e22fc8b7e493e51fd26358e7be3b73fa32\"},\"contracts/connectors/loantoken/LoanTokenBase.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"../../openzeppelin/SafeMath.sol\\\";\\nimport \\\"../../openzeppelin/SignedSafeMath.sol\\\";\\nimport \\\"../../openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../openzeppelin/Address.sol\\\";\\nimport \\\"../../interfaces/IWrbtcERC20.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"../../reentrancy/SharedReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Loan Token Base contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized margin\\n * trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * Specific loan related storage for iTokens.\\n *\\n * An loan token or iToken is a representation of a user funds in the pool and the\\n * interest they've earned. The redemption value of iTokens continually increase\\n * from the accretion of interest paid into the lending pool by borrowers. The user\\n * can sell iTokens to exit its position. The user might potentially use them as\\n * collateral wherever applicable.\\n *\\n * There are three main tokens in the bZx system, iTokens, pTokens, and BZRX tokens.\\n * The bZx system of lending and borrowing depends on iTokens and pTokens, and when\\n * users lend or borrow money on bZx, their crypto assets go into or come out of\\n * global liquidity pools, which are pools of funds shared between many different\\n * exchanges. When lenders supply funds into the global liquidity pools, they\\n * automatically receive iTokens; When users borrow money to open margin trading\\n * positions, they automatically receive pTokens. The system is also designed to\\n * use the BZRX tokens, which are only used to pay fees on the network currently.\\n * */\\ncontract LoanTokenBase is ReentrancyGuard, SharedReentrancyGuard, Ownable, Pausable {\\n    uint256 internal constant WEI_PRECISION = 10**18;\\n    uint256 internal constant WEI_PERCENT_PRECISION = 10**20;\\n\\n    int256 internal constant sWEI_PRECISION = 10**18;\\n\\n    /// @notice Standard ERC-20 properties\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    /// @notice The address of the loan token (asset to lend) instance.\\n    address public loanTokenAddress;\\n\\n    uint256 public baseRate;\\n    uint256 public rateMultiplier;\\n    uint256 public lowUtilBaseRate;\\n    uint256 public lowUtilRateMultiplier;\\n\\n    uint256 public targetLevel;\\n    uint256 public kinkLevel;\\n    uint256 public maxScaleRate;\\n\\n    uint256 internal _flTotalAssetSupply;\\n    uint256 public checkpointSupply;\\n    uint256 public initialPrice;\\n\\n    /// uint88 for tight packing -> 8 + 88 + 160 = 256\\n    uint88 internal lastSettleTime_;\\n\\n    /// Mapping of keccak256(collateralToken, isTorqueLoan) to loanParamsId.\\n    mapping(uint256 => bytes32) public loanParamsIds;\\n\\n    /// Price of token at last user checkpoint.\\n    mapping(address => uint256) internal checkpointPrices_;\\n\\n    // the maximum trading/borrowing/lending limit per token address\\n    mapping(address => uint256) public transactionLimit;\\n    // 0 -> no limit\\n}\\n\",\"keccak256\":\"0x9cb501d26d27b5bc143085b6d38261323426741857e49ff5dea0ea1325b5fab8\"},\"contracts/connectors/loantoken/LoanTokenLogicShared.sol\":{\"content\":\"pragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LoanTokenLogicStorage.sol\\\";\\nimport \\\"./interfaces/ProtocolLike.sol\\\";\\nimport \\\"./interfaces/FeedsLike.sol\\\";\\nimport \\\"./interfaces/ProtocolSettingsLike.sol\\\";\\nimport \\\"../../modules/interfaces/ProtocolAffiliatesInterface.sol\\\";\\nimport \\\"../../farm/ILiquidityMining.sol\\\";\\nimport \\\"../../governance/Staking/interfaces/IStaking.sol\\\";\\nimport \\\"../../governance/Vesting/IVesting.sol\\\";\\n\\n/**\\n * @dev This contract shares functions used by both LoanTokenLogicSplit and LoanTokenLogicStandard\\n */\\ncontract LoanTokenLogicShared is LoanTokenLogicStorage {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    /// DON'T ADD VARIABLES HERE, PLEASE\\n\\n    /**\\n     * @notice Update the user's checkpoint price and profit so far.\\n     * In this loan token contract, whenever some tokens are minted or burned,\\n     * the _updateCheckpoints() function is invoked to update the stats to\\n     * reflect the balance changes.\\n     *\\n     * @param _user The user address.\\n     * @param _oldBalance The user's previous balance.\\n     * @param _newBalance The user's updated balance.\\n     * @param _currentPrice The current loan token price.\\n     * */\\n    function _updateCheckpoints(\\n        address _user,\\n        uint256 _oldBalance,\\n        uint256 _newBalance,\\n        uint256 _currentPrice\\n    ) internal {\\n        /// @dev keccak256(\\\"iToken_ProfitSoFar\\\")\\n        bytes32 slot = keccak256(abi.encodePacked(_user, iToken_ProfitSoFar));\\n\\n        int256 _currentProfit;\\n        if (_newBalance == 0) {\\n            _currentPrice = 0;\\n        } else if (_oldBalance != 0) {\\n            _currentProfit = _profitOf(slot, _oldBalance, _currentPrice, checkpointPrices_[_user]);\\n        }\\n\\n        assembly {\\n            sstore(slot, _currentProfit)\\n        }\\n\\n        checkpointPrices_[_user] = _currentPrice;\\n    }\\n\\n    /** INTERNAL FUNCTION */\\n\\n    /**\\n     * @notice Transfer tokens, low level.\\n     * Checks allowance, updates sender and recipient balances\\n     * and updates checkpoints too.\\n     *\\n     * @param _from The tokens' owner.\\n     * @param _to The recipient of the tokens.\\n     * @param _value The amount of tokens sent.\\n     * @param _allowanceAmount The amount of tokens allowed to transfer.\\n     *\\n     * @return Success true/false.\\n     * */\\n    function _internalTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _allowanceAmount\\n    ) internal returns (bool) {\\n        if (_allowanceAmount != uint256(-1)) {\\n            allowed[_from][msg.sender] = _allowanceAmount.sub(_value, \\\"14\\\");\\n            /// @dev Allowance mapping update requires an event log\\n            emit AllowanceUpdate(_from, msg.sender, _allowanceAmount, allowed[_from][msg.sender]);\\n        }\\n\\n        require(_to != address(0), \\\"15\\\");\\n\\n        uint256 _balancesFrom = balances[_from];\\n        uint256 _balancesFromNew = _balancesFrom.sub(_value, \\\"16\\\");\\n        balances[_from] = _balancesFromNew;\\n\\n        uint256 _balancesTo = balances[_to];\\n        uint256 _balancesToNew = _balancesTo.add(_value);\\n        balances[_to] = _balancesToNew;\\n\\n        /// @dev Handle checkpoint update.\\n        uint256 _currentPrice = tokenPrice();\\n\\n        //checkpoints are not being used by the smart contract logic itself, but just for external use (query the profit)\\n        //only update the checkpoints of a user if he's not depositing to / withdrawing from the lending pool\\n        if (_from != liquidityMiningAddress && _to != liquidityMiningAddress) {\\n            _updateCheckpoints(_from, _balancesFrom, _balancesFromNew, _currentPrice);\\n            _updateCheckpoints(_to, _balancesTo, _balancesToNew, _currentPrice);\\n        }\\n\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Profit calculation based on checkpoints of price.\\n     * @param slot The user slot.\\n     * @param _balance The user balance.\\n     * @param _currentPrice The current price of the loan token.\\n     * @param _checkpointPrice The price of the loan token on checkpoint.\\n     * @return The profit of a user.\\n     * */\\n    function _profitOf(\\n        bytes32 slot,\\n        uint256 _balance,\\n        uint256 _currentPrice,\\n        uint256 _checkpointPrice\\n    ) internal view returns (int256 profitSoFar) {\\n        if (_checkpointPrice == 0) {\\n            return 0;\\n        }\\n\\n        assembly {\\n            profitSoFar := sload(slot)\\n        }\\n\\n        profitSoFar = int256(_currentPrice)\\n            .sub(int256(_checkpointPrice))\\n            .mul(int256(_balance))\\n            .div(sWEI_PRECISION)\\n            .add(profitSoFar);\\n    }\\n\\n    /**\\n     * @notice Loan token price calculation considering unpaid interests.\\n     * @return The loan token price.\\n     * */\\n    function tokenPrice() public view returns (uint256 price) {\\n        uint256 interestUnPaid;\\n        if (lastSettleTime_ != uint88(block.timestamp)) {\\n            (, interestUnPaid) = _getAllInterest();\\n        }\\n\\n        return _tokenPrice(_totalAssetSupply(interestUnPaid));\\n    }\\n\\n    /**\\n     * @notice Get the total amount of loan tokens on debt.\\n     * Calls protocol getTotalPrincipal function.\\n     * In the context of borrowing, principal is the initial size of a loan.\\n     * It can also be the amount still owed on a loan. If you take out a\\n     * $50,000 mortgage, for example, the principal is $50,000. If you pay off\\n     * $30,000, the principal balance now consists of the remaining $20,000.\\n     *\\n     * @return The total amount of loan tokens on debt.\\n     * */\\n    function totalAssetBorrow() public view returns (uint256) {\\n        return\\n            ProtocolLike(sovrynContractAddress).getTotalPrincipal(address(this), loanTokenAddress);\\n    }\\n\\n    /** INTERNAL FUNCTION */\\n\\n    /**\\n     * @notice .\\n     *\\n     * @param collateralTokenAddress The address of the token to be used as\\n     *   collateral. Cannot be the loan token address.\\n     * @param sentAddresses The addresses to send tokens: lender, borrower,\\n     *   receiver and manager.\\n     * @param sentAmounts The amounts to send to each address.\\n     * @param withdrawalAmount The amount of tokens to withdraw.\\n     *\\n     * @return msgValue The amount of rBTC sent minus the collateral on tokens.\\n     * */\\n    function _verifyTransfers(\\n        address collateralTokenAddress,\\n        MarginTradeStructHelpers.SentAddresses memory sentAddresses,\\n        MarginTradeStructHelpers.SentAmounts memory sentAmounts,\\n        uint256 withdrawalAmount\\n    ) internal returns (uint256 msgValue) {\\n        address _wrbtcToken = wrbtcTokenAddress;\\n        address _loanTokenAddress = loanTokenAddress;\\n        uint256 newPrincipal = sentAmounts.newPrincipal;\\n        uint256 loanTokenSent = sentAmounts.loanTokenSent;\\n        uint256 collateralTokenSent = sentAmounts.collateralTokenSent;\\n\\n        require(_loanTokenAddress != collateralTokenAddress, \\\"26\\\");\\n\\n        msgValue = msg.value;\\n\\n        if (withdrawalAmount != 0) {\\n            /// withdrawOnOpen == true\\n            _safeTransfer(_loanTokenAddress, sentAddresses.receiver, withdrawalAmount, \\\"\\\");\\n            if (newPrincipal > withdrawalAmount) {\\n                _safeTransfer(\\n                    _loanTokenAddress,\\n                    sovrynContractAddress,\\n                    newPrincipal - withdrawalAmount,\\n                    \\\"\\\"\\n                );\\n            }\\n        } else {\\n            _safeTransfer(_loanTokenAddress, sovrynContractAddress, newPrincipal, \\\"27\\\");\\n        }\\n        /**\\n         * This is a critical piece of code!\\n         * rBTC are supposed to be held by the contract itself, while other tokens are being transfered from the sender directly.\\n         * */\\n        if (collateralTokenSent != 0) {\\n            if (\\n                collateralTokenAddress == _wrbtcToken &&\\n                msgValue != 0 &&\\n                msgValue >= collateralTokenSent\\n            ) {\\n                IWrbtc(_wrbtcToken).deposit.value(collateralTokenSent)();\\n                _safeTransfer(\\n                    collateralTokenAddress,\\n                    sovrynContractAddress,\\n                    collateralTokenSent,\\n                    \\\"28-a\\\"\\n                );\\n                msgValue -= collateralTokenSent;\\n            } else {\\n                _safeTransferFrom(\\n                    collateralTokenAddress,\\n                    msg.sender,\\n                    sovrynContractAddress,\\n                    collateralTokenSent,\\n                    \\\"28-b\\\"\\n                );\\n            }\\n        }\\n\\n        if (loanTokenSent != 0) {\\n            _safeTransferFrom(\\n                _loanTokenAddress,\\n                msg.sender,\\n                sovrynContractAddress,\\n                loanTokenSent,\\n                \\\"29\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw loan token interests from protocol.\\n     * This function only operates once per block.\\n     * It asks protocol to withdraw accrued interests for the loan token.\\n     *\\n     * @dev Internal sync required on every loan trade before starting.\\n     * */\\n    function _settleInterest() internal {\\n        uint88 ts = uint88(block.timestamp);\\n        if (lastSettleTime_ != ts) {\\n            ProtocolLike(sovrynContractAddress).withdrawAccruedInterest(loanTokenAddress);\\n\\n            lastSettleTime_ = ts;\\n        }\\n    }\\n\\n    /**\\n     * @notice Imitate a Solidity high-level call (i.e. a regular function\\n     * call to a contract), relaxing the requirement on the return value:\\n     * the return value is optional (but if data is returned, it must not be\\n     * false).\\n     *\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     * @param errorMsg The error message on failure.\\n     * */\\n    function _callOptionalReturn(\\n        address token,\\n        bytes memory data,\\n        string memory errorMsg\\n    ) internal {\\n        require(Address.isContract(token), \\\"call to a non-contract address\\\");\\n        (bool success, bytes memory returndata) = token.call(data);\\n        require(success, errorMsg);\\n\\n        if (returndata.length != 0) {\\n            require(abi.decode(returndata, (bool)), errorMsg);\\n        }\\n    }\\n\\n    /**\\n     * @notice Execute the ERC20 token's `transfer` function and reverts\\n     * upon failure the main purpose of this function is to prevent a non\\n     * standard ERC20 token from failing silently.\\n     *\\n     * @dev Wrappers around ERC20 operations that throw on failure (when the\\n     * token contract returns false). Tokens that return no value (and instead\\n     * revert or throw on failure) are also supported, non-reverting calls are\\n     * assumed to be successful.\\n     *\\n     * @param token The ERC20 token address.\\n     * @param to The target address.\\n     * @param amount The transfer amount.\\n     * @param errorMsg The error message on failure.\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        string memory errorMsg\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(IERC20(token).transfer.selector, to, amount),\\n            errorMsg\\n        );\\n    }\\n\\n    /**\\n     * @notice Execute the ERC20 token's `transferFrom` function and reverts\\n     * upon failure the main purpose of this function is to prevent a non\\n     * standard ERC20 token from failing silently.\\n     *\\n     * @dev Wrappers around ERC20 operations that throw on failure (when the\\n     * token contract returns false). Tokens that return no value (and instead\\n     * revert or throw on failure) are also supported, non-reverting calls are\\n     * assumed to be successful.\\n     *\\n     * @param token The ERC20 token address.\\n     * @param from The source address.\\n     * @param to The target address.\\n     * @param amount The transfer amount.\\n     * @param errorMsg The error message on failure.\\n     */\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        string memory errorMsg\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(IERC20(token).transferFrom.selector, from, to, amount),\\n            errorMsg\\n        );\\n    }\\n\\n    /** Internal view function */\\n    /**\\n     * @notice Compute the token price.\\n     * @param assetSupply The amount of loan tokens supplied.\\n     * @return The token price.\\n     * */\\n    function _tokenPrice(uint256 assetSupply) internal view returns (uint256) {\\n        uint256 totalTokenSupply = totalSupply_;\\n\\n        return\\n            totalTokenSupply != 0 ? assetSupply.mul(10**18).div(totalTokenSupply) : initialPrice;\\n    }\\n\\n    /**\\n     * @notice Get two kind of interests: owed per day and yet to be paid.\\n     * @return interestOwedPerDay The interest per day.\\n     * @return interestUnPaid The interest not yet paid.\\n     * */\\n    function _getAllInterest()\\n        internal\\n        view\\n        returns (uint256 interestOwedPerDay, uint256 interestUnPaid)\\n    {\\n        /// interestPaid, interestPaidDate, interestOwedPerDay, interestUnPaid, interestFeePercent, principalTotal\\n        uint256 interestFeePercent;\\n        (, , interestOwedPerDay, interestUnPaid, interestFeePercent, ) = ProtocolLike(\\n            sovrynContractAddress\\n        )\\n            .getLenderInterestData(address(this), loanTokenAddress);\\n\\n        interestUnPaid = interestUnPaid.mul(SafeMath.sub(10**20, interestFeePercent)).div(10**20);\\n    }\\n\\n    /**\\n     * @notice Compute the total amount of loan tokens on supply.\\n     * @param interestUnPaid The interest not yet paid.\\n     * @return assetSupply The total amount of loan tokens on supply.\\n     * */\\n    function _totalAssetSupply(uint256 interestUnPaid)\\n        internal\\n        view\\n        returns (uint256 assetSupply)\\n    {\\n        if (totalSupply_ != 0) {\\n            uint256 assetsBalance = _flTotalAssetSupply; /// Temporary locked totalAssetSupply during a flash loan transaction.\\n            if (assetsBalance == 0) {\\n                assetsBalance = _underlyingBalance().add(totalAssetBorrow());\\n            }\\n\\n            return assetsBalance.add(interestUnPaid);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the loan contract balance.\\n     * @return The balance of the loan token for this contract.\\n     * */\\n    function _underlyingBalance() internal view returns (uint256) {\\n        return IERC20(loanTokenAddress).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf48f5305ffa6517e92585dafaf0b502e244a68f28889fc8d3cd7f4ec71892bae\"},\"contracts/connectors/loantoken/LoanTokenLogicSplit.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LoanTokenLogicShared.sol\\\";\\n\\n/**\\n * @title Loan Token Logic Standard contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized margin\\n * trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * Logic around loan tokens (iTokens) required to operate borrowing,\\n * and margin trading financial processes.\\n *\\n * The user provides funds to the lending pool using the mint function and\\n * withdraws funds from the lending pool using the burn function. Mint and\\n * burn refer to minting and burning loan tokens. Loan tokens represent a\\n * share of the pool and gather interest over time.\\n *\\n * Interest rates are determined by supply and demand. When a lender deposits\\n * funds, the interest rates go down. When a trader borrows funds, the\\n * interest rates go up. Fulcrum uses a simple linear interest rate formula\\n * of the form y = mx + b. The interest rate starts at 1% when loans aren't\\n * being utilized and scales up to 40% when all the funds in the loan pool\\n * are being borrowed.\\n *\\n * The borrow rate is determined at the time of the loan and represents the\\n * net contribution of each borrower. Each borrower's interest contribution\\n * is determined by the utilization rate of the pool and is netted against\\n * all prior borrows. This means that the total amount of interest flowing\\n * into the lending pool is not directly changed by lenders entering or\\n * exiting the pool. The entrance or exit of lenders only impacts how the\\n * interest payments are split up.\\n *\\n * For example, if there are 2 lenders with equal holdings each earning\\n * 5% APR, but one of the lenders leave, then the remaining lender will earn\\n * 10% APR since the interest payments don't have to be split between two\\n * individuals.\\n * */\\ncontract LoanTokenLogicSplit is LoanTokenLogicShared {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    /// DON'T ADD VARIABLES HERE, PLEASE\\n\\n    /* Public functions */\\n\\n    /**\\n     * @notice Mint loan token wrapper.\\n     * Adds a check before calling low level _mintToken function.\\n     * The function retrieves the tokens from the message sender, so make sure\\n     * to first approve the loan token contract to access your funds. This is\\n     * done by calling approve(address spender, uint amount) on the ERC20\\n     * token contract, where spender is the loan token contract address and\\n     * amount is the amount to be deposited.\\n     *\\n     * @param receiver The account getting the minted tokens.\\n     * @param depositAmount The amount of underlying tokens provided on the\\n     *   loan. (Not the number of loan tokens to mint).\\n     *\\n     * @return The amount of loan tokens minted.\\n     * */\\n    function mint(address receiver, uint256 depositAmount)\\n        external\\n        nonReentrant\\n        globallyNonReentrant\\n        returns (uint256 mintAmount)\\n    {\\n        return _mintToken(receiver, depositAmount);\\n    }\\n\\n    /**\\n     * @notice Burn loan token wrapper.\\n     * Adds a pay-out transfer after calling low level _burnToken function.\\n     * In order to withdraw funds to the pool, call burn on the respective\\n     * loan token contract. This will burn your loan tokens and send you the\\n     * underlying token in exchange.\\n     *\\n     * @param receiver The account getting the minted tokens.\\n     * @param burnAmount The amount of loan tokens to redeem.\\n     *\\n     * @return The amount of underlying tokens payed to lender.\\n     * */\\n    function burn(address receiver, uint256 burnAmount)\\n        external\\n        nonReentrant\\n        globallyNonReentrant\\n        returns (uint256 loanAmountPaid)\\n    {\\n        loanAmountPaid = _burnToken(burnAmount);\\n\\n        //this needs to be here and not in _burnTokens because of the WRBTC implementation\\n        if (loanAmountPaid != 0) {\\n            _safeTransfer(loanTokenAddress, receiver, loanAmountPaid, \\\"5\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice transfers the underlying asset from the msg.sender and mints tokens for the receiver\\n     * @param receiver the address of the iToken receiver\\n     * @param depositAmount the amount of underlying assets to be deposited\\n     * @return the amount of iTokens issued\\n     */\\n    function _mintToken(address receiver, uint256 depositAmount)\\n        internal\\n        returns (uint256 mintAmount)\\n    {\\n        uint256 currentPrice;\\n\\n        //calculate amount to mint and transfer the underlying asset\\n        (mintAmount, currentPrice) = _prepareMinting(depositAmount);\\n\\n        //compute balances needed for checkpoint update, considering that the user might have a pool token balance\\n        //on the liquidity mining contract\\n        uint256 balanceOnLM = 0;\\n        if (liquidityMiningAddress != address(0))\\n            balanceOnLM = ILiquidityMining(liquidityMiningAddress).getUserPoolTokenBalance(\\n                address(this),\\n                receiver\\n            );\\n        uint256 oldBalance = balances[receiver].add(balanceOnLM);\\n        uint256 newBalance = oldBalance.add(mintAmount);\\n\\n        //mint the tokens to the receiver\\n        _mint(receiver, mintAmount, depositAmount, currentPrice);\\n\\n        //update the checkpoint of the receiver\\n        _updateCheckpoints(receiver, oldBalance, newBalance, currentPrice);\\n    }\\n\\n    /**\\n     * calculates the amount of tokens to mint and transfers the underlying asset to this contract\\n     * @param depositAmount the amount of the underyling asset deposited\\n     * @return the amount to be minted\\n     */\\n    function _prepareMinting(uint256 depositAmount)\\n        internal\\n        returns (uint256 mintAmount, uint256 currentPrice)\\n    {\\n        require(depositAmount != 0, \\\"17\\\");\\n\\n        _settleInterest();\\n\\n        currentPrice = _tokenPrice(_totalAssetSupply(0));\\n        mintAmount = depositAmount.mul(10**18).div(currentPrice);\\n\\n        if (msg.value == 0) {\\n            _safeTransferFrom(loanTokenAddress, msg.sender, address(this), depositAmount, \\\"18\\\");\\n        } else {\\n            IWrbtc(wrbtcTokenAddress).deposit.value(depositAmount)();\\n        }\\n    }\\n\\n    /**\\n     * @notice A wrapper for AdvancedToken::_burn\\n     *\\n     * @param burnAmount The amount of loan tokens to redeem.\\n     *\\n     * @return The amount of underlying tokens payed to lender.\\n     * */\\n    function _burnToken(uint256 burnAmount) internal returns (uint256 loanAmountPaid) {\\n        require(burnAmount != 0, \\\"19\\\");\\n\\n        if (burnAmount > balanceOf(msg.sender)) {\\n            require(burnAmount == uint256(-1), \\\"32\\\");\\n            burnAmount = balanceOf(msg.sender);\\n        }\\n\\n        _settleInterest();\\n\\n        uint256 currentPrice = _tokenPrice(_totalAssetSupply(0));\\n\\n        uint256 loanAmountOwed = burnAmount.mul(currentPrice).div(10**18);\\n        uint256 loanAmountAvailableInContract = _underlyingBalance();\\n\\n        loanAmountPaid = loanAmountOwed;\\n        require(loanAmountPaid <= loanAmountAvailableInContract, \\\"37\\\");\\n\\n        //compute balances needed for checkpoint update, considering that the user might have a pool token balance\\n        //on the liquidity mining contract\\n        uint256 balanceOnLM = 0;\\n        if (liquidityMiningAddress != address(0))\\n            balanceOnLM = ILiquidityMining(liquidityMiningAddress).getUserPoolTokenBalance(\\n                address(this),\\n                msg.sender\\n            );\\n        uint256 oldBalance = balances[msg.sender].add(balanceOnLM);\\n        uint256 newBalance = oldBalance.sub(burnAmount);\\n\\n        _burn(msg.sender, burnAmount, loanAmountPaid, currentPrice);\\n\\n        //this function does not only update the checkpoints but also the current profit of the user\\n        //all for external use only\\n        _updateCheckpoints(msg.sender, oldBalance, newBalance, currentPrice);\\n    }\\n\\n    function _mintWithLM(address receiver, uint256 depositAmount)\\n        internal\\n        returns (uint256 minted)\\n    {\\n        //mint the tokens for the receiver\\n        minted = _mintToken(receiver, depositAmount);\\n\\n        //transfer the tokens from the receiver to the LM address\\n        _internalTransferFrom(receiver, liquidityMiningAddress, minted, minted);\\n\\n        //inform the LM mining contract\\n        ILiquidityMining(liquidityMiningAddress).onTokensDeposited(receiver, minted);\\n    }\\n\\n    function _burnFromLM(uint256 burnAmount) internal returns (uint256) {\\n        uint256 balanceOnLM =\\n            ILiquidityMining(liquidityMiningAddress).getUserPoolTokenBalance(\\n                address(this),\\n                msg.sender\\n            );\\n        require(balanceOnLM.add(balanceOf(msg.sender)) >= burnAmount, \\\"not enough balance\\\");\\n\\n        if (balanceOnLM > 0) {\\n            //withdraw pool tokens and LM rewards to the passed address\\n            if (balanceOnLM < burnAmount) {\\n                ILiquidityMining(liquidityMiningAddress).withdraw(\\n                    address(this),\\n                    balanceOnLM,\\n                    msg.sender\\n                );\\n            } else {\\n                ILiquidityMining(liquidityMiningAddress).withdraw(\\n                    address(this),\\n                    burnAmount,\\n                    msg.sender\\n                );\\n            }\\n        }\\n        //burn the tokens of the msg.sender\\n        return _burnToken(burnAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x6d634ed4aa29978e107131e8fb0b77f95291cc59322b7058aafb3390db3529e7\"},\"contracts/connectors/loantoken/LoanTokenLogicStorage.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./AdvancedToken.sol\\\";\\n\\ncontract LoanTokenLogicStorage is AdvancedToken {\\n    /// DO NOT ADD VARIABLES HERE - SEE BELOW\\n\\n    /// @dev It is important to maintain the variables order so the delegate\\n    /// calls can access sovrynContractAddress\\n\\n    /// ------------- MUST BE THE SAME AS IN LoanToken CONTRACT -------------------\\n    address public sovrynContractAddress;\\n    address public wrbtcTokenAddress;\\n    address public target_;\\n    address public admin;\\n    /// ------------- END MUST BE THE SAME AS IN LoanToken CONTRACT -------------------\\n\\n    /// @dev Add new variables here on the bottom.\\n    address public earlyAccessToken; //not used anymore, but staying for upgradability\\n    address public pauser;\\n    /** The address of the liquidity mining contract */\\n    address public liquidityMiningAddress;\\n\\n    /** The address of the staking contract */\\n    address public stakingContractAddress;\\n\\n    /// @dev Used by flashBorrow function.\\n    uint256 public constant VERSION = 6;\\n    /// @dev Used by flashBorrow function.\\n    address internal constant arbitraryCaller = 0x000F400e6818158D541C3EBE45FE3AA0d47372FF;\\n    bytes32 internal constant iToken_ProfitSoFar =\\n        0x37aa2b7d583612f016e4a4de4292cb015139b3d7762663d06a53964912ea2fb6; // keccak256(\\\"iToken_ProfitSoFar\\\")\\n    uint256 public constant TINY_AMOUNT = 25e13;\\n\\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\\n        bytes memory tempEmptyStringTest = bytes(source);\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n\\n    modifier onlyPauserOrOwner() {\\n        require(isOwner() || msg.sender == pauser, \\\"unauthorized\\\"); // SS02\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xaa4a1499c18053dfb193b312b029081c6e8f07c780600e5a37943ae9f7c6ddcb\"},\"contracts/connectors/loantoken/Pausable.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title Pausable contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized margin\\n * trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * The contract implements pausable functionality by reading on slots the\\n * pause state of contract functions.\\n * */\\ncontract Pausable {\\n    /// keccak256(\\\"Pausable_FunctionPause\\\")\\n    bytes32 internal constant Pausable_FunctionPause =\\n        0xa7143c84d793a15503da6f19bf9119a2dac94448ca45d77c8bf08f57b2e91047;\\n\\n    modifier pausable(bytes4 sig) {\\n        require(!_isPaused(sig), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check whether a function is paused.\\n     *\\n     * @dev Used to read externally from the smart contract to see if a\\n     *   function is paused.\\n     *\\n     * @param sig The function ID, the selector on bytes4.\\n     *\\n     * @return isPaused Whether the function is paused: true or false.\\n     * */\\n    function _isPaused(bytes4 sig) internal view returns (bool isPaused) {\\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\\n        assembly {\\n            isPaused := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x54f95b041e66fbcadb867bfba626373b681e0000ecea2b19f521de89c3020690\"},\"contracts/connectors/loantoken/interfaces/FeedsLike.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\ninterface FeedsLike {\\n    function queryRate(address sourceTokenAddress, address destTokenAddress)\\n        external\\n        view\\n        returns (uint256 rate, uint256 precision);\\n}\\n\",\"keccak256\":\"0xc8786f355ccc5a00a4b0985c28f0063cb9480f53468d44b7c17b02c9bf13a970\"},\"contracts/connectors/loantoken/interfaces/ProtocolLike.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/MarginTradeStructHelpers.sol\\\";\\n\\ninterface ProtocolLike {\\n    function borrowOrTradeFromPool(\\n        bytes32 loanParamsId,\\n        bytes32 loanId, // if 0, start a new loan\\n        bool isTorqueLoan,\\n        uint256 initialMargin,\\n        MarginTradeStructHelpers.SentAddresses calldata sentAddresses,\\n        // lender: must match loan if loanId provided\\n        // borrower: must match loan if loanId provided\\n        // receiver: receiver of funds (address(0) assumes borrower address)\\n        // manager: delegated manager of loan unless address(0)\\n        MarginTradeStructHelpers.SentAmounts calldata sentValues,\\n        // newRate: new loan interest rate\\n        // newPrincipal: new loan size (borrowAmount + any borrowed interest)\\n        // torqueInterest: new amount of interest to escrow for Torque loan (determines initial loan length)\\n        // loanTokenReceived: total loanToken deposit (amount not sent to borrower in the case of Torque loans)\\n        // collateralTokenReceived: total collateralToken deposit\\n        bytes calldata loanDataBytes\\n    ) external payable returns (uint256 newPrincipal, uint256 newCollateral);\\n\\n    function getTotalPrincipal(address lender, address loanToken) external view returns (uint256);\\n\\n    function withdrawAccruedInterest(address loanToken) external;\\n\\n    function getLenderInterestData(address lender, address loanToken)\\n        external\\n        view\\n        returns (\\n            uint256 interestPaid,\\n            uint256 interestPaidDate,\\n            uint256 interestOwedPerDay,\\n            uint256 interestUnPaid,\\n            uint256 interestFeePercent,\\n            uint256 principalTotal\\n        );\\n\\n    function priceFeeds() external view returns (address);\\n\\n    function getEstimatedMarginExposure(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanTokenSent,\\n        uint256 collateralTokenSent,\\n        uint256 interestRate,\\n        uint256 newPrincipal\\n    ) external view returns (uint256);\\n\\n    function getRequiredCollateral(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 newPrincipal,\\n        uint256 marginAmount,\\n        bool isTorqueLoan\\n    ) external view returns (uint256 collateralAmountRequired);\\n\\n    function getBorrowAmount(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 collateralTokenAmount,\\n        uint256 marginAmount,\\n        bool isTorqueLoan\\n    ) external view returns (uint256 borrowAmount);\\n\\n    function isLoanPool(address loanPool) external view returns (bool);\\n\\n    function lendingFeePercent() external view returns (uint256);\\n\\n    function getSwapExpectedReturn(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceTokenAmount\\n    ) external view returns (uint256);\\n\\n    function borrowerNonce(address) external view returns (uint256);\\n\\n    function closeWithSwap(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 swapAmount, // denominated in collateralToken\\n        bool returnTokenIsCollateral, // true: withdraws collateralToken, false: withdraws loanToken\\n        bytes calldata // for future use /*loanDataBytes*/\\n    )\\n        external\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n\\n    function closeWithDeposit(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 depositAmount // denominated in loanToken\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n}\\n\",\"keccak256\":\"0x97e523a6ab51b439537b2ad5ef8c09cb01f99d210b2574cc54fb5062f900f2ab\"},\"contracts/connectors/loantoken/interfaces/ProtocolSettingsLike.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../core/objects/LoanParamsStruct.sol\\\";\\n\\ninterface ProtocolSettingsLike {\\n    function setupLoanParams(LoanParamsStruct.LoanParams[] calldata loanParamsList)\\n        external\\n        returns (bytes32[] memory loanParamsIdList);\\n\\n    function disableLoanParams(bytes32[] calldata loanParamsIdList) external;\\n\\n    function minInitialMargin(bytes32 loanParamsId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3e1ea57320782c4f65c58d9f28aff15eda65eef1f8e76551b2da920dffbf0c1e\"},\"contracts/connectors/loantoken/lib/MarginTradeStructHelpers.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nlibrary MarginTradeStructHelpers {\\n    struct SentAddresses {\\n        address lender;\\n        address borrower;\\n        address receiver;\\n        address manager;\\n    }\\n\\n    struct SentAmounts {\\n        uint256 interestRate;\\n        uint256 newPrincipal;\\n        uint256 interestInitialAmount;\\n        uint256 loanTokenSent;\\n        uint256 collateralTokenSent;\\n        uint256 minEntryPrice;\\n        uint256 loanToCollateralSwapRate;\\n        uint256 interestDuration;\\n        uint256 entryLeverage;\\n    }\\n}\\n\",\"keccak256\":\"0xf0612e2c0d13604a67c3d55efe88810c089f0b84ca63bd3ce82c1e09b0938973\"},\"contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../LoanTokenLogicSplit.sol\\\";\\n\\ncontract LoanTokenLogicWrbtcLM is LoanTokenLogicSplit {\\n    /**\\n     * @notice This function is MANDATORY, which will be called by LoanTokenLogicBeacon and be registered.\\n     * Every new public function, the signature needs to be included in this function.\\n     *\\n     * @dev This function will return the list of function signature in this contract that are available for public call\\n     * Then this function will be called by LoanTokenLogicBeacon, and the function signatures will be registred in LoanTokenLogicBeacon.\\n     * @dev To save the gas we can just directly return the list of function signature from this pure function.\\n     * The other workaround (fancy way) is we can create a storage for the list of the function signature, and then we can store each function signature to that storage from the constructor.\\n     * Then, in this function we just need to return that storage variable.\\n     *\\n     * @return The list of function signatures (bytes4[])\\n     */\\n    function getListFunctionSignatures()\\n        external\\n        pure\\n        returns (bytes4[] memory functionSignatures, bytes32 moduleName)\\n    {\\n        bytes4[] memory res = new bytes4[](4);\\n\\n        // Loan Token Mint and Burn.\\n        res[0] = this.mint.selector;\\n        res[1] = this.burn.selector;\\n\\n        // Loan Token WRBTC\\n        res[2] = this.mintWithBTC.selector;\\n        res[3] = this.burnToBTC.selector;\\n\\n        return (res, stringToBytes32(\\\"LoanTokenLogicWrbtcLM\\\"));\\n    }\\n\\n    function mintWithBTC(address receiver, bool useLM)\\n        external\\n        payable\\n        nonReentrant\\n        globallyNonReentrant\\n        returns (uint256 mintAmount)\\n    {\\n        if (useLM) return _mintWithLM(receiver, msg.value);\\n        else return _mintToken(receiver, msg.value);\\n    }\\n\\n    function burnToBTC(\\n        address receiver,\\n        uint256 burnAmount,\\n        bool useLM\\n    ) external nonReentrant globallyNonReentrant returns (uint256 loanAmountPaid) {\\n        loanAmountPaid = useLM ? _burnFromLM(burnAmount) : _burnToken(burnAmount);\\n\\n        if (loanAmountPaid != 0) {\\n            IWrbtcERC20(wrbtcTokenAddress).withdraw(loanAmountPaid);\\n            Address.sendValue(receiver, loanAmountPaid);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3344a9a09b082cc6166baf36f5a7c384c376c6416f2c9b5e5cbcceb88ec5168f\"},\"contracts/core/objects/LoanParamsStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Loan Parameters.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Loan Parameters.\\n * */\\ncontract LoanParamsStruct {\\n    struct LoanParams {\\n        /// @dev ID of loan params object.\\n        bytes32 id;\\n        /// @dev If false, this object has been disabled by the owner and can't\\n        ///   be used for future loans.\\n        bool active;\\n        /// @dev Owner of this object.\\n        address owner;\\n        /// @dev The token being loaned.\\n        address loanToken;\\n        /// @dev The required collateral token.\\n        address collateralToken;\\n        /// @dev The minimum allowed initial margin.\\n        uint256 minInitialMargin;\\n        /// @dev An unhealthy loan when current margin is at or below this value.\\n        uint256 maintenanceMargin;\\n        /// @dev The maximum term for new loans (0 means there's no max term).\\n        uint256 maxLoanTerm;\\n    }\\n}\\n\",\"keccak256\":\"0xe15aa97713521da7f501e5225af9d92cf34bd68d286dbfed86aa75aabb323945\"},\"contracts/farm/ILiquidityMining.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\ninterface ILiquidityMining {\\n    function withdraw(\\n        address _poolToken,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function onTokensDeposited(address _user, uint256 _amount) external;\\n\\n    function getUserPoolTokenBalance(address _poolToken, address _user)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xed5abb44e4a222ecf9d20998ad9ae2ee3715291c9ea6a30e0c74f0a0e6d08ea8\"},\"contracts/governance/Staking/interfaces/IStaking.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Interface for Staking modules governance/Staking/modules\\n */\\n\\ninterface IStaking {\\n    /*************************** StakingAdminModule ***************************/\\n\\n    /**\\n     * @notice Add account to Admins ACL.\\n     * @param _admin The addresses of the account to grant permissions.\\n     * */\\n    function addAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Remove account from Admins ACL.\\n     * @param _admin The addresses of the account to revoke permissions.\\n     * */\\n    function removeAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Add account to pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function addPauser(address _pauser) external;\\n\\n    /**\\n     * @notice Remove account from pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function removePauser(address _pauser) external;\\n\\n    /**\\n     * @notice Pause/unpause contract\\n     * @param _pause true when pausing, false when unpausing\\n     * */\\n    function pauseUnpause(bool _pause) external;\\n\\n    /**\\n     * @notice Freeze contract - disable all functions\\n     * @param _freeze true when freezing, false when unfreezing\\n     * @dev When freezing, pause is always applied too. When unfreezing, the contract is left in paused stated.\\n     * */\\n    function freezeUnfreeze(bool _freeze) external;\\n\\n    /**\\n     * @notice Allows the owner to set a fee sharing proxy contract.\\n     * We need it for unstaking with slashing.\\n     * @param _feeSharing The address of FeeSharingCollectorProxy contract.\\n     * */\\n    function setFeeSharing(address _feeSharing) external;\\n\\n    /**\\n     * @notice Allow the owner to set weight scaling.\\n     * We need it for unstaking with slashing.\\n     * @param _weightScaling The weight scaling.\\n     * */\\n    function setWeightScaling(uint96 _weightScaling) external;\\n\\n    /**\\n     * @notice Allow the owner to set a new staking contract.\\n     * As a consequence it allows the stakers to migrate their positions\\n     * to the new contract.\\n     * @dev Doesn't have any influence as long as migrateToNewStakingContract\\n     * is not implemented.\\n     * @param _newStakingContract The address of the new staking contract.\\n     * */\\n    function setNewStakingContract(address _newStakingContract) external;\\n\\n    /**\\n     * @notice Allow a staker to migrate his positions to the new staking contract.\\n     * @dev Staking contract needs to be set before by the owner.\\n     * Currently not implemented, just needed for the interface.\\n     *      In case it's needed at some point in the future,\\n     *      the implementation needs to be changed first.\\n     * */\\n    function migrateToNewStakingContract() external; // dummy - not implemented as of now\\n\\n    /*************************** StakingGovernanceModule ***************************/\\n\\n    /**\\n     * @notice Compute the total voting power at a given time.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @param time The timestamp for which to calculate the total voting power.\\n     * @return The total voting power at the given time.\\n     * */\\n    function getPriorTotalVotingPower(uint32 blockNumber, uint256 time)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Get the current votes balance for a user account.\\n     * @param account The address to get votes balance.\\n     * @dev This is a wrapper to simplify arguments. The actual computation is\\n     * performed on WeightedStaking parent contract.\\n     * @return The number of current votes for a user account.\\n     * */\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of votes for a delegatee as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will revert\\n     * to prevent misinformation.\\n     *      Used for Voting, not for fee sharing.\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The number of votes the delegatee had as of the given block.\\n     * */\\n    function getPriorVotes(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The staking date to compute the power for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorStakeByDateForDelegatee(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an unlocking date as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * TODO: WeightedStaking::getPriorTotalStakesForDate should probably better\\n     * be internal instead of a public function.\\n     * @param date The date to check the stakes for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorTotalStakesForDate(uint256 date, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` which are locked until lockDate to `delegatee`.\\n     * @param delegatee The address to delegate votes to.\\n     * @param lockDate the date if the position to delegate.\\n     * */\\n    function delegate(address delegatee, uint256 lockDate) external;\\n\\n    /*************************** StakingStakeModule ***************************/\\n\\n    event TokensStaked(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 lockedUntil,\\n        uint256 totalStaked\\n    );\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stake(\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @dev This function will be invoked from receiveApproval\\n     * @dev SOV.approveAndCall -> this.receiveApproval -> this.stakeWithApproval\\n     * @param sender The sender of SOV.approveAndCall\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeWithApproval(\\n        address sender,\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _data The data will be used for low level call.\\n     */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Extend the staking duration until the specified date.\\n     * @param previousLock The old unlocking timestamp.\\n     * @param until The new unlocking timestamp in seconds.\\n     * */\\n    function extendStakingDuration(uint256 previousLock, uint256 until) external;\\n\\n    /**\\n     * @dev DO NOT USE this misspelled function. Use stakeBySchedule function instead.\\n     * This function cannot be deprecated while we have non-upgradeable vesting contracts.\\n     * */\\n    function stakesBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Stake tokens according to the vesting schedule.\\n     * @param amount The amount of tokens to stake.\\n     * @param cliff The time interval to the first withdraw.\\n     * @param duration The staking duration.\\n     * @param intervalLength The length of each staking interval when cliff passed.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Get the number of staked tokens held by the user account.\\n     * @dev Iterate checkpoints adding up stakes.\\n     * @param account The address of the account to get the balance of.\\n     * @return The number of tokens held.\\n     * */\\n    function balanceOf(address account) external view returns (uint96 balance);\\n\\n    /**\\n     * @notice Get the current number of tokens staked for a day.\\n     * @param lockedTS The timestamp to get the staked tokens for.\\n     * */\\n    function getCurrentStakedUntil(uint256 lockedTS) external view returns (uint96);\\n\\n    /**\\n     * @notice Get list of stakes for a user account.\\n     * @param account The address to get stakes.\\n     * @return The arrays of dates and stakes.\\n     * */\\n    function getStakes(address account)\\n        external\\n        view\\n        returns (uint256[] memory dates, uint96[] memory stakes);\\n\\n    /**\\n     * @notice Unstaking is possible every 2 weeks only. This means, to\\n     * calculate the key value for the staking checkpoints, we need to\\n     * map the intended timestamp to the closest available date.\\n     * @param timestamp The unlocking timestamp.\\n     * @return The actual unlocking date (might be up to 2 weeks shorter than intended).\\n     * */\\n    function timestampToLockDate(uint256 timestamp) external view returns (uint256);\\n\\n    /*************************** StakingStorageModule ***************************/\\n\\n    /// @notice The maximum duration to stake tokens\\n    /// @return MAX_DURATION to stake tokens\\n    function getStorageMaxDurationToStakeTokens() external pure returns (uint256);\\n\\n    /// @notice The maximum possible voting weight before adding +1 (actually 10, but need 9 for computation).\\n    /// @return uint256(MAX_VOTING_WEIGHT);\\n    function getStorageMaxVotingWeight() external pure returns (uint256);\\n\\n    /// @notice weight is multiplied with this factor (for allowing decimals, like 1.2x).\\n    /// @dev MAX_VOTING_WEIGHT * WEIGHT_FACTOR needs to be < 792, because there are 100,000,000 SOV with 18 decimals\\n    /// @return uint256(WEIGHT_FACTOR);\\n    function getStorageWeightFactor() external pure returns (uint256);\\n\\n    /// @return uint256(DEFAULT_WEIGHT_SCALING);\\n    function getStorageDefaultWeightScaling() external pure returns (uint256);\\n\\n    /// @notice return (uint256(MIN_WEIGHT_SCALING), uint256(MAX_WEIGHT_SCALING))\\n    function getStorageRangeForWeightScaling()\\n        external\\n        pure\\n        returns (uint256 minWeightScaling, uint256 maxWeightScaling);\\n\\n    /// @notice The EIP-712 typehash for the contract's domain.\\n    /// @return uint256(DOMAIN_TYPEHASH);\\n    function getStorageDomainTypehash() external pure returns (uint256);\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\\n    /// @return uint256(DELEGATION_TYPEHASH);\\n    function getStorageDelegationTypehash() external pure returns (uint256);\\n\\n    /// @return name;\\n    function getStorageName() external view returns (string memory);\\n\\n    /// AUTOGENERATED FUNCTIONS FROM THE STAKING STORAGE PUBLIC VARIABLES ///\\n\\n    /// @notice The timestamp of contract creation. Base for the staking period calculation.\\n    function kickoffTS() external view returns (uint256);\\n\\n    /// @notice The token to be staked\\n    function SOVToken() external view returns (address);\\n\\n    /// @notice Stakers delegated voting power\\n    /// @param staker - the delegating address\\n    /// @param until - delegated voting\\n    /// @return _delegate - voting power delegated to address\\n    function delegates(address staker, uint256 until) external view returns (address _delegate);\\n\\n    /// @notice If this flag is set to true, all tokens are unlocked immediately\\n    /// see function unlockAllTokens() for details\\n    function allUnlocked() external view returns (bool);\\n\\n    /// @notice Used for stake migrations to a new staking contract with a different storage structure\\n    function newStakingContract() external view returns (address);\\n\\n    /// CHECKPOINTS\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 stake;\\n    }\\n\\n    /// @notice A record of tokens to be unstaked at a given time in total.\\n    /// For total voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev totalStakingCheckpoints[date][index] is a checkpoint\\n    function totalStakingCheckpoints(uint256 date, uint32 index)\\n        external\\n        view\\n        returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date.\\n    /// @dev numTotalStakingCheckpoints[date] is a number.\\n    function numTotalStakingCheckpoints(uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which were delegated to a certain address.\\n    /// For delegatee voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev delegateStakingCheckpoints[delegatee][date][index] is a checkpoint.\\n    function delegateStakingCheckpoints(\\n        address delagatee,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per delegate.\\n    /// @dev numDelegateStakingCheckpoints[delegatee][date] is a number.\\n    function numDelegateStakingCheckpoints(address delegatee, uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which per user address (address -> lockDate -> stake checkpoint)\\n    /// @dev userStakingCheckpoints[user][date][index] is a checkpoint.\\n    function userStakingCheckpoints(\\n        address user,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per user.\\n    /// @dev numUserStakingCheckpoints[user][date] is a number\\n    function numUserStakingCheckpoints(address user, uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of states for signing / validating signatures\\n    /// @dev nonces[user] is a number.\\n    function nonces(address user) external view returns (uint256 nonce);\\n\\n    /// SLASHING ///\\n\\n    /// @notice the address of FeeSharingCollectorProxy contract, we need it for unstaking with slashing.\\n    function feeSharing() external view returns (address);\\n\\n    /// @notice used for weight scaling when unstaking with slashing.\\n    /// @return uint96 DEFAULT_WEIGHT_SCALING\\n    function weightScaling() external view returns (uint96);\\n\\n    /// @notice List of vesting contracts, tokens for these contracts won't be slashed if unstaked by governance.\\n    /// @dev vestingWhitelist[contract] is true/false.\\n    function vestingWhitelist(address isWhitelisted) external view returns (bool);\\n\\n    /// @dev user => flag whether user has admin role.\\n    /// @dev multisig should be an admin, admin can invoke only governanceWithdrawVesting function,\\n    /// \\tthis function works only with Team Vesting contracts\\n    function admins(address isAdmin) external view returns (bool);\\n\\n    /// @dev vesting contract code hash => flag whether it's registered code hash\\n    function vestingCodeHashes(bytes32 vestingLogicCodeHash) external view returns (bool);\\n\\n    /// @notice A record of tokens to be unstaked from vesting contract at a given time (lockDate -> vest checkpoint)\\n    /// @dev vestingCheckpoints[date][index] is a checkpoint.\\n    function vestingCheckpoints(uint256 date, uint32 index)\\n        external\\n        view\\n        returns (Checkpoint memory);\\n\\n    /// @notice The number of total vesting checkpoints for each date.\\n    /// @dev numVestingCheckpoints[date] is a number.\\n    function numVestingCheckpoints(uint256 date) external view returns (uint32 checkpointsQty);\\n\\n    ///@notice vesting registry contract PROXY address\\n    function vestingRegistryLogic() external view returns (address);\\n\\n    /// @dev user => flag whether user has pauser role.\\n    function pausers(address isPauser) external view returns (bool);\\n\\n    /// @dev Staking contract is paused\\n    function paused() external view returns (bool);\\n\\n    /// @dev Staking contract is frozen\\n    function frozen() external view returns (bool);\\n\\n    /*************************** StakingVestingModule ***************************/\\n\\n    event VestingStakeSet(uint256 lockedTS, uint96 value);\\n\\n    /**\\n     * @notice Return flag whether the given address is a registered vesting contract.\\n     * @param stakerAddress the address to check\\n     */\\n    function isVestingContract(address stakerAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Remove vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function removeContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Add vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function addContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Determine the prior number of vested stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorVestingStakeByDate(uint256 date, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * @param date The staking date to compute the power for. Adjusted to the next valid lock date, if necessary.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedVestingStakeByDate(\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Determine the prior weighted vested amount for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     * TODO: WeightedStaking::getPriorVestingWeightedStake is using the variable name \\\"votes\\\"\\n     * to add up token stake, and that could be misleading.\\n     *\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorVestingWeightedStake(uint256 blockNumber, uint256 date)\\n        external\\n        view\\n        returns (uint96 votes);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorUserStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Sets the users' vesting stakes for a giving lock dates and writes checkpoints.\\n     * @param lockedDates The arrays of lock dates.\\n     * @param values The array of values to add to the staked balance.\\n     */\\n    function setVestingStakes(uint256[] calldata lockedDates, uint96[] calldata values) external;\\n\\n    /**\\n     * @notice sets vesting registry\\n     * @param _vestingRegistryProxy the address of vesting registry proxy contract\\n     * @dev _vestingRegistryProxy can be set to 0 as this function can be reused by\\n     * various other functionalities without the necessity of linking it with Vesting Registry\\n     */\\n    function setVestingRegistry(address _vestingRegistryProxy) external;\\n\\n    /*************************** StakingWithdrawModule ***************************/\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens if they are unlocked.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * */\\n    function withdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting\\n     * @dev **WARNING** This function should not be no longer used by Sovryn Protocol.\\n     * Sovryn protocol will use the cancelTeamVesting function for the withdrawal moving forward.\\n     * */\\n    function governanceWithdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw tokens for vesting contract.\\n     * @param vesting The address of Vesting contract.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting.\\n     * */\\n    function governanceWithdrawVesting(address vesting, address receiver) external;\\n\\n    /**\\n     * @notice Get available and punished amount for withdrawing.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * */\\n    function getWithdrawAmounts(uint96 amount, uint256 until)\\n        external\\n        view\\n        returns (uint96, uint96);\\n\\n    /**\\n     * @notice Allow the owner to unlock all tokens in case the staking contract\\n     * is going to be replaced\\n     * Note: Not reversible on purpose. once unlocked, everything is unlocked.\\n     * The owner should not be able to just quickly unlock to withdraw his own\\n     * tokens and lock again.\\n     * @dev Last resort.\\n     * */\\n    function unlockAllTokens() external;\\n\\n    /*************************** WeightedStakingModule ***************************/\\n\\n    /**\\n     * @notice Determine the prior weighted stake for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     *\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The date/timestamp of the unstaking time.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorWeightedStake(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96 priorWeightedStake);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * TODO: WeightedStaking::weightedStakeByDate should probably better\\n     * be internal instead of a public function.\\n     * @param account The user address.\\n     * @param date The staking date to compute the power for.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Compute the weight for a specific date.\\n     * @param date The unlocking date.\\n     * @param startDate We compute the weight for the tokens staked until 'date' on 'startDate'.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function computeWeightByDate(uint256 date, uint256 startDate)\\n        external\\n        pure\\n        returns (uint96 weight);\\n\\n    /**\\n     * @notice Returns public constant MAX_DURATION\\n     * preserved for backwards compatibility\\n     * Use getStorageMaxDurationToStakeTokens()\\n     * @return uint96 MAX_DURATION for staking\\n     **/\\n    function MAX_DURATION() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() external view returns (bool);\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @notice Governance withdraw vesting directly through staking contract.\\n     * This direct withdraw vesting solves the out of gas issue when there are too many iterations when withdrawing.\\n     * This function only allows cancelling vesting contract of the TeamVesting type.\\n     *\\n     * @param vesting The vesting address.\\n     * @param receiver The receiving address.\\n     * @param startFrom The start value for the iterations.\\n     */\\n    function cancelTeamVesting(\\n        address vesting,\\n        address receiver,\\n        uint256 startFrom\\n    ) external;\\n\\n    /**\\n     * @notice Max iteration for direct withdrawal from staking to prevent out of gas issue.\\n     *\\n     * @return max iteration value.\\n     */\\n    function getMaxVestingWithdrawIterations() external view returns (uint256);\\n\\n    /**\\n     * @dev set max withdraw iterations.\\n     *\\n     * @param maxIterations new max iterations value.\\n     */\\n    function setMaxVestingWithdrawIterations(uint256 maxIterations) external;\\n}\\n\",\"keccak256\":\"0x720bd2cc1042cb4abc2bd3a6839131638eafd3d224571ad9ac21cae36625ec2e\"},\"contracts/governance/Vesting/IVesting.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for Vesting contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * This interface is used by VestingLogic contract to implement stakeTokens function\\n * and on VestingRegistry contract to call IVesting(vesting).stakeTokens function\\n * at a vesting instance.\\n */\\ninterface IVesting {\\n    function duration() external returns (uint256);\\n\\n    function endDate() external returns (uint256);\\n\\n    function stakeTokens(uint256 amount) external;\\n\\n    function tokenOwner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3482a1e27402655f85f5ff2cb06e0876e9bb94e1a63446a09e33babd60274b4b\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _who) external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbc0c9bb48f19651930ec9aff366b2e11a1abf89c846e4b2d52d8102b15ce6721\"},\"contracts/interfaces/IWrbtc.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ninterface IWrbtc {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x20fdfe4b5e32fd7f863b3fa128e3c80bd4ccf090a4ffba56186ef3b7f2a80492\"},\"contracts/interfaces/IWrbtcERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./IWrbtc.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract IWrbtcERC20 is IWrbtc, IERC20 {}\\n\",\"keccak256\":\"0x7301a8c8ca7aa016ec94268a16d07366875f2e406442e929968dd745b1ee5be5\"},\"contracts/modules/interfaces/ProtocolAffiliatesInterface.sol\":{\"content\":\"/**\\n * Copyright 2020, Denis Savelev. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\ninterface ProtocolAffiliatesInterface {\\n    function setAffiliatesReferrer(address user, address referrer) external;\\n\\n    function setUserNotFirstTradeFlag(address user_) external;\\n\\n    function getUserNotFirstTradeFlag(address user_) external returns (bool);\\n\\n    function payTradingFeeToAffiliatesReferrer(\\n        address affiliate,\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256 affiliatesBonusSOVAmount, uint256 affiliatesBonusTokenAmount);\\n}\\n\",\"keccak256\":\"0x42f259156db09a06e3dcdf0ab9c6774712616b35e6baff97999a2a534d1c9c64\"},\"contracts/openzeppelin/Address.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html\\n     *   #use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x23df48a01dbac9b25e86c9131174fb7752bbc7e741e63f1aa982de22e055ad54\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen <remco@2\\u03c0.com>, Eenae <alexey@mixbytes.io>\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard {\\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\\n\\n    /// @dev Constant for locked guard state\\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\\n\\n    /**\\n     * @dev We use a single lock for the whole contract.\\n     */\\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * If you mark a function `nonReentrant`, you should also\\n     * mark it `external`. Calling one `nonReentrant` function from\\n     * another is not supported. Instead, you can implement a\\n     * `private` function doing the actual work, and an `external`\\n     * wrapper marked as `nonReentrant`.\\n     */\\n    modifier nonReentrant() {\\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \\\"nonReentrant\\\");\\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\\n        _;\\n        reentrancyLock = REENTRANCY_GUARD_FREE;\\n    }\\n}\\n\",\"keccak256\":\"0xd347de96ad57d1e45b07a2efe3050c1bd4b809236bbf354acb593de56d21a5c9\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"},\"contracts/openzeppelin/SignedSafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 private constant _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x449606d22a41bbeaeee8775d66b2bd179b6964b65fd3380b22ef837634e7523b\"},\"contracts/reentrancy/Mutex.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/*\\n * @title Global Mutex contract\\n *\\n * @notice A mutex contract that allows only one function to be called at a time out\\n * of a large set of functions. *Anyone* in the network can freely use any instance\\n * of this contract to add a universal mutex to any function in any contract.\\n */\\ncontract Mutex {\\n    /*\\n     * We use an uint to store the mutex state.\\n     */\\n    uint256 public value;\\n\\n    /*\\n     * @notice Increment the mutex state and return the new value.\\n     *\\n     * @dev This is the function that will be called by anyone to change the mutex\\n     * state. It is purposely not protected by any access control\\n     */\\n    function incrementAndGetValue() external returns (uint256) {\\n        /*\\n         * increment value using unsafe math. This is safe because we are\\n         * pretty certain no one will ever increment the value 2^256 times\\n         * in a single transaction.\\n         */\\n        return ++value;\\n    }\\n}\\n\",\"keccak256\":\"0xd10b0fd07d5fed1ae1237e7c87e6501970fce2a86e2b8862e502258b0d3aeb2c\"},\"contracts/reentrancy/SharedReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"./Mutex.sol\\\";\\n\\n/*\\n * @title Abstract contract for shared reentrancy guards\\n *\\n * @notice Exposes a single modifier `globallyNonReentrant` that can be used to ensure\\n * that there's no reentrancy between *any* functions marked with the modifier.\\n *\\n * @dev The Mutex contract address is hardcoded because the address is deployed using a\\n * special deployment method (similar to ERC1820Registry). This contract therefore has no\\n * state and is thus safe to add to the inheritance chain of upgradeable contracts.\\n */\\ncontract SharedReentrancyGuard {\\n    /*\\n     * This is the address of the mutex contract that will be used as the\\n     * reentrancy guard.\\n     *\\n     * The address is hardcoded to avoid changing the memory layout of\\n     * derived contracts (possibly upgradable). Hardcoding the address is possible,\\n     * because the Mutex contract is always deployed to the same address, with the\\n     * same method used in the deployment of ERC1820Registry.\\n     */\\n    Mutex private constant MUTEX = Mutex(0xba10edD6ABC7696Eae685839217BdcC42139612b);\\n\\n    /*\\n     * This is the modifier that will be used to protect functions from\\n     * reentrancy. It will call the mutex contract to increment the mutex\\n     * state and then revert if the mutex state was changed by another\\n     * nested call.\\n     */\\n    modifier globallyNonReentrant() {\\n        uint256 previous = MUTEX.incrementAndGetValue();\\n\\n        _;\\n\\n        /*\\n         * If the mutex state was changed by a nested function call, then\\n         * the value of the state variable will be different from the previous value.\\n         */\\n        require(previous == MUTEX.value(), \\\"reentrancy violation\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2d0e61b104b91c1764f20fbeb381ba0f8a8889934ba7f6e8a167ed542ec2c124\"}},\"version\":1}",
  "bytecode": "0x60806040526001600090815561001c6001600160e01b0361006f16565b600180546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610073565b3390565b61300a806100826000396000f3fe60806040526004361061023b5760003560e01c80638da5cb5b1161012e578063cfb51928116100ab578063f2fde38b1161006f578063f2fde38b146105da578063f851a440146105fc578063f8dd4f0e14610611578063fb5f83df14610626578063ffa1ad74146106395761023b565b8063cfb5192814610550578063d759dbeb14610570578063dd62ed3e14610585578063e41b07e3146105a5578063ef2b0b39146105c55761023b565b80639bda3a98116100f25780639bda3a98146104dc5780639dc29fac146104f15780639fd0506d14610511578063ba0e43bf14610526578063ca37e6661461053b5761023b565b80638da5cb5b146104655780638ee6c4e61461047a5780638f32d59b1461048f57806390967de5146104a457806395d89b41146104c75761023b565b80633291c11a116101bc57806370a082311161018057806370a08231146103f1578063797bf385146104115780637b7933b4146104265780637e37c08c1461043b5780637ff9b596146104505761023b565b80633291c11a14610372578063330691ac146103925780633535f48b146103a757806340c10f19146103bc57806356e07d70146103dc5761023b565b80631d0806ae116102035780631d0806ae146102fc5780631f68f20a1461031157806320f6d07c146103265780632f6b600d1461033b578063313ce567146103505761023b565b80630506af041461024057806306947a3a1461027657806306fdde0314610298578063095ea7b3146102ba57806318160ddd146102e7575b600080fd5b34801561024c57600080fd5b5061026061025b36600461252a565b61064e565b60405161026d9190612d0d565b60405180910390f35b34801561028257600080fd5b5061028b61084e565b60405161026d9190612c30565b3480156102a457600080fd5b506102ad61085d565b60405161026d9190612d1b565b3480156102c657600080fd5b506102da6102d53660046124fa565b6108e8565b60405161026d9190612cff565b3480156102f357600080fd5b50610260610953565b34801561030857600080fd5b50610260610959565b34801561031d57600080fd5b5061026061095f565b34801561033257600080fd5b50610260610965565b34801561034757600080fd5b5061028b6109f9565b34801561035c57600080fd5b50610365610a08565b60405161026d9190612e95565b34801561037e57600080fd5b5061026061038d3660046125ca565b610a11565b34801561039e57600080fd5b50610260610a23565b3480156103b357600080fd5b5061028b610a29565b3480156103c857600080fd5b506102606103d73660046124fa565b610a38565b3480156103e857600080fd5b50610260610bab565b3480156103fd57600080fd5b5061026061040c366004612472565b610bb1565b34801561041d57600080fd5b5061028b610bd0565b34801561043257600080fd5b50610260610be4565b34801561044757600080fd5b50610260610bea565b34801561045c57600080fd5b50610260610bf0565b34801561047157600080fd5b5061028b610c32565b34801561048657600080fd5b5061028b610c41565b34801561049b57600080fd5b506102da610c50565b3480156104b057600080fd5b506104b9610c76565b60405161026d929190612cdf565b3480156104d357600080fd5b506102ad610da8565b3480156104e857600080fd5b5061028b610e03565b3480156104fd57600080fd5b5061026061050c3660046124fa565b610e12565b34801561051d57600080fd5b5061028b610f14565b34801561053257600080fd5b50610260610f23565b34801561054757600080fd5b5061028b610f29565b34801561055c57600080fd5b5061026061056b366004612595565b610f38565b34801561057c57600080fd5b50610260610f56565b34801561059157600080fd5b506102606105a0366004612490565b610f5c565b3480156105b157600080fd5b506102606105c0366004612472565b610f87565b3480156105d157600080fd5b50610260610f99565b3480156105e657600080fd5b506105fa6105f5366004612472565b610f9f565b005b34801561060857600080fd5b5061028b610fcf565b34801561061d57600080fd5b50610260610fde565b6102606106343660046124ca565b610fe8565b34801561064557600080fd5b506102606110c0565b600060016000541461067b5760405162461bcd60e51b815260040161067290612e3c565b60405180910390fd5b6002600081905550600073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b031663ed04e1c36040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156106d457600080fd5b505af11580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061070c91908101906125e8565b9050826107215761071c846110c5565b61072a565b61072a84611288565b9150811561079e57601754604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90610762908590600401612d0d565b600060405180830381600087803b15801561077c57600080fd5b505af1158015610790573d6000803e3d6000fd5b5050505061079e8583611439565b73ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b0316633fa4f2456040518163ffffffff1660e01b815260040160206040518083038186803b1580156107eb57600080fd5b505afa1580156107ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061082391908101906125e8565b81146108415760405162461bcd60e51b815260040161067290612d2c565b5060016000559392505050565b6016546001600160a01b031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156108e05780601f106108b5576101008083540402835291602001916108e0565b820191906000526020600020905b8154815290600101906020018083116108c357829003601f168201915b505050505081565b3360008181526014602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610941908690612d0d565b60405180910390a35060015b92915050565b60155490565b600e5481565b60055481565b6016546004805460405163250f447f60e11b81526000936001600160a01b0390811693634a1e88fe936109a49330936101009092049091169101612c3e565b60206040518083038186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109f491908101906125e8565b905090565b6017546001600160a01b031681565b60045460ff1681565b60106020526000908152604090205481565b60065481565b601d546001600160a01b031681565b6000600160005414610a5c5760405162461bcd60e51b815260040161067290612e3c565b6002600081905550600073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b031663ed04e1c36040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aed91908101906125e8565b9050610af984846114da565b91505b73ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b0316633fa4f2456040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4957600080fd5b505afa158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b8191908101906125e8565b8114610b9f5760405162461bcd60e51b815260040161067290612d2c565b50600160005592915050565b600a5481565b6001600160a01b0381166000908152601360205260409020545b919050565b60045461010090046001600160a01b031681565b600d5481565b60085481565b600f546000908190426affffffffffffffffffffff908116911614610c1b57610c176115e6565b9150505b610c2c610c27826116b2565b611700565b91505090565b6001546001600160a01b031690565b601c546001600160a01b031681565b6001546000906001600160a01b0316610c6761172f565b6001600160a01b031614905090565b60408051600480825260a082019092526060916000918391602082016080803883390190505090506340c10f1960e01b81600081518110610cb357fe5b6001600160e01b0319909216602092830291909101909101528051632770a7eb60e21b9082906001908110610ce457fe5b6001600160e01b031990921660209283029190910190910152805163fb5f83df60e01b9082906002908110610d1557fe5b6001600160e01b0319909216602092830291909101909101528051630141abc160e21b9082906003908110610d4657fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505080610d9f604051806040016040528060158152602001744c6f616e546f6b656e4c6f67696357726274634c4d60581b815250610f38565b92509250509091565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108e05780601f106108b5576101008083540402835291602001916108e0565b6018546001600160a01b031681565b6000600160005414610e365760405162461bcd60e51b815260040161067290612e3c565b6002600081905550600073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b031663ed04e1c36040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e8f57600080fd5b505af1158015610ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ec791908101906125e8565b9050610ed2836110c5565b91508115610afc57610afc600460019054906101000a90046001600160a01b03168584604051806040016040528060018152602001603560f81b815250611733565b601b546001600160a01b031681565b60095481565b601a546001600160a01b031681565b80516000908290610f4d575060009050610bcb565b50506020015190565b60075481565b6001600160a01b03918216600090815260146020908152604080832093909416825291909152205490565b60126020526000908152604090205481565b600b5481565b610fa7610c50565b610fc35760405162461bcd60e51b815260040161067290612e0c565b610fcc81611793565b50565b6019546001600160a01b031681565b65e35fa931a00081565b600060016000541461100c5760405162461bcd60e51b815260040161067290612e3c565b6002600081905550600073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b031663ed04e1c36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561106557600080fd5b505af1158015611079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061109d91908101906125e8565b905082156110b6576110af8434611815565b9150610afc565b6110af84346114da565b600681565b6000816110e45760405162461bcd60e51b815260040161067290612e1c565b6110ed33610bb1565b8211156111215760001982146111155760405162461bcd60e51b815260040161067290612ddc565b61111e33610bb1565b91505b61112961189e565b6000611138610c2760006116b2565b90506000611164670de0b6b3a7640000611158868563ffffffff61194c16565b9063ffffffff61198616565b905060006111706119c8565b9050819350808411156111955760405162461bcd60e51b815260040161067290612dbc565b601c546000906001600160a01b03161561122e57601c54604051636822955360e11b81526001600160a01b039091169063d0452aa6906111db9030903390600401612c59565b60206040518083038186803b1580156111f357600080fd5b505afa158015611207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061122b91908101906125e8565b90505b3360009081526013602052604081205461124e908363ffffffff6119fe16565b90506000611262828963ffffffff611a2316565b905061127033898989611a65565b5061127d33838389611b9d565b505050505050919050565b601c54604051636822955360e11b815260009182916001600160a01b039091169063d0452aa6906112bf9030903390600401612c59565b60206040518083038186803b1580156112d757600080fd5b505afa1580156112eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061130f91908101906125e8565b90508261132b61131e33610bb1565b839063ffffffff6119fe16565b10156113495760405162461bcd60e51b815260040161067290612dac565b801561142957828110156113c257601c54604051631a4ca37b60e21b81526001600160a01b03909116906369328dec9061138b90309085903390600401612cb7565b600060405180830381600087803b1580156113a557600080fd5b505af11580156113b9573d6000803e3d6000fd5b50505050611429565b601c54604051631a4ca37b60e21b81526001600160a01b03909116906369328dec906113f690309087903390600401612cb7565b600060405180830381600087803b15801561141057600080fd5b505af1158015611424573d6000803e3d6000fd5b505050505b611432836110c5565b9392505050565b804710156114595760405162461bcd60e51b815260040161067290612d9c565b6000826001600160a01b03168260405161147290612c25565b60006040518083038185875af1925050503d80600081146114af576040519150601f19603f3d011682016040523d82523d6000602084013e6114b4565b606091505b50509050806114d55760405162461bcd60e51b815260040161067290612d8c565b505050565b6000806114e683611c53565b601c5491935091506000906001600160a01b03161561158457601c54604051636822955360e11b81526001600160a01b039091169063d0452aa6906115319030908990600401612c3e565b60206040518083038186803b15801561154957600080fd5b505afa15801561155d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061158191908101906125e8565b90505b6001600160a01b0385166000908152601360205260408120546115ad908363ffffffff6119fe16565b905060006115c1828663ffffffff6119fe16565b90506115cf87868887611d5d565b506115dc87838387611b9d565b5050505092915050565b60165460048054604051630d1979fb60e41b8152600093849384936001600160a01b039283169363d1979fb09361162893309361010090049091169101612c3e565b60c06040518083038186803b15801561164057600080fd5b505afa158015611654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116789190810190612606565b50919650945092506116ab915068056bc75e2d63100000905061115861169e8285611a23565b859063ffffffff61194c16565b9150509091565b6000601554600014610bcb57600c54806116e8576116e56116d1610965565b6116d96119c8565b9063ffffffff6119fe16565b90505b6116f8818463ffffffff6119fe16565b915050610bcb565b6015546000908061171357600e54611432565b6114328161115885670de0b6b3a764000063ffffffff61194c16565b3390565b60405161178d90859063a9059cbb60e01b906117559087908790602401612c9c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915283611e6d565b50505050565b6001600160a01b0381166117b95760405162461bcd60e51b815260040161067290612d5c565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b600061182183836114da565b601c5490915061183d9084906001600160a01b03168380611f59565b50601c546040516336305cf160e21b81526001600160a01b039091169063d8c173c4906118709086908590600401612c9c565b600060405180830381600087803b15801561188a57600080fd5b505af11580156115dc573d6000803e3d6000fd5b600f5442906affffffffffffffffffffff808316911614610fcc5760165460048054604051630740ff7d60e51b81526001600160a01b039384169363e81fefa0936118f29361010090049091169101612c30565b600060405180830381600087803b15801561190c57600080fd5b505af1158015611920573d6000803e3d6000fd5b5050600f80546affffffffffffffffffffff85166affffffffffffffffffffff19909116179055505050565b60008261195b5750600061094d565b8282028284828161196857fe5b04146114325760405162461bcd60e51b815260040161067290612dfc565b600061143283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612169565b600480546040516370a0823160e01b81526000926101009092046001600160a01b0316916370a08231916109a491309101612c30565b6000828201838110156114325760405162461bcd60e51b815260040161067290612d6c565b600061143283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506121a0565b6040805180820182526002815261189b60f11b6020808301919091526001600160a01b03871660009081526013909152918220548291611aad9190879063ffffffff6121a016565b9050600a8111611ace57611ac7858263ffffffff6119fe16565b9450600090505b6001600160a01b0386166000908152601360205260409020819055601554611afc908663ffffffff611a2316565b6015556040516001600160a01b038716907f743033787f4738ff4d6a7225ce2bd0977ee5f86b91a902a58f5e4d0b297b464490611b3e90889088908890612e7a565b60405180910390a260006001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef87604051611b8a9190612d0d565b60405180910390a390505b949350505050565b604051600090611bd39086907f37aa2b7d583612f016e4a4de4292cb015139b3d7762663d06a53964912ea2fb690602001612bf3565b60405160208183030381529060405280519060200120905060008360001415611bff5760009250611c30565b8415611c30576001600160a01b038616600090815260116020526040902054611c2d908390879086906121cc565b90505b90556001600160a01b039093166000908152601160205260409020929092555050565b60008082611c735760405162461bcd60e51b815260040161067290612dec565b611c7b61189e565b611c88610c2760006116b2565b9050611ca68161115885670de0b6b3a764000063ffffffff61194c16565b915034611cee57611ce9600460019054906101000a90046001600160a01b031633308660405180604001604052806002815260200161062760f31b81525061222f565b611d58565b601760009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d3e57600080fd5b505af1158015611d52573d6000803e3d6000fd5b50505050505b915091565b60006001600160a01b038516611d855760405162461bcd60e51b815260040161067290612d3c565b6001600160a01b038516600090815260136020526040812054611dae908663ffffffff6119fe16565b6001600160a01b0387166000908152601360205260409020819055601554909150611ddf908663ffffffff6119fe16565b6015556040516001600160a01b038716907fb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb90611e2190889088908890612e7a565b60405180910390a2856001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef87604051611b8a9190612d0d565b611e7683612253565b611e925760405162461bcd60e51b815260040161067290612d4c565b60006060846001600160a01b031684604051611eae9190612c19565b6000604051808303816000865af19150503d8060008114611eeb576040519150601f19603f3d011682016040523d82523d6000602084013e611ef0565b606091505b5091509150818390611f155760405162461bcd60e51b81526004016106729190612d1b565b50805115611f525780806020019051611f319190810190612577565b8390611f505760405162461bcd60e51b81526004016106729190612d1b565b505b5050505050565b60006000198214611ff2576040805180820190915260028152610c4d60f21b6020820152611f90908390859063ffffffff6121a016565b6001600160a01b038616600081815260146020908152604080832033808552925291829020849055905190927f628e75c63c1873bcd3885f7aee9f58ee36f60dc789b2a6b3a978c4189bc548ba91611fe9918791612e6c565b60405180910390a35b6001600160a01b0384166120185760405162461bcd60e51b815260040161067290612d3c565b6001600160a01b03851660009081526013602090815260408083205481518083019092526002825261189b60f11b92820192909252909190612063908390879063ffffffff6121a016565b6001600160a01b0380891660009081526013602052604080822084905591891681529081205491925061209c828863ffffffff6119fe16565b6001600160a01b03891660009081526013602052604081208290559091506120c2610bf0565b601c549091506001600160a01b038b81169116148015906120f15750601c546001600160a01b038a8116911614155b1561210e576121028a868684611b9d565b61210e89848484611b9d565b886001600160a01b03168a6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8a6040516121519190612d0d565b60405180910390a35060019998505050505050505050565b6000818361218a5760405162461bcd60e51b81526004016106729190612d1b565b50600083858161219657fe5b0495945050505050565b600081848411156121c45760405162461bcd60e51b81526004016106729190612d1b565b505050900390565b6000816121db57506000611b95565b5083546122268161221a670de0b6b3a764000061220e88612202898963ffffffff61228c16565b9063ffffffff6122d216565b9063ffffffff61233d16565b9063ffffffff6123a116565b95945050505050565b604051611f529086906323b872dd60e01b9061175590889088908890602401612c74565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611b95575050151592915050565b60008183038183128015906122a15750838113155b806122b657506000831280156122b657508381135b6114325760405162461bcd60e51b815260040161067290612e4c565b6000826122e15750600061094d565b826000191480156122f55750600160ff1b82145b156123125760405162461bcd60e51b815260040161067290612e2c565b8282028284828161231f57fe5b05146114325760405162461bcd60e51b815260040161067290612e2c565b60008161235c5760405162461bcd60e51b815260040161067290612e5c565b816000191480156123705750600160ff1b83145b1561238d5760405162461bcd60e51b815260040161067290612dcc565b600082848161239857fe5b05949350505050565b60008282018183128015906123b65750838112155b806123cb57506000831280156123cb57508381125b6114325760405162461bcd60e51b815260040161067290612d7c565b803561094d81612fa1565b803561094d81612fb5565b805161094d81612fb5565b600082601f83011261241957600080fd5b813561242c61242782612eca565b612ea3565b9150808252602083016020830185838301111561244857600080fd5b612453838284612f48565b50505092915050565b803561094d81612fbe565b805161094d81612fbe565b60006020828403121561248457600080fd5b6000611b9584846123e7565b600080604083850312156124a357600080fd5b60006124af85856123e7565b92505060206124c0858286016123e7565b9150509250929050565b600080604083850312156124dd57600080fd5b60006124e985856123e7565b92505060206124c0858286016123f2565b6000806040838503121561250d57600080fd5b600061251985856123e7565b92505060206124c08582860161245c565b60008060006060848603121561253f57600080fd5b600061254b86866123e7565b935050602061255c8682870161245c565b925050604061256d868287016123f2565b9150509250925092565b60006020828403121561258957600080fd5b6000611b9584846123fd565b6000602082840312156125a757600080fd5b813567ffffffffffffffff8111156125be57600080fd5b611b9584828501612408565b6000602082840312156125dc57600080fd5b6000611b95848461245c565b6000602082840312156125fa57600080fd5b6000611b958484612467565b60008060008060008060c0878903121561261f57600080fd5b600061262b8989612467565b965050602061263c89828a01612467565b955050604061264d89828a01612467565b945050606061265e89828a01612467565b935050608061266f89828a01612467565b92505060a061268089828a01612467565b9150509295509295509295565b60006126998383612746565b505060200190565b6126aa81612f37565b82525050565b6126aa81612f05565b6126aa6126c582612f05565b612f80565b60006126d582612ef8565b6126df8185612efc565b93506126ea83612ef2565b8060005b83811015612718578151612702888261268d565b975061270d83612ef2565b9250506001016126ee565b509495945050505050565b6126aa81612f10565b6126aa81612f15565b6126aa61274182612f15565b612f15565b6126aa81612f18565b600061275a82612ef8565b6127648185610bcb565b9350612774818560208601612f54565b9290920192915050565b600061278982612ef8565b6127938185612efc565b93506127a3818560208601612f54565b6127ac81612f91565b9093019392505050565b60006127c3601483612efc565b733932b2b73a3930b731bc903b34b7b630ba34b7b760611b815260200192915050565b60006127f3600283612efc565b61313560f01b815260200192915050565b6000612811601e83612efc565b7f63616c6c20746f2061206e6f6e2d636f6e747261637420616464726573730000815260200192915050565b600061284a602683612efc565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000612892601b83612efc565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006128cb602183612efc565b7f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f8152607760f81b602082015260400192915050565b600061290e603a83612efc565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207281527f6563697069656e74206d61792068617665207265766572746564000000000000602082015260400192915050565b600061296d601d83612efc565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000815260200192915050565b60006129a6601283612efc565b716e6f7420656e6f7567682062616c616e636560701b815260200192915050565b60006129d4600283612efc565b61333760f01b815260200192915050565b60006129f2602183612efc565b7f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000612a35600283612efc565b61199960f11b815260200192915050565b6000612a53600283612efc565b61313760f01b815260200192915050565b6000612a71602183612efc565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000612ab4600c83612efc565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000612adc600283612efc565b61313960f01b815260200192915050565b6000612afa602783612efc565b7f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f815266766572666c6f7760c81b602082015260400192915050565b600061094d600083610bcb565b6000612b50600c83612efc565b6b1b9bdb9499595b9d1c985b9d60a21b815260200192915050565b6000612b78602483612efc565b7f5369676e6564536166654d6174683a207375627472616374696f6e206f766572815263666c6f7760e01b602082015260400192915050565b6000612bbe602083612efc565b7f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f815260200192915050565b6126aa81612f31565b6000612bff82856126b9565b601482019150612c0f8284612735565b5060200192915050565b6000611432828461274f565b600061094d82612b36565b6020810161094d82846126b0565b60408101612c4c82856126b0565b61143260208301846126b0565b60408101612c6782856126b0565b61143260208301846126a1565b60608101612c8282866126b0565b612c8f60208301856126b0565b611b95604083018461272c565b60408101612caa82856126b0565b611432602083018461272c565b60608101612cc582866126b0565b612cd2602083018561272c565b611b9560408301846126a1565b60408082528101612cf081856126ca565b9050611432602083018461272c565b6020810161094d8284612723565b6020810161094d828461272c565b60208082528101611432818461277e565b6020808252810161094d816127b6565b6020808252810161094d816127e6565b6020808252810161094d81612804565b6020808252810161094d8161283d565b6020808252810161094d81612885565b6020808252810161094d816128be565b6020808252810161094d81612901565b6020808252810161094d81612960565b6020808252810161094d81612999565b6020808252810161094d816129c7565b6020808252810161094d816129e5565b6020808252810161094d81612a28565b6020808252810161094d81612a46565b6020808252810161094d81612a64565b6020808252810161094d81612aa7565b6020808252810161094d81612acf565b6020808252810161094d81612aed565b6020808252810161094d81612b43565b6020808252810161094d81612b6b565b6020808252810161094d81612bb1565b60408101612caa828561272c565b60608101612e88828661272c565b612c8f602083018561272c565b6020810161094d8284612bea565b60405181810167ffffffffffffffff81118282101715612ec257600080fd5b604052919050565b600067ffffffffffffffff821115612ee157600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b600061094d82612f25565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b60ff1690565b600061094d82600061094d82612f05565b82818337506000910152565b60005b83811015612f6f578181015183820152602001612f57565b8381111561178d5750506000910152565b600061094d82600061094d82612f9b565b601f01601f191690565b60601b90565b612faa81612f05565b8114610fcc57600080fd5b612faa81612f10565b612faa81612f1556fea365627a7a723158205dd56bca311d7384ed20d98eeeea144154ddf5a9a85a67310f0d3a45711122906c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c80638da5cb5b1161012e578063cfb51928116100ab578063f2fde38b1161006f578063f2fde38b146105da578063f851a440146105fc578063f8dd4f0e14610611578063fb5f83df14610626578063ffa1ad74146106395761023b565b8063cfb5192814610550578063d759dbeb14610570578063dd62ed3e14610585578063e41b07e3146105a5578063ef2b0b39146105c55761023b565b80639bda3a98116100f25780639bda3a98146104dc5780639dc29fac146104f15780639fd0506d14610511578063ba0e43bf14610526578063ca37e6661461053b5761023b565b80638da5cb5b146104655780638ee6c4e61461047a5780638f32d59b1461048f57806390967de5146104a457806395d89b41146104c75761023b565b80633291c11a116101bc57806370a082311161018057806370a08231146103f1578063797bf385146104115780637b7933b4146104265780637e37c08c1461043b5780637ff9b596146104505761023b565b80633291c11a14610372578063330691ac146103925780633535f48b146103a757806340c10f19146103bc57806356e07d70146103dc5761023b565b80631d0806ae116102035780631d0806ae146102fc5780631f68f20a1461031157806320f6d07c146103265780632f6b600d1461033b578063313ce567146103505761023b565b80630506af041461024057806306947a3a1461027657806306fdde0314610298578063095ea7b3146102ba57806318160ddd146102e7575b600080fd5b34801561024c57600080fd5b5061026061025b36600461252a565b61064e565b60405161026d9190612d0d565b60405180910390f35b34801561028257600080fd5b5061028b61084e565b60405161026d9190612c30565b3480156102a457600080fd5b506102ad61085d565b60405161026d9190612d1b565b3480156102c657600080fd5b506102da6102d53660046124fa565b6108e8565b60405161026d9190612cff565b3480156102f357600080fd5b50610260610953565b34801561030857600080fd5b50610260610959565b34801561031d57600080fd5b5061026061095f565b34801561033257600080fd5b50610260610965565b34801561034757600080fd5b5061028b6109f9565b34801561035c57600080fd5b50610365610a08565b60405161026d9190612e95565b34801561037e57600080fd5b5061026061038d3660046125ca565b610a11565b34801561039e57600080fd5b50610260610a23565b3480156103b357600080fd5b5061028b610a29565b3480156103c857600080fd5b506102606103d73660046124fa565b610a38565b3480156103e857600080fd5b50610260610bab565b3480156103fd57600080fd5b5061026061040c366004612472565b610bb1565b34801561041d57600080fd5b5061028b610bd0565b34801561043257600080fd5b50610260610be4565b34801561044757600080fd5b50610260610bea565b34801561045c57600080fd5b50610260610bf0565b34801561047157600080fd5b5061028b610c32565b34801561048657600080fd5b5061028b610c41565b34801561049b57600080fd5b506102da610c50565b3480156104b057600080fd5b506104b9610c76565b60405161026d929190612cdf565b3480156104d357600080fd5b506102ad610da8565b3480156104e857600080fd5b5061028b610e03565b3480156104fd57600080fd5b5061026061050c3660046124fa565b610e12565b34801561051d57600080fd5b5061028b610f14565b34801561053257600080fd5b50610260610f23565b34801561054757600080fd5b5061028b610f29565b34801561055c57600080fd5b5061026061056b366004612595565b610f38565b34801561057c57600080fd5b50610260610f56565b34801561059157600080fd5b506102606105a0366004612490565b610f5c565b3480156105b157600080fd5b506102606105c0366004612472565b610f87565b3480156105d157600080fd5b50610260610f99565b3480156105e657600080fd5b506105fa6105f5366004612472565b610f9f565b005b34801561060857600080fd5b5061028b610fcf565b34801561061d57600080fd5b50610260610fde565b6102606106343660046124ca565b610fe8565b34801561064557600080fd5b506102606110c0565b600060016000541461067b5760405162461bcd60e51b815260040161067290612e3c565b60405180910390fd5b6002600081905550600073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b031663ed04e1c36040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156106d457600080fd5b505af11580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061070c91908101906125e8565b9050826107215761071c846110c5565b61072a565b61072a84611288565b9150811561079e57601754604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90610762908590600401612d0d565b600060405180830381600087803b15801561077c57600080fd5b505af1158015610790573d6000803e3d6000fd5b5050505061079e8583611439565b73ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b0316633fa4f2456040518163ffffffff1660e01b815260040160206040518083038186803b1580156107eb57600080fd5b505afa1580156107ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061082391908101906125e8565b81146108415760405162461bcd60e51b815260040161067290612d2c565b5060016000559392505050565b6016546001600160a01b031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156108e05780601f106108b5576101008083540402835291602001916108e0565b820191906000526020600020905b8154815290600101906020018083116108c357829003601f168201915b505050505081565b3360008181526014602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610941908690612d0d565b60405180910390a35060015b92915050565b60155490565b600e5481565b60055481565b6016546004805460405163250f447f60e11b81526000936001600160a01b0390811693634a1e88fe936109a49330936101009092049091169101612c3e565b60206040518083038186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109f491908101906125e8565b905090565b6017546001600160a01b031681565b60045460ff1681565b60106020526000908152604090205481565b60065481565b601d546001600160a01b031681565b6000600160005414610a5c5760405162461bcd60e51b815260040161067290612e3c565b6002600081905550600073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b031663ed04e1c36040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aed91908101906125e8565b9050610af984846114da565b91505b73ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b0316633fa4f2456040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4957600080fd5b505afa158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b8191908101906125e8565b8114610b9f5760405162461bcd60e51b815260040161067290612d2c565b50600160005592915050565b600a5481565b6001600160a01b0381166000908152601360205260409020545b919050565b60045461010090046001600160a01b031681565b600d5481565b60085481565b600f546000908190426affffffffffffffffffffff908116911614610c1b57610c176115e6565b9150505b610c2c610c27826116b2565b611700565b91505090565b6001546001600160a01b031690565b601c546001600160a01b031681565b6001546000906001600160a01b0316610c6761172f565b6001600160a01b031614905090565b60408051600480825260a082019092526060916000918391602082016080803883390190505090506340c10f1960e01b81600081518110610cb357fe5b6001600160e01b0319909216602092830291909101909101528051632770a7eb60e21b9082906001908110610ce457fe5b6001600160e01b031990921660209283029190910190910152805163fb5f83df60e01b9082906002908110610d1557fe5b6001600160e01b0319909216602092830291909101909101528051630141abc160e21b9082906003908110610d4657fe5b60200260200101906001600160e01b03191690816001600160e01b0319168152505080610d9f604051806040016040528060158152602001744c6f616e546f6b656e4c6f67696357726274634c4d60581b815250610f38565b92509250509091565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108e05780601f106108b5576101008083540402835291602001916108e0565b6018546001600160a01b031681565b6000600160005414610e365760405162461bcd60e51b815260040161067290612e3c565b6002600081905550600073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b031663ed04e1c36040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e8f57600080fd5b505af1158015610ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ec791908101906125e8565b9050610ed2836110c5565b91508115610afc57610afc600460019054906101000a90046001600160a01b03168584604051806040016040528060018152602001603560f81b815250611733565b601b546001600160a01b031681565b60095481565b601a546001600160a01b031681565b80516000908290610f4d575060009050610bcb565b50506020015190565b60075481565b6001600160a01b03918216600090815260146020908152604080832093909416825291909152205490565b60126020526000908152604090205481565b600b5481565b610fa7610c50565b610fc35760405162461bcd60e51b815260040161067290612e0c565b610fcc81611793565b50565b6019546001600160a01b031681565b65e35fa931a00081565b600060016000541461100c5760405162461bcd60e51b815260040161067290612e3c565b6002600081905550600073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b031663ed04e1c36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561106557600080fd5b505af1158015611079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061109d91908101906125e8565b905082156110b6576110af8434611815565b9150610afc565b6110af84346114da565b600681565b6000816110e45760405162461bcd60e51b815260040161067290612e1c565b6110ed33610bb1565b8211156111215760001982146111155760405162461bcd60e51b815260040161067290612ddc565b61111e33610bb1565b91505b61112961189e565b6000611138610c2760006116b2565b90506000611164670de0b6b3a7640000611158868563ffffffff61194c16565b9063ffffffff61198616565b905060006111706119c8565b9050819350808411156111955760405162461bcd60e51b815260040161067290612dbc565b601c546000906001600160a01b03161561122e57601c54604051636822955360e11b81526001600160a01b039091169063d0452aa6906111db9030903390600401612c59565b60206040518083038186803b1580156111f357600080fd5b505afa158015611207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061122b91908101906125e8565b90505b3360009081526013602052604081205461124e908363ffffffff6119fe16565b90506000611262828963ffffffff611a2316565b905061127033898989611a65565b5061127d33838389611b9d565b505050505050919050565b601c54604051636822955360e11b815260009182916001600160a01b039091169063d0452aa6906112bf9030903390600401612c59565b60206040518083038186803b1580156112d757600080fd5b505afa1580156112eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061130f91908101906125e8565b90508261132b61131e33610bb1565b839063ffffffff6119fe16565b10156113495760405162461bcd60e51b815260040161067290612dac565b801561142957828110156113c257601c54604051631a4ca37b60e21b81526001600160a01b03909116906369328dec9061138b90309085903390600401612cb7565b600060405180830381600087803b1580156113a557600080fd5b505af11580156113b9573d6000803e3d6000fd5b50505050611429565b601c54604051631a4ca37b60e21b81526001600160a01b03909116906369328dec906113f690309087903390600401612cb7565b600060405180830381600087803b15801561141057600080fd5b505af1158015611424573d6000803e3d6000fd5b505050505b611432836110c5565b9392505050565b804710156114595760405162461bcd60e51b815260040161067290612d9c565b6000826001600160a01b03168260405161147290612c25565b60006040518083038185875af1925050503d80600081146114af576040519150601f19603f3d011682016040523d82523d6000602084013e6114b4565b606091505b50509050806114d55760405162461bcd60e51b815260040161067290612d8c565b505050565b6000806114e683611c53565b601c5491935091506000906001600160a01b03161561158457601c54604051636822955360e11b81526001600160a01b039091169063d0452aa6906115319030908990600401612c3e565b60206040518083038186803b15801561154957600080fd5b505afa15801561155d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061158191908101906125e8565b90505b6001600160a01b0385166000908152601360205260408120546115ad908363ffffffff6119fe16565b905060006115c1828663ffffffff6119fe16565b90506115cf87868887611d5d565b506115dc87838387611b9d565b5050505092915050565b60165460048054604051630d1979fb60e41b8152600093849384936001600160a01b039283169363d1979fb09361162893309361010090049091169101612c3e565b60c06040518083038186803b15801561164057600080fd5b505afa158015611654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116789190810190612606565b50919650945092506116ab915068056bc75e2d63100000905061115861169e8285611a23565b859063ffffffff61194c16565b9150509091565b6000601554600014610bcb57600c54806116e8576116e56116d1610965565b6116d96119c8565b9063ffffffff6119fe16565b90505b6116f8818463ffffffff6119fe16565b915050610bcb565b6015546000908061171357600e54611432565b6114328161115885670de0b6b3a764000063ffffffff61194c16565b3390565b60405161178d90859063a9059cbb60e01b906117559087908790602401612c9c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915283611e6d565b50505050565b6001600160a01b0381166117b95760405162461bcd60e51b815260040161067290612d5c565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b600061182183836114da565b601c5490915061183d9084906001600160a01b03168380611f59565b50601c546040516336305cf160e21b81526001600160a01b039091169063d8c173c4906118709086908590600401612c9c565b600060405180830381600087803b15801561188a57600080fd5b505af11580156115dc573d6000803e3d6000fd5b600f5442906affffffffffffffffffffff808316911614610fcc5760165460048054604051630740ff7d60e51b81526001600160a01b039384169363e81fefa0936118f29361010090049091169101612c30565b600060405180830381600087803b15801561190c57600080fd5b505af1158015611920573d6000803e3d6000fd5b5050600f80546affffffffffffffffffffff85166affffffffffffffffffffff19909116179055505050565b60008261195b5750600061094d565b8282028284828161196857fe5b04146114325760405162461bcd60e51b815260040161067290612dfc565b600061143283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612169565b600480546040516370a0823160e01b81526000926101009092046001600160a01b0316916370a08231916109a491309101612c30565b6000828201838110156114325760405162461bcd60e51b815260040161067290612d6c565b600061143283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506121a0565b6040805180820182526002815261189b60f11b6020808301919091526001600160a01b03871660009081526013909152918220548291611aad9190879063ffffffff6121a016565b9050600a8111611ace57611ac7858263ffffffff6119fe16565b9450600090505b6001600160a01b0386166000908152601360205260409020819055601554611afc908663ffffffff611a2316565b6015556040516001600160a01b038716907f743033787f4738ff4d6a7225ce2bd0977ee5f86b91a902a58f5e4d0b297b464490611b3e90889088908890612e7a565b60405180910390a260006001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef87604051611b8a9190612d0d565b60405180910390a390505b949350505050565b604051600090611bd39086907f37aa2b7d583612f016e4a4de4292cb015139b3d7762663d06a53964912ea2fb690602001612bf3565b60405160208183030381529060405280519060200120905060008360001415611bff5760009250611c30565b8415611c30576001600160a01b038616600090815260116020526040902054611c2d908390879086906121cc565b90505b90556001600160a01b039093166000908152601160205260409020929092555050565b60008082611c735760405162461bcd60e51b815260040161067290612dec565b611c7b61189e565b611c88610c2760006116b2565b9050611ca68161115885670de0b6b3a764000063ffffffff61194c16565b915034611cee57611ce9600460019054906101000a90046001600160a01b031633308660405180604001604052806002815260200161062760f31b81525061222f565b611d58565b601760009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d3e57600080fd5b505af1158015611d52573d6000803e3d6000fd5b50505050505b915091565b60006001600160a01b038516611d855760405162461bcd60e51b815260040161067290612d3c565b6001600160a01b038516600090815260136020526040812054611dae908663ffffffff6119fe16565b6001600160a01b0387166000908152601360205260409020819055601554909150611ddf908663ffffffff6119fe16565b6015556040516001600160a01b038716907fb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb90611e2190889088908890612e7a565b60405180910390a2856001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef87604051611b8a9190612d0d565b611e7683612253565b611e925760405162461bcd60e51b815260040161067290612d4c565b60006060846001600160a01b031684604051611eae9190612c19565b6000604051808303816000865af19150503d8060008114611eeb576040519150601f19603f3d011682016040523d82523d6000602084013e611ef0565b606091505b5091509150818390611f155760405162461bcd60e51b81526004016106729190612d1b565b50805115611f525780806020019051611f319190810190612577565b8390611f505760405162461bcd60e51b81526004016106729190612d1b565b505b5050505050565b60006000198214611ff2576040805180820190915260028152610c4d60f21b6020820152611f90908390859063ffffffff6121a016565b6001600160a01b038616600081815260146020908152604080832033808552925291829020849055905190927f628e75c63c1873bcd3885f7aee9f58ee36f60dc789b2a6b3a978c4189bc548ba91611fe9918791612e6c565b60405180910390a35b6001600160a01b0384166120185760405162461bcd60e51b815260040161067290612d3c565b6001600160a01b03851660009081526013602090815260408083205481518083019092526002825261189b60f11b92820192909252909190612063908390879063ffffffff6121a016565b6001600160a01b0380891660009081526013602052604080822084905591891681529081205491925061209c828863ffffffff6119fe16565b6001600160a01b03891660009081526013602052604081208290559091506120c2610bf0565b601c549091506001600160a01b038b81169116148015906120f15750601c546001600160a01b038a8116911614155b1561210e576121028a868684611b9d565b61210e89848484611b9d565b886001600160a01b03168a6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8a6040516121519190612d0d565b60405180910390a35060019998505050505050505050565b6000818361218a5760405162461bcd60e51b81526004016106729190612d1b565b50600083858161219657fe5b0495945050505050565b600081848411156121c45760405162461bcd60e51b81526004016106729190612d1b565b505050900390565b6000816121db57506000611b95565b5083546122268161221a670de0b6b3a764000061220e88612202898963ffffffff61228c16565b9063ffffffff6122d216565b9063ffffffff61233d16565b9063ffffffff6123a116565b95945050505050565b604051611f529086906323b872dd60e01b9061175590889088908890602401612c74565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611b95575050151592915050565b60008183038183128015906122a15750838113155b806122b657506000831280156122b657508381135b6114325760405162461bcd60e51b815260040161067290612e4c565b6000826122e15750600061094d565b826000191480156122f55750600160ff1b82145b156123125760405162461bcd60e51b815260040161067290612e2c565b8282028284828161231f57fe5b05146114325760405162461bcd60e51b815260040161067290612e2c565b60008161235c5760405162461bcd60e51b815260040161067290612e5c565b816000191480156123705750600160ff1b83145b1561238d5760405162461bcd60e51b815260040161067290612dcc565b600082848161239857fe5b05949350505050565b60008282018183128015906123b65750838112155b806123cb57506000831280156123cb57508381125b6114325760405162461bcd60e51b815260040161067290612d7c565b803561094d81612fa1565b803561094d81612fb5565b805161094d81612fb5565b600082601f83011261241957600080fd5b813561242c61242782612eca565b612ea3565b9150808252602083016020830185838301111561244857600080fd5b612453838284612f48565b50505092915050565b803561094d81612fbe565b805161094d81612fbe565b60006020828403121561248457600080fd5b6000611b9584846123e7565b600080604083850312156124a357600080fd5b60006124af85856123e7565b92505060206124c0858286016123e7565b9150509250929050565b600080604083850312156124dd57600080fd5b60006124e985856123e7565b92505060206124c0858286016123f2565b6000806040838503121561250d57600080fd5b600061251985856123e7565b92505060206124c08582860161245c565b60008060006060848603121561253f57600080fd5b600061254b86866123e7565b935050602061255c8682870161245c565b925050604061256d868287016123f2565b9150509250925092565b60006020828403121561258957600080fd5b6000611b9584846123fd565b6000602082840312156125a757600080fd5b813567ffffffffffffffff8111156125be57600080fd5b611b9584828501612408565b6000602082840312156125dc57600080fd5b6000611b95848461245c565b6000602082840312156125fa57600080fd5b6000611b958484612467565b60008060008060008060c0878903121561261f57600080fd5b600061262b8989612467565b965050602061263c89828a01612467565b955050604061264d89828a01612467565b945050606061265e89828a01612467565b935050608061266f89828a01612467565b92505060a061268089828a01612467565b9150509295509295509295565b60006126998383612746565b505060200190565b6126aa81612f37565b82525050565b6126aa81612f05565b6126aa6126c582612f05565b612f80565b60006126d582612ef8565b6126df8185612efc565b93506126ea83612ef2565b8060005b83811015612718578151612702888261268d565b975061270d83612ef2565b9250506001016126ee565b509495945050505050565b6126aa81612f10565b6126aa81612f15565b6126aa61274182612f15565b612f15565b6126aa81612f18565b600061275a82612ef8565b6127648185610bcb565b9350612774818560208601612f54565b9290920192915050565b600061278982612ef8565b6127938185612efc565b93506127a3818560208601612f54565b6127ac81612f91565b9093019392505050565b60006127c3601483612efc565b733932b2b73a3930b731bc903b34b7b630ba34b7b760611b815260200192915050565b60006127f3600283612efc565b61313560f01b815260200192915050565b6000612811601e83612efc565b7f63616c6c20746f2061206e6f6e2d636f6e747261637420616464726573730000815260200192915050565b600061284a602683612efc565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000612892601b83612efc565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006128cb602183612efc565b7f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f8152607760f81b602082015260400192915050565b600061290e603a83612efc565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207281527f6563697069656e74206d61792068617665207265766572746564000000000000602082015260400192915050565b600061296d601d83612efc565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000815260200192915050565b60006129a6601283612efc565b716e6f7420656e6f7567682062616c616e636560701b815260200192915050565b60006129d4600283612efc565b61333760f01b815260200192915050565b60006129f2602183612efc565b7f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000612a35600283612efc565b61199960f11b815260200192915050565b6000612a53600283612efc565b61313760f01b815260200192915050565b6000612a71602183612efc565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000612ab4600c83612efc565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000612adc600283612efc565b61313960f01b815260200192915050565b6000612afa602783612efc565b7f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f815266766572666c6f7760c81b602082015260400192915050565b600061094d600083610bcb565b6000612b50600c83612efc565b6b1b9bdb9499595b9d1c985b9d60a21b815260200192915050565b6000612b78602483612efc565b7f5369676e6564536166654d6174683a207375627472616374696f6e206f766572815263666c6f7760e01b602082015260400192915050565b6000612bbe602083612efc565b7f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f815260200192915050565b6126aa81612f31565b6000612bff82856126b9565b601482019150612c0f8284612735565b5060200192915050565b6000611432828461274f565b600061094d82612b36565b6020810161094d82846126b0565b60408101612c4c82856126b0565b61143260208301846126b0565b60408101612c6782856126b0565b61143260208301846126a1565b60608101612c8282866126b0565b612c8f60208301856126b0565b611b95604083018461272c565b60408101612caa82856126b0565b611432602083018461272c565b60608101612cc582866126b0565b612cd2602083018561272c565b611b9560408301846126a1565b60408082528101612cf081856126ca565b9050611432602083018461272c565b6020810161094d8284612723565b6020810161094d828461272c565b60208082528101611432818461277e565b6020808252810161094d816127b6565b6020808252810161094d816127e6565b6020808252810161094d81612804565b6020808252810161094d8161283d565b6020808252810161094d81612885565b6020808252810161094d816128be565b6020808252810161094d81612901565b6020808252810161094d81612960565b6020808252810161094d81612999565b6020808252810161094d816129c7565b6020808252810161094d816129e5565b6020808252810161094d81612a28565b6020808252810161094d81612a46565b6020808252810161094d81612a64565b6020808252810161094d81612aa7565b6020808252810161094d81612acf565b6020808252810161094d81612aed565b6020808252810161094d81612b43565b6020808252810161094d81612b6b565b6020808252810161094d81612bb1565b60408101612caa828561272c565b60608101612e88828661272c565b612c8f602083018561272c565b6020810161094d8284612bea565b60405181810167ffffffffffffffff81118282101715612ec257600080fd5b604052919050565b600067ffffffffffffffff821115612ee157600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b600061094d82612f25565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b60ff1690565b600061094d82600061094d82612f05565b82818337506000910152565b60005b83811015612f6f578181015183820152602001612f57565b8381111561178d5750506000910152565b600061094d82600061094d82612f9b565b601f01601f191690565b60601b90565b612faa81612f05565b8114610fcc57600080fd5b612faa81612f10565b612faa81612f1556fea365627a7a723158205dd56bca311d7384ed20d98eeeea144154ddf5a9a85a67310f0d3a45711122906c6578706572696d656e74616cf564736f6c63430005110040",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "params": {
          "_owner": "The account owner of the iTokens.",
          "_spender": "The account allowed to send the iTokens."
        },
        "return": "The number of iTokens an account is allowing the spender  to send on its behalf."
      },
      "approve(address,uint256)": {
        "params": {
          "_spender": "The account address that will be able to spend the tokens.",
          "_value": "The amount of tokens allowed to spend."
        }
      },
      "balanceOf(address)": {
        "params": {
          "_owner": "The account owner of the iTokens."
        },
        "return": "The number of iTokens an account owns."
      },
      "burn(address,uint256)": {
        "params": {
          "burnAmount": "The amount of loan tokens to redeem.",
          "receiver": "The account getting the minted tokens."
        },
        "return": "The amount of underlying tokens payed to lender."
      },
      "getListFunctionSignatures()": {
        "details": "This function will return the list of function signature in this contract that are available for public call Then this function will be called by LoanTokenLogicBeacon, and the function signatures will be registred in LoanTokenLogicBeacon.To save the gas we can just directly return the list of function signature from this pure function. The other workaround (fancy way) is we can create a storage for the list of the function signature, and then we can store each function signature to that storage from the constructor. Then, in this function we just need to return that storage variable.",
        "return": "The list of function signatures (bytes4[])"
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "mint(address,uint256)": {
        "params": {
          "depositAmount": "The amount of underlying tokens provided on the  loan. (Not the number of loan tokens to mint).",
          "receiver": "The account getting the minted tokens."
        },
        "return": "The amount of loan tokens minted."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "tokenPrice()": {
        "return": "The loan token price."
      },
      "totalAssetBorrow()": {
        "return": "The total amount of loan tokens on debt."
      },
      "totalSupply()": {
        "return": "The total number of iTokens in existence as of now."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {
      "allowance(address,address)": {
        "notice": "Get the amount of iTokens allowed to be spent by a  given account on behalf of the owner."
      },
      "approve(address,uint256)": {
        "notice": "Set an amount as the allowance of `spender` over the caller's tokens.     * Returns a boolean value indicating whether the operation succeeded.     * IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729     * Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "notice": "Get the amount of iTokens owned by an account."
      },
      "burn(address,uint256)": {
        "notice": "Burn loan token wrapper. Adds a pay-out transfer after calling low level _burnToken function. In order to withdraw funds to the pool, call burn on the respective loan token contract. This will burn your loan tokens and send you the underlying token in exchange."
      },
      "getListFunctionSignatures()": {
        "notice": "This function is MANDATORY, which will be called by LoanTokenLogicBeacon and be registered. Every new public function, the signature needs to be included in this function."
      },
      "mint(address,uint256)": {
        "notice": "Mint loan token wrapper. Adds a check before calling low level _mintToken function. The function retrieves the tokens from the message sender, so make sure to first approve the loan token contract to access your funds. This is done by calling approve(address spender, uint amount) on the ERC20 token contract, where spender is the loan token contract address and amount is the amount to be deposited."
      },
      "tokenPrice()": {
        "notice": "Loan token price calculation considering unpaid interests."
      },
      "totalAssetBorrow()": {
        "notice": "Get the total amount of loan tokens on debt. Calls protocol getTotalPrincipal function. In the context of borrowing, principal is the initial size of a loan. It can also be the amount still owed on a loan. If you take out a $50,000 mortgage, for example, the principal is $50,000. If you pay off $30,000, the principal balance now consists of the remaining $20,000."
      },
      "totalSupply()": {
        "notice": "Get the total supply of iTokens."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54603,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "reentrancyLock",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 54419,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 483,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 485,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 487,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "decimals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 489,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "loanTokenAddress",
        "offset": 1,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 491,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "baseRate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 493,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "rateMultiplier",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 495,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "lowUtilBaseRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 497,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "lowUtilRateMultiplier",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 499,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "targetLevel",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 501,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "kinkLevel",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 503,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "maxScaleRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 505,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "_flTotalAssetSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 507,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "checkpointSupply",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 509,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "initialPrice",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 511,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "lastSettleTime_",
        "offset": 0,
        "slot": "15",
        "type": "t_uint88"
      },
      {
        "astId": 515,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "loanParamsIds",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 519,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "checkpointPrices_",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 523,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "transactionLimit",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 236,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "balances",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 242,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "allowed",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 244,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "totalSupply_",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 3991,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "sovrynContractAddress",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 3993,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "wrbtcTokenAddress",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 3995,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "target_",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 3997,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "admin",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      },
      {
        "astId": 3999,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "earlyAccessToken",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 4001,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "pauser",
        "offset": 0,
        "slot": "27",
        "type": "t_address"
      },
      {
        "astId": 4003,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "liquidityMiningAddress",
        "offset": 0,
        "slot": "28",
        "type": "t_address"
      },
      {
        "astId": 4005,
        "contract": "contracts/connectors/loantoken/modules/beaconLogicWRBTC/LoanTokenLogicWrbtcLM.sol:LoanTokenLogicWrbtcLM",
        "label": "stakingContractAddress",
        "offset": 0,
        "slot": "29",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint88": {
        "encoding": "inplace",
        "label": "uint88",
        "numberOfBytes": "11"
      }
    }
  }
}