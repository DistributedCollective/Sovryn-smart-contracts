{
  "address": "0xB7134dFDd0149D44FA0ac340eBc4f1518c8f0A68",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "closer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "loanToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralWithdrawAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralToLoanRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentMargin",
          "type": "uint256"
        }
      ],
      "name": "CloseWithDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "loanToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "closer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionCloseSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanCloseAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentLeverage",
          "type": "uint256"
        }
      ],
      "name": "CloseWithSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeRebatePercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basisPoint",
          "type": "uint256"
        }
      ],
      "name": "EarnReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeRebatePercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basisPoint",
          "type": "uint256"
        }
      ],
      "name": "EarnRewardFail",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destAmount",
          "type": "uint256"
        }
      ],
      "name": "ExternalSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "loanToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralWithdrawAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralToLoanRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentMargin",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destAmount",
          "type": "uint256"
        }
      ],
      "name": "LoanSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayBorrowingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "interestToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "effectiveInterest",
          "type": "uint256"
        }
      ],
      "name": "PayInterestTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayLendingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayTradingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevModuleContractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newModuleContractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "module",
          "type": "bytes32"
        }
      ],
      "name": "ProtocolModuleContractReplaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Rollover",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VaultDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VaultWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "shouldRefund",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInRbtc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "swapExcess",
      "type": "event"
    },
    {
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "TINY_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "affiliateFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "affiliateRewardsHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "affiliateTradingTokenFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "affiliatesReferrerBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "affiliatesUserReferrer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowerNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "borrowerOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLoanTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLoanTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationTimestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "borrowingFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowingFeeTokensHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowingFeeTokensPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegatedManagers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeRebatePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feesController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lenderInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principalTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "owedPerDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "owedTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paidTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedTimestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "lenderOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLoanTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLoanTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationTimestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lendingFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lendingFeeTokensHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lendingFeeTokensPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "loanId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "closeAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanCloseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seizedAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seizedToken",
          "type": "address"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "liquidationIncentivePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "loanInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "owedPerDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedTimestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "loanParams",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "loanToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minInitialMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maintenanceMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLoanTerm",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loanPoolToUnderlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "loanParamsId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "pendingTradesId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lockedSOVAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "logicTargets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxDisagreement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxSwapSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minReferralsToPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "paySwapExcessToBorrowerThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "priceFeeds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolTokenHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rolloverBaseReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rolloverFlexFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sourceBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sovTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sovrynSwapContractRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "specialRebates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "swapsImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tradingFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tradingFeeTokensHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tradingFeeTokensPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "underlyingToLoanPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userNotFirstTradeFlag",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "wrbtcToken",
      "outputs": [
        {
          "internalType": "contract IWrbtcERC20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x72d8159c8cab47c1250b2590a451d34ceddbf4b9ce4e6b3a61eef65b45eeec67",
  "receipt": {
    "to": null,
    "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
    "contractAddress": "0xB7134dFDd0149D44FA0ac340eBc4f1518c8f0A68",
    "transactionIndex": 1,
    "gasUsed": "4462895",
    "logsBloom": "0x
    "blockHash": "0x0f740f599d729dadafff5f0796ce3ab65d191d6a6e06b7d09a21bfecb573914e",
    "transactionHash": "0x72d8159c8cab47c1250b2590a451d34ceddbf4b9ce4e6b3a61eef65b45eeec67",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 4578756,
        "transactionHash": "0x72d8159c8cab47c1250b2590a451d34ceddbf4b9ce4e6b3a61eef65b45eeec67",
        "address": "0xB7134dFDd0149D44FA0ac340eBc4f1518c8f0A68",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000013be55487d37fe3c66ee7305e1e9c1ac85de75ae"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0f740f599d729dadafff5f0796ce3ab65d191d6a6e06b7d09a21bfecb573914e"
      }
    ],
    "blockNumber": 4578756,
    "cumulativeGasUsed": "4524644",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9310031b42d2950fea7a6220c73f2cc4",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"closer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralWithdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralToLoanRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentMargin\",\"type\":\"uint256\"}],\"name\":\"CloseWithDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"closer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionCloseSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanCloseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentLeverage\",\"type\":\"uint256\"}],\"name\":\"CloseWithSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRebatePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"}],\"name\":\"EarnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRebatePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"}],\"name\":\"EarnRewardFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"}],\"name\":\"ExternalSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralWithdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralToLoanRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentMargin\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"}],\"name\":\"LoanSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayBorrowingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"interestToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveInterest\",\"type\":\"uint256\"}],\"name\":\"PayInterestTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayLendingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayTradingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevModuleContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newModuleContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"module\",\"type\":\"bytes32\"}],\"name\":\"ProtocolModuleContractReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Rollover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VaultDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VaultWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"shouldRefund\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInRbtc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"swapExcess\",\"type\":\"event\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"TINY_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateRewardsHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateTradingTokenFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliatesReferrerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliatesUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowerNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"borrowerOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRebatePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lenderInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principalTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lenderOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"closeAmount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanCloseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seizedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seizedToken\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationIncentivePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owedPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanParams\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintenanceMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loanPoolToUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"loanParamsId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pendingTradesId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedSOVAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"logicTargets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDisagreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSwapSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minReferralsToPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paySwapExcessToBorrowerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rolloverBaseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rolloverFlexFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sourceBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sovTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sovrynSwapContractRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"specialRebates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapsImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underlyingToLoanPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNotFirstTradeFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wrbtcToken\",\"outputs\":[{\"internalType\":\"contract IWrbtcERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"liquidate(bytes32,address,uint256)\":{\"details\":\"Public wrapper for _liquidate internal function.     * The caller needs to approve the closeAmount prior to calling. Will not liquidate more than is needed to restore the desired margin (maintenance +5%).     * Whenever the current margin of a loan falls below maintenance margin, it needs to be liquidated. Anybody can initiate a liquidation and buy the collateral tokens at a discounted rate (5%).\",\"params\":{\"closeAmount\":\"The amount to close in loanTokens.\",\"loanId\":\"The ID of the loan to liquidate.  loanId is the ID of the loan, which is created on loan opening.  It can be obtained either by parsing the Trade event or by reading  the open loans from the contract by calling getActiveLoans or getUserLoans.\",\"receiver\":\"The receiver of the seized amount.\"},\"return\":\"loanCloseAmount The amount of the collateral token of the loan.seizedAmount The seized amount in the collateral token.seizedToken The loan token address.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"LoanClosingsLiquidation contract.\"},\"userdoc\":{\"methods\":{\"liquidate(bytes32,address,uint256)\":{\"notice\":\"Liquidate an unhealty loan.\"}},\"notice\":\"Ways to close a loan: liquidation. Margin trade  positions are always closed with a swap. * Loans are liquidated if the position goes below margin maintenance.\"}},\"settings\":{\"compilationTarget\":{\"contracts/modules/LoanClosingsLiquidation.sol\":\"LoanClosingsLiquidation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/connectors/loantoken/lib/MarginTradeStructHelpers.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nlibrary MarginTradeStructHelpers {\\n    struct SentAddresses {\\n        address lender;\\n        address borrower;\\n        address receiver;\\n        address manager;\\n    }\\n\\n    struct SentAmounts {\\n        uint256 interestRate;\\n        uint256 newPrincipal;\\n        uint256 interestInitialAmount;\\n        uint256 loanTokenSent;\\n        uint256 collateralTokenSent;\\n        uint256 minEntryPrice;\\n        uint256 loanToCollateralSwapRate;\\n        uint256 interestDuration;\\n        uint256 entryLeverage;\\n    }\\n}\\n\",\"keccak256\":\"0xf0612e2c0d13604a67c3d55efe88810c089f0b84ca63bd3ce82c1e09b0938973\"},\"contracts/core/Objects.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./objects/LoanStruct.sol\\\";\\nimport \\\"./objects/LoanParamsStruct.sol\\\";\\nimport \\\"./objects/OrderStruct.sol\\\";\\nimport \\\"./objects/LenderInterestStruct.sol\\\";\\nimport \\\"./objects/LoanInterestStruct.sol\\\";\\n\\n/**\\n * @title Objects contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract inherints and aggregates several structures needed to handle\\n * loans on the protocol.\\n * */\\ncontract Objects is\\n    LoanStruct,\\n    LoanParamsStruct,\\n    OrderStruct,\\n    LenderInterestStruct,\\n    LoanInterestStruct\\n{\\n\\n}\\n\",\"keccak256\":\"0xa30b8887af813997ebb480f0aa296245f9f3bd728382060059aa087cd9ee332c\"},\"contracts/core/State.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./Objects.sol\\\";\\nimport \\\"../mixins/EnumerableAddressSet.sol\\\";\\nimport \\\"../mixins/EnumerableBytes32Set.sol\\\";\\nimport \\\"../openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"../openzeppelin/Ownable.sol\\\";\\nimport \\\"../openzeppelin/SafeMath.sol\\\";\\nimport \\\"../interfaces/IWrbtcERC20.sol\\\";\\nimport \\\"../reentrancy/SharedReentrancyGuard.sol\\\";\\n\\n/**\\n * @title State contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage values of the Protocol.\\n * */\\ncontract State is Objects, ReentrancyGuard, SharedReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n    using EnumerableAddressSet for EnumerableAddressSet.AddressSet; // enumerable map of addresses\\n    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set; // enumerable map of bytes32 or addresses\\n\\n    /// Handles asset reference price lookups.\\n    address public priceFeeds;\\n\\n    /// Handles asset swaps using dex liquidity.\\n    address public swapsImpl;\\n\\n    /// Contract registry address of the Sovryn swap network.\\n    address public sovrynSwapContractRegistryAddress;\\n\\n    /// Implementations of protocol functions.\\n    mapping(bytes4 => address) public logicTargets;\\n\\n    /// Loans: loanId => Loan\\n    mapping(bytes32 => Loan) public loans;\\n\\n    /// Loan parameters: loanParamsId => LoanParams\\n    mapping(bytes32 => LoanParams) public loanParams;\\n\\n    /// lender => orderParamsId => Order\\n    mapping(address => mapping(bytes32 => Order)) public lenderOrders;\\n\\n    /// borrower => orderParamsId => Order\\n    mapping(address => mapping(bytes32 => Order)) public borrowerOrders;\\n\\n    /// loanId => delegated => approved\\n    mapping(bytes32 => mapping(address => bool)) public delegatedManagers;\\n\\n    /**\\n     *** Interest ***\\n     **/\\n\\n    /// lender => loanToken => LenderInterest object\\n    mapping(address => mapping(address => LenderInterest)) public lenderInterest;\\n\\n    /// loanId => LoanInterest object\\n    mapping(bytes32 => LoanInterest) public loanInterest;\\n\\n    /**\\n     *** Internals ***\\n     **/\\n\\n    /// Implementations set.\\n    EnumerableBytes32Set.Bytes32Set internal logicTargetsSet;\\n\\n    /// Active loans set.\\n    EnumerableBytes32Set.Bytes32Set internal activeLoansSet;\\n\\n    /// Lender loans set.\\n    mapping(address => EnumerableBytes32Set.Bytes32Set) internal lenderLoanSets;\\n\\n    /// Borrow loans set.\\n    mapping(address => EnumerableBytes32Set.Bytes32Set) internal borrowerLoanSets;\\n\\n    /// User loan params set.\\n    mapping(address => EnumerableBytes32Set.Bytes32Set) internal userLoanParamSets;\\n\\n    /// Address controlling fee withdrawals.\\n    address public feesController;\\n\\n    /// 10% fee /// Fee taken from lender interest payments.\\n    uint256 public lendingFeePercent = 10**19;\\n\\n    /// Total interest fees received and not withdrawn per asset.\\n    mapping(address => uint256) public lendingFeeTokensHeld;\\n\\n    /// Total interest fees withdraw per asset.\\n    /// lifetime fees = lendingFeeTokensHeld + lendingFeeTokensPaid\\n    mapping(address => uint256) public lendingFeeTokensPaid;\\n\\n    /// 0.15% fee /// Fee paid for each trade.\\n    uint256 public tradingFeePercent = 15 * 10**16;\\n\\n    /// Total trading fees received and not withdrawn per asset.\\n    mapping(address => uint256) public tradingFeeTokensHeld;\\n\\n    /// Total trading fees withdraw per asset\\n    /// lifetime fees = tradingFeeTokensHeld + tradingFeeTokensPaid\\n    mapping(address => uint256) public tradingFeeTokensPaid;\\n\\n    /// 0.09% fee /// Origination fee paid for each loan.\\n    uint256 public borrowingFeePercent = 9 * 10**16;\\n\\n    /// Total borrowing fees received and not withdrawn per asset.\\n    mapping(address => uint256) public borrowingFeeTokensHeld;\\n\\n    /// Total borrowing fees withdraw per asset.\\n    /// lifetime fees = borrowingFeeTokensHeld + borrowingFeeTokensPaid\\n    mapping(address => uint256) public borrowingFeeTokensPaid;\\n\\n    /// Current protocol token deposit balance.\\n    uint256 public protocolTokenHeld;\\n\\n    /// Lifetime total payout of protocol token.\\n    uint256 public protocolTokenPaid;\\n\\n    /// 5% fee share in form of SOV /// Fee share for affiliate program.\\n    uint256 public affiliateFeePercent = 5 * 10**18;\\n\\n    /// 5% collateral discount /// Discount on collateral for liquidators.\\n    uint256 public liquidationIncentivePercent = 5 * 10**18;\\n\\n    /// loanPool => underlying\\n    mapping(address => address) public loanPoolToUnderlying;\\n\\n    /// underlying => loanPool\\n    mapping(address => address) public underlyingToLoanPool;\\n\\n    /// Loan pools set.\\n    EnumerableBytes32Set.Bytes32Set internal loanPoolsSet;\\n\\n    /// Supported tokens for swaps.\\n    mapping(address => bool) public supportedTokens;\\n\\n    /// % disagreement between swap rate and reference rate.\\n    uint256 public maxDisagreement = 5 * 10**18;\\n\\n    /// Used as buffer for swap source amount estimations.\\n    uint256 public sourceBuffer = 10000;\\n\\n    /// Maximum support swap size in rBTC\\n    uint256 public maxSwapSize = 50 ether;\\n\\n    /// Nonce per borrower. Used for loan id creation.\\n    mapping(address => uint256) public borrowerNonce;\\n\\n    /// Rollover transaction costs around 0.0000168 rBTC, it is denominated in wrBTC.\\n    uint256 public rolloverBaseReward = 16800000000000;\\n    uint256 public rolloverFlexFeePercent = 0.1 ether; /// 0.1%\\n\\n    IWrbtcERC20 public wrbtcToken;\\n    address public protocolTokenAddress;\\n\\n    /// 50% fee rebate\\n    /// potocolToken reward to user, it is worth % of trading/borrowing fee.\\n    uint256 public feeRebatePercent = 50 * 10**18;\\n\\n    address public admin;\\n\\n    /// For modules interaction.\\n    address public protocolAddress;\\n\\n    /**\\n     *** Affiliates ***\\n     **/\\n\\n    /// The flag is set on the user's first trade.\\n    mapping(address => bool) public userNotFirstTradeFlag;\\n\\n    /// User => referrer (affiliate).\\n    mapping(address => address) public affiliatesUserReferrer;\\n\\n    /// List of referral addresses affiliated to the referrer.\\n    mapping(address => EnumerableAddressSet.AddressSet) internal referralsList;\\n\\n    /// @dev Referral threshold for paying out to the referrer.\\n    ///   The referrer reward is being accumulated and locked until the threshold is passed.\\n    uint256 public minReferralsToPayout = 3;\\n\\n    /// @dev Total affiliate SOV rewards that held in the protocol\\n    ///   (Because the minimum referrals is less than the rule)\\n    mapping(address => uint256) public affiliateRewardsHeld;\\n\\n    /// @dev For affiliates SOV Bonus proccess.\\n    address public sovTokenAddress;\\n    address public lockedSOVAddress;\\n\\n    /// @dev 20% fee share of trading token fee.\\n    ///   Fee share of trading token fee for affiliate program.\\n    uint256 public affiliateTradingTokenFeePercent = 20 * 10**18;\\n\\n    /// @dev Addresses of tokens in which commissions were paid to referrers.\\n    mapping(address => EnumerableAddressSet.AddressSet) internal affiliatesReferrerTokensList;\\n\\n    /// @dev [referrerAddress][tokenAddress] is a referrer's token balance of accrued fees.\\n    mapping(address => mapping(address => uint256)) public affiliatesReferrerBalances;\\n\\n    mapping(address => mapping(address => uint256)) public specialRebates; // Special rate rebates for spesific pair -- if not set, then use the default one\\n    bool public pause; //Flag to pause all protocol modules\\n\\n    uint256 internal swapExtrernalFeePercent; /// Fee percentage for protocol swap\\n\\n    /// @dev Defines the portion of the trading rebate rewards (SOV) which is to be paid out in a liquid form in basis points. The rest is vested. The max value is 9999 (means 99.99% liquid, 0.01% vested)\\n    uint256 internal tradingRebateRewardsBasisPoint;\\n\\n    /// @dev Defines the defaultPath of conversion swap. This is created to prevent the non-rbtc pairs returning the shortest path which will not give the best rate.\\n    /// Will be used in internal swap.\\n    mapping(address => mapping(address => IERC20[])) internal defaultPathConversion;\\n\\n    address internal pauser;\\n\\n    /**\\n     * @notice Add signature and target to storage.\\n     * @dev Protocol is a proxy and requires a way to add every\\n     *   module function dynamically during deployment.\\n     * */\\n    function _setTarget(bytes4 sig, address target) internal {\\n        logicTargets[sig] = target;\\n\\n        if (target != address(0)) {\\n            logicTargetsSet.addBytes32(bytes32(sig));\\n        } else {\\n            logicTargetsSet.removeBytes32(bytes32(sig));\\n        }\\n    }\\n\\n    modifier onlyAdminOrOwner() {\\n        require(isOwner() || admin == (msg.sender), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyPauserOrOwner() {\\n        require(isOwner() || pauser == (msg.sender), \\\"unauthorized\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf8dfc02f3dc790c73b390a69898d0281c4473487bc91fec1f28fbebceacd3b3c\"},\"contracts/core/objects/LenderInterestStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Lender Interest.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Lender Interest.\\n * */\\ncontract LenderInterestStruct {\\n    struct LenderInterest {\\n        uint256 principalTotal; /// Total borrowed amount outstanding of asset.\\n        uint256 owedPerDay; /// Interest owed per day for all loans of asset.\\n        uint256 owedTotal; /// Total interest owed for all loans of asset (assuming they go to full term).\\n        uint256 paidTotal; /// Total interest paid so far for asset.\\n        uint256 updatedTimestamp; /// Last update.\\n    }\\n}\\n\",\"keccak256\":\"0x6583baadddded384836cec469980e7973ec09310ae505b4a2ec67fb7bc19e452\"},\"contracts/core/objects/LoanInterestStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Loan Interest.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Loan Interest.\\n * */\\ncontract LoanInterestStruct {\\n    struct LoanInterest {\\n        uint256 owedPerDay; /// Interest owed per day for loan.\\n        uint256 depositTotal; /// Total escrowed interest for loan.\\n        uint256 updatedTimestamp; /// Last update.\\n    }\\n}\\n\",\"keccak256\":\"0xd9034c6adb1b72e1593589dca024dc4730a1ee8bf6b2dca9d22283f2e7159590\"},\"contracts/core/objects/LoanParamsStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Loan Parameters.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Loan Parameters.\\n * */\\ncontract LoanParamsStruct {\\n    struct LoanParams {\\n        /// @dev ID of loan params object.\\n        bytes32 id;\\n        /// @dev If false, this object has been disabled by the owner and can't\\n        ///   be used for future loans.\\n        bool active;\\n        /// @dev Owner of this object.\\n        address owner;\\n        /// @dev The token being loaned.\\n        address loanToken;\\n        /// @dev The required collateral token.\\n        address collateralToken;\\n        /// @dev The minimum allowed initial margin.\\n        uint256 minInitialMargin;\\n        /// @dev An unhealthy loan when current margin is at or below this value.\\n        uint256 maintenanceMargin;\\n        /// @dev The maximum term for new loans (0 means there's no max term).\\n        uint256 maxLoanTerm;\\n    }\\n}\\n\",\"keccak256\":\"0xe15aa97713521da7f501e5225af9d92cf34bd68d286dbfed86aa75aabb323945\"},\"contracts/core/objects/LoanStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Loan Object.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Loan Object.\\n * */\\ncontract LoanStruct {\\n    struct Loan {\\n        bytes32 id; /// ID of the loan.\\n        bytes32 loanParamsId; /// The linked loan params ID.\\n        bytes32 pendingTradesId; /// The linked pending trades ID.\\n        bool active; /// If false, the loan has been fully closed.\\n        uint256 principal; /// Total borrowed amount outstanding.\\n        uint256 collateral; /// Total collateral escrowed for the loan.\\n        uint256 startTimestamp; /// Loan start time.\\n        uint256 endTimestamp; /// For active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time.\\n        uint256 startMargin; /// Initial margin when the loan opened.\\n        uint256 startRate; /// Reference rate when the loan opened for converting collateralToken to loanToken.\\n        address borrower; /// Borrower of this loan.\\n        address lender; /// Lender of this loan.\\n    }\\n}\\n\",\"keccak256\":\"0x7d05c3096a86d5892e4e72f3a01a5a806f13a5ac90ca6339c611e75c603637b4\"},\"contracts/core/objects/OrderStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Loan Order.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Loan Order.\\n * */\\ncontract OrderStruct {\\n    struct Order {\\n        uint256 lockedAmount; /// Escrowed amount waiting for a counterparty.\\n        uint256 interestRate; /// Interest rate defined by the creator of this order.\\n        uint256 minLoanTerm; /// Minimum loan term allowed.\\n        uint256 maxLoanTerm; /// Maximum loan term allowed.\\n        uint256 createdTimestamp; /// Timestamp when this order was created.\\n        uint256 expirationTimestamp; /// Timestamp when this order expires.\\n    }\\n}\\n\",\"keccak256\":\"0xcc053c5da34a5927041162259bf856ba913f3524ca03e63ad0c5877777d17e0f\"},\"contracts/events/AffiliatesEvents.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./ModulesCommonEvents.sol\\\";\\n\\ncontract AffiliatesEvents is ModulesCommonEvents {\\n    event SetAffiliatesReferrer(address indexed user, address indexed referrer);\\n\\n    event SetAffiliatesReferrerFail(\\n        address indexed user,\\n        address indexed referrer,\\n        bool alreadySet,\\n        bool userNotFirstTrade\\n    );\\n\\n    event SetUserNotFirstTradeFlag(address indexed user);\\n\\n    event PayTradingFeeToAffiliate(\\n        address indexed referrer,\\n        address trader,\\n        address indexed token,\\n        bool indexed isHeld,\\n        uint256 tradingFeeTokenAmount,\\n        uint256 tokenBonusAmount,\\n        uint256 sovBonusAmount,\\n        uint256 sovBonusAmountPaid\\n    );\\n\\n    event PayTradingFeeToAffiliateFail(\\n        address indexed referrer,\\n        address trader,\\n        address indexed token,\\n        uint256 tradingFeeTokenAmount,\\n        uint256 tokenBonusAmount,\\n        uint256 sovBonusAmount,\\n        uint256 sovBonusAmountTryingToPaid\\n    );\\n\\n    event WithdrawAffiliatesReferrerTokenFees(\\n        address indexed referrer,\\n        address indexed receiver,\\n        address indexed tokenAddress,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0xf72cf23e90db3c49589ddc4e1796680ebfb69a9b146db89f9b61f5fcf6dd95ba\"},\"contracts/events/FeesEvents.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Fees Events contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the events for fee payments.\\n * */\\ncontract FeesEvents {\\n    event PayLendingFee(address indexed payer, address indexed token, uint256 amount);\\n\\n    event PayTradingFee(\\n        address indexed payer,\\n        address indexed token,\\n        bytes32 indexed loanId,\\n        uint256 amount\\n    );\\n\\n    event PayBorrowingFee(\\n        address indexed payer,\\n        address indexed token,\\n        bytes32 indexed loanId,\\n        uint256 amount\\n    );\\n\\n    event EarnReward(\\n        address indexed receiver,\\n        address indexed token,\\n        bytes32 indexed loanId,\\n        uint256 feeRebatePercent,\\n        uint256 amount,\\n        uint256 basisPoint\\n    );\\n\\n    event EarnRewardFail(\\n        address indexed receiver,\\n        address indexed token,\\n        bytes32 indexed loanId,\\n        uint256 feeRebatePercent,\\n        uint256 amount,\\n        uint256 basisPoint\\n    );\\n}\\n\",\"keccak256\":\"0xe69bf53e15479be5fde1cbaadaf0c004ee038e8a6a37c99f7769bf5d8387015f\"},\"contracts/events/LoanClosingsEvents.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./ModulesCommonEvents.sol\\\";\\n\\n/**\\n * @title The Loan Closing Events contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the events for loan closing operations.\\n * */\\ncontract LoanClosingsEvents is ModulesCommonEvents {\\n    /// topic0: 0x6349c1a02ec126f7f4fc6e6837e1859006e90e9901635c442d29271e77b96fb6\\n    event CloseWithDeposit(\\n        address indexed user,\\n        address indexed lender,\\n        bytes32 indexed loanId,\\n        address closer,\\n        address loanToken,\\n        address collateralToken,\\n        uint256 repayAmount,\\n        uint256 collateralWithdrawAmount,\\n        uint256 collateralToLoanRate,\\n        uint256 currentMargin\\n    );\\n\\n    /// topic0: 0x2ed7b29b4ca95cf3bb9a44f703872a66e6aa5e8f07b675fa9a5c124a1e5d7352\\n    event CloseWithSwap(\\n        address indexed user,\\n        address indexed lender,\\n        bytes32 indexed loanId,\\n        address collateralToken,\\n        address loanToken,\\n        address closer,\\n        uint256 positionCloseSize,\\n        uint256 loanCloseAmount,\\n        uint256 exitPrice, // one unit of collateralToken, denominated in loanToken\\n        uint256 currentLeverage\\n    );\\n\\n    /// topic0: 0x46fa03303782eb2f686515f6c0100f9a62dabe587b0d3f5a4fc0c822d6e532d3\\n    event Liquidate(\\n        address indexed user,\\n        address indexed liquidator,\\n        bytes32 indexed loanId,\\n        address lender,\\n        address loanToken,\\n        address collateralToken,\\n        uint256 repayAmount,\\n        uint256 collateralWithdrawAmount,\\n        uint256 collateralToLoanRate,\\n        uint256 currentMargin\\n    );\\n\\n    event Rollover(\\n        address indexed user,\\n        address indexed lender,\\n        bytes32 indexed loanId,\\n        uint256 principal,\\n        uint256 collateral,\\n        uint256 endTimestamp,\\n        address rewardReceiver,\\n        uint256 reward\\n    );\\n\\n    event swapExcess(bool shouldRefund, uint256 amount, uint256 amountInRbtc, uint256 threshold);\\n}\\n\",\"keccak256\":\"0x1ea325b9a213012865a52f38941ce6c1e8c29dce919215b5bdcc63a8a5980be1\"},\"contracts/events/LoanMaintenanceEvents.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./ModulesCommonEvents.sol\\\";\\n\\n/**\\n * @title The Loan Maintenance Events contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the events for loan maintenance operations.\\n * */\\ncontract LoanMaintenanceEvents is ModulesCommonEvents {\\n    event DepositCollateral(bytes32 indexed loanId, uint256 depositAmount, uint256 rate);\\n}\\n\",\"keccak256\":\"0xdee5098b947c22bcef6e38ecaf62bae6941572d1c245d2065ad41ea4f494c61d\"},\"contracts/events/LoanOpeningsEvents.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./ModulesCommonEvents.sol\\\";\\n\\n/**\\n * @title The Loan Openings Events contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the events for loan openings operations.\\n * */\\ncontract LoanOpeningsEvents is ModulesCommonEvents {\\n    /// topic0: 0x7bd8cbb7ba34b33004f3deda0fd36c92fc0360acbd97843360037b467a538f90\\n    event Borrow(\\n        address indexed user,\\n        address indexed lender,\\n        bytes32 indexed loanId,\\n        address loanToken,\\n        address collateralToken,\\n        uint256 newPrincipal,\\n        uint256 newCollateral,\\n        uint256 interestRate,\\n        uint256 interestDuration,\\n        uint256 collateralToLoanRate,\\n        uint256 currentMargin\\n    );\\n\\n    /// topic0: 0xf640c1cfe1a912a0b0152b5a542e5c2403142eed75b06cde526cee54b1580e5c\\n    event Trade(\\n        address indexed user,\\n        address indexed lender,\\n        bytes32 indexed loanId,\\n        address collateralToken,\\n        address loanToken,\\n        uint256 positionSize,\\n        uint256 borrowedAmount,\\n        uint256 interestRate,\\n        uint256 settlementDate,\\n        uint256 entryPrice, /// one unit of collateralToken, denominated in loanToken\\n        uint256 entryLeverage,\\n        uint256 currentLeverage\\n    );\\n\\n    /// topic0: 0x0eef4f90457a741c97d76fcf13fa231fefdcc7649bdb3cb49157c37111c98433\\n    event DelegatedManagerSet(\\n        bytes32 indexed loanId,\\n        address indexed delegator,\\n        address indexed delegated,\\n        bool isActive\\n    );\\n}\\n\",\"keccak256\":\"0x585710ce6c570c6dbd1b8daf43b63a54b1d60ad01ee1dc3cae407d74d78f3093\"},\"contracts/events/LoanSettingsEvents.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./ModulesCommonEvents.sol\\\";\\n\\n/**\\n * @title The Loan Settings Events contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the events for loan settings operations.\\n * */\\ncontract LoanSettingsEvents is ModulesCommonEvents {\\n    event LoanParamsSetup(\\n        bytes32 indexed id,\\n        address owner,\\n        address indexed loanToken,\\n        address indexed collateralToken,\\n        uint256 minInitialMargin,\\n        uint256 maintenanceMargin,\\n        uint256 maxLoanTerm\\n    );\\n    event LoanParamsIdSetup(bytes32 indexed id, address indexed owner);\\n\\n    event LoanParamsDisabled(\\n        bytes32 indexed id,\\n        address owner,\\n        address indexed loanToken,\\n        address indexed collateralToken,\\n        uint256 minInitialMargin,\\n        uint256 maintenanceMargin,\\n        uint256 maxLoanTerm\\n    );\\n    event LoanParamsIdDisabled(bytes32 indexed id, address indexed owner);\\n}\\n\",\"keccak256\":\"0xae9c49678a7bc02c2283648939c474c8bfd33781506e05c635c8334c5bf8682f\"},\"contracts/events/ModulesCommonEvents.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n/**\\n * @title The common events for all modules\\n * @notice This contract contains the events which will be used by all modules\\n **/\\n\\ncontract ModulesCommonEvents {\\n    event ProtocolModuleContractReplaced(\\n        address indexed prevModuleContractAddress,\\n        address indexed newModuleContractAddress,\\n        bytes32 indexed module\\n    );\\n}\\n\",\"keccak256\":\"0xb07af42d7e6b0fe983889b883691b662a58d2ef8d75b3f32f17faff1871c8b8f\"},\"contracts/events/ProtocolSettingsEvents.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./ModulesCommonEvents.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title The Protocol Settings Events contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the events for protocol settings operations.\\n * */\\ncontract ProtocolSettingsEvents is ModulesCommonEvents {\\n    event SetPriceFeedContract(address indexed sender, address oldValue, address newValue);\\n\\n    event SetSwapsImplContract(address indexed sender, address oldValue, address newValue);\\n\\n    event SetLoanPool(\\n        address indexed sender,\\n        address indexed loanPool,\\n        address indexed underlying\\n    );\\n\\n    event SetSupportedTokens(address indexed sender, address indexed token, bool isActive);\\n\\n    event SetLendingFeePercent(address indexed sender, uint256 oldValue, uint256 newValue);\\n\\n    event SetTradingFeePercent(address indexed sender, uint256 oldValue, uint256 newValue);\\n\\n    event SetBorrowingFeePercent(address indexed sender, uint256 oldValue, uint256 newValue);\\n\\n    event SetSwapExternalFeePercent(address indexed sender, uint256 oldValue, uint256 newValue);\\n\\n    event SetAffiliateFeePercent(address indexed sender, uint256 oldValue, uint256 newValue);\\n\\n    event SetAffiliateTradingTokenFeePercent(\\n        address indexed sender,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    event SetLiquidationIncentivePercent(\\n        address indexed sender,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    event SetMaxSwapSize(address indexed sender, uint256 oldValue, uint256 newValue);\\n\\n    event SetFeesController(\\n        address indexed sender,\\n        address indexed oldController,\\n        address indexed newController\\n    );\\n\\n    event SetWrbtcToken(\\n        address indexed sender,\\n        address indexed oldWethToken,\\n        address indexed newWethToken\\n    );\\n\\n    event SetSovrynSwapContractRegistryAddress(\\n        address indexed sender,\\n        address indexed oldSovrynSwapContractRegistryAddress,\\n        address indexed newSovrynSwapContractRegistryAddress\\n    );\\n\\n    event SetProtocolTokenAddress(\\n        address indexed sender,\\n        address indexed oldProtocolToken,\\n        address indexed newProtocolToken\\n    );\\n\\n    event WithdrawFees(\\n        address indexed sender,\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 lendingAmount,\\n        uint256 tradingAmount,\\n        uint256 borrowingAmount,\\n        uint256 wRBTCConverted\\n    );\\n\\n    event WithdrawLendingFees(\\n        address indexed sender,\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    event WithdrawTradingFees(\\n        address indexed sender,\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    event WithdrawBorrowingFees(\\n        address indexed sender,\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    event SetRolloverBaseReward(address indexed sender, uint256 oldValue, uint256 newValue);\\n\\n    event SetRebatePercent(\\n        address indexed sender,\\n        uint256 oldRebatePercent,\\n        uint256 newRebatePercent\\n    );\\n\\n    event SetSpecialRebates(\\n        address indexed sender,\\n        address indexed sourceToken,\\n        address indexed destToken,\\n        uint256 oldSpecialRebatesPercent,\\n        uint256 newSpecialRebatesPercent\\n    );\\n\\n    event SetProtocolAddress(\\n        address indexed sender,\\n        address indexed oldProtocol,\\n        address indexed newProtocol\\n    );\\n\\n    event SetMinReferralsToPayoutAffiliates(\\n        address indexed sender,\\n        uint256 oldMinReferrals,\\n        uint256 newMinReferrals\\n    );\\n\\n    event SetSOVTokenAddress(\\n        address indexed sender,\\n        address indexed oldTokenAddress,\\n        address indexed newTokenAddress\\n    );\\n\\n    event SetLockedSOVAddress(\\n        address indexed sender,\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event TogglePaused(address indexed sender, bool indexed oldFlag, bool indexed newFlag);\\n\\n    event SetTradingRebateRewardsBasisPoint(\\n        address indexed sender,\\n        uint256 oldBasisPoint,\\n        uint256 newBasisPoint\\n    );\\n\\n    event SetRolloverFlexFeePercent(\\n        address indexed sender,\\n        uint256 oldRolloverFlexFeePercent,\\n        uint256 newRolloverFlexFeePercent\\n    );\\n\\n    event SetDefaultPathConversion(\\n        address indexed sender,\\n        address indexed sourceTokenAddress,\\n        address indexed destTokenAddress,\\n        IERC20[] defaultPath\\n    );\\n\\n    event RemoveDefaultPathConversion(\\n        address indexed sender,\\n        address indexed sourceTokenAddress,\\n        address indexed destTokenAddress,\\n        IERC20[] defaultPath\\n    );\\n\\n    event SetAdmin(address indexed sender, address indexed oldAdmin, address indexed newAdmin);\\n\\n    event SetPauser(address indexed sender, address indexed oldPauser, address indexed newPauser);\\n}\\n\",\"keccak256\":\"0x20ca66a2c53669aa33379bf5233e3bcdddbba3504cd430a0143f0ee3ce1c2641\"},\"contracts/events/SwapsEvents.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./ModulesCommonEvents.sol\\\";\\n\\n/**\\n * @title The Swaps Events contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the events for swap operations.\\n * */\\ncontract SwapsEvents is ModulesCommonEvents {\\n    event LoanSwap(\\n        bytes32 indexed loanId,\\n        address indexed sourceToken,\\n        address indexed destToken,\\n        address borrower,\\n        uint256 sourceAmount,\\n        uint256 destAmount\\n    );\\n\\n    event ExternalSwap(\\n        address indexed user,\\n        address indexed sourceToken,\\n        address indexed destToken,\\n        uint256 sourceAmount,\\n        uint256 destAmount\\n    );\\n}\\n\",\"keccak256\":\"0x0a1cd289076675980b916941ed923146160d34a8669fc3fb4a06610f285dfbd1\"},\"contracts/feeds/IPriceFeeds.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\ninterface IPriceFeeds {\\n    function queryRate(address sourceToken, address destToken)\\n        external\\n        view\\n        returns (uint256 rate, uint256 precision);\\n\\n    function queryPrecision(address sourceToken, address destToken)\\n        external\\n        view\\n        returns (uint256 precision);\\n\\n    function queryReturn(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceAmount\\n    ) external view returns (uint256 destAmount);\\n\\n    function checkPriceDisagreement(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceAmount,\\n        uint256 destAmount,\\n        uint256 maxSlippage\\n    ) external view returns (uint256 sourceToDestSwapRate);\\n\\n    function amountInEth(address Token, uint256 amount) external view returns (uint256 ethAmount);\\n\\n    function getMaxDrawdown(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount,\\n        uint256 maintenanceMargin\\n    ) external view returns (uint256);\\n\\n    function getCurrentMarginAndCollateralSize(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount\\n    ) external view returns (uint256 currentMargin, uint256 collateralInEthAmount);\\n\\n    function getCurrentMargin(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount\\n    ) external view returns (uint256 currentMargin, uint256 collateralToLoanRate);\\n\\n    function shouldLiquidate(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount,\\n        uint256 maintenanceMargin\\n    ) external view returns (bool);\\n\\n    function getFastGasPrice(address payToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e2c2b393336efedb97659a2fc21c8dfb75b70e15d2422a3bcbf7ebd5fc83c82\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _who) external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbc0c9bb48f19651930ec9aff366b2e11a1abf89c846e4b2d52d8102b15ce6721\"},\"contracts/interfaces/ILoanPool.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ninterface ILoanPool {\\n    function tokenPrice() external view returns (uint256 price);\\n\\n    function borrowInterestRate() external view returns (uint256);\\n\\n    function totalAssetSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x78945a97739554b1241d0bf972a3d292de4193145b17475e9f2a8f05e6d8df30\"},\"contracts/interfaces/ILoanTokenModules.sol\":{\"content\":\"pragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILoanTokenModules {\\n    /** EVENT */\\n    /// topic: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// topic: 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// topic: 0x628e75c63c1873bcd3885f7aee9f58ee36f60dc789b2a6b3a978c4189bc548ba\\n    event AllowanceUpdate(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 valueBefore,\\n        uint256 valueAfter\\n    );\\n\\n    /// topic: 0xb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb\\n    event Mint(address indexed minter, uint256 tokenAmount, uint256 assetAmount, uint256 price);\\n\\n    /// topic: 0x743033787f4738ff4d6a7225ce2bd0977ee5f86b91a902a58f5e4d0b297b4644\\n    event Burn(address indexed burner, uint256 tokenAmount, uint256 assetAmount, uint256 price);\\n\\n    /// topic: 0xc688ff9bd4a1c369dd44c5cf64efa9db6652fb6b280aa765cd43f17d256b816e\\n    event FlashBorrow(address borrower, address target, address loanToken, uint256 loanAmount);\\n\\n    /// topic: 0x9bbd2de400810774339120e2f8a2b517ed748595e944529bba8ebabf314d0591\\n    event SetTransactionLimits(address[] addresses, uint256[] limits);\\n\\n    event WithdrawRBTCTo(address indexed to, uint256 amount);\\n\\n    event ToggledFunctionPaused(string functionId, bool prevFlag, bool newFlag);\\n\\n    /** INTERFACE */\\n\\n    /** START LOAN TOKEN SETTINGS LOWER ADMIN */\\n    struct LoanParams {\\n        /// @dev ID of loan params object.\\n        bytes32 id;\\n        /// @dev If false, this object has been disabled by the owner and can't\\n        ///   be used for future loans.\\n        bool active;\\n        /// @dev Owner of this object.\\n        address owner;\\n        /// @dev The token being loaned.\\n        address loanToken;\\n        /// @dev The required collateral token.\\n        address collateralToken;\\n        /// @dev The minimum allowed initial margin.\\n        uint256 minInitialMargin;\\n        /// @dev An unhealthy loan when current margin is at or below this value.\\n        uint256 maintenanceMargin;\\n        /// @dev The maximum term for new loans (0 means there's no max term).\\n        uint256 maxLoanTerm;\\n    }\\n\\n    function setAdmin(address _admin) external;\\n\\n    function setPauser(address _pauser) external;\\n\\n    function setupLoanParams(LoanParams[] calldata loanParamsList, bool areTorqueLoans) external;\\n\\n    function disableLoanParams(address[] calldata collateralTokens, bool[] calldata isTorqueLoans)\\n        external;\\n\\n    function setDemandCurve(\\n        uint256 _baseRate,\\n        uint256 _rateMultiplier,\\n        uint256 _lowUtilBaseRate,\\n        uint256 _lowUtilRateMultiplier,\\n        uint256 _targetLevel,\\n        uint256 _kinkLevel,\\n        uint256 _maxScaleRate\\n    ) external;\\n\\n    function toggleFunctionPause(\\n        string calldata funcId, /// example: \\\"mint(uint256,uint256)\\\"\\n        bool isPaused\\n    ) external;\\n\\n    function setTransactionLimits(address[] calldata addresses, uint256[] calldata limits)\\n        external;\\n\\n    function changeLoanTokenNameAndSymbol(string calldata _name, string calldata _symbol) external;\\n\\n    /** END LOAN TOKEN SETTINGS LOWER ADMIN */\\n\\n    /** START LOAN TOKEN LOGIC STANDARD */\\n    function marginTrade(\\n        bytes32 loanId, /// 0 if new loan\\n        uint256 leverageAmount, /// Expected in x * 10**18 where x is the actual leverage (2, 3, 4, or 5).\\n        uint256 loanTokenSent,\\n        uint256 collateralTokenSent,\\n        address collateralTokenAddress,\\n        address trader,\\n        uint256 minEntryPrice, // Value of loan token in collateral.\\n        bytes calldata loanDataBytes /// Arbitrary order data.\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256,\\n            uint256 /// Returns new principal and new collateral added to trade.\\n        );\\n\\n    function marginTradeAffiliate(\\n        bytes32 loanId, // 0 if new loan\\n        uint256 leverageAmount, // expected in x * 10**18 where x is the actual leverage (2, 3, 4, or 5)\\n        uint256 loanTokenSent,\\n        uint256 collateralTokenSent,\\n        address collateralTokenAddress,\\n        address trader,\\n        uint256 minEntryPrice, // Value of loan token in collateral.\\n        address affiliateReferrer, // The user was brought by the affiliate (referrer).\\n        bytes calldata loanDataBytes // Arbitrary order data.\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256,\\n            uint256 /// Returns new principal and new collateral added to trade.\\n        );\\n\\n    function borrowInterestRate() external view returns (uint256);\\n\\n    function mint(address receiver, uint256 depositAmount) external returns (uint256 mintAmount);\\n\\n    function burn(address receiver, uint256 burnAmount) external returns (uint256 loanAmountPaid);\\n\\n    function checkPause(string calldata funcId) external view returns (bool isPaused);\\n\\n    function nextBorrowInterestRate(uint256 borrowAmount) external view returns (uint256);\\n\\n    function totalAssetBorrow() external view returns (uint256);\\n\\n    function totalAssetSupply() external view returns (uint256);\\n\\n    function borrow(\\n        bytes32 loanId, /// 0 if new loan.\\n        uint256 withdrawAmount,\\n        uint256 initialLoanDuration, /// Duration in seconds.\\n        uint256 collateralTokenSent, /// If 0, loanId must be provided; any rBTC sent must equal this value.\\n        address collateralTokenAddress, /// If address(0), this means rBTC and rBTC must be sent with the call or loanId must be provided.\\n        address borrower,\\n        address receiver,\\n        bytes calldata /// loanDataBytes: arbitrary order data (for future use).\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256,\\n            uint256 /// Returns new principal and new collateral added to loan.\\n        );\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    function setLiquidityMiningAddress(address LMAddress) external;\\n\\n    function getLiquidityMiningAddress() external view returns (address);\\n\\n    function setStakingContractAddress(address _stakingContractAddress) external;\\n\\n    function getStakingContractAddress() external view returns (address);\\n\\n    function getEstimatedMarginDetails(\\n        uint256 leverageAmount,\\n        uint256 loanTokenSent,\\n        uint256 collateralTokenSent,\\n        address collateralTokenAddress // address(0) means ETH\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 principal,\\n            uint256 collateral,\\n            uint256 interestRate\\n        );\\n\\n    function getDepositAmountForBorrow(\\n        uint256 borrowAmount,\\n        uint256 initialLoanDuration, /// Duration in seconds.\\n        address collateralTokenAddress /// address(0) means rBTC\\n    ) external view returns (uint256 depositAmount);\\n\\n    function getBorrowAmountForDeposit(\\n        uint256 depositAmount,\\n        uint256 initialLoanDuration, /// Duration in seconds.\\n        address collateralTokenAddress /// address(0) means rBTC\\n    ) external view returns (uint256 borrowAmount);\\n\\n    function checkPriceDivergence(\\n        uint256 loanTokenSent,\\n        address collateralTokenAddress,\\n        uint256 minEntryPrice\\n    ) external view;\\n\\n    function getMaxEscrowAmount(uint256 leverageAmount)\\n        external\\n        view\\n        returns (uint256 maxEscrowAmount);\\n\\n    function checkpointPrice(address _user) external view returns (uint256 price);\\n\\n    function assetBalanceOf(address _owner) external view returns (uint256);\\n\\n    function profitOf(address user) external view returns (int256);\\n\\n    function tokenPrice() external view returns (uint256 price);\\n\\n    function avgBorrowInterestRate() external view returns (uint256);\\n\\n    function supplyInterestRate() external view returns (uint256);\\n\\n    function nextSupplyInterestRate(uint256 supplyAmount) external view returns (uint256);\\n\\n    function totalSupplyInterestRate(uint256 assetSupply) external view returns (uint256);\\n\\n    function loanTokenAddress() external view returns (address);\\n\\n    function getMarginBorrowAmountAndRate(uint256 leverageAmount, uint256 depositAmount)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function withdrawRBTCTo(address payable _receiverAddress, uint256 _amount) external;\\n\\n    /** START LOAN TOKEN BASE */\\n    function initialPrice() external view returns (uint256);\\n\\n    /** START LOAN TOKEN LOGIC LM */\\n    function mint(\\n        address receiver,\\n        uint256 depositAmount,\\n        bool useLM\\n    ) external returns (uint256 minted);\\n\\n    function burn(\\n        address receiver,\\n        uint256 burnAmount,\\n        bool useLM\\n    ) external returns (uint256 redeemed);\\n\\n    /** START LOAN TOKEN LOGIC WRBTC */\\n    function mintWithBTC(address receiver, bool useLM)\\n        external\\n        payable\\n        returns (uint256 mintAmount);\\n\\n    function burnToBTC(\\n        address receiver,\\n        uint256 burnAmount,\\n        bool useLM\\n    ) external returns (uint256 loanAmountPaid);\\n\\n    function marketLiquidity() external view returns (uint256);\\n\\n    function calculateSupplyInterestRate(uint256 assetBorrow, uint256 assetSupply)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /** START LOAN TOKEN LOGIC STORAGE */\\n    function pauser() external view returns (address);\\n\\n    function liquidityMiningAddress() external view returns (address);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    /** START ADVANCED TOKEN */\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /** START ADVANCED TOKEN STORAGE */\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function loanParamsIds(uint256) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x58597cac6fff1502126440fb768f52706069a82e91dddbfca6941401ae45e8ef\"},\"contracts/interfaces/ISovryn.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\npragma experimental ABIEncoderV2;\\n//TODO: stored in ./interfaces only while brownie isn't removed\\n//TODO: move to contracts/interfaces after with brownie is removed\\n\\nimport \\\"../core/State.sol\\\";\\nimport \\\"../events/ProtocolSettingsEvents.sol\\\";\\nimport \\\"../events/LoanSettingsEvents.sol\\\";\\nimport \\\"../events/LoanOpeningsEvents.sol\\\";\\nimport \\\"../events/LoanMaintenanceEvents.sol\\\";\\nimport \\\"../events/LoanClosingsEvents.sol\\\";\\nimport \\\"../events/FeesEvents.sol\\\";\\nimport \\\"../events/SwapsEvents.sol\\\";\\nimport \\\"../events/AffiliatesEvents.sol\\\";\\nimport \\\"../connectors/loantoken/lib/MarginTradeStructHelpers.sol\\\";\\n\\ncontract ISovryn is\\n    State,\\n    ProtocolSettingsEvents,\\n    LoanSettingsEvents,\\n    LoanOpeningsEvents,\\n    LoanMaintenanceEvents,\\n    LoanClosingsEvents,\\n    SwapsEvents,\\n    AffiliatesEvents,\\n    FeesEvents\\n{\\n    /// Triggered whenever interest is paid to lender.\\n    event PayInterestTransfer(\\n        address indexed interestToken,\\n        address indexed lender,\\n        uint256 effectiveInterest\\n    );\\n\\n    ////// Protocol //////\\n\\n    function replaceContract(address target) external;\\n\\n    function setTargets(string[] calldata sigsArr, address[] calldata targetsArr) external;\\n\\n    function getTarget(string calldata sig) external view returns (address);\\n\\n    ////// Protocol Settings //////\\n\\n    function setSovrynProtocolAddress(address newProtocolAddress) external;\\n\\n    function setSOVTokenAddress(address newSovTokenAddress) external;\\n\\n    function setLockedSOVAddress(address newSOVLockedAddress) external;\\n\\n    function setMinReferralsToPayoutAffiliates(uint256 newMinReferrals) external;\\n\\n    function setPriceFeedContract(address newContract) external;\\n\\n    function setSwapsImplContract(address newContract) external;\\n\\n    function setLoanPool(address[] calldata pools, address[] calldata assets) external;\\n\\n    function setSupportedTokens(address[] calldata addrs, bool[] calldata toggles) external;\\n\\n    function setLendingFeePercent(uint256 newValue) external;\\n\\n    function setTradingFeePercent(uint256 newValue) external;\\n\\n    function setBorrowingFeePercent(uint256 newValue) external;\\n\\n    function setSwapExternalFeePercent(uint256 newValue) external;\\n\\n    function setAffiliateFeePercent(uint256 newValue) external;\\n\\n    function setAffiliateTradingTokenFeePercent(uint256 newValue) external;\\n\\n    function setLiquidationIncentivePercent(uint256 newAmount) external;\\n\\n    function setMaxDisagreement(uint256 newAmount) external;\\n\\n    function setSourceBuffer(uint256 newAmount) external;\\n\\n    function setMaxSwapSize(uint256 newAmount) external;\\n\\n    function setFeesController(address newController) external;\\n\\n    function withdrawFees(address[] calldata tokens, address receiver)\\n        external\\n        returns (uint256 totalWRBTCWithdrawn);\\n\\n    function withdrawLendingFees(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function withdrawTradingFees(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function withdrawBorrowingFees(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function withdrawProtocolToken(address receiver, uint256 amount)\\n        external\\n        returns (address, bool);\\n\\n    function depositProtocolToken(uint256 amount) external;\\n\\n    function getLoanPoolsList(uint256 start, uint256 count)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function isLoanPool(address loanPool) external view returns (bool);\\n\\n    function setWrbtcToken(address wrbtcTokenAddress) external;\\n\\n    function setSovrynSwapContractRegistryAddress(address registryAddress) external;\\n\\n    function setProtocolTokenAddress(address _protocolTokenAddress) external;\\n\\n    function setRolloverBaseReward(uint256 transactionCost) external;\\n\\n    function setRebatePercent(uint256 rebatePercent) external;\\n\\n    function setSpecialRebates(\\n        address sourceToken,\\n        address destToken,\\n        uint256 specialRebatesPercent\\n    ) external;\\n\\n    function getSpecialRebates(address sourceToken, address destToken)\\n        external\\n        view\\n        returns (uint256 specialRebatesPercent);\\n\\n    function togglePaused(bool paused) external;\\n\\n    function isProtocolPaused() external view returns (bool);\\n\\n    ////// SwapsImplSovrynSwapModule //////\\n    function getSovrynSwapNetworkContract(address sovrynSwapRegistryAddress)\\n        public\\n        view\\n        returns (address);\\n\\n    function getContractHexName(string calldata source) external pure returns (bytes32 result);\\n\\n    function swapsImplExpectedRate(\\n        address sourceTokenAddress,\\n        address destTokenAddress,\\n        uint256 sourceTokenAmount\\n    ) external view returns (uint256);\\n\\n    function swapsImplExpectedReturn(\\n        address sourceTokenAddress,\\n        address destTokenAddress,\\n        uint256 sourceTokenAmount\\n    ) external view returns (uint256 expectedReturn);\\n\\n    ////// Loan Settings //////\\n\\n    function setupLoanParams(LoanParams[] calldata loanParamsList)\\n        external\\n        returns (bytes32[] memory loanParamsIdList);\\n\\n    // Deactivates LoanParams for future loans. Active loans using it are unaffected.\\n    function disableLoanParams(bytes32[] calldata loanParamsIdList) external;\\n\\n    function getLoanParams(bytes32[] calldata loanParamsIdList)\\n        external\\n        view\\n        returns (LoanParams[] memory loanParamsList);\\n\\n    function getLoanParamsList(\\n        address owner,\\n        uint256 start,\\n        uint256 count\\n    ) external view returns (bytes32[] memory loanParamsList);\\n\\n    function getTotalPrincipal(address lender, address loanToken) external view returns (uint256);\\n\\n    function minInitialMargin(bytes32 loanParamsId) external view returns (uint256);\\n\\n    ////// Loan Openings //////\\n\\n    function borrowOrTradeFromPool(\\n        bytes32 loanParamsId,\\n        bytes32 loanId, // if 0, start a new loan\\n        bool isTorqueLoan,\\n        uint256 initialMargin,\\n        MarginTradeStructHelpers.SentAddresses calldata sentAddresses,\\n        // lender: must match loan if loanId provided\\n        // borrower: must match loan if loanId provided\\n        // receiver: receiver of funds (address(0) assumes borrower address)\\n        // manager: delegated manager of loan unless address(0)\\n        MarginTradeStructHelpers.SentAmounts calldata sentValues,\\n        // newRate: new loan interest rate\\n        // newPrincipal: new loan size (borrowAmount + any borrowed interest)\\n        // torqueInterest: new amount of interest to escrow for Torque loan (determines initial loan length)\\n        // loanTokenReceived: total loanToken deposit (amount not sent to borrower in the case of Torque loans)\\n        // collateralTokenReceived: total collateralToken deposit\\n        bytes calldata loanDataBytes\\n    ) external payable returns (uint256 newPrincipal, uint256 newCollateral);\\n\\n    function setDelegatedManager(\\n        bytes32 loanId,\\n        address delegated,\\n        bool toggle\\n    ) external;\\n\\n    function getEstimatedMarginExposure(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanTokenSent,\\n        uint256 collateralTokenSent,\\n        uint256 interestRate,\\n        uint256 newPrincipal\\n    ) external view returns (uint256);\\n\\n    function getRequiredCollateral(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 newPrincipal,\\n        uint256 marginAmount,\\n        bool isTorqueLoan\\n    ) external view returns (uint256 collateralAmountRequired);\\n\\n    function getBorrowAmount(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 collateralTokenAmount,\\n        uint256 marginAmount,\\n        bool isTorqueLoan\\n    ) external view returns (uint256 borrowAmount);\\n\\n    ////// Loan Closings //////\\n\\n    function liquidate(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 closeAmount // denominated in loanToken\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 seizedAmount,\\n            address seizedToken\\n        );\\n\\n    function rollover(bytes32 loanId, bytes calldata loanDataBytes) external;\\n\\n    function closeWithDeposit(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 depositAmount // denominated in loanToken\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n\\n    function closeWithSwap(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 swapAmount, // denominated in collateralToken\\n        bool returnTokenIsCollateral, // true: withdraws collateralToken, false: withdraws loanToken\\n        bytes calldata loanDataBytes\\n    )\\n        external\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n\\n    ////// Loan Maintenance //////\\n\\n    function depositCollateral(\\n        bytes32 loanId,\\n        uint256 depositAmount // must match msg.value if ether is sent\\n    ) external payable;\\n\\n    function withdrawCollateral(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 withdrawAmount\\n    ) external returns (uint256 actualWithdrawAmount);\\n\\n    function withdrawAccruedInterest(address loanToken) external;\\n\\n    function getLenderInterestData(address lender, address loanToken)\\n        external\\n        view\\n        returns (\\n            uint256 interestPaid,\\n            uint256 interestPaidDate,\\n            uint256 interestOwedPerDay,\\n            uint256 interestUnPaid,\\n            uint256 interestFeePercent,\\n            uint256 principalTotal\\n        );\\n\\n    function getLoanInterestData(bytes32 loanId)\\n        external\\n        view\\n        returns (\\n            address loanToken,\\n            uint256 interestOwedPerDay,\\n            uint256 interestDepositTotal,\\n            uint256 interestDepositRemaining\\n        );\\n\\n    struct LoanReturnData {\\n        bytes32 loanId;\\n        address loanToken;\\n        address collateralToken;\\n        uint256 principal;\\n        uint256 collateral;\\n        uint256 interestOwedPerDay;\\n        uint256 interestDepositRemaining;\\n        uint256 startRate; // collateralToLoanRate\\n        uint256 startMargin;\\n        uint256 maintenanceMargin;\\n        uint256 currentMargin;\\n        uint256 maxLoanTerm;\\n        uint256 endTimestamp;\\n        uint256 maxLiquidatable;\\n        uint256 maxSeizable;\\n    }\\n\\n    struct LoanReturnDataV2 {\\n        bytes32 loanId;\\n        address loanToken;\\n        address collateralToken;\\n        address borrower;\\n        uint256 principal;\\n        uint256 collateral;\\n        uint256 interestOwedPerDay;\\n        uint256 interestDepositRemaining;\\n        uint256 startRate; /// collateralToLoanRate\\n        uint256 startMargin;\\n        uint256 maintenanceMargin;\\n        uint256 currentMargin;\\n        uint256 maxLoanTerm;\\n        uint256 endTimestamp;\\n        uint256 maxLiquidatable;\\n        uint256 maxSeizable;\\n        uint256 creationTimestamp;\\n    }\\n\\n    function getUserLoans(\\n        address user,\\n        uint256 start,\\n        uint256 count,\\n        uint256 loanType,\\n        bool isLender,\\n        bool unsafeOnly\\n    ) external view returns (LoanReturnData[] memory loansData);\\n\\n    function getUserLoansV2(\\n        address user,\\n        uint256 start,\\n        uint256 count,\\n        uint256 loanType,\\n        bool isLender,\\n        bool unsafeOnly\\n    ) external view returns (LoanReturnDataV2[] memory loansDataV2);\\n\\n    function getLoan(bytes32 loanId) external view returns (LoanReturnData memory loanData);\\n\\n    function getLoanV2(bytes32 loanId) external view returns (LoanReturnDataV2 memory loanDataV2);\\n\\n    function getActiveLoans(\\n        uint256 start,\\n        uint256 count,\\n        bool unsafeOnly\\n    ) external view returns (LoanReturnData[] memory loansData);\\n\\n    function getActiveLoansV2(\\n        uint256 start,\\n        uint256 count,\\n        bool unsafeOnly\\n    ) external view returns (LoanReturnDataV2[] memory loansDataV2);\\n\\n    function extendLoanDuration(\\n        bytes32 loanId,\\n        uint256 depositAmount,\\n        bool useCollateral,\\n        bytes calldata /// loanDataBytes, for future use.\\n    ) external returns (uint256 secondsExtended);\\n\\n    function reduceLoanDuration(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 withdrawAmount\\n    ) external returns (uint256 secondsReduced);\\n\\n    ////// Swaps External //////\\n    function swapExternal(\\n        address sourceToken,\\n        address destToken,\\n        address receiver,\\n        address returnToSender,\\n        uint256 sourceTokenAmount,\\n        uint256 requiredDestTokenAmount,\\n        uint256 minReturn,\\n        bytes calldata swapData\\n    ) external returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed);\\n\\n    function getSwapExpectedReturn(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceTokenAmount\\n    ) external view returns (uint256);\\n\\n    function checkPriceDivergence(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceTokenAmount,\\n        uint256 minReturn\\n    ) public view;\\n\\n    ////// Affiliates Module //////\\n\\n    function getUserNotFirstTradeFlag(address user) external view returns (bool);\\n\\n    function setUserNotFirstTradeFlag(address user) external;\\n\\n    function payTradingFeeToAffiliatesReferrer(\\n        address referrer,\\n        address trader,\\n        address token,\\n        uint256 tradingFeeTokenBaseAmount\\n    ) external returns (uint256 affiliatesBonusSOVAmount, uint256 affiliatesBonusTokenAmount);\\n\\n    function setAffiliatesReferrer(address user, address referrer) external; //onlyCallableByLoanPools\\n\\n    function getReferralsList(address referrer) external view returns (address[] memory refList);\\n\\n    function getAffiliatesReferrerBalances(address referrer)\\n        external\\n        view\\n        returns (address[] memory referrerTokensList, uint256[] memory referrerTokensBalances);\\n\\n    function getAffiliatesReferrerTokensList(address referrer)\\n        external\\n        view\\n        returns (address[] memory tokensList);\\n\\n    function getAffiliatesReferrerTokenBalance(address referrer, address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function withdrawAffiliatesReferrerTokenFees(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) external;\\n\\n    function withdrawAllAffiliatesReferrerTokenFees(address receiver) external;\\n\\n    function getProtocolAddress() external view returns (address);\\n\\n    function getSovTokenAddress() external view returns (address);\\n\\n    function getLockedSOVAddress() external view returns (address);\\n\\n    function getFeeRebatePercent() external view returns (uint256);\\n\\n    function getMinReferralsToPayout() external view returns (uint256);\\n\\n    function getAffiliatesUserReferrer(address user) external view returns (address referrer);\\n\\n    function getAffiliateRewardsHeld(address referrer) external view returns (uint256);\\n\\n    function getAffiliateTradingTokenFeePercent()\\n        external\\n        view\\n        returns (uint256 affiliateTradingTokenFeePercent);\\n\\n    function getAffiliatesTokenRewardsValueInRbtc(address referrer)\\n        external\\n        view\\n        returns (uint256 rbtcTotalAmount);\\n\\n    function getSwapExternalFeePercent() external view returns (uint256 swapExternalFeePercent);\\n\\n    function setTradingRebateRewardsBasisPoint(uint256 newBasisPoint) external;\\n\\n    function getTradingRebateRewardsBasisPoint() external view returns (uint256);\\n\\n    function getDedicatedSOVRebate() external view returns (uint256);\\n\\n    function setRolloverFlexFeePercent(uint256 newRolloverFlexFeePercent) external;\\n\\n    function getDefaultPathConversion(address sourceTokenAddress, address destTokenAddress)\\n        external\\n        view\\n        returns (IERC20[] memory);\\n\\n    function setDefaultPathConversion(IERC20[] calldata defaultPath) external;\\n\\n    function removeDefaultPathConversion(address sourceTokenAddress, address destTokenAddress)\\n        external;\\n\\n    function checkCloseWithDepositIsTinyPosition(bytes32 loanId, uint256 depositAmount)\\n        external\\n        view\\n        returns (bool isTinyPosition, uint256 tinyPositionAmount);\\n\\n    function setAdmin(address newAdmin) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function setPauser(address newPauser) external;\\n\\n    function getPauser() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4e470e1fe1719c2c58b0e44aedce3ee6a21191063b533ccb71c9219a192e8884\"},\"contracts/interfaces/IWrbtc.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ninterface IWrbtc {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x20fdfe4b5e32fd7f863b3fa128e3c80bd4ccf090a4ffba56186ef3b7f2a80492\"},\"contracts/interfaces/IWrbtcERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./IWrbtc.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract IWrbtcERC20 is IWrbtc, IERC20 {}\\n\",\"keccak256\":\"0x7301a8c8ca7aa016ec94268a16d07366875f2e406442e929968dd745b1ee5be5\"},\"contracts/mixins/EnumerableAddressSet.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Based on Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * As of v2.5.0, only `address` sets are supported.\\n *\\n * Include with `using EnumerableSet for EnumerableSet.AddressSet;`.\\n *\\n * _Available since v2.5.0._\\n */\\nlibrary EnumerableAddressSet {\\n    struct AddressSet {\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(address => uint256) index;\\n        address[] values;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     * Returns false if the value was already in the set.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set.index[value] = set.values.push(value);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     * Returns false if the value was not present in the set.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        if (contains(set, value)) {\\n            uint256 toDeleteIndex = set.index[value] - 1;\\n            uint256 lastIndex = set.values.length - 1;\\n\\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\\n            if (lastIndex != toDeleteIndex) {\\n                address lastValue = set.values[lastIndex];\\n\\n                // Move the last value to the index where the deleted value is\\n                set.values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the index entry for the deleted value\\n            delete set.index[value];\\n\\n            // Delete the old entry for the moved value\\n            set.values.pop();\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns an array with all values in the set. O(N).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     */\\n    function enumerate(AddressSet storage set) internal view returns (address[] memory) {\\n        address[] memory output = new address[](set.values.length);\\n        for (uint256 i; i < set.values.length; i++) {\\n            output[i] = set.values[i];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Returns a chunk of array as recommended in enumerate() to avoid running of gas.\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     \\n     * @param start start index of chunk\\n     * @param count num of element to return; if count == 0 then returns all the elements from the @param start\\n     */\\n    function enumerateChunk(\\n        AddressSet storage set,\\n        uint256 start,\\n        uint256 count\\n    ) internal view returns (address[] memory output) {\\n        uint256 end = start + count;\\n        require(end >= start, \\\"addition overflow\\\");\\n        end = (set.values.length < end || count == 0) ? set.values.length : end;\\n        if (end == 0 || start >= end) {\\n            return output;\\n        }\\n\\n        output = new address[](end - start);\\n        for (uint256 i; i < end - start; i++) {\\n            output[i] = set.values[i + start];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements on the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return set.values.length;\\n    }\\n\\n    /** @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function get(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return set.values[index];\\n    }\\n}\\n\",\"keccak256\":\"0xea6fba941ec8502aa11a7ab37e74b917d0dc47bb254e359a2870a87ef97d9872\"},\"contracts/mixins/EnumerableBytes32Set.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title Library for managing loan sets.\\n *\\n * @notice Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\\n * */\\nlibrary EnumerableBytes32Set {\\n    struct Bytes32Set {\\n        /// Position of the value in the `values` array, plus 1 because index 0\\n        /// means a value is not in the set.\\n        mapping(bytes32 => uint256) index;\\n        bytes32[] values;\\n    }\\n\\n    /**\\n     * @notice Add an address value to a set. O(1).\\n     *\\n     * @param set The set of values.\\n     * @param addrvalue The address to add.\\n     *\\n     * @return False if the value was already in the set.\\n     */\\n    function addAddress(Bytes32Set storage set, address addrvalue) internal returns (bool) {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return addBytes32(set, value);\\n    }\\n\\n    /**\\n     * @notice Add a value to a set. O(1).\\n     *\\n     * @param set The set of values.\\n     * @param value The new value to add.\\n     *\\n     * @return False if the value was already in the set.\\n     */\\n    function addBytes32(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set.index[value] = set.values.push(value);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove an address value from a set. O(1).\\n     *\\n     * @param set The set of values.\\n     * @param addrvalue The address to remove.\\n     *\\n     * @return False if the address was not present in the set.\\n     */\\n    function removeAddress(Bytes32Set storage set, address addrvalue) internal returns (bool) {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return removeBytes32(set, value);\\n    }\\n\\n    /**\\n     * @notice Remove a value from a set. O(1).\\n     *\\n     * @param set The set of values.\\n     * @param value The value to remove.\\n     *\\n     * @return False if the value was not present in the set.\\n     */\\n    function removeBytes32(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        if (contains(set, value)) {\\n            uint256 toDeleteIndex = set.index[value] - 1;\\n            uint256 lastIndex = set.values.length - 1;\\n\\n            /// If the element we're deleting is the last one,\\n            /// we can just remove it without doing a swap.\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set.values[lastIndex];\\n\\n                /// Move the last value to the index where the deleted value is.\\n                set.values[toDeleteIndex] = lastValue;\\n\\n                /// Update the index for the moved value.\\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            /// Delete the index entry for the deleted value.\\n            delete set.index[value];\\n\\n            /// Delete the old entry for the moved value.\\n            set.values.pop();\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Find out whether a value exists in the set.\\n     *\\n     * @param set The set of values.\\n     * @param value The value to find.\\n     *\\n     * @return True if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function containsAddress(Bytes32Set storage set, address addrvalue)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @notice Get all set values.\\n     *\\n     * @param set The set of values.\\n     * @param start The offset of the returning set.\\n     * @param count The limit of number of values to return.\\n     *\\n     * @return An array with all values in the set. O(N).\\n     *\\n     * @dev Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     */\\n    function enumerate(\\n        Bytes32Set storage set,\\n        uint256 start,\\n        uint256 count\\n    ) internal view returns (bytes32[] memory output) {\\n        uint256 end = start + count;\\n        require(end >= start, \\\"addition overflow\\\");\\n        end = set.values.length < end ? set.values.length : end;\\n        if (end == 0 || start >= end) {\\n            return output;\\n        }\\n\\n        output = new bytes32[](end - start);\\n        for (uint256 i; i < end - start; i++) {\\n            output[i] = set.values[i + start];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @notice Get the legth of the set.\\n     *\\n     * @param set The set of values.\\n     *\\n     * @return the number of elements on the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return set.values.length;\\n    }\\n\\n    /**\\n     * @notice Get an item from the set by its index.\\n     *\\n     * @dev Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     *\\n     * @param set The set of values.\\n     * @param index The index of the value to return.\\n     *\\n     * @return the element stored at position `index` in the set. O(1).\\n     */\\n    function get(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return set.values[index];\\n    }\\n}\\n\",\"keccak256\":\"0xa2801a585c566e07f21c1ebccd0cd0447dd5fd9fe6c1ff2b58d4d979d88a6db0\"},\"contracts/mixins/FeesHelper.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"../core/State.sol\\\";\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../feeds/IPriceFeeds.sol\\\";\\nimport \\\"../events/FeesEvents.sol\\\";\\nimport \\\"../modules/interfaces/ProtocolAffiliatesInterface.sol\\\";\\nimport \\\"../interfaces/ISovryn.sol\\\";\\nimport \\\"../core/objects/LoanParamsStruct.sol\\\";\\n\\n/**\\n * @title The Fees Helper contract.\\n *\\n * This contract calculates and pays lending/borrow fees and rewards.\\n * */\\ncontract FeesHelper is State, FeesEvents {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Calculate trading fee.\\n     * @param feeTokenAmount The amount of tokens to trade.\\n     * @return The fee of the trade.\\n     * */\\n    function _getTradingFee(uint256 feeTokenAmount) internal view returns (uint256) {\\n        return feeTokenAmount.mul(tradingFeePercent).divCeil(10**20);\\n    }\\n\\n    /**\\n     * @notice Calculate swap external fee.\\n     * @param feeTokenAmount The amount of token to swap.\\n     * @return The fee of the swap.\\n     */\\n    function _getSwapExternalFee(uint256 feeTokenAmount) internal view returns (uint256) {\\n        return feeTokenAmount.mul(swapExtrernalFeePercent).divCeil(10**20);\\n    }\\n\\n    /*\\n\\t// p3.9 from bzx peckshield-audit-report-bZxV2-v1.0rc1.pdf\\n\\t// cannot be applied solely nor with LoanOpenings.sol as it drives to some other tests failure\\n\\tfunction _getTradingFee(uint256 feeTokenAmount) internal view returns (uint256) {\\n\\t\\tuint256 collateralAmountRequired =\\n\\t\\t\\tfeeTokenAmount.mul(10**20).divCeil(\\n\\t\\t\\t\\t10**20 - tradingFeePercent // never will overflow\\n\\t\\t\\t);\\n\\t\\treturn collateralAmountRequired.sub(feeTokenAmount);\\n\\t}*/\\n\\n    /**\\n     * @notice Calculate the loan origination fee.\\n     * @param feeTokenAmount The amount of tokens to borrow.\\n     * @return The fee of the loan.\\n     * */\\n    function _getBorrowingFee(uint256 feeTokenAmount) internal view returns (uint256) {\\n        return feeTokenAmount.mul(borrowingFeePercent).divCeil(10**20);\\n        /*\\n\\t\\t// p3.9 from bzx peckshield-audit-report-bZxV2-v1.0rc1.pdf\\n\\t\\t// cannot be applied solely nor with LoanOpenings.sol as it drives to some other tests failure\\n\\t\\tuint256 collateralAmountRequired =\\n\\t\\t\\tfeeTokenAmount.mul(10**20).divCeil(\\n\\t\\t\\t\\t10**20 - borrowingFeePercent // never will overflow\\n\\t\\t\\t);\\n\\t\\treturn collateralAmountRequired.sub(feeTokenAmount);*/\\n    }\\n\\n    /**\\n     * @notice Settle the trading fee and pay the token reward to the affiliates referrer.\\n     *\\n     * @param referrer The affiliate referrer address to send the reward to.\\n     * @param trader The account that performs this trade.\\n     * @param feeToken The address of the token in which the trading fee is paid.\\n     * @param tradingFee The amount of tokens accrued as fees on the trading.\\n     *\\n     * @return affiliatesBonusSOVAmount the total SOV amount that is distributed to the referrer\\n     * @return affiliatesBonusTokenAmount the total Token Base on the trading fee pairs that is distributed to the referrer\\n     * */\\n    function _payTradingFeeToAffiliate(\\n        address referrer,\\n        address trader,\\n        address feeToken,\\n        uint256 tradingFee\\n    ) internal returns (uint256 affiliatesBonusSOVAmount, uint256 affiliatesBonusTokenAmount) {\\n        (affiliatesBonusSOVAmount, affiliatesBonusTokenAmount) = ProtocolAffiliatesInterface(\\n            address(this)\\n        )\\n            .payTradingFeeToAffiliatesReferrer(referrer, trader, feeToken, tradingFee);\\n    }\\n\\n    /**\\n     * @notice Settle the trading fee and pay the token reward to the user.\\n     * @param user The address to send the reward to.\\n     * @param loanId The Id of the associated loan - used for logging only.\\n     * @param feeToken The address of the token in which the trading fee is paid.\\n     * @param tradingFee The amount of tokens accrued as fees on the trading.\\n     * */\\n    function _payTradingFee(\\n        address user,\\n        bytes32 loanId,\\n        address feeToken,\\n        address feeTokenPair,\\n        uint256 tradingFee\\n    ) internal {\\n        uint256 protocolTradingFee = tradingFee; /// Trading fee paid to protocol.\\n        if (tradingFee != 0) {\\n            if (affiliatesUserReferrer[user] != address(0)) {\\n                _payTradingFeeToAffiliate(\\n                    affiliatesUserReferrer[user],\\n                    user,\\n                    feeToken,\\n                    protocolTradingFee\\n                );\\n                protocolTradingFee = (\\n                    protocolTradingFee.sub(protocolTradingFee.mul(affiliateFeePercent).div(10**20))\\n                )\\n                    .sub(protocolTradingFee.mul(affiliateTradingTokenFeePercent).div(10**20));\\n            }\\n\\n            /// Increase the storage variable keeping track of the accumulated fees.\\n            tradingFeeTokensHeld[feeToken] = tradingFeeTokensHeld[feeToken].add(\\n                protocolTradingFee\\n            );\\n\\n            emit PayTradingFee(user, feeToken, loanId, protocolTradingFee);\\n\\n            /// Pay the token reward to the user.\\n            _payFeeReward(user, loanId, feeToken, feeTokenPair, tradingFee);\\n        }\\n    }\\n\\n    /**\\n     * @notice Settle the borrowing fee and pay the token reward to the user.\\n     * @param user The address to send the reward to.\\n     * @param loanId The Id of the associated loan - used for logging only.\\n     * @param feeToken The address of the token in which the borrowig fee is paid.\\n     * @param borrowingFee The height of the fee.\\n     * */\\n    function _payBorrowingFee(\\n        address user,\\n        bytes32 loanId,\\n        address feeToken,\\n        address feeTokenPair,\\n        uint256 borrowingFee\\n    ) internal {\\n        if (borrowingFee != 0) {\\n            /// Increase the storage variable keeping track of the accumulated fees.\\n            borrowingFeeTokensHeld[feeToken] = borrowingFeeTokensHeld[feeToken].add(borrowingFee);\\n\\n            emit PayBorrowingFee(user, feeToken, loanId, borrowingFee);\\n\\n            /// Pay the token reward to the user.\\n            _payFeeReward(user, loanId, feeToken, feeTokenPair, borrowingFee);\\n        }\\n    }\\n\\n    /**\\n     * @notice Settle the lending fee (based on the interest). Pay no token reward to the user.\\n     * @param user The address to send the reward to.\\n     * @param feeToken The address of the token in which the lending fee is paid.\\n     * @param lendingFee The height of the fee.\\n     * */\\n    function _payLendingFee(\\n        address user,\\n        address feeToken,\\n        uint256 lendingFee\\n    ) internal {\\n        if (lendingFee != 0) {\\n            /// Increase the storage variable keeping track of the accumulated fees.\\n            lendingFeeTokensHeld[feeToken] = lendingFeeTokensHeld[feeToken].add(lendingFee);\\n\\n            emit PayLendingFee(user, feeToken, lendingFee);\\n\\n            //// NOTE: Lenders do not receive a fee reward ////\\n        }\\n    }\\n\\n    /// Settle and pay borrowers based on the fees generated by their interest payments.\\n    function _settleFeeRewardForInterestExpense(\\n        LoanInterest storage loanInterestLocal,\\n        bytes32 loanId,\\n        address feeToken,\\n        address feeTokenPair,\\n        address user,\\n        uint256 interestTime\\n    ) internal {\\n        /// This represents the fee generated by a borrower's interest payment.\\n        uint256 interestExpenseFee =\\n            interestTime\\n                .sub(loanInterestLocal.updatedTimestamp)\\n                .mul(loanInterestLocal.owedPerDay)\\n                .mul(lendingFeePercent)\\n                .div(1 days * 10**20);\\n\\n        loanInterestLocal.updatedTimestamp = interestTime;\\n\\n        if (interestExpenseFee != 0) {\\n            _payFeeReward(user, loanId, feeToken, feeTokenPair, interestExpenseFee);\\n        }\\n    }\\n\\n    /**\\n     * @notice Pay the potocolToken reward to user. The reward is worth 50% of the trading/borrowing fee.\\n     * @param user The address to send the reward to.\\n     * @param loanId The Id of the associeated loan - used for logging only.\\n     * @param feeToken The address of the token in which the trading/borrowing fee was paid.\\n     * @param feeAmount The height of the fee.\\n     * */\\n    function _payFeeReward(\\n        address user,\\n        bytes32 loanId,\\n        address feeToken,\\n        address feeTokenPair,\\n        uint256 feeAmount\\n    ) internal {\\n        uint256 rewardAmount;\\n        uint256 _feeRebatePercent = feeRebatePercent;\\n        address _priceFeeds = priceFeeds;\\n\\n        if (specialRebates[feeToken][feeTokenPair] > 0) {\\n            _feeRebatePercent = specialRebates[feeToken][feeTokenPair];\\n        }\\n\\n        /// Note: this should be refactored.\\n        /// Calculate the reward amount, querying the price feed.\\n        (bool success, bytes memory data) =\\n            _priceFeeds.staticcall(\\n                abi.encodeWithSelector(\\n                    IPriceFeeds(_priceFeeds).queryReturn.selector,\\n                    feeToken,\\n                    sovTokenAddress, /// Price rewards using BZRX price rather than vesting token price.\\n                    feeAmount.mul(_feeRebatePercent).div(10**20)\\n                )\\n            );\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if eq(success, 1) {\\n                rewardAmount := mload(add(data, 32))\\n            }\\n        }\\n\\n        // Check the dedicated SOV that is used to pay trading rebate rewards\\n        uint256 dedicatedSOV = ISovryn(address(this)).getDedicatedSOVRebate();\\n        if (rewardAmount != 0 && dedicatedSOV >= rewardAmount) {\\n            IERC20(sovTokenAddress).approve(lockedSOVAddress, rewardAmount);\\n\\n            (bool success, ) =\\n                lockedSOVAddress.call(\\n                    abi.encodeWithSignature(\\n                        \\\"deposit(address,uint256,uint256)\\\",\\n                        user,\\n                        rewardAmount,\\n                        tradingRebateRewardsBasisPoint\\n                    )\\n                );\\n\\n            if (success) {\\n                protocolTokenPaid = protocolTokenPaid.add(rewardAmount);\\n\\n                emit EarnReward(\\n                    user,\\n                    sovTokenAddress,\\n                    loanId,\\n                    _feeRebatePercent,\\n                    rewardAmount,\\n                    tradingRebateRewardsBasisPoint\\n                );\\n            } else {\\n                emit EarnRewardFail(\\n                    user,\\n                    sovTokenAddress,\\n                    loanId,\\n                    _feeRebatePercent,\\n                    rewardAmount,\\n                    tradingRebateRewardsBasisPoint\\n                );\\n            }\\n        } else if (rewardAmount != 0 && dedicatedSOV < rewardAmount) {\\n            emit EarnRewardFail(\\n                user,\\n                sovTokenAddress,\\n                loanId,\\n                _feeRebatePercent,\\n                rewardAmount,\\n                tradingRebateRewardsBasisPoint\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9094bce5eab7109594a795982a779641c951c2617a618f5eab1f651b3b945077\"},\"contracts/mixins/InterestUser.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../core/State.sol\\\";\\nimport \\\"../mixins/VaultController.sol\\\";\\nimport \\\"./FeesHelper.sol\\\";\\n\\n/**\\n * @title The Interest User contract.\\n *\\n * This contract pays loan interests.\\n * */\\ncontract InterestUser is VaultController, FeesHelper {\\n    using SafeERC20 for IERC20;\\n\\n    /// Triggered whenever interest is paid to lender.\\n    event PayInterestTransfer(\\n        address indexed interestToken,\\n        address indexed lender,\\n        uint256 effectiveInterest\\n    );\\n\\n    /**\\n     * @notice Internal function to pay interest of a loan.\\n     * @dev Calls _payInterestTransfer internal function to transfer tokens.\\n     * @param lender The account address of the lender.\\n     * @param interestToken The token address to pay interest with.\\n     * */\\n    function _payInterest(address lender, address interestToken) internal {\\n        LenderInterest storage lenderInterestLocal = lenderInterest[lender][interestToken];\\n\\n        uint256 interestOwedNow = 0;\\n        if (lenderInterestLocal.owedPerDay != 0 && lenderInterestLocal.updatedTimestamp != 0) {\\n            interestOwedNow = block\\n                .timestamp\\n                .sub(lenderInterestLocal.updatedTimestamp)\\n                .mul(lenderInterestLocal.owedPerDay)\\n                .div(1 days);\\n\\n            lenderInterestLocal.updatedTimestamp = block.timestamp;\\n\\n            if (interestOwedNow > lenderInterestLocal.owedTotal)\\n                interestOwedNow = lenderInterestLocal.owedTotal;\\n\\n            if (interestOwedNow != 0) {\\n                lenderInterestLocal.paidTotal = lenderInterestLocal.paidTotal.add(interestOwedNow);\\n                lenderInterestLocal.owedTotal = lenderInterestLocal.owedTotal.sub(interestOwedNow);\\n\\n                _payInterestTransfer(lender, interestToken, interestOwedNow);\\n            }\\n        } else {\\n            lenderInterestLocal.updatedTimestamp = block.timestamp;\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to transfer tokens for the interest of a loan.\\n     * @param lender The account address of the lender.\\n     * @param interestToken The token address to pay interest with.\\n     * @param interestOwedNow The amount of interest to pay.\\n     * */\\n    function _payInterestTransfer(\\n        address lender,\\n        address interestToken,\\n        uint256 interestOwedNow\\n    ) internal {\\n        uint256 lendingFee = interestOwedNow.mul(lendingFeePercent).div(10**20);\\n        /// TODO: refactor: data incapsulation violation and DRY design principles\\n        /// uint256 lendingFee = interestOwedNow.mul(lendingFeePercent).divCeil(10**20); is better but produces errors in tests because of this\\n\\n        _payLendingFee(lender, interestToken, lendingFee);\\n\\n        /// Transfers the interest to the lender, less the interest fee.\\n        vaultWithdraw(interestToken, lender, interestOwedNow.sub(lendingFee));\\n\\n        /// Event Log\\n        emit PayInterestTransfer(interestToken, lender, interestOwedNow.sub(lendingFee));\\n    }\\n}\\n\",\"keccak256\":\"0x870208d1ae2c7adca9478b86fe5e70b4458bf719d49b19f5a8a4441bdaccf866\"},\"contracts/mixins/LiquidationHelper.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"../core/State.sol\\\";\\n\\n/**\\n * @title The Liquidation Helper contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized margin\\n * trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract computes the liquidation amount.\\n * */\\ncontract LiquidationHelper is State {\\n    /**\\n     * @notice Compute how much needs to be liquidated in order to restore the\\n     * desired margin (maintenance + 5%).\\n     *\\n     * @param principal The total borrowed amount (in loan tokens).\\n     * @param collateral The collateral (in collateral tokens).\\n     * @param currentMargin The current margin.\\n     * @param maintenanceMargin The maintenance (minimum) margin.\\n     * @param collateralToLoanRate The exchange rate from collateral to loan\\n     *   tokens.\\n     *\\n     * @return maxLiquidatable The collateral you can get liquidating.\\n     * @return maxSeizable The loan you available for liquidation.\\n     * @return incentivePercent The discount on collateral.\\n     * */\\n    function _getLiquidationAmounts(\\n        uint256 principal,\\n        uint256 collateral,\\n        uint256 currentMargin,\\n        uint256 maintenanceMargin,\\n        uint256 collateralToLoanRate\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 maxLiquidatable,\\n            uint256 maxSeizable,\\n            uint256 incentivePercent\\n        )\\n    {\\n        incentivePercent = liquidationIncentivePercent;\\n        if (currentMargin > maintenanceMargin || collateralToLoanRate == 0) {\\n            return (maxLiquidatable, maxSeizable, incentivePercent);\\n        } else if (currentMargin <= incentivePercent) {\\n            return (principal, collateral, currentMargin);\\n        }\\n\\n        /// 5 percentage points above maintenance.\\n        uint256 desiredMargin = maintenanceMargin.add(5 ether);\\n\\n        /// maxLiquidatable = ((1 + desiredMargin)*principal - collateralToLoanRate*collateral) / (desiredMargin - 0.05)\\n        maxLiquidatable = desiredMargin.add(10**20).mul(principal).div(10**20);\\n        maxLiquidatable = maxLiquidatable.sub(collateral.mul(collateralToLoanRate).div(10**18));\\n        maxLiquidatable = maxLiquidatable.mul(10**20).div(desiredMargin.sub(incentivePercent));\\n        if (maxLiquidatable > principal) {\\n            maxLiquidatable = principal;\\n        }\\n\\n        /// maxSeizable = maxLiquidatable * (1 + incentivePercent) / collateralToLoanRate\\n        maxSeizable = maxLiquidatable.mul(incentivePercent.add(10**20));\\n        maxSeizable = maxSeizable.div(collateralToLoanRate).div(100);\\n        if (maxSeizable > collateral) {\\n            maxSeizable = collateral;\\n        }\\n\\n        return (maxLiquidatable, maxSeizable, incentivePercent);\\n    }\\n}\\n\",\"keccak256\":\"0xb4e572337adcd64d8a3d10f11ddb05c51e4563c57accf755aa9012db95939c2e\"},\"contracts/mixins/ModuleCommonFunctionalities.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"../core/State.sol\\\";\\n\\ncontract ModuleCommonFunctionalities is State {\\n    modifier whenNotPaused() {\\n        require(!pause, \\\"Paused\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9ed7a6a635ef960b53888b28a2a6bed8b071255cad8cd33f00386a634cbddb74\"},\"contracts/mixins/RewardHelper.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"../core/State.sol\\\";\\nimport \\\"../feeds/IPriceFeeds.sol\\\";\\n\\n/**\\n * @title The Reward Helper contract.\\n * @notice This contract calculates the reward for rollover transactions.\\n *\\n * A rollover is a renewal of a deposit. Instead of liquidating a deposit\\n * on maturity, you can roll it over into a new deposit. The outstanding\\n * principal of the old deposit is rolled over with or without the interest\\n * outstanding on it.\\n * */\\ncontract RewardHelper is State {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Calculate the reward of a rollover transaction.\\n     *\\n     * @param collateralToken The address of the collateral token.\\n     * @param loanToken The address of the loan token.\\n     * @param positionSize The amount of value of the position.\\n     *\\n     * @return The base fee + the flex fee.\\n     */\\n    function _getRolloverReward(\\n        address collateralToken,\\n        address loanToken,\\n        uint256 positionSize\\n    ) internal view returns (uint256 reward) {\\n        uint256 positionSizeInCollateralToken =\\n            IPriceFeeds(priceFeeds).queryReturn(loanToken, collateralToken, positionSize);\\n        uint256 rolloverBaseRewardInCollateralToken =\\n            IPriceFeeds(priceFeeds).queryReturn(\\n                address(wrbtcToken),\\n                collateralToken,\\n                rolloverBaseReward\\n            );\\n\\n        return\\n            rolloverBaseRewardInCollateralToken\\n                .mul(2) /// baseFee\\n                .add(positionSizeInCollateralToken.mul(rolloverFlexFeePercent).div(10**20)); /// flexFee = 0.1% of position size\\n    }\\n}\\n\",\"keccak256\":\"0x7cf04a1692558c164667db1ae469ffb80e2f5692793f47d0a6c4602e092a6569\"},\"contracts/mixins/VaultController.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../core/State.sol\\\";\\n\\n/**\\n * @title The Vault Controller contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized margin\\n * trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract implements functionality to deposit and withdraw wrBTC and\\n * other tokens from the vault.\\n * */\\ncontract VaultController is State {\\n    using SafeERC20 for IERC20;\\n\\n    event VaultDeposit(address indexed asset, address indexed from, uint256 amount);\\n    event VaultWithdraw(address indexed asset, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Deposit wrBTC into the vault.\\n     *\\n     * @param from The address of the account paying the deposit.\\n     * @param value The amount of wrBTC tokens to transfer.\\n     */\\n    function vaultEtherDeposit(address from, uint256 value) internal {\\n        IWrbtcERC20 _wrbtcToken = wrbtcToken;\\n        _wrbtcToken.deposit.value(value)();\\n\\n        emit VaultDeposit(address(_wrbtcToken), from, value);\\n    }\\n\\n    /**\\n     * @notice Withdraw wrBTC from the vault.\\n     *\\n     * @param to The address of the recipient.\\n     * @param value The amount of wrBTC tokens to transfer.\\n     */\\n    function vaultEtherWithdraw(address to, uint256 value) internal {\\n        if (value != 0) {\\n            IWrbtcERC20 _wrbtcToken = wrbtcToken;\\n            uint256 balance = address(this).balance;\\n            if (value > balance) {\\n                _wrbtcToken.withdraw(value - balance);\\n            }\\n            Address.sendValue(to, value);\\n\\n            emit VaultWithdraw(address(_wrbtcToken), to, value);\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposit tokens into the vault.\\n     *\\n     * @param token The address of the token instance.\\n     * @param from The address of the account paying the deposit.\\n     * @param value The amount of tokens to transfer.\\n     */\\n    function vaultDeposit(\\n        address token,\\n        address from,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            IERC20(token).safeTransferFrom(from, address(this), value);\\n\\n            emit VaultDeposit(token, from, value);\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw tokens from the vault.\\n     *\\n     * @param token The address of the token instance.\\n     * @param to The address of the recipient.\\n     * @param value The amount of tokens to transfer.\\n     */\\n    function vaultWithdraw(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            IERC20(token).safeTransfer(to, value);\\n\\n            emit VaultWithdraw(token, to, value);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer tokens from an account into another one.\\n     *\\n     * @param token The address of the token instance.\\n     * @param from The address of the account paying.\\n     * @param to The address of the recipient.\\n     * @param value The amount of tokens to transfer.\\n     */\\n    function vaultTransfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (value != 0) {\\n            if (from == address(this)) {\\n                IERC20(token).safeTransfer(to, value);\\n            } else {\\n                IERC20(token).safeTransferFrom(from, to, value);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Approve an allowance of tokens to be spent by an account.\\n     *\\n     * @param token The address of the token instance.\\n     * @param to The address of the spender.\\n     * @param value The amount of tokens to allow.\\n     */\\n    function vaultApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (value != 0 && IERC20(token).allowance(address(this), to) != 0) {\\n            IERC20(token).safeApprove(to, 0);\\n        }\\n        IERC20(token).safeApprove(to, value);\\n    }\\n}\\n\",\"keccak256\":\"0xdcde4eee041b77ec9b73378a4a75b4d20d62f2e76f96f759d55260cf6717d0f3\"},\"contracts/modules/LoanClosingsLiquidation.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../mixins/LiquidationHelper.sol\\\";\\nimport \\\"../interfaces/ILoanPool.sol\\\";\\nimport \\\"./LoanClosingsShared.sol\\\";\\n\\n/**\\n * @title LoanClosingsLiquidation contract.\\n * @notice Ways to close a loan: liquidation. Margin trade\\n *   positions are always closed with a swap.\\n *\\n * Loans are liquidated if the position goes below margin maintenance.\\n * */\\ncontract LoanClosingsLiquidation is LoanClosingsShared, LiquidationHelper {\\n    uint256 internal constant MONTH = 365 days / 12;\\n\\n    constructor() public {}\\n\\n    function() external {\\n        revert(\\\"fallback not allowed\\\");\\n    }\\n\\n    function initialize(address target) external onlyOwner {\\n        address prevModuleContractAddress = logicTargets[this.liquidate.selector];\\n        _setTarget(this.liquidate.selector, target);\\n        emit ProtocolModuleContractReplaced(\\n            prevModuleContractAddress,\\n            target,\\n            \\\"LoanClosingsLiquidation\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Liquidate an unhealty loan.\\n     *\\n     * @dev Public wrapper for _liquidate internal function.\\n     *\\n     * The caller needs to approve the closeAmount prior to calling. Will\\n     * not liquidate more than is needed to restore the desired margin\\n     * (maintenance +5%).\\n     *\\n     * Whenever the current margin of a loan falls below maintenance margin,\\n     * it needs to be liquidated. Anybody can initiate a liquidation and buy\\n     * the collateral tokens at a discounted rate (5%).\\n     *\\n     * @param loanId The ID of the loan to liquidate.\\n     *   loanId is the ID of the loan, which is created on loan opening.\\n     *   It can be obtained either by parsing the Trade event or by reading\\n     *   the open loans from the contract by calling getActiveLoans or getUserLoans.\\n     * @param receiver The receiver of the seized amount.\\n     * @param closeAmount The amount to close in loanTokens.\\n     *\\n     * @return loanCloseAmount The amount of the collateral token of the loan.\\n     * @return seizedAmount The seized amount in the collateral token.\\n     * @return seizedToken The loan token address.\\n     * */\\n    function liquidate(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 closeAmount // denominated in loanToken\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        globallyNonReentrant\\n        iTokenSupplyUnchanged(loanId)\\n        whenNotPaused\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 seizedAmount,\\n            address seizedToken\\n        )\\n    {\\n        return _liquidate(loanId, receiver, closeAmount);\\n    }\\n\\n    /**\\n     * @notice Internal function for liquidating an unhealthy loan.\\n     *\\n     * The caller needs to approve the closeAmount prior to calling. Will\\n     * not liquidate more than is needed to restore the desired margin\\n     * (maintenance +5%).\\n     *\\n     * Whenever the current margin of a loan falls below maintenance margin,\\n     * it needs to be liquidated. Anybody can initiate a liquidation and buy\\n     * the collateral tokens at a discounted rate (5%).\\n     *\\n     * @param loanId The ID of the loan to liquidate.\\n     * @param receiver The receiver of the seized amount.\\n     * @param closeAmount The amount to close in loanTokens.\\n     *\\n     * @return loanCloseAmount The amount of the collateral token of the loan.\\n     * @return seizedAmount The seized amount in the collateral token.\\n     * @return seizedToken The loan token address.\\n     * */\\n    function _liquidate(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 closeAmount\\n    )\\n        internal\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 seizedAmount,\\n            address seizedToken\\n        )\\n    {\\n        (Loan storage loanLocal, LoanParams storage loanParamsLocal) = _checkLoan(loanId);\\n\\n        (uint256 currentMargin, uint256 collateralToLoanRate) =\\n            IPriceFeeds(priceFeeds).getCurrentMargin(\\n                loanParamsLocal.loanToken,\\n                loanParamsLocal.collateralToken,\\n                loanLocal.principal,\\n                loanLocal.collateral\\n            );\\n        require(currentMargin <= loanParamsLocal.maintenanceMargin, \\\"healthy position\\\");\\n\\n        loanCloseAmount = closeAmount;\\n\\n        //amounts to restore the desired margin (maintencance + 5%)\\n        (uint256 maxLiquidatable, uint256 maxSeizable, ) =\\n            _getLiquidationAmounts(\\n                loanLocal.principal,\\n                loanLocal.collateral,\\n                currentMargin,\\n                loanParamsLocal.maintenanceMargin,\\n                collateralToLoanRate\\n            );\\n\\n        if (loanCloseAmount < maxLiquidatable) {\\n            //close maxLiquidatable if tiny position will remain\\n            uint256 remainingAmount = maxLiquidatable - loanCloseAmount;\\n            remainingAmount = _getAmountInRbtc(loanParamsLocal.loanToken, remainingAmount);\\n            if (remainingAmount <= TINY_AMOUNT) {\\n                loanCloseAmount = maxLiquidatable;\\n                seizedAmount = maxSeizable;\\n            } else {\\n                seizedAmount = maxSeizable.mul(loanCloseAmount).div(maxLiquidatable);\\n            }\\n        } else if (loanCloseAmount > maxLiquidatable) {\\n            // adjust down the close amount to the max\\n            loanCloseAmount = maxLiquidatable;\\n            seizedAmount = maxSeizable;\\n        } else {\\n            seizedAmount = maxSeizable;\\n        }\\n\\n        require(loanCloseAmount != 0, \\\"nothing to liquidate\\\");\\n\\n        // liquidator deposits the principal being closed\\n        _returnPrincipalWithDeposit(loanParamsLocal.loanToken, address(this), loanCloseAmount);\\n\\n        // a portion of the principal is repaid to the lender out of interest refunded\\n        uint256 loanCloseAmountLessInterest =\\n            _settleInterestToPrincipal(\\n                loanLocal,\\n                loanParamsLocal,\\n                loanCloseAmount,\\n                loanLocal.borrower\\n            );\\n\\n        if (loanCloseAmount > loanCloseAmountLessInterest) {\\n            // full interest refund goes to the borrower\\n            _withdrawAsset(\\n                loanParamsLocal.loanToken,\\n                loanLocal.borrower,\\n                loanCloseAmount - loanCloseAmountLessInterest\\n            );\\n        }\\n\\n        if (loanCloseAmountLessInterest != 0) {\\n            // The lender always gets back an ERC20 (even wrbtc), so we call withdraw directly rather than\\n            // use the _withdrawAsset helper function\\n            vaultWithdraw(\\n                loanParamsLocal.loanToken,\\n                loanLocal.lender,\\n                loanCloseAmountLessInterest\\n            );\\n        }\\n\\n        seizedToken = loanParamsLocal.collateralToken;\\n\\n        if (seizedAmount != 0) {\\n            loanLocal.collateral = loanLocal.collateral.sub(seizedAmount);\\n\\n            _withdrawAsset(seizedToken, receiver, seizedAmount);\\n        }\\n\\n        _closeLoan(loanLocal, loanCloseAmount);\\n\\n        _emitClosingEvents(\\n            loanParamsLocal,\\n            loanLocal,\\n            loanCloseAmount,\\n            seizedAmount,\\n            collateralToLoanRate,\\n            0,\\n            currentMargin,\\n            CloseTypes.Liquidation\\n        );\\n    }\\n\\n    /**\\n     * @notice Swap back excessive loan tokens to collateral tokens.\\n     *\\n     * @param loanLocal The loan object.\\n     * @param loanParamsLocal The loan parameters.\\n     * @param swapAmount The amount to be swapped.\\n     * @param loanDataBytes Additional loan data (not in use for token swaps).\\n     *\\n     * @return destTokenAmountReceived The amount of destiny tokens received.\\n     * @return sourceTokenAmountUsed The amount of source tokens used.\\n     * @return collateralToLoanSwapRate The swap rate of collateral.\\n     * */\\n    function _swapBackExcess(\\n        Loan memory loanLocal,\\n        LoanParams memory loanParamsLocal,\\n        uint256 swapAmount,\\n        bytes memory loanDataBytes\\n    )\\n        internal\\n        returns (\\n            uint256 destTokenAmountReceived,\\n            uint256 sourceTokenAmountUsed,\\n            uint256 collateralToLoanSwapRate\\n        )\\n    {\\n        (destTokenAmountReceived, sourceTokenAmountUsed, collateralToLoanSwapRate) = _loanSwap(\\n            loanLocal.id,\\n            loanParamsLocal.loanToken,\\n            loanParamsLocal.collateralToken,\\n            loanLocal.borrower,\\n            swapAmount, // minSourceTokenAmount\\n            swapAmount, // maxSourceTokenAmount\\n            0, // requiredDestTokenAmount\\n            false, // bypassFee\\n            loanDataBytes\\n        );\\n        require(sourceTokenAmountUsed <= swapAmount, \\\"excessive source amount\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0b9070e219d87b165d87d4475172c13fd69a8d4507e82f508237e0c0762a988a\"},\"contracts/modules/LoanClosingsShared.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../core/State.sol\\\";\\nimport \\\"../events/LoanClosingsEvents.sol\\\";\\nimport \\\"../mixins/VaultController.sol\\\";\\nimport \\\"../mixins/InterestUser.sol\\\";\\nimport \\\"../swaps/SwapsUser.sol\\\";\\nimport \\\"../mixins/RewardHelper.sol\\\";\\nimport \\\"../mixins/ModuleCommonFunctionalities.sol\\\";\\nimport \\\"../interfaces/ILoanTokenModules.sol\\\";\\n\\n/**\\n * @title LoanClosingsShared contract.\\n * @notice This contract should only contains the internal function that is being used / utilized by\\n *   LoanClosingsLiquidation, LoanClosingsRollover & LoanClosingsWith contract\\n *\\n * */\\ncontract LoanClosingsShared is\\n    LoanClosingsEvents,\\n    VaultController,\\n    InterestUser,\\n    SwapsUser,\\n    RewardHelper,\\n    ModuleCommonFunctionalities\\n{\\n    uint256 internal constant MONTH = 365 days / 12;\\n    //0.00001 BTC, would be nicer in State.sol, but would require a redeploy of the complete protocol, so adding it here instead\\n    //because it's not shared state anyway and only used by this contract\\n    uint256 public constant paySwapExcessToBorrowerThreshold = 10000000000000;\\n\\n    uint256 public constant TINY_AMOUNT = 25e13;\\n\\n    enum CloseTypes { Deposit, Swap, Liquidation }\\n\\n    /** modifier for invariant check */\\n    modifier iTokenSupplyUnchanged(bytes32 loanId) {\\n        Loan storage loanLocal = loans[loanId];\\n\\n        require(loanLocal.lender != address(0), \\\"Invalid loan token pool address\\\");\\n\\n        uint256 previousITokenSupply = ILoanTokenModules(loanLocal.lender).totalSupply();\\n\\n        _;\\n\\n        /// Validate iToken total supply\\n        require(\\n            previousITokenSupply == ILoanTokenModules(loanLocal.lender).totalSupply(),\\n            \\\"loan token supply invariant check failure\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev computes the interest which needs to be refunded to the borrower based on the amount he's closing and either\\n     * subtracts it from the amount which still needs to be paid back (in case outstanding amount > interest) or withdraws the\\n     * excess to the borrower (in case interest > outstanding).\\n     * @param loanLocal the loan\\n     * @param loanParamsLocal the loan params\\n     * @param loanCloseAmount the amount to be closed (base for the computation)\\n     * @param receiver the address of the receiver (usually the borrower)\\n     * */\\n    function _settleInterestToPrincipal(\\n        Loan memory loanLocal,\\n        LoanParams memory loanParamsLocal,\\n        uint256 loanCloseAmount,\\n        address receiver\\n    ) internal returns (uint256) {\\n        uint256 loanCloseAmountLessInterest = loanCloseAmount;\\n\\n        //compute the interest which neeeds to be refunded to the borrower (because full interest is paid on loan )\\n        uint256 interestRefundToBorrower =\\n            _settleInterest(loanParamsLocal, loanLocal, loanCloseAmountLessInterest);\\n\\n        uint256 interestAppliedToPrincipal;\\n        //if the outstanding loan is bigger than the interest to be refunded, reduce the amount to be paid back / closed by the interest\\n        if (loanCloseAmountLessInterest >= interestRefundToBorrower) {\\n            // apply all of borrower interest refund torwards principal\\n            interestAppliedToPrincipal = interestRefundToBorrower;\\n\\n            // principal needed is reduced by this amount\\n            loanCloseAmountLessInterest -= interestRefundToBorrower;\\n\\n            // no interest refund remaining\\n            interestRefundToBorrower = 0;\\n        } else {\\n            //if the interest refund is bigger than the outstanding loan, the user needs to get back the interest\\n            // principal fully covered by excess interest\\n            interestAppliedToPrincipal = loanCloseAmountLessInterest;\\n\\n            // amount refunded is reduced by this amount\\n            interestRefundToBorrower -= loanCloseAmountLessInterest;\\n\\n            // principal fully covered by excess interest\\n            loanCloseAmountLessInterest = 0;\\n\\n            if (interestRefundToBorrower != 0) {\\n                // refund overage\\n                _withdrawAsset(loanParamsLocal.loanToken, receiver, interestRefundToBorrower);\\n            }\\n        }\\n\\n        //pay the interest to the lender\\n        //note: this is a waste of gas, because the loanCloseAmountLessInterest is withdrawn to the lender, too. It could be done at once.\\n        if (interestAppliedToPrincipal != 0) {\\n            // The lender always gets back an ERC20 (even wrbtc), so we call withdraw directly rather than\\n            // use the _withdrawAsset helper function\\n            vaultWithdraw(loanParamsLocal.loanToken, loanLocal.lender, interestAppliedToPrincipal);\\n        }\\n\\n        return loanCloseAmountLessInterest;\\n    }\\n\\n    // The receiver always gets back an ERC20 (even wrbtc)\\n    function _returnPrincipalWithDeposit(\\n        address loanToken,\\n        address receiver,\\n        uint256 principalNeeded\\n    ) internal {\\n        if (principalNeeded != 0) {\\n            if (msg.value == 0) {\\n                vaultTransfer(loanToken, msg.sender, receiver, principalNeeded);\\n            } else {\\n                require(loanToken == address(wrbtcToken), \\\"wrong asset sent\\\");\\n                require(msg.value >= principalNeeded, \\\"not enough ether\\\");\\n                wrbtcToken.deposit.value(principalNeeded)();\\n                if (receiver != address(this)) {\\n                    vaultTransfer(loanToken, address(this), receiver, principalNeeded);\\n                }\\n                if (msg.value > principalNeeded) {\\n                    // refund overage\\n                    Address.sendValue(msg.sender, msg.value - principalNeeded);\\n                }\\n            }\\n        } else {\\n            require(msg.value == 0, \\\"wrong asset sent\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev checks if the amount of the asset to be transfered is worth the transfer fee\\n     * @param asset the asset to be transfered\\n     * @param amount the amount to be transfered\\n     * @return True if the amount is bigger than the threshold\\n     * */\\n    function worthTheTransfer(address asset, uint256 amount) internal returns (bool) {\\n        uint256 amountInRbtc = _getAmountInRbtc(asset, amount);\\n        emit swapExcess(\\n            amountInRbtc > paySwapExcessToBorrowerThreshold,\\n            amount,\\n            amountInRbtc,\\n            paySwapExcessToBorrowerThreshold\\n        );\\n\\n        return amountInRbtc > paySwapExcessToBorrowerThreshold;\\n    }\\n\\n    /**\\n     * swaps collateral tokens for loan tokens\\n     * @param loanLocal the loan object\\n     * @param loanParamsLocal the loan parameters\\n     * @param swapAmount the amount to be swapped\\n     * @param principalNeeded the required destination token amount\\n     * @param returnTokenIsCollateral if true -> required destination token amount will be passed on, else not\\n     *          note: quite dirty. should be refactored.\\n     * @param loanDataBytes additional loan data (not in use for token swaps)\\n     * */\\n    function _doCollateralSwap(\\n        Loan memory loanLocal,\\n        LoanParams memory loanParamsLocal,\\n        uint256 swapAmount,\\n        uint256 principalNeeded,\\n        bool returnTokenIsCollateral,\\n        bytes memory loanDataBytes\\n    )\\n        internal\\n        returns (\\n            uint256 destTokenAmountReceived,\\n            uint256 sourceTokenAmountUsed,\\n            uint256 collateralToLoanSwapRate\\n        )\\n    {\\n        (destTokenAmountReceived, sourceTokenAmountUsed, collateralToLoanSwapRate) = _loanSwap(\\n            loanLocal.id,\\n            loanParamsLocal.collateralToken,\\n            loanParamsLocal.loanToken,\\n            loanLocal.borrower,\\n            swapAmount, // minSourceTokenAmount\\n            loanLocal.collateral, // maxSourceTokenAmount\\n            returnTokenIsCollateral\\n                ? principalNeeded // requiredDestTokenAmount\\n                : 0,\\n            false, // bypassFee\\n            loanDataBytes\\n        );\\n        require(destTokenAmountReceived >= principalNeeded, \\\"insufficient dest amount\\\");\\n        require(sourceTokenAmountUsed <= loanLocal.collateral, \\\"excessive source amount\\\");\\n    }\\n\\n    /**\\n     * @notice Withdraw asset to receiver.\\n     *\\n     * @param assetToken The loan token.\\n     * @param receiver The address of the receiver.\\n     * @param assetAmount The loan token amount.\\n     * */\\n    function _withdrawAsset(\\n        address assetToken,\\n        address receiver,\\n        uint256 assetAmount\\n    ) internal {\\n        if (assetAmount != 0) {\\n            if (assetToken == address(wrbtcToken)) {\\n                vaultEtherWithdraw(receiver, assetAmount);\\n            } else {\\n                vaultWithdraw(assetToken, receiver, assetAmount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to close a loan.\\n     *\\n     * @param loanLocal The loan object.\\n     * @param loanCloseAmount The amount to close: principal or lower.\\n     *\\n     * */\\n    function _closeLoan(Loan storage loanLocal, uint256 loanCloseAmount) internal {\\n        require(loanCloseAmount != 0, \\\"nothing to close\\\");\\n\\n        if (loanCloseAmount == loanLocal.principal) {\\n            loanLocal.principal = 0;\\n            loanLocal.active = false;\\n            loanLocal.endTimestamp = block.timestamp;\\n            loanLocal.pendingTradesId = 0;\\n            activeLoansSet.removeBytes32(loanLocal.id);\\n            lenderLoanSets[loanLocal.lender].removeBytes32(loanLocal.id);\\n            borrowerLoanSets[loanLocal.borrower].removeBytes32(loanLocal.id);\\n        } else {\\n            loanLocal.principal = loanLocal.principal.sub(loanCloseAmount);\\n        }\\n    }\\n\\n    function _settleInterest(\\n        LoanParams memory loanParamsLocal,\\n        Loan memory loanLocal,\\n        uint256 closePrincipal\\n    ) internal returns (uint256) {\\n        // pay outstanding interest to lender\\n        _payInterest(loanLocal.lender, loanParamsLocal.loanToken);\\n\\n        LoanInterest storage loanInterestLocal = loanInterest[loanLocal.id];\\n        LenderInterest storage lenderInterestLocal =\\n            lenderInterest[loanLocal.lender][loanParamsLocal.loanToken];\\n\\n        uint256 interestTime = block.timestamp;\\n        if (interestTime > loanLocal.endTimestamp) {\\n            interestTime = loanLocal.endTimestamp;\\n        }\\n\\n        _settleFeeRewardForInterestExpense(\\n            loanInterestLocal,\\n            loanLocal.id,\\n            loanParamsLocal.loanToken, /// fee token\\n            loanParamsLocal.collateralToken, /// pairToken (used to check if there is any special rebates or not) -- to pay fee reward\\n            loanLocal.borrower,\\n            interestTime\\n        );\\n\\n        uint256 owedPerDayRefund;\\n        if (closePrincipal < loanLocal.principal) {\\n            owedPerDayRefund = loanInterestLocal.owedPerDay.mul(closePrincipal).div(\\n                loanLocal.principal\\n            );\\n        } else {\\n            owedPerDayRefund = loanInterestLocal.owedPerDay;\\n        }\\n\\n        // update stored owedPerDay\\n        loanInterestLocal.owedPerDay = loanInterestLocal.owedPerDay.sub(owedPerDayRefund);\\n        lenderInterestLocal.owedPerDay = lenderInterestLocal.owedPerDay.sub(owedPerDayRefund);\\n\\n        // update borrower interest\\n        uint256 interestRefundToBorrower = loanLocal.endTimestamp.sub(interestTime);\\n        interestRefundToBorrower = interestRefundToBorrower.mul(owedPerDayRefund);\\n        interestRefundToBorrower = interestRefundToBorrower.div(1 days);\\n\\n        if (closePrincipal < loanLocal.principal) {\\n            loanInterestLocal.depositTotal = loanInterestLocal.depositTotal.sub(\\n                interestRefundToBorrower\\n            );\\n        } else {\\n            loanInterestLocal.depositTotal = 0;\\n        }\\n\\n        // update remaining lender interest values\\n        lenderInterestLocal.principalTotal = lenderInterestLocal.principalTotal.sub(\\n            closePrincipal\\n        );\\n\\n        uint256 owedTotal = lenderInterestLocal.owedTotal;\\n        lenderInterestLocal.owedTotal = owedTotal > interestRefundToBorrower\\n            ? owedTotal - interestRefundToBorrower\\n            : 0;\\n\\n        return interestRefundToBorrower;\\n    }\\n\\n    /**\\n     * @notice Check sender is borrower or delegatee and loan id exists.\\n     *\\n     * @param loanId byte32 of the loan id.\\n     * */\\n    function _checkAuthorized(bytes32 loanId) internal view {\\n        Loan storage loanLocal = loans[loanId];\\n        require(\\n            msg.sender == loanLocal.borrower || delegatedManagers[loanLocal.id][msg.sender],\\n            \\\"unauthorized\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal function for closing a position by swapping the\\n     * collateral back to loan tokens, paying the lender and withdrawing\\n     * the remainder.\\n     *\\n     * @param loanId The id of the loan.\\n     * @param receiver The receiver of the remainder (unused collatral + profit).\\n     * @param swapAmount Defines how much of the position should be closed and\\n     *   is denominated in collateral tokens.\\n     *     If swapAmount >= collateral, the complete position will be closed.\\n     *     Else if returnTokenIsCollateral, (swapAmount/collateral) * principal will be swapped (partial closure).\\n     *     Else coveredPrincipal\\n     * @param returnTokenIsCollateral Defines if the remainder should be paid\\n     *   out in collateral tokens or underlying loan tokens.\\n     *\\n     * @return loanCloseAmount The amount of the collateral token of the loan.\\n     * @return withdrawAmount The withdraw amount in the collateral token.\\n     * @return withdrawToken The loan token address.\\n     * */\\n    function _closeWithSwap(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 swapAmount,\\n        bool returnTokenIsCollateral,\\n        bytes memory loanDataBytes\\n    )\\n        internal\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        )\\n    {\\n        require(swapAmount != 0, \\\"swapAmount == 0\\\");\\n\\n        (Loan storage loanLocal, LoanParams storage loanParamsLocal) = _checkLoan(loanId);\\n\\n        /// Can't swap more than collateral.\\n        swapAmount = swapAmount > loanLocal.collateral ? loanLocal.collateral : swapAmount;\\n\\n        //close whole loan if tiny position will remain\\n        if (loanLocal.collateral - swapAmount > 0) {\\n            if (\\n                _getAmountInRbtc(\\n                    loanParamsLocal.collateralToken,\\n                    loanLocal.collateral - swapAmount\\n                ) <= TINY_AMOUNT\\n            ) {\\n                swapAmount = loanLocal.collateral;\\n            }\\n        }\\n\\n        uint256 loanCloseAmountLessInterest;\\n        if (swapAmount == loanLocal.collateral || returnTokenIsCollateral) {\\n            /// loanCloseAmountLessInterest will be passed as required amount amount of destination tokens.\\n            /// this means, the actual swapAmount passed to the swap contract does not matter at all.\\n            /// the source token amount will be computed depending on the required amount amount of destination tokens.\\n            loanCloseAmount = swapAmount == loanLocal.collateral\\n                ? loanLocal.principal\\n                : loanLocal.principal.mul(swapAmount).div(loanLocal.collateral);\\n            require(loanCloseAmount != 0, \\\"loanCloseAmount == 0\\\");\\n\\n            /// Computes the interest refund for the borrower and sends it to the lender to cover part of the principal.\\n            loanCloseAmountLessInterest = _settleInterestToPrincipal(\\n                loanLocal,\\n                loanParamsLocal,\\n                loanCloseAmount,\\n                receiver\\n            );\\n        } else {\\n            /// loanCloseAmount is calculated after swap; for this case we want to swap the entire source amount\\n            /// and determine the loanCloseAmount and withdraw amount based on that.\\n            loanCloseAmountLessInterest = 0;\\n        }\\n\\n        uint256 coveredPrincipal;\\n        uint256 usedCollateral;\\n\\n        /// swapAmount repurposed for collateralToLoanSwapRate to avoid stack too deep error.\\n        (coveredPrincipal, usedCollateral, withdrawAmount, swapAmount) = _coverPrincipalWithSwap(\\n            loanLocal,\\n            loanParamsLocal,\\n            swapAmount, /// The amount of source tokens to swap (only matters if !returnTokenIsCollateral or loanCloseAmountLessInterest = 0)\\n            loanCloseAmountLessInterest, /// This is the amount of destination tokens we want to receive (only matters if returnTokenIsCollateral)\\n            returnTokenIsCollateral,\\n            loanDataBytes\\n        );\\n\\n        if (loanCloseAmountLessInterest == 0) {\\n            /// Condition prior to swap: swapAmount != loanLocal.collateral && !returnTokenIsCollateral\\n\\n            /// Amounts that is closed.\\n            loanCloseAmount = coveredPrincipal;\\n            if (coveredPrincipal != loanLocal.principal) {\\n                loanCloseAmount = loanCloseAmount.mul(usedCollateral).div(loanLocal.collateral);\\n            }\\n            require(loanCloseAmount != 0, \\\"loanCloseAmount == 0\\\");\\n\\n            /// Amount that is returned to the lender.\\n            loanCloseAmountLessInterest = _settleInterestToPrincipal(\\n                loanLocal,\\n                loanParamsLocal,\\n                loanCloseAmount,\\n                receiver\\n            );\\n\\n            /// Remaining amount withdrawn to the receiver.\\n            withdrawAmount = withdrawAmount.add(coveredPrincipal).sub(loanCloseAmountLessInterest);\\n        } else {\\n            /// Pay back the amount which was covered by the swap.\\n            loanCloseAmountLessInterest = coveredPrincipal;\\n        }\\n\\n        require(loanCloseAmountLessInterest != 0, \\\"closeAmount is 0 after swap\\\");\\n\\n        /// Reduce the collateral by the amount which was swapped for the closure.\\n        if (usedCollateral != 0) {\\n            loanLocal.collateral = loanLocal.collateral.sub(usedCollateral);\\n        }\\n\\n        /// Repays principal to lender.\\n        /// The lender always gets back an ERC20 (even wrbtc), so we call\\n        /// withdraw directly rather than use the _withdrawAsset helper function.\\n        vaultWithdraw(loanParamsLocal.loanToken, loanLocal.lender, loanCloseAmountLessInterest);\\n\\n        withdrawToken = returnTokenIsCollateral\\n            ? loanParamsLocal.collateralToken\\n            : loanParamsLocal.loanToken;\\n\\n        if (withdrawAmount != 0) {\\n            _withdrawAsset(withdrawToken, receiver, withdrawAmount);\\n        }\\n\\n        _finalizeClose(\\n            loanLocal,\\n            loanParamsLocal,\\n            loanCloseAmount,\\n            usedCollateral,\\n            swapAmount, /// collateralToLoanSwapRate\\n            CloseTypes.Swap\\n        );\\n    }\\n\\n    /**\\n     * @notice Close a loan.\\n     *\\n     * @dev Wrapper for _closeLoan internal function.\\n     *\\n     * @param loanLocal The loan object.\\n     * @param loanParamsLocal The loan params.\\n     * @param loanCloseAmount The amount to close: principal or lower.\\n     * @param collateralCloseAmount The amount of collateral to close.\\n     * @param collateralToLoanSwapRate The price rate collateral/loan token.\\n     * @param closeType The type of loan close.\\n     * */\\n    function _finalizeClose(\\n        Loan storage loanLocal,\\n        LoanParams storage loanParamsLocal,\\n        uint256 loanCloseAmount,\\n        uint256 collateralCloseAmount,\\n        uint256 collateralToLoanSwapRate,\\n        CloseTypes closeType\\n    ) internal {\\n        _closeLoan(loanLocal, loanCloseAmount);\\n\\n        address _priceFeeds = priceFeeds;\\n        uint256 currentMargin;\\n        uint256 collateralToLoanRate;\\n\\n        /// This is still called even with full loan close to return collateralToLoanRate\\n        (bool success, bytes memory data) =\\n            _priceFeeds.staticcall(\\n                abi.encodeWithSelector(\\n                    IPriceFeeds(_priceFeeds).getCurrentMargin.selector,\\n                    loanParamsLocal.loanToken,\\n                    loanParamsLocal.collateralToken,\\n                    loanLocal.principal,\\n                    loanLocal.collateral\\n                )\\n            );\\n        assembly {\\n            if eq(success, 1) {\\n                currentMargin := mload(add(data, 32))\\n                collateralToLoanRate := mload(add(data, 64))\\n            }\\n        }\\n        /// Note: We can safely skip the margin check if closing\\n        /// via closeWithDeposit or if closing the loan in full by any method.\\n        require(\\n            closeType == CloseTypes.Deposit ||\\n                loanLocal.principal == 0 || /// loan fully closed\\n                currentMargin > loanParamsLocal.maintenanceMargin,\\n            \\\"unhealthy position\\\"\\n        );\\n\\n        _emitClosingEvents(\\n            loanParamsLocal,\\n            loanLocal,\\n            loanCloseAmount,\\n            collateralCloseAmount,\\n            collateralToLoanRate,\\n            collateralToLoanSwapRate,\\n            currentMargin,\\n            closeType\\n        );\\n    }\\n\\n    /**\\n     * swaps a share of a loan's collateral or the complete collateral in order to cover the principle.\\n     * @param loanLocal the loan\\n     * @param loanParamsLocal the loan parameters\\n     * @param swapAmount in case principalNeeded == 0 or !returnTokenIsCollateral, this is the amount which is going to be swapped.\\n     *  Else, swapAmount doesn't matter, because the amount of source tokens needed for the swap is estimated by the connector.\\n     * @param principalNeeded the required amount of destination tokens in order to cover the principle (only used if returnTokenIsCollateral)\\n     * @param returnTokenIsCollateral tells if the user wants to withdraw his remaining collateral + profit in collateral tokens\\n     * @notice Swaps a share of a loan's collateral or the complete collateral\\n     *   in order to cover the principle.\\n     *\\n     * @param loanLocal The loan object.\\n     * @param loanParamsLocal The loan parameters.\\n     * @param swapAmount In case principalNeeded == 0 or !returnTokenIsCollateral,\\n     *   this is the amount which is going to be swapped.\\n     *   Else, swapAmount doesn't matter, because the amount of source tokens\\n     *   needed for the swap is estimated by the connector.\\n     * @param principalNeeded The required amount of destination tokens in order to\\n     *   cover the principle (only used if returnTokenIsCollateral).\\n     * @param returnTokenIsCollateral Tells if the user wants to withdraw his\\n     *   remaining collateral + profit in collateral tokens.\\n     *\\n     * @return coveredPrincipal The amount of principal that is covered.\\n     * @return usedCollateral The amount of collateral used.\\n     * @return withdrawAmount The withdraw amount in the collateral token.\\n     * @return collateralToLoanSwapRate The swap rate of collateral.\\n     * */\\n    function _coverPrincipalWithSwap(\\n        Loan memory loanLocal,\\n        LoanParams memory loanParamsLocal,\\n        uint256 swapAmount,\\n        uint256 principalNeeded,\\n        bool returnTokenIsCollateral,\\n        bytes memory loanDataBytes\\n    )\\n        internal\\n        returns (\\n            uint256 coveredPrincipal,\\n            uint256 usedCollateral,\\n            uint256 withdrawAmount,\\n            uint256 collateralToLoanSwapRate\\n        )\\n    {\\n        uint256 destTokenAmountReceived;\\n        uint256 sourceTokenAmountUsed;\\n        (\\n            destTokenAmountReceived,\\n            sourceTokenAmountUsed,\\n            collateralToLoanSwapRate\\n        ) = _doCollateralSwap(\\n            loanLocal,\\n            loanParamsLocal,\\n            swapAmount,\\n            principalNeeded,\\n            returnTokenIsCollateral,\\n            loanDataBytes\\n        );\\n\\n        if (returnTokenIsCollateral) {\\n            coveredPrincipal = principalNeeded;\\n\\n            /// Better fill than expected.\\n            if (destTokenAmountReceived > coveredPrincipal) {\\n                /// Send excess to borrower if the amount is big enough to be\\n                /// worth the gas fees.\\n                if (\\n                    worthTheTransfer(\\n                        loanParamsLocal.loanToken,\\n                        destTokenAmountReceived - coveredPrincipal\\n                    )\\n                ) {\\n                    _withdrawAsset(\\n                        loanParamsLocal.loanToken,\\n                        loanLocal.borrower,\\n                        destTokenAmountReceived - coveredPrincipal\\n                    );\\n                }\\n                /// Else, give the excess to the lender (if it goes to the\\n                /// borrower, they're very confused. causes more trouble than it's worth)\\n                else {\\n                    coveredPrincipal = destTokenAmountReceived;\\n                }\\n            }\\n            withdrawAmount = swapAmount > sourceTokenAmountUsed\\n                ? swapAmount - sourceTokenAmountUsed\\n                : 0;\\n        } else {\\n            require(sourceTokenAmountUsed == swapAmount, \\\"swap error\\\");\\n\\n            if (swapAmount == loanLocal.collateral) {\\n                /// sourceTokenAmountUsed == swapAmount == loanLocal.collateral\\n\\n                coveredPrincipal = principalNeeded;\\n                withdrawAmount = destTokenAmountReceived - principalNeeded;\\n            } else {\\n                /// sourceTokenAmountUsed == swapAmount < loanLocal.collateral\\n\\n                if (destTokenAmountReceived >= loanLocal.principal) {\\n                    /// Edge case where swap covers full principal.\\n\\n                    coveredPrincipal = loanLocal.principal;\\n                    withdrawAmount = destTokenAmountReceived - loanLocal.principal;\\n\\n                    /// Excess collateral refunds to the borrower.\\n                    _withdrawAsset(\\n                        loanParamsLocal.collateralToken,\\n                        loanLocal.borrower,\\n                        loanLocal.collateral - sourceTokenAmountUsed\\n                    );\\n                    sourceTokenAmountUsed = loanLocal.collateral;\\n                } else {\\n                    coveredPrincipal = destTokenAmountReceived;\\n                    withdrawAmount = 0;\\n                }\\n            }\\n        }\\n\\n        usedCollateral = sourceTokenAmountUsed > swapAmount ? sourceTokenAmountUsed : swapAmount;\\n    }\\n\\n    function _emitClosingEvents(\\n        LoanParams memory loanParamsLocal,\\n        Loan memory loanLocal,\\n        uint256 loanCloseAmount,\\n        uint256 collateralCloseAmount,\\n        uint256 collateralToLoanRate,\\n        uint256 collateralToLoanSwapRate,\\n        uint256 currentMargin,\\n        CloseTypes closeType\\n    ) internal {\\n        if (closeType == CloseTypes.Deposit) {\\n            emit CloseWithDeposit(\\n                loanLocal.borrower, /// user (borrower)\\n                loanLocal.lender, /// lender\\n                loanLocal.id, /// loanId\\n                msg.sender, /// closer\\n                loanParamsLocal.loanToken, /// loanToken\\n                loanParamsLocal.collateralToken, /// collateralToken\\n                loanCloseAmount, /// loanCloseAmount\\n                collateralCloseAmount, /// collateralCloseAmount\\n                collateralToLoanRate, /// collateralToLoanRate\\n                currentMargin /// currentMargin\\n            );\\n        } else if (closeType == CloseTypes.Swap) {\\n            /// exitPrice = 1 / collateralToLoanSwapRate\\n            if (collateralToLoanSwapRate != 0) {\\n                collateralToLoanSwapRate = SafeMath.div(10**36, collateralToLoanSwapRate);\\n            }\\n\\n            /// currentLeverage = 100 / currentMargin\\n            if (currentMargin != 0) {\\n                currentMargin = SafeMath.div(10**38, currentMargin);\\n            }\\n\\n            emit CloseWithSwap(\\n                loanLocal.borrower, /// user (trader)\\n                loanLocal.lender, /// lender\\n                loanLocal.id, /// loanId\\n                loanParamsLocal.collateralToken, /// collateralToken\\n                loanParamsLocal.loanToken, /// loanToken\\n                msg.sender, /// closer\\n                collateralCloseAmount, /// positionCloseSize\\n                loanCloseAmount, /// loanCloseAmount\\n                collateralToLoanSwapRate, /// exitPrice (1 / collateralToLoanSwapRate)\\n                currentMargin /// currentLeverage\\n            );\\n        } else if (closeType == CloseTypes.Liquidation) {\\n            emit Liquidate(\\n                loanLocal.borrower, // user (borrower)\\n                msg.sender, // liquidator\\n                loanLocal.id, // loanId\\n                loanLocal.lender, // lender\\n                loanParamsLocal.loanToken, // loanToken\\n                loanParamsLocal.collateralToken, // collateralToken\\n                loanCloseAmount, // loanCloseAmount\\n                collateralCloseAmount, // collateralCloseAmount\\n                collateralToLoanRate, // collateralToLoanRate\\n                currentMargin // currentMargin\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev returns amount of the asset converted to RBTC\\n     * @param asset the asset to be transferred\\n     * @param amount the amount to be transferred\\n     * @return amount in RBTC\\n     * */\\n    function _getAmountInRbtc(address asset, uint256 amount) internal view returns (uint256) {\\n        (uint256 rbtcRate, uint256 rbtcPrecision) =\\n            IPriceFeeds(priceFeeds).queryRate(asset, address(wrbtcToken));\\n        return amount.mul(rbtcRate).div(rbtcPrecision);\\n    }\\n\\n    /**\\n     * @dev private function which check the loanLocal & loanParamsLocal does exist\\n     *\\n     * @param loanId bytes32 of loanId\\n     *\\n     * @return Loan storage\\n     * @return LoanParams storage\\n     */\\n    function _checkLoan(bytes32 loanId) internal view returns (Loan storage, LoanParams storage) {\\n        Loan storage loanLocal = loans[loanId];\\n        LoanParams storage loanParamsLocal = loanParams[loanLocal.loanParamsId];\\n\\n        require(loanLocal.active, \\\"loan is closed\\\");\\n        require(loanParamsLocal.id != 0, \\\"loanParams not exists\\\");\\n\\n        return (loanLocal, loanParamsLocal);\\n    }\\n}\\n\",\"keccak256\":\"0x1a0074f77279f50a995043aea443b4805c049bbde91bcb15b9f23365dd205bef\"},\"contracts/modules/interfaces/ProtocolAffiliatesInterface.sol\":{\"content\":\"/**\\n * Copyright 2020, Denis Savelev. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\ninterface ProtocolAffiliatesInterface {\\n    function setAffiliatesReferrer(address user, address referrer) external;\\n\\n    function setUserNotFirstTradeFlag(address user_) external;\\n\\n    function getUserNotFirstTradeFlag(address user_) external returns (bool);\\n\\n    function payTradingFeeToAffiliatesReferrer(\\n        address affiliate,\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256 affiliatesBonusSOVAmount, uint256 affiliatesBonusTokenAmount);\\n}\\n\",\"keccak256\":\"0x42f259156db09a06e3dcdf0ab9c6774712616b35e6baff97999a2a534d1c9c64\"},\"contracts/openzeppelin/Address.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html\\n     *   #use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x23df48a01dbac9b25e86c9131174fb7752bbc7e741e63f1aa982de22e055ad54\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen <remco@2\\u03c0.com>, Eenae <alexey@mixbytes.io>\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard {\\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\\n\\n    /// @dev Constant for locked guard state\\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\\n\\n    /**\\n     * @dev We use a single lock for the whole contract.\\n     */\\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * If you mark a function `nonReentrant`, you should also\\n     * mark it `external`. Calling one `nonReentrant` function from\\n     * another is not supported. Instead, you can implement a\\n     * `private` function doing the actual work, and an `external`\\n     * wrapper marked as `nonReentrant`.\\n     */\\n    modifier nonReentrant() {\\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \\\"nonReentrant\\\");\\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\\n        _;\\n        reentrancyLock = REENTRANCY_GUARD_FREE;\\n    }\\n}\\n\",\"keccak256\":\"0xd347de96ad57d1e45b07a2efe3050c1bd4b809236bbf354acb593de56d21a5c9\"},\"contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).sub(\\n                value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe99b4d979cb976a6b70e297600242afe38b8cd8f1b1ba6ee373f39f7abb3ca79\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"},\"contracts/reentrancy/Mutex.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/*\\n * @title Global Mutex contract\\n *\\n * @notice A mutex contract that allows only one function to be called at a time out\\n * of a large set of functions. *Anyone* in the network can freely use any instance\\n * of this contract to add a universal mutex to any function in any contract.\\n */\\ncontract Mutex {\\n    /*\\n     * We use an uint to store the mutex state.\\n     */\\n    uint256 public value;\\n\\n    /*\\n     * @notice Increment the mutex state and return the new value.\\n     *\\n     * @dev This is the function that will be called by anyone to change the mutex\\n     * state. It is purposely not protected by any access control\\n     */\\n    function incrementAndGetValue() external returns (uint256) {\\n        /*\\n         * increment value using unsafe math. This is safe because we are\\n         * pretty certain no one will ever increment the value 2^256 times\\n         * in a single transaction.\\n         */\\n        return ++value;\\n    }\\n}\\n\",\"keccak256\":\"0xd10b0fd07d5fed1ae1237e7c87e6501970fce2a86e2b8862e502258b0d3aeb2c\"},\"contracts/reentrancy/SharedReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"./Mutex.sol\\\";\\n\\n/*\\n * @title Abstract contract for shared reentrancy guards\\n *\\n * @notice Exposes a single modifier `globallyNonReentrant` that can be used to ensure\\n * that there's no reentrancy between *any* functions marked with the modifier.\\n *\\n * @dev The Mutex contract address is hardcoded because the address is deployed using a\\n * special deployment method (similar to ERC1820Registry). This contract therefore has no\\n * state and is thus safe to add to the inheritance chain of upgradeable contracts.\\n */\\ncontract SharedReentrancyGuard {\\n    /*\\n     * This is the address of the mutex contract that will be used as the\\n     * reentrancy guard.\\n     *\\n     * The address is hardcoded to avoid changing the memory layout of\\n     * derived contracts (possibly upgradable). Hardcoding the address is possible,\\n     * because the Mutex contract is always deployed to the same address, with the\\n     * same method used in the deployment of ERC1820Registry.\\n     */\\n    Mutex private constant MUTEX = Mutex(0xba10edD6ABC7696Eae685839217BdcC42139612b);\\n\\n    /*\\n     * This is the modifier that will be used to protect functions from\\n     * reentrancy. It will call the mutex contract to increment the mutex\\n     * state and then revert if the mutex state was changed by another\\n     * nested call.\\n     */\\n    modifier globallyNonReentrant() {\\n        uint256 previous = MUTEX.incrementAndGetValue();\\n\\n        _;\\n\\n        /*\\n         * If the mutex state was changed by a nested function call, then\\n         * the value of the state variable will be different from the previous value.\\n         */\\n        require(previous == MUTEX.value(), \\\"reentrancy violation\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2d0e61b104b91c1764f20fbeb381ba0f8a8889934ba7f6e8a167ed542ec2c124\"},\"contracts/swaps/SwapsUser.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC <https://bzx.network/>. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"../core/State.sol\\\";\\nimport \\\"../feeds/IPriceFeeds.sol\\\";\\nimport \\\"../events/SwapsEvents.sol\\\";\\nimport \\\"../mixins/FeesHelper.sol\\\";\\nimport \\\"./connectors/SwapsImplSovrynSwapLib.sol\\\";\\n\\n/**\\n * @title Perform token swaps for loans and trades.\\n * */\\ncontract SwapsUser is State, SwapsEvents, FeesHelper {\\n    /**\\n     * @notice Internal loan swap.\\n     *\\n     * @param loanId The ID of the loan.\\n     * @param sourceToken The address of the source tokens.\\n     * @param destToken The address of destination tokens.\\n     * @param user The user address.\\n     * @param minSourceTokenAmount The minimum amount of source tokens to swap.\\n     * @param maxSourceTokenAmount The maximum amount of source tokens to swap.\\n     * @param requiredDestTokenAmount The required amount of destination tokens.\\n     * @param bypassFee To bypass or not the fee.\\n     * @param loanDataBytes The payload for the call. These loan DataBytes are\\n     *   additional loan data (not in use for token swaps).\\n     *\\n     * @return destTokenAmountReceived\\n     * @return sourceTokenAmountUsed\\n     * @return sourceToDestSwapRate\\n     * */\\n    function _loanSwap(\\n        bytes32 loanId,\\n        address sourceToken,\\n        address destToken,\\n        address user,\\n        uint256 minSourceTokenAmount,\\n        uint256 maxSourceTokenAmount,\\n        uint256 requiredDestTokenAmount,\\n        bool bypassFee,\\n        bytes memory loanDataBytes\\n    )\\n        internal\\n        returns (\\n            uint256 destTokenAmountReceived,\\n            uint256 sourceTokenAmountUsed,\\n            uint256 sourceToDestSwapRate\\n        )\\n    {\\n        (destTokenAmountReceived, sourceTokenAmountUsed) = _swapsCall(\\n            [\\n                sourceToken,\\n                destToken,\\n                address(this), // receiver\\n                address(this), // returnToSender\\n                user\\n            ],\\n            [minSourceTokenAmount, maxSourceTokenAmount, requiredDestTokenAmount],\\n            loanId,\\n            bypassFee,\\n            loanDataBytes,\\n            false // swap external flag, set to false so that it will use the tradingFeePercent\\n        );\\n\\n        /// Will revert if swap size too large.\\n        _checkSwapSize(sourceToken, sourceTokenAmountUsed);\\n\\n        /// Will revert if disagreement found.\\n        sourceToDestSwapRate = IPriceFeeds(priceFeeds).checkPriceDisagreement(\\n            sourceToken,\\n            destToken,\\n            sourceTokenAmountUsed,\\n            destTokenAmountReceived,\\n            maxDisagreement\\n        );\\n\\n        emit LoanSwap(\\n            loanId,\\n            sourceToken,\\n            destToken,\\n            user,\\n            sourceTokenAmountUsed,\\n            destTokenAmountReceived\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate amount of source and destination tokens.\\n     *\\n     * @dev Wrapper for _swapsCall_internal function.\\n     *\\n     * @param addrs The array of addresses.\\n     * @param vals The array of values.\\n     * @param loanId The Id of the associated loan.\\n     * @param miscBool True/false to bypassFee.\\n     * @param loanDataBytes Additional loan data (not in use yet).\\n     *\\n     * @return destTokenAmountReceived The amount of destination tokens received.\\n     * @return sourceTokenAmountUsed The amount of source tokens used.\\n     * */\\n    function _swapsCall(\\n        address[5] memory addrs,\\n        uint256[3] memory vals,\\n        bytes32 loanId,\\n        bool miscBool, /// bypassFee\\n        bytes memory loanDataBytes,\\n        bool isSwapExternal\\n    ) internal returns (uint256, uint256) {\\n        /// addrs[0]: sourceToken\\n        /// addrs[1]: destToken\\n        /// addrs[2]: receiver\\n        /// addrs[3]: returnToSender\\n        /// addrs[4]: user\\n        /// vals[0]:  minSourceTokenAmount\\n        /// vals[1]:  maxSourceTokenAmount\\n        /// vals[2]:  requiredDestTokenAmount\\n\\n        require(vals[0] != 0 || vals[1] != 0, \\\"min or max source token amount needs to be set\\\");\\n\\n        if (vals[1] == 0) {\\n            vals[1] = vals[0];\\n        }\\n        require(vals[0] <= vals[1], \\\"sourceAmount larger than max\\\");\\n\\n        uint256 destTokenAmountReceived;\\n        uint256 sourceTokenAmountUsed;\\n\\n        uint256 tradingFee;\\n        if (!miscBool) {\\n            /// bypassFee\\n            if (vals[2] == 0) {\\n                /// condition: vals[0] will always be used as sourceAmount\\n\\n                if (isSwapExternal) {\\n                    tradingFee = _getSwapExternalFee(vals[0]);\\n                } else {\\n                    tradingFee = _getTradingFee(vals[0]);\\n                }\\n\\n                if (tradingFee != 0) {\\n                    _payTradingFee(\\n                        addrs[4], /// user\\n                        loanId,\\n                        addrs[0], /// sourceToken (feeToken)\\n                        addrs[1], /// pairToken (used to check if there is any special rebates or not) -- to pay fee reward\\n                        tradingFee\\n                    );\\n\\n                    vals[0] = vals[0].sub(tradingFee);\\n                }\\n            } else {\\n                /// Condition: unknown sourceAmount will be used.\\n\\n                if (isSwapExternal) {\\n                    tradingFee = _getSwapExternalFee(vals[2]);\\n                } else {\\n                    tradingFee = _getTradingFee(vals[2]);\\n                }\\n\\n                if (tradingFee != 0) {\\n                    vals[2] = vals[2].add(tradingFee);\\n                }\\n            }\\n        }\\n\\n        require(loanDataBytes.length == 0, \\\"invalid state\\\");\\n\\n        (destTokenAmountReceived, sourceTokenAmountUsed) = _swapsCall_internal(addrs, vals);\\n\\n        if (vals[2] == 0) {\\n            /// There's no minimum destTokenAmount, but all of vals[0]\\n            /// (minSourceTokenAmount) must be spent.\\n            require(sourceTokenAmountUsed == vals[0], \\\"swap too large to fill\\\");\\n\\n            if (tradingFee != 0) {\\n                sourceTokenAmountUsed = sourceTokenAmountUsed.add(tradingFee);\\n            }\\n        } else {\\n            /// There's a minimum destTokenAmount required, but\\n            /// sourceTokenAmountUsed won't be greater\\n            /// than vals[1] (maxSourceTokenAmount)\\n            require(sourceTokenAmountUsed <= vals[1], \\\"swap fill too large\\\");\\n            require(destTokenAmountReceived >= vals[2], \\\"insufficient swap liquidity\\\");\\n\\n            if (tradingFee != 0) {\\n                _payTradingFee(\\n                    addrs[4], /// user\\n                    loanId, /// loanId,\\n                    addrs[1], /// destToken (feeToken)\\n                    addrs[0], /// pairToken (used to check if there is any special rebates or not) -- to pay fee reward\\n                    tradingFee\\n                );\\n\\n                destTokenAmountReceived = destTokenAmountReceived.sub(tradingFee);\\n            }\\n        }\\n\\n        return (destTokenAmountReceived, sourceTokenAmountUsed);\\n    }\\n\\n    /**\\n     * @notice Calculate amount of source and destination tokens.\\n     *\\n     * @dev Calls swapsImpl::internalSwap\\n     *\\n     * @param addrs The array of addresses.\\n     * @param vals The array of values.\\n     *\\n     * @return destTokenAmountReceived The amount of destination tokens received.\\n     * @return sourceTokenAmountUsed The amount of source tokens used.\\n     * */\\n    function _swapsCall_internal(address[5] memory addrs, uint256[3] memory vals)\\n        internal\\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed)\\n    {\\n        SwapsImplSovrynSwapLib.SwapParams memory swapParams;\\n\\n        swapParams.sourceTokenAddress = addrs[0];\\n        swapParams.destTokenAddress = addrs[1];\\n        swapParams.receiverAddress = addrs[2];\\n        swapParams.returnToSenderAddress = addrs[3];\\n        swapParams.minSourceTokenAmount = vals[0];\\n        swapParams.maxSourceTokenAmount = vals[1];\\n        swapParams.requiredDestTokenAmount = vals[2];\\n\\n        (destTokenAmountReceived, sourceTokenAmountUsed) = SwapsImplSovrynSwapLib.swap(swapParams);\\n    }\\n\\n    /**\\n     * @notice Calculate expected amount of destination tokens.\\n     *\\n     * @dev Calls swapsImpl::internalExpectedReturn\\n     *\\n     * @param sourceToken The address of the source tokens.\\n     * @param destToken The address of the destination tokens.\\n     * @param sourceTokenAmount The amount of the source tokens.\\n     *\\n     * @param destTokenAmount The amount of destination tokens.\\n     * */\\n    function _swapsExpectedReturn(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceTokenAmount\\n    ) internal view returns (uint256 destTokenAmount) {\\n        destTokenAmount = SwapsImplSovrynSwapLib.getExpectedReturn(\\n            sourceToken,\\n            destToken,\\n            sourceTokenAmount\\n        );\\n    }\\n\\n    /**\\n     * @notice Verify that the amount of tokens are under the swap limit.\\n     *\\n     * @dev Calls priceFeeds::amountInEth\\n     *\\n     * @param tokenAddress The address of the token to calculate price.\\n     * @param amount The amount of tokens to calculate price.\\n     * */\\n    function _checkSwapSize(address tokenAddress, uint256 amount) internal view {\\n        uint256 _maxSwapSize = maxSwapSize;\\n        if (_maxSwapSize != 0) {\\n            uint256 amountInEth;\\n            if (tokenAddress == address(wrbtcToken)) {\\n                amountInEth = amount;\\n            } else {\\n                amountInEth = IPriceFeeds(priceFeeds).amountInEth(tokenAddress, amount);\\n            }\\n            require(amountInEth <= _maxSwapSize, \\\"swap too large\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7dfc45e91455458caf886b49c96ad426de06cddffa442c16628eba4974f3d323\"},\"contracts/swaps/connectors/SwapsImplSovrynSwapLib.sol\":{\"content\":\"pragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../feeds/IPriceFeeds.sol\\\";\\nimport \\\"../../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ISovrynSwapNetwork.sol\\\";\\nimport \\\"./interfaces/IContractRegistry.sol\\\";\\nimport \\\"../../interfaces/ISovryn.sol\\\";\\n\\n/**\\n * @title Swaps Implementation Sovryn contract.\\n *\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the implementation of swap process and rate\\n * calculations for Sovryn network.\\n * */\\nlibrary SwapsImplSovrynSwapLib {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct SwapParams {\\n        address sourceTokenAddress;\\n        address destTokenAddress;\\n        address receiverAddress;\\n        address returnToSenderAddress;\\n        uint256 minSourceTokenAmount;\\n        uint256 maxSourceTokenAmount;\\n        uint256 requiredDestTokenAmount;\\n    }\\n\\n    /// bytes32 contractName = hex\\\"42616e636f724e6574776f726b\\\"; /// \\\"SovrynSwapNetwork\\\"\\n\\n    /**\\n     * Get the hex name of a contract.\\n     * @param source The name of the contract.\\n     * */\\n    function getContractHexName(string memory source) public pure returns (bytes32 result) {\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n\\n    /**\\n     * Look up the Sovryn swap network contract registered at the given address.\\n     * @param sovrynSwapRegistryAddress The address of the registry.\\n     * */\\n    function getSovrynSwapNetworkContract(address sovrynSwapRegistryAddress)\\n        public\\n        view\\n        returns (ISovrynSwapNetwork)\\n    {\\n        /// State variable sovrynSwapContractRegistryAddress is part of\\n        /// State.sol and set in ProtocolSettings.sol and this function\\n        /// needs to work without delegate call as well -> therefore pass it.\\n        IContractRegistry contractRegistry = IContractRegistry(sovrynSwapRegistryAddress);\\n        return\\n            ISovrynSwapNetwork(\\n                contractRegistry.addressOf(getContractHexName(\\\"SovrynSwapNetwork\\\"))\\n            );\\n    }\\n\\n    /**\\n     * Swap the source token for the destination token on the oracle based AMM.\\n     * On loan opening: minSourceTokenAmount = maxSourceTokenAmount and requiredDestTokenAmount = 0\\n     *      -> swap the minSourceTokenAmount\\n     * On loan rollover: (swap interest) minSourceTokenAmount = 0, maxSourceTokenAmount = complete collateral and requiredDestTokenAmount > 0\\n     *      -> amount of required source tokens to swap is estimated (want to fill requiredDestTokenAmount, not more). maxSourceTokenAMount is not exceeded.\\n     * On loan closure: minSourceTokenAmount <= maxSourceTokenAmount and requiredDestTokenAmount >= 0\\n     *      -> same as on rollover. minimum amount is not considered at all.\\n     *\\n     * @param params SwapParams struct\\n     * sourceTokenAddress The address of the source tokens.\\n     * destTokenAddress The address of the destination tokens.\\n     * receiverAddress The address who will received the swap token results\\n     * returnToSenderAddress The address to return unspent tokens to (when called by the protocol, it's always the protocol contract).\\n     * minSourceTokenAmount The minimum amount of source tokens to swapped (only considered if requiredDestTokens == 0).\\n     * maxSourceTokenAmount The maximum amount of source tokens to swapped.\\n     * requiredDestTokenAmount The required amount of destination tokens.\\n     * */\\n    function swap(SwapParams memory params)\\n        public\\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed)\\n    {\\n        require(params.sourceTokenAddress != params.destTokenAddress, \\\"source == dest\\\");\\n\\n        ISovryn iSovryn = ISovryn(address(this));\\n        require(\\n            iSovryn.supportedTokens(params.sourceTokenAddress) &&\\n                iSovryn.supportedTokens(params.destTokenAddress),\\n            \\\"invalid tokens\\\"\\n        );\\n\\n        ISovrynSwapNetwork sovrynSwapNetwork =\\n            getSovrynSwapNetworkContract(iSovryn.sovrynSwapContractRegistryAddress());\\n\\n        IERC20[] memory path =\\n            _getConversionPath(\\n                params.sourceTokenAddress,\\n                params.destTokenAddress,\\n                sovrynSwapNetwork\\n            );\\n\\n        uint256 minReturn = 1;\\n        sourceTokenAmountUsed = params.minSourceTokenAmount;\\n\\n        /// If the required amount of destination tokens is passed, we need to\\n        /// calculate the estimated amount of source tokens regardless of the\\n        /// minimum source token amount (name is misleading).\\n        if (params.requiredDestTokenAmount > 0) {\\n            sourceTokenAmountUsed = _estimateSourceTokenAmount(\\n                params.sourceTokenAddress,\\n                params.destTokenAddress,\\n                params.requiredDestTokenAmount,\\n                params.maxSourceTokenAmount\\n            );\\n            /// sovrynSwapNetwork.rateByPath does not return a rate, but instead the amount of destination tokens returned.\\n            require(\\n                sovrynSwapNetwork.rateByPath(path, sourceTokenAmountUsed) >=\\n                    params.requiredDestTokenAmount,\\n                \\\"insufficient source tokens provided.\\\"\\n            );\\n            minReturn = params.requiredDestTokenAmount;\\n        }\\n\\n        require(sourceTokenAmountUsed > 0, \\\"cannot swap 0 tokens\\\");\\n\\n        _allowTransfer(\\n            sourceTokenAmountUsed,\\n            params.sourceTokenAddress,\\n            address(sovrynSwapNetwork)\\n        );\\n\\n        /// @dev Note: the kyber connector uses .call() to interact with kyber\\n        /// to avoid bubbling up. here we allow bubbling up.\\n        destTokenAmountReceived = sovrynSwapNetwork.convertByPath(\\n            path,\\n            sourceTokenAmountUsed,\\n            minReturn,\\n            params.receiverAddress,\\n            address(0),\\n            0\\n        );\\n\\n        /// If the sender is not the protocol (calling with delegatecall),\\n        /// return the remainder to the specified address.\\n        /// @dev Note: for the case that the swap is used without the\\n        /// protocol. Not sure if it should, though. needs to be discussed.\\n        if (params.returnToSenderAddress != address(this)) {\\n            if (sourceTokenAmountUsed < params.maxSourceTokenAmount) {\\n                /// Send unused source token back.\\n                IERC20(params.sourceTokenAddress).safeTransfer(\\n                    params.returnToSenderAddress,\\n                    params.maxSourceTokenAmount - sourceTokenAmountUsed\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Check whether the existing allowance suffices to transfer\\n     *   the needed amount of tokens.\\n     *   If not, allows the transfer of an arbitrary amount of tokens.\\n     *\\n     * @param tokenAmount The amount to transfer.\\n     * @param tokenAddress The address of the token to transfer.\\n     * @param sovrynSwapNetwork The address of the sovrynSwap network contract.\\n     * */\\n    function _allowTransfer(\\n        uint256 tokenAmount,\\n        address tokenAddress,\\n        address sovrynSwapNetwork\\n    ) internal {\\n        uint256 tempAllowance = IERC20(tokenAddress).allowance(address(this), sovrynSwapNetwork);\\n        if (tempAllowance < tokenAmount) {\\n            IERC20(tokenAddress).safeApprove(sovrynSwapNetwork, uint256(-1));\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the number of source tokens to provide in order to\\n     *   obtain the required destination amount.\\n     *\\n     * @param sourceTokenAddress The address of the source token address.\\n     * @param destTokenAddress The address of the destination token address.\\n     * @param requiredDestTokenAmount The number of destination tokens needed.\\n     * @param maxSourceTokenAmount The maximum number of source tokens to spend.\\n     *\\n     * @return The estimated amount of source tokens needed.\\n     *   Minimum: minSourceTokenAmount, maximum: maxSourceTokenAmount\\n     * */\\n    function _estimateSourceTokenAmount(\\n        address sourceTokenAddress,\\n        address destTokenAddress,\\n        uint256 requiredDestTokenAmount,\\n        uint256 maxSourceTokenAmount\\n    ) internal view returns (uint256 estimatedSourceAmount) {\\n        ISovryn iSovryn = ISovryn(address(this));\\n        uint256 sourceToDestPrecision =\\n            IPriceFeeds(iSovryn.priceFeeds()).queryPrecision(sourceTokenAddress, destTokenAddress);\\n        if (sourceToDestPrecision == 0) return maxSourceTokenAmount;\\n\\n        /// Compute the expected rate for the maxSourceTokenAmount -> if spending less, we can't get a worse rate.\\n        uint256 expectedRate =\\n            getExpectedRate(sourceTokenAddress, destTokenAddress, maxSourceTokenAmount);\\n\\n        /// Compute the source tokens needed to get the required amount with the worst case rate.\\n        estimatedSourceAmount = requiredDestTokenAmount.mul(sourceToDestPrecision).div(\\n            expectedRate\\n        );\\n\\n        /// If the actual rate is exactly the same as the worst case rate, we get rounding issues. So, add a small buffer.\\n        /// buffer = min(estimatedSourceAmount/1000 , sourceBuffer) with sourceBuffer = 10000\\n        uint256 buffer = estimatedSourceAmount.div(1000);\\n        if (buffer > iSovryn.sourceBuffer()) buffer = iSovryn.sourceBuffer();\\n        estimatedSourceAmount = estimatedSourceAmount.add(buffer);\\n\\n        /// Never spend more than the maximum.\\n        if (estimatedSourceAmount == 0 || estimatedSourceAmount > maxSourceTokenAmount)\\n            return maxSourceTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Get the expected rate for 1 source token when exchanging the\\n     *   given amount of source tokens.\\n     *\\n     * @param sourceTokenAddress The address of the source token contract.\\n     * @param destTokenAddress The address of the destination token contract.\\n     * @param sourceTokenAmount The amount of source tokens to get the rate for.\\n     * */\\n    function getExpectedRate(\\n        address sourceTokenAddress,\\n        address destTokenAddress,\\n        uint256 sourceTokenAmount\\n    ) public view returns (uint256) {\\n        ISovrynSwapNetwork sovrynSwapNetwork =\\n            getSovrynSwapNetworkContract(\\n                ISovryn(address(this)).sovrynSwapContractRegistryAddress()\\n            );\\n\\n        IERC20[] memory path =\\n            _getConversionPath(sourceTokenAddress, destTokenAddress, sovrynSwapNetwork);\\n\\n        /// Is returning the total amount of destination tokens.\\n        uint256 expectedReturn = sovrynSwapNetwork.rateByPath(path, sourceTokenAmount);\\n\\n        /// Return the rate for 1 token with 18 decimals.\\n        return expectedReturn.mul(10**18).div(sourceTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Get the expected return amount when exchanging the given\\n     *   amount of source tokens.\\n     *\\n     * @notice Right now, this function is being called directly by _swapsExpectedReturn from the protocol\\n     * So, this function is not using _getConversionPath function since it will try to read the defaultPath storage which is stored in the protocol's slot, and it will cause an issue for direct call.\\n     * Instead, this function is accepting additional parameters called defaultPath which value can be declared by the caller (protocol in this case).\\n     *\\n     * @param sourceTokenAddress The address of the source token contract.\\n     * @param destTokenAddress The address of the destination token contract.\\n     * @param sourceTokenAmount The amount of source tokens to get the return for.\\n     * */\\n    function getExpectedReturn(\\n        address sourceTokenAddress,\\n        address destTokenAddress,\\n        uint256 sourceTokenAmount\\n    ) public view returns (uint256 expectedReturn) {\\n        ISovrynSwapNetwork sovrynSwapNetwork =\\n            getSovrynSwapNetworkContract(\\n                ISovryn(address(this)).sovrynSwapContractRegistryAddress()\\n            );\\n\\n        IERC20[] memory path =\\n            _getConversionPath(sourceTokenAddress, destTokenAddress, sovrynSwapNetwork);\\n\\n        /// Is returning the total amount of destination tokens.\\n        expectedReturn = sovrynSwapNetwork.rateByPath(path, sourceTokenAmount);\\n    }\\n\\n    function _getConversionPath(\\n        address sourceTokenAddress,\\n        address destTokenAddress,\\n        ISovrynSwapNetwork sovrynSwapNetwork\\n    ) private view returns (IERC20[] memory path) {\\n        IERC20[] memory _defaultPathConversion =\\n            ISovryn(address(this)).getDefaultPathConversion(sourceTokenAddress, destTokenAddress);\\n\\n        /// will use the defaultPath if it's set, otherwise query from the SovrynSwapNetwork.\\n        path = _defaultPathConversion.length >= 3\\n            ? _defaultPathConversion\\n            : sovrynSwapNetwork.conversionPath(\\n                IERC20(sourceTokenAddress),\\n                IERC20(destTokenAddress)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x058b8d733422a2421f17d1b159aed69f151ea8d5f48ee507bac5b4e86add8b0c\"},\"contracts/swaps/connectors/interfaces/IContractRegistry.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\ncontract IContractRegistry {\\n    function addressOf(bytes32 contractName) public view returns (address);\\n}\\n\",\"keccak256\":\"0x793c4eefa2ee04cbf0a1a9da28676ac310ed7bf60a27ec7d86de7d7236ccf45b\"},\"contracts/swaps/connectors/interfaces/ISovrynSwapNetwork.sol\":{\"content\":\"pragma solidity >=0.5.8 <=0.5.17;\\n\\nimport \\\"../../../interfaces/IERC20.sol\\\";\\n\\ncontract ISovrynSwapNetwork {\\n    function convertByPath(\\n        IERC20[] calldata _path,\\n        uint256 _amount,\\n        uint256 _minReturn,\\n        address _beneficiary,\\n        address _affiliateAccount,\\n        uint256 _affiliateFee\\n    ) external payable returns (uint256);\\n\\n    function rateByPath(IERC20[] calldata _path, uint256 _amount) external view returns (uint256);\\n\\n    function conversionPath(IERC20 _sourceToken, IERC20 _targetToken)\\n        external\\n        view\\n        returns (IERC20[] memory);\\n}\\n\",\"keccak256\":\"0xcd28e146b77183bff18f78b511912f7ebe60d437430fdaa72ed145fdda61a5ad\"}},\"version\":1}",
  "bytecode": "0x60806040526001600055678ac7230489e80000601555670214e8348c4f000060185567013fbe85edc90000601b55674563918244f40000602055674563918244f40000602155674563918244f400006027556127106028556802b5e3af16b1880000602955650f478e084000602b5567016345785d8a0000602c556802b5e3af16b1880000602f5560036035556801158e460913d00000603955348015620000a657600080fd5b506000620000bc6001600160e01b036200011016565b600180546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000114565b3390565b613bee80620001246000396000f3fe60806040526004361061036b5760003560e01c806392d894f8116101c6578063d288208c116100f7578063f0e085f511610095578063f6ddc8b31161006f578063f6ddc8b31461099a578063f706b1f2146109af578063f851a440146109c4578063f8dd4f0e146109d95761036b565b8063f0e085f514610950578063f2fde38b14610965578063f589a3e7146109855761036b565b8063e4f3e739116100d1578063e4f3e739146108ef578063e8f6276414610911578063edab119f14610926578063ee54a4ec1461093b5761036b565b8063d288208c146108a5578063d473c2da146108ba578063d485045e146108cf5761036b565b8063b9cffa3e11610164578063c4a908151161013e578063c4a90815146107f7578063c4d66de81461082f578063cb6eacd114610851578063cd5d808d146108855761036b565b8063b9cffa3e146107ad578063ba4861e9146107c2578063bdee453c146107d75761036b565b8063ae0a8530116101a0578063ae0a853014610736578063afe840091461074b578063b30643d91461076d578063b7e152411461078d5761036b565b806392d894f8146106ec578063959083d31461070c578063acc04348146107215761036b565b80634f28cac2116102a0578063742e67981161023e5780638456cb59116102185780638456cb591461068d5780638da5cb5b146106a25780638dc48ba5146106b75780638f32d59b146106d75761036b565b8063742e67981461064e57806378d849ed146106635780637a8faeb8146106785761036b565b806362fff3f61161027a57806362fff3f6146105c857806368c4ac26146105f95780636e663730146106195780637420ca3e146106395761036b565b80634f28cac21461056f578063569fc1fb14610584578063574442cc146105b35761036b565b80632f4707641161030d5780633fca506e116102e75780633fca506e146104fa5780634115a2b61461051a5780634203e3951461053a5780634699f8461461055a5761036b565b80632f470764146104a55780633432423c146104ba5780633452d2d4146104da5761036b565b80631b7bde74116103495780631b7bde7414610416578063218b39c61461044357806324cc5749146104635780632a324027146104905761036b565b8063065d810f146103995780630676c1b7146103d457806317548b79146103f6575b34801561037757600080fd5b5060405162461bcd60e51b81526004016103909061399c565b60405180910390fd5b3480156103a557600080fd5b506103b96103b4366004612f4e565b6109ee565b6040516103cb96959493929190613a9c565b60405180910390f35b3480156103e057600080fd5b506103e9610a2e565b6040516103cb91906135fb565b34801561040257600080fd5b506103e9610411366004613026565b610a3d565b34801561042257600080fd5b50610436610431366004612f14565b610a58565b6040516103cb9190613a0c565b34801561044f57600080fd5b506103e961045e366004612ef6565b610a75565b34801561046f57600080fd5b5061048361047e366004612ef6565b610a90565b6040516103cb9190613755565b34801561049c57600080fd5b50610436610aa5565b3480156104b157600080fd5b50610436610aab565b3480156104c657600080fd5b506103b96104d5366004612f4e565b610ab1565b3480156104e657600080fd5b506104366104f5366004612ef6565b610af1565b34801561050657600080fd5b50610436610515366004612ef6565b610b03565b34801561052657600080fd5b50610483610535366004612fba565b610b15565b34801561054657600080fd5b50610436610555366004612ef6565b610b35565b34801561056657600080fd5b50610436610b47565b34801561057b57600080fd5b50610436610b4d565b34801561059057600080fd5b506105a461059f366004612f9c565b610b53565b6040516103cb93929190613a42565b3480156105bf57600080fd5b50610436610b74565b3480156105d457600080fd5b506105e86105e3366004612f14565b610b7a565b6040516103cb959493929190613a50565b34801561060557600080fd5b50610483610614366004612ef6565b610bb4565b34801561062557600080fd5b506103e9610634366004612ef6565b610bc9565b34801561064557600080fd5b506103e9610be4565b34801561065a57600080fd5b50610436610bf3565b34801561066f57600080fd5b506103e9610bf9565b34801561068457600080fd5b50610436610c08565b34801561069957600080fd5b50610483610c0e565b3480156106ae57600080fd5b506103e9610c17565b3480156106c357600080fd5b506103e96106d2366004612ef6565b610c26565b3480156106e357600080fd5b50610483610c41565b3480156106f857600080fd5b50610436610707366004612ef6565b610c67565b34801561071857600080fd5b50610436610c79565b34801561072d57600080fd5b50610436610c7f565b34801561074257600080fd5b50610436610c85565b34801561075757600080fd5b50610760610c8b565b6040516103cb919061388d565b34801561077957600080fd5b50610436610788366004612ef6565b610c9a565b34801561079957600080fd5b506104366107a8366004612ef6565b610cac565b3480156107b957600080fd5b506103e9610cbe565b3480156107ce57600080fd5b506103e9610ccd565b3480156107e357600080fd5b506104366107f2366004612ef6565b610cdc565b34801561080357600080fd5b50610817610812366004612f9c565b610cee565b6040516103cb9c9b9a999897969594939291906137da565b34801561083b57600080fd5b5061084f61084a366004612ef6565b610d60565b005b34801561085d57600080fd5b5061087161086c366004612f9c565b610e31565b6040516103cb989796959493929190613763565b34801561089157600080fd5b506104366108a0366004612f14565b610e83565b3480156108b157600080fd5b506103e9610ea0565b3480156108c657600080fd5b50610436610eaf565b3480156108db57600080fd5b506104366108ea366004612ef6565b610eb5565b6109026108fd366004612fd9565b610ec7565b6040516103cb93929190613a1a565b34801561091d57600080fd5b506103e96111d0565b34801561093257600080fd5b506104366111df565b34801561094757600080fd5b506104366111e5565b34801561095c57600080fd5b506104366111ef565b34801561097157600080fd5b5061084f610980366004612ef6565b6111f5565b34801561099157600080fd5b50610436611225565b3480156109a657600080fd5b5061043661122b565b3480156109bb57600080fd5b506103e9611231565b3480156109d057600080fd5b506103e9611240565b3480156109e557600080fd5b5061043661124f565b6009602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b6031546001600160a01b031681565b6005602052600090815260409020546001600160a01b031681565b603b60209081526000928352604080842090915290825290205481565b6023602052600090815260409020546001600160a01b031681565b60326020526000908152604090205460ff1681565b60185481565b601f5481565b6008602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b601a6020526000908152604090205481565b602a6020526000908152604090205481565b600a60209081526000928352604080842090915290825290205460ff1681565b60166020526000908152604090205481565b60155481565b60295481565b600c6020526000908152604090208054600182015460029092015490919083565b602b5481565b600b602090815260009283526040808420909152908252902080546001820154600283015460038401546004909401549293919290919085565b60266020526000908152604090205460ff1681565b6033602052600090815260409020546001600160a01b031681565b6003546001600160a01b031681565b60355481565b6002546001600160a01b031681565b601e5481565b603d5460ff1681565b6001546001600160a01b031690565b6022602052600090815260409020546001600160a01b031681565b6001546000906001600160a01b0316610c58611259565b6001600160a01b031614905090565b60176020526000908152604090205481565b602c5481565b602f5481565b60205481565b602d546001600160a01b031681565b601d6020526000908152604090205481565b601c6020526000908152604090205481565b6037546001600160a01b031681565b6004546001600160a01b031681565b60366020526000908152604090205481565b600660208190526000918252604090912080546001820154600283015460038401546004850154600586015496860154600787015460088801546009890154600a8a0154600b909a0154989a9799969860ff909616979496949593949293919290916001600160a01b0391821691168c565b610d68610c41565b610d845760405162461bcd60e51b81526004016103909061397c565b63e4f3e73960e01b600081905260056020527fe1cb396722e7eabe79fbbfe4b479997758c9eb9965437583a97ce608d5a86600546001600160a01b031690610dcc908361125d565b7f4c6f616e436c6f73696e67734c69717569646174696f6e000000000000000000826001600160a01b0316826001600160a01b03167f1420e3a2094d671bc2eb897941fa3d94ffa37f0cb6d530651946250a2151cb7f60405160405180910390a45050565b6007602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949560ff8516956101009095046001600160a01b03908116959481169493169288565b603c60209081526000928352604080842090915290825290205481565b6038546001600160a01b031681565b60275481565b60196020526000908152604090205481565b6000806000600160005414610eee5760405162461bcd60e51b8152600401610390906139cc565b6002600081905550600073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b031663ed04e1c36040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f4757600080fd5b505af1158015610f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f7f9190810190613044565b6000888152600660205260409020600b81015491925088916001600160a01b0316610fbc5760405162461bcd60e51b8152600401610390906138cc565b600b810154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561100357600080fd5b505afa158015611017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061103b9190810190613044565b603d5490915060ff16156110615760405162461bcd60e51b8152600401610390906138bc565b61106c8a8a8a6112d9565b96509650965081600b0160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110c257600080fd5b505afa1580156110d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110fa9190810190613044565b81146111185760405162461bcd60e51b81526004016103909061395c565b50505073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b0316633fa4f2456040518163ffffffff1660e01b815260040160206040518083038186803b15801561116857600080fd5b505afa15801561117c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111a09190810190613044565b81146111be5760405162461bcd60e51b8152600401610390906138ac565b50600160008190555093509350939050565b6014546001600160a01b031681565b601b5481565b6509184e72a00081565b60285481565b6111fd610c41565b6112195760405162461bcd60e51b81526004016103909061397c565b611222816118e3565b50565b60395481565b60215481565b602e546001600160a01b031681565b6030546001600160a01b031681565b65e35fa931a00081565b3390565b6001600160e01b03198216600090815260056020526040902080546001600160a01b0319166001600160a01b038316908117909155156112b8576112b2600d6001600160e01b0319841663ffffffff61196516565b506112d5565b6112d3600d6001600160e01b0319841663ffffffff6119af16565b505b5050565b60008060008060006112ea88611a70565b6002805490820154600383015460048086015460058701546040516317f8680960e11b815297995095975060009687966001600160a01b0396871696632ff0d0129661133e969082169591169392016136ea565b604080518083038186803b15801561135557600080fd5b505afa158015611369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061138d9190810190613062565b9150915082600501548211156113b55760405162461bcd60e51b81526004016103909061393c565b8796506000806113d48660040154876005015486886005015487611adf565b509150915081891015611440576002850154898303906113fd906001600160a01b031682611c1f565b905065e35fa931a00081116114175782995081985061143a565b6114378361142b848d63ffffffff611cce16565b9063ffffffff611d0f16565b98505b50611457565b8189111561145357819850809750611457565b8097505b886114745760405162461bcd60e51b81526004016103909061394c565b600285015461148d906001600160a01b0316308b611d51565b600061166d87604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600b820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815250508760405180610100016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160048201548152602001600582015481526020016006820154815250508c8a600a0160009054906101000a90046001600160a01b0316611e77565b9050808a111561169a576002860154600a88015461169a916001600160a01b039081169116838d03611ee5565b80156116c1576002860154600b8801546116c1916001600160a01b03908116911683611f12565b60038601546001600160a01b0316975088156116fc5760058701546116ec908a63ffffffff611f8216565b60058801556116fc888d8b611ee5565b611706878b611fc4565b6118d38660405180610100016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600482015481526020016005820154815260200160068201548152505088604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600b820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815250508c8c8860008b600261209b565b5050505050505093509350939050565b6001600160a01b0381166119095760405162461bcd60e51b8152600401610390906138dc565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000611971838361226e565b6119a557506001808301805480830180835560009283526020808420909201859055848352908590526040909120556119a9565b5060005b92915050565b60006119bb838361226e565b156119a55760008281526020849052604090205460018401546000199182019101808214611a335760008560010182815481106119f457fe5b9060005260206000200154905080866001018481548110611a1157fe5b6000918252602080832090910192909255918252869052604090206001830190555b60008481526020869052604081205560018501805480611a4f57fe5b600190038181906000526020600020016000905590556001925050506119a9565b6000818152600660209081526040808320600181015484526007909252822060038201548392919060ff16611ab75760405162461bcd60e51b8152600401610390906139bc565b8054611ad55760405162461bcd60e51b81526004016103909061398c565b9092509050915091565b602154600090819084861180611af3575083155b15611afd57611c14565b808611611b11575086915085905084611c14565b6000611b2b86674563918244f4000063ffffffff61228316565b9050611b5a68056bc75e2d6310000061142b8b611b4e858463ffffffff61228316565b9063ffffffff611cce16565b9350611b88611b7b670de0b6b3a764000061142b8b8963ffffffff611cce16565b859063ffffffff611f8216565b9350611bb6611b9d828463ffffffff611f8216565b61142b8668056bc75e2d6310000063ffffffff611cce16565b935088841115611bc4578893505b611bed611be08368056bc75e2d6310000063ffffffff61228316565b859063ffffffff611cce16565b9250611c04606461142b858863ffffffff611d0f16565b925087831115611c12578792505b505b955095509592505050565b600254602d54604051630a7549df60e21b8152600092839283926001600160a01b03928316926329d5277c92611c5d928a9290911690600401613671565b604080518083038186803b158015611c7457600080fd5b505afa158015611c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611cac9190810190613062565b9092509050611cc58161142b868563ffffffff611cce16565b95945050505050565b600082611cdd575060006119a9565b82820282848281611cea57fe5b0414611d085760405162461bcd60e51b81526004016103909061396c565b9392505050565b6000611d0883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506122a8565b8015611e595734611d6d57611d68833384846122df565b611e54565b602d546001600160a01b03848116911614611d9a5760405162461bcd60e51b8152600401610390906138fc565b80341015611dba5760405162461bcd60e51b8152600401610390906139fc565b602d60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611e0a57600080fd5b505af1158015611e1e573d6000803e3d6000fd5b505050506001600160a01b03831630149050611e4057611e40833084846122df565b80341115611e5457611e5433823403612336565b6112d3565b34156112d35760405162461bcd60e51b8152600401610390906138fc565b60008281611e868688846123d2565b90506000818310611e9f57509081900390600090611ebd565b5060009190819003908115611ebd57611ebd87606001518684611ee5565b8015611ed757611ed7876060015189610160015183611f12565b50909150505b949350505050565b80156112d357602d546001600160a01b0384811691161415611f0b57611e548282612570565b6112d38383835b80156112d357611f326001600160a01b038416838363ffffffff61264716565b816001600160a01b0316836001600160a01b03167fc44aeefa68e8b9c1ad5f7be4b0dd194580f81f5c362862e72196503a320eb7a183604051611f759190613a0c565b60405180910390a3505050565b6000611d0883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506126a0565b80611fe15760405162461bcd60e51b8152600401610390906139ac565b816004015481141561207d5760006004830181905560038301805460ff191690554260078401556002830155815461202190600f9063ffffffff6119af16565b508154600b8301546001600160a01b0316600090815260116020526040902061204f9163ffffffff6119af16565b508154600a8301546001600160a01b031660009081526012602052604090206112b29163ffffffff6119af16565b6004820154612092908263ffffffff611f8216565b60048301555050565b60008160028111156120a957fe5b14156121225786600001518761016001516001600160a01b03168861014001516001600160a01b03167f6349c1a02ec126f7f4fc6e6837e1859006e90e9901635c442d29271e77b96fb6338c606001518d608001518c8c8c8b6040516121159796959493929190613609565b60405180910390a4612264565b600181600281111561213057fe5b14156121e1578215612158576121556ec097ce7bc90715b34b9f100000000084611d0f565b92505b811561217b576121786f4b3b4ca85a86c47a098a22400000000083611d0f565b91505b86600001518761016001516001600160a01b03168861014001516001600160a01b03167f2ed7b29b4ca95cf3bb9a44f703872a66e6aa5e8f07b675fa9a5c124a1e5d73528b608001518c60600151338b8d8b8b604051612115979695949392919061368c565b60028160028111156121ef57fe5b1415612264578660000151336001600160a01b03168861014001516001600160a01b03167f46fa03303782eb2f686515f6c0100f9a62dabe587b0d3f5a4fc0c822d6e532d38a61016001518c606001518d608001518c8c8c8b60405161225b97969594939291906136b4565b60405180910390a45b5050505050505050565b60009081526020919091526040902054151590565b600082820183811015611d085760405162461bcd60e51b8152600401610390906138ec565b600081836122c95760405162461bcd60e51b8152600401610390919061389b565b5060008385816122d557fe5b0495945050505050565b8015612330576001600160a01b038316301415612315576123106001600160a01b038516838363ffffffff61264716565b612330565b6123306001600160a01b03851684848463ffffffff6126cc16565b50505050565b804710156123565760405162461bcd60e51b81526004016103909061392c565b6000826001600160a01b03168260405161236f906135f0565b60006040518083038185875af1925050503d80600081146123ac576040519150601f19603f3d011682016040523d82523d6000602084013e6123b1565b606091505b50509050806112d35760405162461bcd60e51b81526004016103909061391c565b60006123e783610160015185606001516126f0565b82516000908152600c602090815260408083206101608701516001600160a01b039081168552600b845282852060608a0151909116855290925290912060e08501514290811115612439575060e08501515b61245883876000015189606001518a608001518a6101400151866127c8565b600086608001518610156124895760808701518454612482919061142b908963ffffffff611cce16565b905061248d565b5082545b835461249f908263ffffffff611f8216565b845560018301546124b6908263ffffffff611f8216565b600184015560e08701516000906124d3908463ffffffff611f8216565b90506124e5818363ffffffff611cce16565b90506124fa816201518063ffffffff611d0f16565b9050876080015187101561252757600185015461251d908263ffffffff611f8216565b600186015561252f565b600060018601555b8354612541908863ffffffff611f8216565b8455600284015481811161255657600061255a565b8181035b6002909501949094559450505050509392505050565b80156112d557602d546001600160a01b031647808311156125ec57604051632e1a7d4d60e01b81526001600160a01b03831690632e1a7d4d906125b99084870390600401613a0c565b600060405180830381600087803b1580156125d357600080fd5b505af11580156125e7573d6000803e3d6000fd5b505050505b6125f68484612336565b836001600160a01b0316826001600160a01b03167fc44aeefa68e8b9c1ad5f7be4b0dd194580f81f5c362862e72196503a320eb7a1856040516126399190613a0c565b60405180910390a350505050565b6040516112d390849063a9059cbb60e01b90612669908690869060240161371f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612823565b600081848411156126c45760405162461bcd60e51b8152600401610390919061389b565b505050900390565b6040516123309085906323b872dd60e01b90612669908790879087906024016136c2565b6001600160a01b038083166000908152600b6020908152604080832093851683529290529081206001810154909190158015906127305750600482015415155b156127bc5761275b6201518061142b8460010154611b4e866004015442611f8290919063ffffffff16565b4260048401556002830154909150811115612777575060028101545b8015612310576003820154612792908263ffffffff61228316565b600383015560028201546127ac908263ffffffff611f8216565b6002830155612310848483612908565b42600483015550505050565b60006127fe6a07259756a8d6199800000061142b601554611b4e8b60000154611b4e8d6002015489611f8290919063ffffffff16565b600288018390559050801561281a5761281a838787878561299f565b50505050505050565b612835826001600160a01b0316612e05565b6128515760405162461bcd60e51b8152600401610390906139ec565b60006060836001600160a01b03168360405161286d91906135e4565b6000604051808303816000865af19150503d80600081146128aa576040519150601f19603f3d011682016040523d82523d6000602084013e6128af565b606091505b5091509150816128d15760405162461bcd60e51b81526004016103909061390c565b80511561233057808060200190516128ec9190810190612f7e565b6123305760405162461bcd60e51b8152600401610390906139dc565b600061292c68056bc75e2d6310000061142b60155485611cce90919063ffffffff16565b9050612939848483612e3e565b612953838561294e858563ffffffff611f8216565b611f12565b6001600160a01b038085169084167f220e66e3e759e1382aa86cd8af5abca05ebf3ad564f223ae62d977678337272a612992858563ffffffff611f8216565b6040516126399190613a0c565b602f546002546001600160a01b038581166000908152603c602090815260408083208885168452909152812054909392919091169015612a02576001600160a01b038087166000908152603c602090815260408083209389168352929052205491505b6037546000906060906001600160a01b038085169163d138f9a160e01b918b9116612a4068056bc75e2d6310000061142b8c8b63ffffffff611cce16565b604051602401612a52939291906136c2565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612a9091906135e4565b600060405180830381855afa9150503d8060008114612acb576040519150601f19603f3d011682016040523d82523d6000602084013e612ad0565b606091505b50915091506001821415612ae657602081015194505b6000306001600160a01b031663c22552f76040518163ffffffff1660e01b815260040160206040518083038186803b158015612b2157600080fd5b505afa158015612b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b599190810190613044565b90508515801590612b6a5750858110155b15612d925760375460385460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392612ba5929116908a9060040161371f565b602060405180830381600087803b158015612bbf57600080fd5b505af1158015612bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612bf79190810190612f7e565b50603854603f546040516000926001600160a01b031691612c1e918f918b9160240161373a565b60408051601f198184030181529181526020820180516001600160e01b0316630efe6a8b60e01b17905251612c5391906135e4565b6000604051808303816000865af19150503d8060008114612c90576040519150601f19603f3d011682016040523d82523d6000602084013e612c95565b606091505b505090508015612d2457601f54612cb2908863ffffffff61228316565b601f819055508a603760009054906101000a90046001600160a01b03166001600160a01b03168d6001600160a01b03167ff41c644671512f1cda76abfe6038e3d7d526c1377a5a8c692f81703901db2150898b603f54604051612d1793929190613a42565b60405180910390a4612d8c565b8a603760009054906101000a90046001600160a01b03166001600160a01b03168d6001600160a01b03167f483f67ea49f76ac15e15bbad68b52788ca47d50aef1e4acfe95e5e307e710812898b603f54604051612d8393929190613a42565b60405180910390a45b50612df8565b8515801590612da057508581105b15612df857603754603f546040518c926001600160a01b0390811692908f16917f483f67ea49f76ac15e15bbad68b52788ca47d50aef1e4acfe95e5e307e71081291612def918b918d91613a42565b60405180910390a45b5050505050505050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611edd575050151592915050565b80156112d3576001600160a01b038216600090815260166020526040902054612e6d908263ffffffff61228316565b6001600160a01b0380841660008181526016602052604090819020939093559151908516907f40a75ae5f7a5336e75f7c7977e12c4b46a9ac0f30de01a2d5b6c1a4f4af6358790611f75908590613a0c565b80356119a981613b7c565b80516119a981613b90565b80356119a981613b99565b80356119a981613ba2565b80516119a981613b99565b600060208284031215612f0857600080fd5b6000611edd8484612ebf565b60008060408385031215612f2757600080fd5b6000612f338585612ebf565b9250506020612f4485828601612ebf565b9150509250929050565b60008060408385031215612f6157600080fd5b6000612f6d8585612ebf565b9250506020612f4485828601612ed5565b600060208284031215612f9057600080fd5b6000611edd8484612eca565b600060208284031215612fae57600080fd5b6000611edd8484612ed5565b60008060408385031215612fcd57600080fd5b6000612f338585612ed5565b600080600060608486031215612fee57600080fd5b6000612ffa8686612ed5565b935050602061300b86828701612ebf565b925050604061301c86828701612ed5565b9150509250925092565b60006020828403121561303857600080fd5b6000611edd8484612ee0565b60006020828403121561305657600080fd5b6000611edd8484612eeb565b6000806040838503121561307557600080fd5b60006130818585612eeb565b9250506020612f4485828601612eeb565b61309b81613b34565b82525050565b61309b81613b08565b61309b81613b13565b61309b81613b18565b60006130c782613af6565b6130d18185613afa565b93506130e1818560208601613b46565b9290920192915050565b61309b81613b3b565b60006130ff82613af6565b6131098185613aff565b9350613119818560208601613b46565b61312281613b72565b9093019392505050565b6000613139601483613aff565b733932b2b73a3930b731bc903b34b7b630ba34b7b760611b815260200192915050565b6000613169600683613aff565b6514185d5cd95960d21b815260200192915050565b600061318b601f83613aff565b7f496e76616c6964206c6f616e20746f6b656e20706f6f6c206164647265737300815260200192915050565b60006131c4602683613aff565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b600061320c601b83613aff565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b6000613245601083613aff565b6f1ddc9bdb99c8185cdcd95d081cd95b9d60821b815260200192915050565b6000613271602083613aff565b7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815260200192915050565b60006132aa603a83613aff565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207281527f6563697069656e74206d61792068617665207265766572746564000000000000602082015260400192915050565b6000613309601d83613aff565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000815260200192915050565b6000613342601083613aff565b6f3432b0b63a343c903837b9b4ba34b7b760811b815260200192915050565b600061336e601483613aff565b736e6f7468696e6720746f206c697175696461746560601b815260200192915050565b600061339e602983613aff565b7f6c6f616e20746f6b656e20737570706c7920696e76617269616e7420636865638152686b206661696c75726560b81b602082015260400192915050565b60006133e9602183613aff565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b600061342c600c83613aff565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000613454601583613aff565b746c6f616e506172616d73206e6f742065786973747360581b815260200192915050565b6000613485601483613aff565b7319985b1b189858dac81b9bdd08185b1b1bddd95960621b815260200192915050565b60006134b5601083613aff565b6f6e6f7468696e6720746f20636c6f736560801b815260200192915050565b60006119a9600083613afa565b60006134ee600e83613aff565b6d1b1bd85b881a5cc818db1bdcd95960921b815260200192915050565b6000613518600c83613aff565b6b1b9bdb9499595b9d1c985b9d60a21b815260200192915050565b6000613540602a83613aff565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b600061358c601f83613aff565b7f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400815260200192915050565b60006135c5601083613aff565b6f3737ba1032b737bab3b41032ba3432b960811b815260200192915050565b6000611d0882846130bc565b60006119a9826134d4565b602081016119a982846130a1565b60e08101613617828a613092565b61362460208301896130a1565b61363160408301886130a1565b61363e60608301876130b3565b61364b60808301866130b3565b61365860a08301856130b3565b61366560c08301846130b3565b98975050505050505050565b6040810161367f82856130a1565b611d0860208301846130a1565b60e0810161369a828a6130a1565b6136a760208301896130a1565b6136316040830188613092565b60e08101613617828a6130a1565b606081016136d082866130a1565b6136dd60208301856130a1565b611edd60408301846130b3565b608081016136f882876130a1565b61370560208301866130a1565b61371260408301856130b3565b611cc560608301846130b3565b6040810161372d82856130a1565b611d0860208301846130b3565b6060810161374882866130a1565b6136dd60208301856130b3565b602081016119a982846130aa565b6101008101613772828b6130b3565b61377f602083018a6130aa565b61378c60408301896130a1565b61379960608301886130a1565b6137a660808301876130a1565b6137b360a08301866130b3565b6137c060c08301856130b3565b6137cd60e08301846130b3565b9998505050505050505050565b61018081016137e9828f6130b3565b6137f6602083018e6130b3565b613803604083018d6130b3565b613810606083018c6130aa565b61381d608083018b6130b3565b61382a60a083018a6130b3565b61383760c08301896130b3565b61384460e08301886130b3565b6138526101008301876130b3565b6138606101208301866130b3565b61386e6101408301856130a1565b61387c6101608301846130a1565b9d9c50505050505050505050505050565b602081016119a982846130eb565b60208082528101611d0881846130f4565b602080825281016119a98161312c565b602080825281016119a98161315c565b602080825281016119a98161317e565b602080825281016119a9816131b7565b602080825281016119a9816131ff565b602080825281016119a981613238565b602080825281016119a981613264565b602080825281016119a98161329d565b602080825281016119a9816132fc565b602080825281016119a981613335565b602080825281016119a981613361565b602080825281016119a981613391565b602080825281016119a9816133dc565b602080825281016119a98161341f565b602080825281016119a981613447565b602080825281016119a981613478565b602080825281016119a9816134a8565b602080825281016119a9816134e1565b602080825281016119a98161350b565b602080825281016119a981613533565b602080825281016119a98161357f565b602080825281016119a9816135b8565b602081016119a982846130b3565b60608101613a2882866130b3565b613a3560208301856130b3565b611edd60408301846130a1565b6060810161374882866130b3565b60a08101613a5e82886130b3565b613a6b60208301876130b3565b613a7860408301866130b3565b613a8560608301856130b3565b613a9260808301846130b3565b9695505050505050565b60c08101613aaa82896130b3565b613ab760208301886130b3565b613ac460408301876130b3565b613ad160608301866130b3565b613ade60808301856130b3565b613aeb60a08301846130b3565b979650505050505050565b5190565b919050565b90815260200190565b60006119a982613b28565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b60006119a9825b60006119a982613b08565b60005b83811015613b61578181015183820152602001613b49565b838111156123305750506000910152565b601f01601f191690565b613b8581613b08565b811461122257600080fd5b613b8581613b13565b613b8581613b18565b613b8581613b1b56fea365627a7a72315820c218b0faea2b95e4be20285fb280daf0a2b9ac2243644037acb3bec790064f606c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x60806040526004361061036b5760003560e01c806392d894f8116101c6578063d288208c116100f7578063f0e085f511610095578063f6ddc8b31161006f578063f6ddc8b31461099a578063f706b1f2146109af578063f851a440146109c4578063f8dd4f0e146109d95761036b565b8063f0e085f514610950578063f2fde38b14610965578063f589a3e7146109855761036b565b8063e4f3e739116100d1578063e4f3e739146108ef578063e8f6276414610911578063edab119f14610926578063ee54a4ec1461093b5761036b565b8063d288208c146108a5578063d473c2da146108ba578063d485045e146108cf5761036b565b8063b9cffa3e11610164578063c4a908151161013e578063c4a90815146107f7578063c4d66de81461082f578063cb6eacd114610851578063cd5d808d146108855761036b565b8063b9cffa3e146107ad578063ba4861e9146107c2578063bdee453c146107d75761036b565b8063ae0a8530116101a0578063ae0a853014610736578063afe840091461074b578063b30643d91461076d578063b7e152411461078d5761036b565b806392d894f8146106ec578063959083d31461070c578063acc04348146107215761036b565b80634f28cac2116102a0578063742e67981161023e5780638456cb59116102185780638456cb591461068d5780638da5cb5b146106a25780638dc48ba5146106b75780638f32d59b146106d75761036b565b8063742e67981461064e57806378d849ed146106635780637a8faeb8146106785761036b565b806362fff3f61161027a57806362fff3f6146105c857806368c4ac26146105f95780636e663730146106195780637420ca3e146106395761036b565b80634f28cac21461056f578063569fc1fb14610584578063574442cc146105b35761036b565b80632f4707641161030d5780633fca506e116102e75780633fca506e146104fa5780634115a2b61461051a5780634203e3951461053a5780634699f8461461055a5761036b565b80632f470764146104a55780633432423c146104ba5780633452d2d4146104da5761036b565b80631b7bde74116103495780631b7bde7414610416578063218b39c61461044357806324cc5749146104635780632a324027146104905761036b565b8063065d810f146103995780630676c1b7146103d457806317548b79146103f6575b34801561037757600080fd5b5060405162461bcd60e51b81526004016103909061399c565b60405180910390fd5b3480156103a557600080fd5b506103b96103b4366004612f4e565b6109ee565b6040516103cb96959493929190613a9c565b60405180910390f35b3480156103e057600080fd5b506103e9610a2e565b6040516103cb91906135fb565b34801561040257600080fd5b506103e9610411366004613026565b610a3d565b34801561042257600080fd5b50610436610431366004612f14565b610a58565b6040516103cb9190613a0c565b34801561044f57600080fd5b506103e961045e366004612ef6565b610a75565b34801561046f57600080fd5b5061048361047e366004612ef6565b610a90565b6040516103cb9190613755565b34801561049c57600080fd5b50610436610aa5565b3480156104b157600080fd5b50610436610aab565b3480156104c657600080fd5b506103b96104d5366004612f4e565b610ab1565b3480156104e657600080fd5b506104366104f5366004612ef6565b610af1565b34801561050657600080fd5b50610436610515366004612ef6565b610b03565b34801561052657600080fd5b50610483610535366004612fba565b610b15565b34801561054657600080fd5b50610436610555366004612ef6565b610b35565b34801561056657600080fd5b50610436610b47565b34801561057b57600080fd5b50610436610b4d565b34801561059057600080fd5b506105a461059f366004612f9c565b610b53565b6040516103cb93929190613a42565b3480156105bf57600080fd5b50610436610b74565b3480156105d457600080fd5b506105e86105e3366004612f14565b610b7a565b6040516103cb959493929190613a50565b34801561060557600080fd5b50610483610614366004612ef6565b610bb4565b34801561062557600080fd5b506103e9610634366004612ef6565b610bc9565b34801561064557600080fd5b506103e9610be4565b34801561065a57600080fd5b50610436610bf3565b34801561066f57600080fd5b506103e9610bf9565b34801561068457600080fd5b50610436610c08565b34801561069957600080fd5b50610483610c0e565b3480156106ae57600080fd5b506103e9610c17565b3480156106c357600080fd5b506103e96106d2366004612ef6565b610c26565b3480156106e357600080fd5b50610483610c41565b3480156106f857600080fd5b50610436610707366004612ef6565b610c67565b34801561071857600080fd5b50610436610c79565b34801561072d57600080fd5b50610436610c7f565b34801561074257600080fd5b50610436610c85565b34801561075757600080fd5b50610760610c8b565b6040516103cb919061388d565b34801561077957600080fd5b50610436610788366004612ef6565b610c9a565b34801561079957600080fd5b506104366107a8366004612ef6565b610cac565b3480156107b957600080fd5b506103e9610cbe565b3480156107ce57600080fd5b506103e9610ccd565b3480156107e357600080fd5b506104366107f2366004612ef6565b610cdc565b34801561080357600080fd5b50610817610812366004612f9c565b610cee565b6040516103cb9c9b9a999897969594939291906137da565b34801561083b57600080fd5b5061084f61084a366004612ef6565b610d60565b005b34801561085d57600080fd5b5061087161086c366004612f9c565b610e31565b6040516103cb989796959493929190613763565b34801561089157600080fd5b506104366108a0366004612f14565b610e83565b3480156108b157600080fd5b506103e9610ea0565b3480156108c657600080fd5b50610436610eaf565b3480156108db57600080fd5b506104366108ea366004612ef6565b610eb5565b6109026108fd366004612fd9565b610ec7565b6040516103cb93929190613a1a565b34801561091d57600080fd5b506103e96111d0565b34801561093257600080fd5b506104366111df565b34801561094757600080fd5b506104366111e5565b34801561095c57600080fd5b506104366111ef565b34801561097157600080fd5b5061084f610980366004612ef6565b6111f5565b34801561099157600080fd5b50610436611225565b3480156109a657600080fd5b5061043661122b565b3480156109bb57600080fd5b506103e9611231565b3480156109d057600080fd5b506103e9611240565b3480156109e557600080fd5b5061043661124f565b6009602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b6031546001600160a01b031681565b6005602052600090815260409020546001600160a01b031681565b603b60209081526000928352604080842090915290825290205481565b6023602052600090815260409020546001600160a01b031681565b60326020526000908152604090205460ff1681565b60185481565b601f5481565b6008602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b601a6020526000908152604090205481565b602a6020526000908152604090205481565b600a60209081526000928352604080842090915290825290205460ff1681565b60166020526000908152604090205481565b60155481565b60295481565b600c6020526000908152604090208054600182015460029092015490919083565b602b5481565b600b602090815260009283526040808420909152908252902080546001820154600283015460038401546004909401549293919290919085565b60266020526000908152604090205460ff1681565b6033602052600090815260409020546001600160a01b031681565b6003546001600160a01b031681565b60355481565b6002546001600160a01b031681565b601e5481565b603d5460ff1681565b6001546001600160a01b031690565b6022602052600090815260409020546001600160a01b031681565b6001546000906001600160a01b0316610c58611259565b6001600160a01b031614905090565b60176020526000908152604090205481565b602c5481565b602f5481565b60205481565b602d546001600160a01b031681565b601d6020526000908152604090205481565b601c6020526000908152604090205481565b6037546001600160a01b031681565b6004546001600160a01b031681565b60366020526000908152604090205481565b600660208190526000918252604090912080546001820154600283015460038401546004850154600586015496860154600787015460088801546009890154600a8a0154600b909a0154989a9799969860ff909616979496949593949293919290916001600160a01b0391821691168c565b610d68610c41565b610d845760405162461bcd60e51b81526004016103909061397c565b63e4f3e73960e01b600081905260056020527fe1cb396722e7eabe79fbbfe4b479997758c9eb9965437583a97ce608d5a86600546001600160a01b031690610dcc908361125d565b7f4c6f616e436c6f73696e67734c69717569646174696f6e000000000000000000826001600160a01b0316826001600160a01b03167f1420e3a2094d671bc2eb897941fa3d94ffa37f0cb6d530651946250a2151cb7f60405160405180910390a45050565b6007602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949560ff8516956101009095046001600160a01b03908116959481169493169288565b603c60209081526000928352604080842090915290825290205481565b6038546001600160a01b031681565b60275481565b60196020526000908152604090205481565b6000806000600160005414610eee5760405162461bcd60e51b8152600401610390906139cc565b6002600081905550600073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b031663ed04e1c36040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f4757600080fd5b505af1158015610f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f7f9190810190613044565b6000888152600660205260409020600b81015491925088916001600160a01b0316610fbc5760405162461bcd60e51b8152600401610390906138cc565b600b810154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561100357600080fd5b505afa158015611017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061103b9190810190613044565b603d5490915060ff16156110615760405162461bcd60e51b8152600401610390906138bc565b61106c8a8a8a6112d9565b96509650965081600b0160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110c257600080fd5b505afa1580156110d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110fa9190810190613044565b81146111185760405162461bcd60e51b81526004016103909061395c565b50505073ba10edd6abc7696eae685839217bdcc42139612b6001600160a01b0316633fa4f2456040518163ffffffff1660e01b815260040160206040518083038186803b15801561116857600080fd5b505afa15801561117c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111a09190810190613044565b81146111be5760405162461bcd60e51b8152600401610390906138ac565b50600160008190555093509350939050565b6014546001600160a01b031681565b601b5481565b6509184e72a00081565b60285481565b6111fd610c41565b6112195760405162461bcd60e51b81526004016103909061397c565b611222816118e3565b50565b60395481565b60215481565b602e546001600160a01b031681565b6030546001600160a01b031681565b65e35fa931a00081565b3390565b6001600160e01b03198216600090815260056020526040902080546001600160a01b0319166001600160a01b038316908117909155156112b8576112b2600d6001600160e01b0319841663ffffffff61196516565b506112d5565b6112d3600d6001600160e01b0319841663ffffffff6119af16565b505b5050565b60008060008060006112ea88611a70565b6002805490820154600383015460048086015460058701546040516317f8680960e11b815297995095975060009687966001600160a01b0396871696632ff0d0129661133e969082169591169392016136ea565b604080518083038186803b15801561135557600080fd5b505afa158015611369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061138d9190810190613062565b9150915082600501548211156113b55760405162461bcd60e51b81526004016103909061393c565b8796506000806113d48660040154876005015486886005015487611adf565b509150915081891015611440576002850154898303906113fd906001600160a01b031682611c1f565b905065e35fa931a00081116114175782995081985061143a565b6114378361142b848d63ffffffff611cce16565b9063ffffffff611d0f16565b98505b50611457565b8189111561145357819850809750611457565b8097505b886114745760405162461bcd60e51b81526004016103909061394c565b600285015461148d906001600160a01b0316308b611d51565b600061166d87604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600b820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815250508760405180610100016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160048201548152602001600582015481526020016006820154815250508c8a600a0160009054906101000a90046001600160a01b0316611e77565b9050808a111561169a576002860154600a88015461169a916001600160a01b039081169116838d03611ee5565b80156116c1576002860154600b8801546116c1916001600160a01b03908116911683611f12565b60038601546001600160a01b0316975088156116fc5760058701546116ec908a63ffffffff611f8216565b60058801556116fc888d8b611ee5565b611706878b611fc4565b6118d38660405180610100016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600482015481526020016005820154815260200160068201548152505088604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600b820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815250508c8c8860008b600261209b565b5050505050505093509350939050565b6001600160a01b0381166119095760405162461bcd60e51b8152600401610390906138dc565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000611971838361226e565b6119a557506001808301805480830180835560009283526020808420909201859055848352908590526040909120556119a9565b5060005b92915050565b60006119bb838361226e565b156119a55760008281526020849052604090205460018401546000199182019101808214611a335760008560010182815481106119f457fe5b9060005260206000200154905080866001018481548110611a1157fe5b6000918252602080832090910192909255918252869052604090206001830190555b60008481526020869052604081205560018501805480611a4f57fe5b600190038181906000526020600020016000905590556001925050506119a9565b6000818152600660209081526040808320600181015484526007909252822060038201548392919060ff16611ab75760405162461bcd60e51b8152600401610390906139bc565b8054611ad55760405162461bcd60e51b81526004016103909061398c565b9092509050915091565b602154600090819084861180611af3575083155b15611afd57611c14565b808611611b11575086915085905084611c14565b6000611b2b86674563918244f4000063ffffffff61228316565b9050611b5a68056bc75e2d6310000061142b8b611b4e858463ffffffff61228316565b9063ffffffff611cce16565b9350611b88611b7b670de0b6b3a764000061142b8b8963ffffffff611cce16565b859063ffffffff611f8216565b9350611bb6611b9d828463ffffffff611f8216565b61142b8668056bc75e2d6310000063ffffffff611cce16565b935088841115611bc4578893505b611bed611be08368056bc75e2d6310000063ffffffff61228316565b859063ffffffff611cce16565b9250611c04606461142b858863ffffffff611d0f16565b925087831115611c12578792505b505b955095509592505050565b600254602d54604051630a7549df60e21b8152600092839283926001600160a01b03928316926329d5277c92611c5d928a9290911690600401613671565b604080518083038186803b158015611c7457600080fd5b505afa158015611c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611cac9190810190613062565b9092509050611cc58161142b868563ffffffff611cce16565b95945050505050565b600082611cdd575060006119a9565b82820282848281611cea57fe5b0414611d085760405162461bcd60e51b81526004016103909061396c565b9392505050565b6000611d0883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506122a8565b8015611e595734611d6d57611d68833384846122df565b611e54565b602d546001600160a01b03848116911614611d9a5760405162461bcd60e51b8152600401610390906138fc565b80341015611dba5760405162461bcd60e51b8152600401610390906139fc565b602d60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611e0a57600080fd5b505af1158015611e1e573d6000803e3d6000fd5b505050506001600160a01b03831630149050611e4057611e40833084846122df565b80341115611e5457611e5433823403612336565b6112d3565b34156112d35760405162461bcd60e51b8152600401610390906138fc565b60008281611e868688846123d2565b90506000818310611e9f57509081900390600090611ebd565b5060009190819003908115611ebd57611ebd87606001518684611ee5565b8015611ed757611ed7876060015189610160015183611f12565b50909150505b949350505050565b80156112d357602d546001600160a01b0384811691161415611f0b57611e548282612570565b6112d38383835b80156112d357611f326001600160a01b038416838363ffffffff61264716565b816001600160a01b0316836001600160a01b03167fc44aeefa68e8b9c1ad5f7be4b0dd194580f81f5c362862e72196503a320eb7a183604051611f759190613a0c565b60405180910390a3505050565b6000611d0883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506126a0565b80611fe15760405162461bcd60e51b8152600401610390906139ac565b816004015481141561207d5760006004830181905560038301805460ff191690554260078401556002830155815461202190600f9063ffffffff6119af16565b508154600b8301546001600160a01b0316600090815260116020526040902061204f9163ffffffff6119af16565b508154600a8301546001600160a01b031660009081526012602052604090206112b29163ffffffff6119af16565b6004820154612092908263ffffffff611f8216565b60048301555050565b60008160028111156120a957fe5b14156121225786600001518761016001516001600160a01b03168861014001516001600160a01b03167f6349c1a02ec126f7f4fc6e6837e1859006e90e9901635c442d29271e77b96fb6338c606001518d608001518c8c8c8b6040516121159796959493929190613609565b60405180910390a4612264565b600181600281111561213057fe5b14156121e1578215612158576121556ec097ce7bc90715b34b9f100000000084611d0f565b92505b811561217b576121786f4b3b4ca85a86c47a098a22400000000083611d0f565b91505b86600001518761016001516001600160a01b03168861014001516001600160a01b03167f2ed7b29b4ca95cf3bb9a44f703872a66e6aa5e8f07b675fa9a5c124a1e5d73528b608001518c60600151338b8d8b8b604051612115979695949392919061368c565b60028160028111156121ef57fe5b1415612264578660000151336001600160a01b03168861014001516001600160a01b03167f46fa03303782eb2f686515f6c0100f9a62dabe587b0d3f5a4fc0c822d6e532d38a61016001518c606001518d608001518c8c8c8b60405161225b97969594939291906136b4565b60405180910390a45b5050505050505050565b60009081526020919091526040902054151590565b600082820183811015611d085760405162461bcd60e51b8152600401610390906138ec565b600081836122c95760405162461bcd60e51b8152600401610390919061389b565b5060008385816122d557fe5b0495945050505050565b8015612330576001600160a01b038316301415612315576123106001600160a01b038516838363ffffffff61264716565b612330565b6123306001600160a01b03851684848463ffffffff6126cc16565b50505050565b804710156123565760405162461bcd60e51b81526004016103909061392c565b6000826001600160a01b03168260405161236f906135f0565b60006040518083038185875af1925050503d80600081146123ac576040519150601f19603f3d011682016040523d82523d6000602084013e6123b1565b606091505b50509050806112d35760405162461bcd60e51b81526004016103909061391c565b60006123e783610160015185606001516126f0565b82516000908152600c602090815260408083206101608701516001600160a01b039081168552600b845282852060608a0151909116855290925290912060e08501514290811115612439575060e08501515b61245883876000015189606001518a608001518a6101400151866127c8565b600086608001518610156124895760808701518454612482919061142b908963ffffffff611cce16565b905061248d565b5082545b835461249f908263ffffffff611f8216565b845560018301546124b6908263ffffffff611f8216565b600184015560e08701516000906124d3908463ffffffff611f8216565b90506124e5818363ffffffff611cce16565b90506124fa816201518063ffffffff611d0f16565b9050876080015187101561252757600185015461251d908263ffffffff611f8216565b600186015561252f565b600060018601555b8354612541908863ffffffff611f8216565b8455600284015481811161255657600061255a565b8181035b6002909501949094559450505050509392505050565b80156112d557602d546001600160a01b031647808311156125ec57604051632e1a7d4d60e01b81526001600160a01b03831690632e1a7d4d906125b99084870390600401613a0c565b600060405180830381600087803b1580156125d357600080fd5b505af11580156125e7573d6000803e3d6000fd5b505050505b6125f68484612336565b836001600160a01b0316826001600160a01b03167fc44aeefa68e8b9c1ad5f7be4b0dd194580f81f5c362862e72196503a320eb7a1856040516126399190613a0c565b60405180910390a350505050565b6040516112d390849063a9059cbb60e01b90612669908690869060240161371f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612823565b600081848411156126c45760405162461bcd60e51b8152600401610390919061389b565b505050900390565b6040516123309085906323b872dd60e01b90612669908790879087906024016136c2565b6001600160a01b038083166000908152600b6020908152604080832093851683529290529081206001810154909190158015906127305750600482015415155b156127bc5761275b6201518061142b8460010154611b4e866004015442611f8290919063ffffffff16565b4260048401556002830154909150811115612777575060028101545b8015612310576003820154612792908263ffffffff61228316565b600383015560028201546127ac908263ffffffff611f8216565b6002830155612310848483612908565b42600483015550505050565b60006127fe6a07259756a8d6199800000061142b601554611b4e8b60000154611b4e8d6002015489611f8290919063ffffffff16565b600288018390559050801561281a5761281a838787878561299f565b50505050505050565b612835826001600160a01b0316612e05565b6128515760405162461bcd60e51b8152600401610390906139ec565b60006060836001600160a01b03168360405161286d91906135e4565b6000604051808303816000865af19150503d80600081146128aa576040519150601f19603f3d011682016040523d82523d6000602084013e6128af565b606091505b5091509150816128d15760405162461bcd60e51b81526004016103909061390c565b80511561233057808060200190516128ec9190810190612f7e565b6123305760405162461bcd60e51b8152600401610390906139dc565b600061292c68056bc75e2d6310000061142b60155485611cce90919063ffffffff16565b9050612939848483612e3e565b612953838561294e858563ffffffff611f8216565b611f12565b6001600160a01b038085169084167f220e66e3e759e1382aa86cd8af5abca05ebf3ad564f223ae62d977678337272a612992858563ffffffff611f8216565b6040516126399190613a0c565b602f546002546001600160a01b038581166000908152603c602090815260408083208885168452909152812054909392919091169015612a02576001600160a01b038087166000908152603c602090815260408083209389168352929052205491505b6037546000906060906001600160a01b038085169163d138f9a160e01b918b9116612a4068056bc75e2d6310000061142b8c8b63ffffffff611cce16565b604051602401612a52939291906136c2565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612a9091906135e4565b600060405180830381855afa9150503d8060008114612acb576040519150601f19603f3d011682016040523d82523d6000602084013e612ad0565b606091505b50915091506001821415612ae657602081015194505b6000306001600160a01b031663c22552f76040518163ffffffff1660e01b815260040160206040518083038186803b158015612b2157600080fd5b505afa158015612b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b599190810190613044565b90508515801590612b6a5750858110155b15612d925760375460385460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392612ba5929116908a9060040161371f565b602060405180830381600087803b158015612bbf57600080fd5b505af1158015612bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612bf79190810190612f7e565b50603854603f546040516000926001600160a01b031691612c1e918f918b9160240161373a565b60408051601f198184030181529181526020820180516001600160e01b0316630efe6a8b60e01b17905251612c5391906135e4565b6000604051808303816000865af19150503d8060008114612c90576040519150601f19603f3d011682016040523d82523d6000602084013e612c95565b606091505b505090508015612d2457601f54612cb2908863ffffffff61228316565b601f819055508a603760009054906101000a90046001600160a01b03166001600160a01b03168d6001600160a01b03167ff41c644671512f1cda76abfe6038e3d7d526c1377a5a8c692f81703901db2150898b603f54604051612d1793929190613a42565b60405180910390a4612d8c565b8a603760009054906101000a90046001600160a01b03166001600160a01b03168d6001600160a01b03167f483f67ea49f76ac15e15bbad68b52788ca47d50aef1e4acfe95e5e307e710812898b603f54604051612d8393929190613a42565b60405180910390a45b50612df8565b8515801590612da057508581105b15612df857603754603f546040518c926001600160a01b0390811692908f16917f483f67ea49f76ac15e15bbad68b52788ca47d50aef1e4acfe95e5e307e71081291612def918b918d91613a42565b60405180910390a45b5050505050505050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611edd575050151592915050565b80156112d3576001600160a01b038216600090815260166020526040902054612e6d908263ffffffff61228316565b6001600160a01b0380841660008181526016602052604090819020939093559151908516907f40a75ae5f7a5336e75f7c7977e12c4b46a9ac0f30de01a2d5b6c1a4f4af6358790611f75908590613a0c565b80356119a981613b7c565b80516119a981613b90565b80356119a981613b99565b80356119a981613ba2565b80516119a981613b99565b600060208284031215612f0857600080fd5b6000611edd8484612ebf565b60008060408385031215612f2757600080fd5b6000612f338585612ebf565b9250506020612f4485828601612ebf565b9150509250929050565b60008060408385031215612f6157600080fd5b6000612f6d8585612ebf565b9250506020612f4485828601612ed5565b600060208284031215612f9057600080fd5b6000611edd8484612eca565b600060208284031215612fae57600080fd5b6000611edd8484612ed5565b60008060408385031215612fcd57600080fd5b6000612f338585612ed5565b600080600060608486031215612fee57600080fd5b6000612ffa8686612ed5565b935050602061300b86828701612ebf565b925050604061301c86828701612ed5565b9150509250925092565b60006020828403121561303857600080fd5b6000611edd8484612ee0565b60006020828403121561305657600080fd5b6000611edd8484612eeb565b6000806040838503121561307557600080fd5b60006130818585612eeb565b9250506020612f4485828601612eeb565b61309b81613b34565b82525050565b61309b81613b08565b61309b81613b13565b61309b81613b18565b60006130c782613af6565b6130d18185613afa565b93506130e1818560208601613b46565b9290920192915050565b61309b81613b3b565b60006130ff82613af6565b6131098185613aff565b9350613119818560208601613b46565b61312281613b72565b9093019392505050565b6000613139601483613aff565b733932b2b73a3930b731bc903b34b7b630ba34b7b760611b815260200192915050565b6000613169600683613aff565b6514185d5cd95960d21b815260200192915050565b600061318b601f83613aff565b7f496e76616c6964206c6f616e20746f6b656e20706f6f6c206164647265737300815260200192915050565b60006131c4602683613aff565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b600061320c601b83613aff565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b6000613245601083613aff565b6f1ddc9bdb99c8185cdcd95d081cd95b9d60821b815260200192915050565b6000613271602083613aff565b7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815260200192915050565b60006132aa603a83613aff565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207281527f6563697069656e74206d61792068617665207265766572746564000000000000602082015260400192915050565b6000613309601d83613aff565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000815260200192915050565b6000613342601083613aff565b6f3432b0b63a343c903837b9b4ba34b7b760811b815260200192915050565b600061336e601483613aff565b736e6f7468696e6720746f206c697175696461746560601b815260200192915050565b600061339e602983613aff565b7f6c6f616e20746f6b656e20737570706c7920696e76617269616e7420636865638152686b206661696c75726560b81b602082015260400192915050565b60006133e9602183613aff565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b600061342c600c83613aff565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000613454601583613aff565b746c6f616e506172616d73206e6f742065786973747360581b815260200192915050565b6000613485601483613aff565b7319985b1b189858dac81b9bdd08185b1b1bddd95960621b815260200192915050565b60006134b5601083613aff565b6f6e6f7468696e6720746f20636c6f736560801b815260200192915050565b60006119a9600083613afa565b60006134ee600e83613aff565b6d1b1bd85b881a5cc818db1bdcd95960921b815260200192915050565b6000613518600c83613aff565b6b1b9bdb9499595b9d1c985b9d60a21b815260200192915050565b6000613540602a83613aff565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b600061358c601f83613aff565b7f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400815260200192915050565b60006135c5601083613aff565b6f3737ba1032b737bab3b41032ba3432b960811b815260200192915050565b6000611d0882846130bc565b60006119a9826134d4565b602081016119a982846130a1565b60e08101613617828a613092565b61362460208301896130a1565b61363160408301886130a1565b61363e60608301876130b3565b61364b60808301866130b3565b61365860a08301856130b3565b61366560c08301846130b3565b98975050505050505050565b6040810161367f82856130a1565b611d0860208301846130a1565b60e0810161369a828a6130a1565b6136a760208301896130a1565b6136316040830188613092565b60e08101613617828a6130a1565b606081016136d082866130a1565b6136dd60208301856130a1565b611edd60408301846130b3565b608081016136f882876130a1565b61370560208301866130a1565b61371260408301856130b3565b611cc560608301846130b3565b6040810161372d82856130a1565b611d0860208301846130b3565b6060810161374882866130a1565b6136dd60208301856130b3565b602081016119a982846130aa565b6101008101613772828b6130b3565b61377f602083018a6130aa565b61378c60408301896130a1565b61379960608301886130a1565b6137a660808301876130a1565b6137b360a08301866130b3565b6137c060c08301856130b3565b6137cd60e08301846130b3565b9998505050505050505050565b61018081016137e9828f6130b3565b6137f6602083018e6130b3565b613803604083018d6130b3565b613810606083018c6130aa565b61381d608083018b6130b3565b61382a60a083018a6130b3565b61383760c08301896130b3565b61384460e08301886130b3565b6138526101008301876130b3565b6138606101208301866130b3565b61386e6101408301856130a1565b61387c6101608301846130a1565b9d9c50505050505050505050505050565b602081016119a982846130eb565b60208082528101611d0881846130f4565b602080825281016119a98161312c565b602080825281016119a98161315c565b602080825281016119a98161317e565b602080825281016119a9816131b7565b602080825281016119a9816131ff565b602080825281016119a981613238565b602080825281016119a981613264565b602080825281016119a98161329d565b602080825281016119a9816132fc565b602080825281016119a981613335565b602080825281016119a981613361565b602080825281016119a981613391565b602080825281016119a9816133dc565b602080825281016119a98161341f565b602080825281016119a981613447565b602080825281016119a981613478565b602080825281016119a9816134a8565b602080825281016119a9816134e1565b602080825281016119a98161350b565b602080825281016119a981613533565b602080825281016119a98161357f565b602080825281016119a9816135b8565b602081016119a982846130b3565b60608101613a2882866130b3565b613a3560208301856130b3565b611edd60408301846130a1565b6060810161374882866130b3565b60a08101613a5e82886130b3565b613a6b60208301876130b3565b613a7860408301866130b3565b613a8560608301856130b3565b613a9260808301846130b3565b9695505050505050565b60c08101613aaa82896130b3565b613ab760208301886130b3565b613ac460408301876130b3565b613ad160608301866130b3565b613ade60808301856130b3565b613aeb60a08301846130b3565b979650505050505050565b5190565b919050565b90815260200190565b60006119a982613b28565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b60006119a9825b60006119a982613b08565b60005b83811015613b61578181015183820152602001613b49565b838111156123305750506000910152565b601f01601f191690565b613b8581613b08565b811461122257600080fd5b613b8581613b13565b613b8581613b18565b613b8581613b1b56fea365627a7a72315820c218b0faea2b95e4be20285fb280daf0a2b9ac2243644037acb3bec790064f606c6578706572696d656e74616cf564736f6c63430005110040",
  "libraries": {},
  "devdoc": {
    "methods": {
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "liquidate(bytes32,address,uint256)": {
        "details": "Public wrapper for _liquidate internal function.     * The caller needs to approve the closeAmount prior to calling. Will not liquidate more than is needed to restore the desired margin (maintenance +5%).     * Whenever the current margin of a loan falls below maintenance margin, it needs to be liquidated. Anybody can initiate a liquidation and buy the collateral tokens at a discounted rate (5%).",
        "params": {
          "closeAmount": "The amount to close in loanTokens.",
          "loanId": "The ID of the loan to liquidate.  loanId is the ID of the loan, which is created on loan opening.  It can be obtained either by parsing the Trade event or by reading  the open loans from the contract by calling getActiveLoans or getUserLoans.",
          "receiver": "The receiver of the seized amount."
        },
        "return": "loanCloseAmount The amount of the collateral token of the loan.seizedAmount The seized amount in the collateral token.seizedToken The loan token address."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "LoanClosingsLiquidation contract."
  },
  "userdoc": {
    "methods": {
      "liquidate(bytes32,address,uint256)": {
        "notice": "Liquidate an unhealty loan."
      }
    },
    "notice": "Ways to close a loan: liquidation. Margin trade  positions are always closed with a swap. * Loans are liquidated if the position goes below margin maintenance."
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54790,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "reentrancyLock",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 54606,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6188,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "priceFeeds",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6190,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "swapsImpl",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6192,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "sovrynSwapContractRegistryAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6196,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "logicTargets",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 6200,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "loans",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(Loan)6566_storage)"
      },
      {
        "astId": 6204,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "loanParams",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(LoanParams)6538_storage)"
      },
      {
        "astId": 6210,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "lenderOrders",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Order)6582_storage))"
      },
      {
        "astId": 6216,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "borrowerOrders",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Order)6582_storage))"
      },
      {
        "astId": 6222,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "delegatedManagers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6228,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "lenderInterest",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(LenderInterest)6508_storage))"
      },
      {
        "astId": 6232,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "loanInterest",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_struct(LoanInterest)6518_storage)"
      },
      {
        "astId": 6234,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "logicTargetsSet",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Bytes32Set)36272_storage"
      },
      {
        "astId": 6236,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "activeLoansSet",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Bytes32Set)36272_storage"
      },
      {
        "astId": 6240,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "lenderLoanSets",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)36272_storage)"
      },
      {
        "astId": 6244,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "borrowerLoanSets",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)36272_storage)"
      },
      {
        "astId": 6248,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "userLoanParamSets",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)36272_storage)"
      },
      {
        "astId": 6250,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "feesController",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 6255,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "lendingFeePercent",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 6259,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "lendingFeeTokensHeld",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6263,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "lendingFeeTokensPaid",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6270,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "tradingFeePercent",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 6274,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "tradingFeeTokensHeld",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6278,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "tradingFeeTokensPaid",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6285,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "borrowingFeePercent",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 6289,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "borrowingFeeTokensHeld",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6293,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "borrowingFeeTokensPaid",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6295,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "protocolTokenHeld",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 6297,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "protocolTokenPaid",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 6304,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "affiliateFeePercent",
        "offset": 0,
        "slot": "32",
        "type": "t_uint256"
      },
      {
        "astId": 6311,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "liquidationIncentivePercent",
        "offset": 0,
        "slot": "33",
        "type": "t_uint256"
      },
      {
        "astId": 6315,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "loanPoolToUnderlying",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6319,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "underlyingToLoanPool",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6321,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "loanPoolsSet",
        "offset": 0,
        "slot": "36",
        "type": "t_struct(Bytes32Set)36272_storage"
      },
      {
        "astId": 6325,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "supportedTokens",
        "offset": 0,
        "slot": "38",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6332,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "maxDisagreement",
        "offset": 0,
        "slot": "39",
        "type": "t_uint256"
      },
      {
        "astId": 6335,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "sourceBuffer",
        "offset": 0,
        "slot": "40",
        "type": "t_uint256"
      },
      {
        "astId": 6338,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "maxSwapSize",
        "offset": 0,
        "slot": "41",
        "type": "t_uint256"
      },
      {
        "astId": 6342,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "borrowerNonce",
        "offset": 0,
        "slot": "42",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6345,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "rolloverBaseReward",
        "offset": 0,
        "slot": "43",
        "type": "t_uint256"
      },
      {
        "astId": 6348,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "rolloverFlexFeePercent",
        "offset": 0,
        "slot": "44",
        "type": "t_uint256"
      },
      {
        "astId": 6350,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "wrbtcToken",
        "offset": 0,
        "slot": "45",
        "type": "t_contract(IWrbtcERC20)35073"
      },
      {
        "astId": 6352,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "protocolTokenAddress",
        "offset": 0,
        "slot": "46",
        "type": "t_address"
      },
      {
        "astId": 6359,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "feeRebatePercent",
        "offset": 0,
        "slot": "47",
        "type": "t_uint256"
      },
      {
        "astId": 6361,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "admin",
        "offset": 0,
        "slot": "48",
        "type": "t_address"
      },
      {
        "astId": 6363,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "protocolAddress",
        "offset": 0,
        "slot": "49",
        "type": "t_address"
      },
      {
        "astId": 6367,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "userNotFirstTradeFlag",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6371,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "affiliatesUserReferrer",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6375,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "referralsList",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_struct(AddressSet)35966_storage)"
      },
      {
        "astId": 6378,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "minReferralsToPayout",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 6382,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "affiliateRewardsHeld",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6384,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "sovTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 6386,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "lockedSOVAddress",
        "offset": 0,
        "slot": "56",
        "type": "t_address"
      },
      {
        "astId": 6393,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "affiliateTradingTokenFeePercent",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 6397,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "affiliatesReferrerTokensList",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_struct(AddressSet)35966_storage)"
      },
      {
        "astId": 6403,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "affiliatesReferrerBalances",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6409,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "specialRebates",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6411,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "pause",
        "offset": 0,
        "slot": "61",
        "type": "t_bool"
      },
      {
        "astId": 6413,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "swapExtrernalFeePercent",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      },
      {
        "astId": 6415,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "tradingRebateRewardsBasisPoint",
        "offset": 0,
        "slot": "63",
        "type": "t_uint256"
      },
      {
        "astId": 6422,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "defaultPathConversion",
        "offset": 0,
        "slot": "64",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_contract(IERC20)33292)dyn_storage))"
      },
      {
        "astId": 6424,
        "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
        "label": "pauser",
        "offset": 0,
        "slot": "65",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC20)33292)dyn_storage": {
        "base": "t_contract(IERC20)33292",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IERC20)33292": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IWrbtcERC20)35073": {
        "encoding": "inplace",
        "label": "contract IWrbtcERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_contract(IERC20)33292)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IERC20[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(IERC20)33292)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_contract(IERC20)33292)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => contract IERC20[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_contract(IERC20)33292)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(LenderInterest)6508_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct LenderInterestStruct.LenderInterest))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(LenderInterest)6508_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Order)6582_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct OrderStruct.Order))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Order)6582_storage)"
      },
      "t_mapping(t_address,t_struct(AddressSet)35966_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableAddressSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)35966_storage"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)36272_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableBytes32Set.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)36272_storage"
      },
      "t_mapping(t_address,t_struct(LenderInterest)6508_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LenderInterestStruct.LenderInterest)",
        "numberOfBytes": "32",
        "value": "t_struct(LenderInterest)6508_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(Loan)6566_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LoanStruct.Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)6566_storage"
      },
      "t_mapping(t_bytes32,t_struct(LoanInterest)6518_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LoanInterestStruct.LoanInterest)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanInterest)6518_storage"
      },
      "t_mapping(t_bytes32,t_struct(LoanParams)6538_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LoanParamsStruct.LoanParams)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanParams)6538_storage"
      },
      "t_mapping(t_bytes32,t_struct(Order)6582_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct OrderStruct.Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)6582_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AddressSet)35966_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableAddressSet.AddressSet",
        "members": [
          {
            "astId": 35962,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 35965,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)36272_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableBytes32Set.Bytes32Set",
        "members": [
          {
            "astId": 36268,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 36271,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LenderInterest)6508_storage": {
        "encoding": "inplace",
        "label": "struct LenderInterestStruct.LenderInterest",
        "members": [
          {
            "astId": 6499,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "principalTotal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6501,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "owedPerDay",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6503,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "owedTotal",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6505,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "paidTotal",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6507,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "updatedTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Loan)6566_storage": {
        "encoding": "inplace",
        "label": "struct LoanStruct.Loan",
        "members": [
          {
            "astId": 6543,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 6545,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "loanParamsId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 6547,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "pendingTradesId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 6549,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 6551,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "principal",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6553,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "collateral",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6555,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6557,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6559,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "startMargin",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6561,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "startRate",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 6563,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "borrower",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 6565,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "lender",
            "offset": 0,
            "slot": "11",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(LoanInterest)6518_storage": {
        "encoding": "inplace",
        "label": "struct LoanInterestStruct.LoanInterest",
        "members": [
          {
            "astId": 6513,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "owedPerDay",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6515,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "depositTotal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6517,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "updatedTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LoanParams)6538_storage": {
        "encoding": "inplace",
        "label": "struct LoanParamsStruct.LoanParams",
        "members": [
          {
            "astId": 6523,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 6525,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "active",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 6527,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "owner",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6529,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "loanToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6531,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "collateralToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6533,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "minInitialMargin",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6535,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "maintenanceMargin",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6537,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "maxLoanTerm",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Order)6582_storage": {
        "encoding": "inplace",
        "label": "struct OrderStruct.Order",
        "members": [
          {
            "astId": 6571,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "lockedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6573,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "interestRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6575,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "minLoanTerm",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6577,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "maxLoanTerm",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6579,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "createdTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6581,
            "contract": "contracts/modules/LoanClosingsLiquidation.sol:LoanClosingsLiquidation",
            "label": "expirationTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}