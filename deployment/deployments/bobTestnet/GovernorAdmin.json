{
  "address": "0xf83A152C0A526a45E93D91c95894a19A1258E30E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "timelock_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "staking_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "guardian_",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_quorumPercentageVotes",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "_majorityPercentageVotes",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "ProposalQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "BALLOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "__abdicate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "__acceptAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "__executeSetTimelockPendingAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "__queueSetTimelockPendingAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "castVoteBySig",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getActions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "getReceipt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "support",
              "type": "bool"
            },
            {
              "internalType": "uint96",
              "name": "votes",
              "type": "uint96"
            }
          ],
          "internalType": "struct GovernorAlpha.Receipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "latestProposalIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "majorityPercentageVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "proposalMaxOperations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "proposalThreshold",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "startBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "forVotes",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "againstVotes",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "quorum",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "majorityPercentage",
          "type": "uint96"
        },
        {
          "internalType": "uint64",
          "name": "eta",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "canceled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "queue",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "quorumPercentageVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "quorumVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IStaking",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum GovernorAlpha.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "timelock",
      "outputs": [
        {
          "internalType": "contract ITimelock",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "votingDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "votingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa73c90d6f2c961a69f06e008a2206a7e9a8df4057130fe5f2ac137fb744ee1c4",
  "receipt": {
    "to": null,
    "from": "0xCF311E7375083b9513566a47B9f3e93F1FcdCfBF",
    "contractAddress": "0xf83A152C0A526a45E93D91c95894a19A1258E30E",
    "transactionIndex": 1,
    "gasUsed": "3867768",
    "logsBloom": "0x
    "blockHash": "0x31f8ee1ee6af0db85efc0d37d3101b5f5cd8e4347fa230347359ad7536fce2b3",
    "transactionHash": "0xa73c90d6f2c961a69f06e008a2206a7e9a8df4057130fe5f2ac137fb744ee1c4",
    "logs": [],
    "blockNumber": 6444883,
    "cumulativeGasUsed": "3911619",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC9ca82dC26645541BaF0D2E28A4c02bc894EF648",
    "0x378e86475772613daf249F4342f57617032acDBE",
    "0x007b3AA69A846cB1f76b60b3088230A52D2A83AC",
    5,
    50
  ],
  "numDeployments": 1,
  "solcInputHash": "2c93ebf59c8148f10476453f6cdb8bb8",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian_\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_quorumPercentageVotes\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_majorityPercentageVotes\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"__abdicate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"__acceptAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"__executeSetTimelockPendingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"__queueSetTimelockPendingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct GovernorAlpha.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"majorityPercentageVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalMaxOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"forVotes\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"againstVotes\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"quorum\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"majorityPercentage\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"eta\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quorumPercentageVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum GovernorAlpha.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"contract ITimelock\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"__acceptAdmin()\":{\"details\":\"Timelock wrapper w/ sender check.\"},\"__executeSetTimelockPendingAdmin(address,uint256)\":{\"details\":\"Timelock wrapper w/ sender check.\"},\"__queueSetTimelockPendingAdmin(address,uint256)\":{\"details\":\"Timelock wrapper w/ sender check.\"},\"cancel(uint256)\":{\"params\":{\"proposalId\":\"Proposal index to access the list proposals[] from storage.\"}},\"castVote(uint256,bool)\":{\"params\":{\"proposalId\":\"Proposal index to access the list proposals[] from storage.\",\"support\":\"Vote value, yes or no.\"}},\"castVoteBySig(uint256,bool,uint8,bytes32,bytes32)\":{\"details\":\"The signature needs to be broken up into 3 parameters, known as v, r and s: const r = '0x' + sig.substring(2).substring(0, 64); const s = '0x' + sig.substring(2).substring(64, 128); const v = '0x' + sig.substring(2).substring(128, 130);\",\"params\":{\"proposalId\":\"Proposal index to access the list proposals[] from storage.\",\"r\":\"Half of the ECDSA signature pair.\",\"s\":\"Half of the ECDSA signature pair.\",\"support\":\"Vote value, yes or no.\",\"v\":\"The recovery byte of the signature.\"}},\"execute(uint256)\":{\"params\":{\"proposalId\":\"Proposal index to access the list proposals[] from storage.\"}},\"getActions(uint256)\":{\"params\":{\"proposalId\":\"Proposal index to access the list proposals[] from storage.\"},\"return\":\"Arrays of the 4 call parameters: targets, values, signatures, calldatas.\"},\"getReceipt(uint256,address)\":{\"params\":{\"proposalId\":\"Proposal index to access the list proposals[] from storage.\",\"voter\":\"A governance stakeholder with voting power.\"},\"return\":\"The voter receipt of the proposal.\"},\"propose(address[],uint256[],string[],bytes[],string)\":{\"params\":{\"calldatas\":\"Array of payloads for the calls on proposal execution.\",\"description\":\"Text describing the purpose of the proposal.\",\"signatures\":\"Array of function signatures to call on proposal execution.\",\"targets\":\"Array of contract addresses to perform proposal execution.\",\"values\":\"Array of rBTC amounts to send on proposal execution.\"}},\"queue(uint256)\":{\"params\":{\"proposalId\":\"Proposal index to access the list proposals[] from storage.\"}},\"state(uint256)\":{\"params\":{\"proposalId\":\"Proposal index to access the list proposals[] from storage.\"},\"return\":\"The state of the proposal: Canceled, Pending, Active, Defeated, Succeeded, Executed, Expired.\"}},\"title\":\"Governance Contract.\"},\"userdoc\":{\"methods\":{\"__abdicate()\":{\"notice\":\"Sets guardian address to zero.\"},\"cancel(uint256)\":{\"notice\":\"Cancel a proposal by looping and cancelling everyone of its calls.\"},\"castVote(uint256,bool)\":{\"notice\":\"Casts a vote by sender.\"},\"castVoteBySig(uint256,bool,uint8,bytes32,bytes32)\":{\"notice\":\"Voting with EIP-712 Signatures.     * Voting power can be delegated to any address, and then can be used to vote on proposals. A key benefit to users of by-signature functionality is that they can create a signed vote transaction for free, and have a trusted third-party spend rBTC(or ETH) on gas fees and write it to the blockchain for them.     * The third party in this scenario, submitting the SOV-holder\\u2019s signed transaction holds a voting power that is for only a single proposal. The signatory still holds the power to vote on their own behalf in the proposal if the third party has not yet published the signed transaction that was given to them.\"},\"execute(uint256)\":{\"notice\":\"Execute a proposal by looping and performing everyone of its calls.\"},\"getActions(uint256)\":{\"notice\":\"Get a proposal list of its calls.\"},\"getReceipt(uint256,address)\":{\"notice\":\"Get a proposal receipt.\"},\"proposalMaxOperations()\":{\"notice\":\"The maximum number of actions that can be included in a proposal.\"},\"proposalThreshold()\":{\"notice\":\"The number of votes required in order for a voter to become a proposer.\"},\"propose(address[],uint256[],string[],bytes[],string)\":{\"notice\":\"Create a new proposal.\"},\"queue(uint256)\":{\"notice\":\"Enqueue a proposal and everyone of its calls.\"},\"quorumVotes()\":{\"notice\":\"The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed.\"},\"state(uint256)\":{\"notice\":\"Get a proposal state.\"},\"votingDelay()\":{\"notice\":\"The delay before voting on a proposal may take place, once proposed.\"},\"votingPeriod()\":{\"notice\":\"The duration of voting on a proposal, in blocks.\"}},\"notice\":\"This is an adapted clone of compound\\u2019s governance model. In general, the process is the same: Token holders can make (executable) proposals if they possess enough voting power, vote on proposals during a predefined voting period and in the end evaluate the outcome. If successful, the proposal will be scheduled on the timelock contract. Only after sufficient time passed, it can be executed. A minimum voting power is required for making a proposal as well as a minimum quorum. * Voting power in the Bitocracy: Stakers will receive voting power in the Bitocracy in return for their staking commitment. This voting power is weighted by how much SOV is staked and for how long the staking period is - staking more SOV over longer staking periods results in higher voting power. With this voting power, users can vote for or against any SIP in bitocracy.sovryn.app.\"}},\"settings\":{\"compilationTarget\":{\"contracts/governance/GovernorAlpha.sol\":\"GovernorAlpha\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/governance/ErrorDecoder.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Base contract to properly handle returned data on failed calls\\n * @dev On EVM if the return data length of a call is less than 68,\\n * then the transaction fails silently without a revert message!\\n *\\n * As described in the Solidity documentation\\n * https://solidity.readthedocs.io/en/v0.5.17/control-structures.html#revert\\n * the revert reason is an ABI-encoded string consisting of:\\n * 0x08c379a0 // Function selector (method id) for \\\"Error(string)\\\" signature\\n * 0x0000000000000000000000000000000000000000000000000000000000000020 // Data offset\\n * 0x000000000000000000000000000000000000000000000000000000000000001a // String length\\n * 0x4e6f7420656e6f7567682045746865722070726f76696465642e000000000000 // String data\\n *\\n * Another example, debug data from test:\\n *   0x08c379a0\\n *   0000000000000000000000000000000000000000000000000000000000000020\\n *   0000000000000000000000000000000000000000000000000000000000000034\\n *   54696d656c6f636b3a3a73657444656c61793a2044656c6179206d7573742065\\n *   7863656564206d696e696d756d2064656c61792e000000000000000000000000\\n *\\n * Parsed into:\\n *   Data offset: 20\\n *   Length: 34\\n *   Error message:\\n *     54696d656c6f636b3a3a73657444656c61793a2044656c6179206d7573742065\\n *     7863656564206d696e696d756d2064656c61792e000000000000000000000000\\n */\\ncontract ErrorDecoder {\\n    uint256 constant ERROR_MESSAGE_SHIFT = 68; // EVM silent revert error string length\\n\\n    /**\\n     * @notice Concats two error strings taking into account ERROR_MESSAGE_SHIFT.\\n     * @param str1 First string, usually a hardcoded context written by dev.\\n     * @param str2 Second string, usually the error message from the reverted call.\\n     * @return The concatenated error string\\n     */\\n    function _addErrorMessage(\\n        string memory str1,\\n        string memory str2\\n    ) internal pure returns (string memory) {\\n        bytes memory bytesStr1 = bytes(str1);\\n        bytes memory bytesStr2 = bytes(str2);\\n        string memory str12 = new string(\\n            bytesStr1.length + bytesStr2.length - ERROR_MESSAGE_SHIFT\\n        );\\n        bytes memory bytesStr12 = bytes(str12);\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < bytesStr1.length; i++) {\\n            bytesStr12[j++] = bytesStr1[i];\\n        }\\n        for (uint256 i = ERROR_MESSAGE_SHIFT; i < bytesStr2.length; i++) {\\n            bytesStr12[j++] = bytesStr2[i];\\n        }\\n        return string(bytesStr12);\\n    }\\n}\\n\",\"keccak256\":\"0x79d45e4b9b84cc240c9aeeb7b665e71a6f86f904dafc9ddb6af6dca7140cae4d\"},\"contracts/governance/GovernorAlpha.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Staking/SafeMath96.sol\\\";\\nimport \\\"./Timelock.sol\\\";\\nimport \\\"./Staking/interfaces/IStaking.sol\\\";\\nimport \\\"../rsk/RSKAddrValidator.sol\\\";\\n\\n/**\\n * @title Governance Contract.\\n * @notice This is an adapted clone of compound\\u2019s governance model. In general,\\n * the process is the same: Token holders can make (executable) proposals if\\n * they possess enough voting power, vote on proposals during a predefined\\n * voting period and in the end evaluate the outcome. If successful, the\\n * proposal will be scheduled on the timelock contract. Only after sufficient\\n * time passed, it can be executed. A minimum voting power is required for\\n * making a proposal as well as a minimum quorum.\\n *\\n * Voting power in the Bitocracy:\\n * Stakers will receive voting power in the Bitocracy in return for their\\n * staking commitment. This voting power is weighted by how much SOV is staked\\n * and for how long the staking period is - staking more SOV over longer staking\\n * periods results in higher voting power. With this voting power, users can\\n * vote for or against any SIP in bitocracy.sovryn.app.\\n * */\\ncontract GovernorAlpha is SafeMath96 {\\n    /* Storage */\\n\\n    /// @notice The name of this contract.\\n    string public constant NAME = \\\"Sovryn Governor Alpha\\\";\\n\\n    /// @notice The maximum number of actions that can be included in a proposal.\\n    function proposalMaxOperations() public pure returns (uint256) {\\n        return 10;\\n    } // 10 actions\\n\\n    /// @notice The delay before voting on a proposal may take place, once proposed.\\n    function votingDelay() public pure returns (uint256) {\\n        return 1;\\n    } // 1 block\\n\\n    /// @notice The duration of voting on a proposal, in blocks.\\n    function votingPeriod() public pure returns (uint256) {\\n        return 2880;\\n    } // ~1 day in blocks (assuming 30s blocks)\\n\\n    /// @notice The address of the Sovryn Protocol Timelock.\\n    ITimelock public timelock;\\n\\n    /// @notice The address of the Sovryn staking contract.\\n    IStaking public staking;\\n\\n    /// @notice The address of the Governor Guardian.\\n    address public guardian;\\n\\n    /// @notice The total number of proposals.\\n    uint256 public proposalCount;\\n\\n    /// @notice Percentage of current total voting power require to vote.\\n    uint96 public quorumPercentageVotes;\\n\\n    // @notice Majority percentage.\\n    uint96 public majorityPercentageVotes;\\n\\n    struct Proposal {\\n        /// @notice Unique id for looking up a proposal.\\n        uint256 id;\\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block.\\n        uint32 startBlock;\\n        /// @notice The block at which voting ends: votes must be cast prior to this block.\\n        uint32 endBlock;\\n        /// @notice Current number of votes in favor of this proposal.\\n        uint96 forVotes;\\n        /// @notice Current number of votes in opposition to this proposal.\\n        uint96 againstVotes;\\n        ///@notice the quorum required for this proposal.\\n        uint96 quorum;\\n        ///@notice the majority percentage required for this proposal.\\n        uint96 majorityPercentage;\\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds.\\n        uint64 eta;\\n        /// @notice the start time is required for the staking contract.\\n        uint64 startTime;\\n        /// @notice Flag marking whether the proposal has been canceled.\\n        bool canceled;\\n        /// @notice Flag marking whether the proposal has been executed.\\n        bool executed;\\n        /// @notice Creator of the proposal.\\n        address proposer;\\n        /// @notice the ordered list of target addresses for calls to be made.\\n        address[] targets;\\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made.\\n        uint256[] values;\\n        /// @notice The ordered list of function signatures to be called.\\n        string[] signatures;\\n        /// @notice The ordered list of calldata to be passed to each call.\\n        bytes[] calldatas;\\n        /// @notice Receipts of ballots for the entire set of voters.\\n        mapping(address => Receipt) receipts;\\n    }\\n\\n    /// @notice Ballot receipt record for a voter\\n    struct Receipt {\\n        /// @notice Whether or not a vote has been cast.\\n        bool hasVoted;\\n        /// @notice Whether or not the voter supports the proposal.\\n        bool support;\\n        /// @notice The number of votes the voter had, which were cast.\\n        uint96 votes;\\n    }\\n\\n    /// @notice Possible states that a proposal may be in.\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /// @notice The official record of all proposals ever proposed.\\n    mapping(uint256 => Proposal) public proposals;\\n\\n    /// @notice The latest proposal for each proposer.\\n    mapping(address => uint256) public latestProposalIds;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain.\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract.\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,bool support)\\\");\\n\\n    /* Events */\\n\\n    /// @notice An event emitted when a new proposal is created.\\n    event ProposalCreated(\\n        uint256 id,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    /// @notice An event emitted when a vote has been cast on a proposal.\\n    event VoteCast(address voter, uint256 proposalId, bool support, uint256 votes);\\n\\n    /// @notice An event emitted when a proposal has been canceled.\\n    event ProposalCanceled(uint256 id);\\n\\n    /// @notice An event emitted when a proposal has been queued in the Timelock.\\n    event ProposalQueued(uint256 id, uint256 eta);\\n\\n    /// @notice An event emitted when a proposal has been executed in the Timelock.\\n    event ProposalExecuted(uint256 id);\\n\\n    /* Functions */\\n\\n    constructor(\\n        address timelock_,\\n        address staking_,\\n        address guardian_,\\n        uint96 _quorumPercentageVotes,\\n        uint96 _majorityPercentageVotes\\n    ) public {\\n        timelock = ITimelock(timelock_);\\n        staking = IStaking(staking_);\\n        guardian = guardian_;\\n        quorumPercentageVotes = _quorumPercentageVotes;\\n        majorityPercentageVotes = _majorityPercentageVotes;\\n    }\\n\\n    /// @notice The number of votes required in order for a voter to become a proposer.\\n    function proposalThreshold() public view returns (uint96) {\\n        uint96 totalVotingPower = staking.getPriorTotalVotingPower(\\n            safe32(block.number - 1, \\\"GovernorAlpha::proposalThreshold: block number overflow\\\"),\\n            block.timestamp\\n        );\\n        // 1% of current total voting power.\\n        return totalVotingPower / 100;\\n    }\\n\\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed.\\n    function quorumVotes() public view returns (uint96) {\\n        uint96 totalVotingPower = staking.getPriorTotalVotingPower(\\n            safe32(block.number - 1, \\\"GovernorAlpha::quorumVotes: block number overflow\\\"),\\n            block.timestamp\\n        );\\n        // 4% of current total voting power.\\n        return\\n            mul96(\\n                quorumPercentageVotes,\\n                totalVotingPower,\\n                \\\"GovernorAlpha::quorumVotes:multiplication overflow\\\"\\n            ) / 100;\\n    }\\n\\n    /**\\n     * @notice Create a new proposal.\\n     * @param targets Array of contract addresses to perform proposal execution.\\n     * @param values Array of rBTC amounts to send on proposal execution.\\n     * @param signatures Array of function signatures to call on proposal execution.\\n     * @param calldatas Array of payloads for the calls on proposal execution.\\n     * @param description Text describing the purpose of the proposal.\\n     * */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public returns (uint256) {\\n        // note: passing this block's timestamp, but the number of the previous block.\\n        // todo: think if it would be better to pass block.timestamp - 30 (average block time)\\n        // (probably not because proposal starts in 1 block from now).\\n        uint96 threshold = proposalThreshold();\\n        require(\\n            staking.getPriorVotes(msg.sender, sub256(block.number, 1), block.timestamp) >\\n                threshold,\\n            \\\"GovernorAlpha::propose: proposer votes below proposal threshold\\\"\\n        );\\n        require(\\n            targets.length == values.length &&\\n                targets.length == signatures.length &&\\n                targets.length == calldatas.length,\\n            \\\"GovernorAlpha::propose: proposal function information arity mismatch\\\"\\n        );\\n        require(targets.length != 0, \\\"GovernorAlpha::propose: must provide actions\\\");\\n        require(\\n            targets.length <= proposalMaxOperations(),\\n            \\\"GovernorAlpha::propose: too many actions\\\"\\n        );\\n\\n        uint256 latestProposalId = latestProposalIds[msg.sender];\\n        if (latestProposalId != 0) {\\n            ProposalState proposersLatestProposalState = state(latestProposalId);\\n            require(\\n                proposersLatestProposalState != ProposalState.Active,\\n                \\\"GovernorAlpha::propose: one live proposal per proposer, found an already active proposal\\\"\\n            );\\n            require(\\n                proposersLatestProposalState != ProposalState.Pending,\\n                \\\"GovernorAlpha::propose: one live proposal per proposer, found an already pending proposal\\\"\\n            );\\n        }\\n\\n        uint256 startBlock = add256(block.number, votingDelay());\\n        uint256 endBlock = add256(startBlock, votingPeriod());\\n\\n        proposalCount++;\\n\\n        /// @dev quorum: proposalThreshold is 1% of total votes, we can save gas using this pre calculated value.\\n        /// @dev startTime: Required by the staking contract. not used by the governance contract itself.\\n        Proposal memory newProposal = Proposal({\\n            id: proposalCount,\\n            startBlock: safe32(startBlock, \\\"GovernorAlpha::propose: start block number overflow\\\"),\\n            endBlock: safe32(endBlock, \\\"GovernorAlpha::propose: end block number overflow\\\"),\\n            forVotes: 0,\\n            againstVotes: 0,\\n            quorum: mul96(\\n                quorumPercentageVotes,\\n                threshold,\\n                \\\"GovernorAlpha::propose: overflow on quorum computation\\\"\\n            ),\\n            majorityPercentage: mul96(\\n                majorityPercentageVotes,\\n                threshold,\\n                \\\"GovernorAlpha::propose: overflow on majorityPercentage computation\\\"\\n            ),\\n            eta: 0,\\n            startTime: safe64(block.timestamp, \\\"GovernorAlpha::propose: startTime overflow\\\"),\\n            canceled: false,\\n            executed: false,\\n            proposer: msg.sender,\\n            targets: targets,\\n            values: values,\\n            signatures: signatures,\\n            calldatas: calldatas\\n        });\\n\\n        proposals[newProposal.id] = newProposal;\\n        latestProposalIds[newProposal.proposer] = newProposal.id;\\n\\n        emit ProposalCreated(\\n            newProposal.id,\\n            msg.sender,\\n            targets,\\n            values,\\n            signatures,\\n            calldatas,\\n            startBlock,\\n            endBlock,\\n            description\\n        );\\n        return newProposal.id;\\n    }\\n\\n    /**\\n     * @notice Enqueue a proposal and everyone of its calls.\\n     * @param proposalId Proposal index to access the list proposals[] from storage.\\n     * */\\n    function queue(uint256 proposalId) public {\\n        require(\\n            state(proposalId) == ProposalState.Succeeded,\\n            \\\"GovernorAlpha::queue: proposal can only be queued if it is succeeded\\\"\\n        );\\n        Proposal storage proposal = proposals[proposalId];\\n        uint256 eta = add256(block.timestamp, timelock.delay());\\n\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            _queueOrRevert(\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                eta\\n            );\\n        }\\n        proposal.eta = safe64(eta, \\\"GovernorAlpha::queue: ETA overflow\\\");\\n        emit ProposalQueued(proposalId, eta);\\n    }\\n\\n    /**\\n     * @notice Tries to enqueue a proposal, verifying it has not been previously queued.\\n     * @param target Contract addresses to perform proposal execution.\\n     * @param value rBTC amount to send on proposal execution.\\n     * @param signature Function signature to call on proposal execution.\\n     * @param data Payload for the call on proposal execution.\\n     * @param eta Estimated Time of Accomplishment. The timestamp that the\\n     * proposal will be available for execution, set once the vote succeeds.\\n     * */\\n    function _queueOrRevert(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) internal {\\n        require(\\n            !timelock.queuedTransactions(\\n                keccak256(abi.encode(target, value, signature, data, eta))\\n            ),\\n            \\\"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\\\"\\n        );\\n        timelock.queueTransaction(target, value, signature, data, eta);\\n    }\\n\\n    /**\\n     * @notice Execute a proposal by looping and performing everyone of its calls.\\n     * @param proposalId Proposal index to access the list proposals[] from storage.\\n     * */\\n    function execute(uint256 proposalId) public payable {\\n        require(\\n            state(proposalId) == ProposalState.Queued,\\n            \\\"GovernorAlpha::execute: proposal can only be executed if it is queued\\\"\\n        );\\n        Proposal storage proposal = proposals[proposalId];\\n        proposal.executed = true;\\n\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            timelock.executeTransaction.value(proposal.values[i])(\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                proposal.eta\\n            );\\n        }\\n        emit ProposalExecuted(proposalId);\\n    }\\n\\n    /**\\n     * @notice Cancel a proposal by looping and cancelling everyone of its calls.\\n     * @param proposalId Proposal index to access the list proposals[] from storage.\\n     * */\\n    function cancel(uint256 proposalId) public {\\n        ProposalState state = state(proposalId);\\n        require(\\n            state != ProposalState.Executed,\\n            \\\"GovernorAlpha::cancel: cannot cancel executed proposal\\\"\\n        );\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        /// @notice Cancel only if sent by the guardian.\\n        require(msg.sender == guardian, \\\"GovernorAlpha::cancel: sender isn't a guardian\\\");\\n\\n        proposal.canceled = true;\\n\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            timelock.cancelTransaction(\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                proposal.eta\\n            );\\n        }\\n\\n        emit ProposalCanceled(proposalId);\\n    }\\n\\n    /**\\n     * @notice Get a proposal list of its calls.\\n     * @param proposalId Proposal index to access the list proposals[] from storage.\\n     * @return Arrays of the 4 call parameters: targets, values, signatures, calldatas.\\n     * */\\n    function getActions(\\n        uint256 proposalId\\n    )\\n        public\\n        view\\n        returns (\\n            address[] memory targets,\\n            uint256[] memory values,\\n            string[] memory signatures,\\n            bytes[] memory calldatas\\n        )\\n    {\\n        Proposal storage p = proposals[proposalId];\\n        return (p.targets, p.values, p.signatures, p.calldatas);\\n    }\\n\\n    /**\\n     * @notice Get a proposal receipt.\\n     * @param proposalId Proposal index to access the list proposals[] from storage.\\n     * @param voter A governance stakeholder with voting power.\\n     * @return The voter receipt of the proposal.\\n     * */\\n    function getReceipt(uint256 proposalId, address voter) public view returns (Receipt memory) {\\n        return proposals[proposalId].receipts[voter];\\n    }\\n\\n    /**\\n     * @notice Casts a vote by sender.\\n     * @param proposalId Proposal index to access the list proposals[] from storage.\\n     * @param support Vote value, yes or no.\\n     * */\\n    function castVote(uint256 proposalId, bool support) public {\\n        return _castVote(msg.sender, proposalId, support);\\n    }\\n\\n    /**\\n     * @notice Voting with EIP-712 Signatures.\\n     *\\n     * Voting power can be delegated to any address, and then can be used to\\n     * vote on proposals. A key benefit to users of by-signature functionality\\n     * is that they can create a signed vote transaction for free, and have a\\n     * trusted third-party spend rBTC(or ETH) on gas fees and write it to the\\n     * blockchain for them.\\n     *\\n     * The third party in this scenario, submitting the SOV-holder\\u2019s signed\\n     * transaction holds a voting power that is for only a single proposal.\\n     * The signatory still holds the power to vote on their own behalf in\\n     * the proposal if the third party has not yet published the signed\\n     * transaction that was given to them.\\n     *\\n     * @dev The signature needs to be broken up into 3 parameters, known as\\n     * v, r and s:\\n     * const r = '0x' + sig.substring(2).substring(0, 64);\\n     * const s = '0x' + sig.substring(2).substring(64, 128);\\n     * const v = '0x' + sig.substring(2).substring(128, 130);\\n     *\\n     * @param proposalId Proposal index to access the list proposals[] from storage.\\n     * @param support Vote value, yes or no.\\n     * @param v The recovery byte of the signature.\\n     * @param r Half of the ECDSA signature pair.\\n     * @param s Half of the ECDSA signature pair.\\n     * */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        bool support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        /**\\n         * @dev The DOMAIN_SEPARATOR is a hash that uniquely identifies a\\n         * smart contract. It is built from a string denoting it as an\\n         * EIP712 Domain, the name of the token contract, the version,\\n         * the chainId in case it changes, and the address that the\\n         * contract is deployed at.\\n         * */\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(NAME)), getChainId(), address(this))\\n        );\\n\\n        /// @dev GovernorAlpha uses BALLOT_TYPEHASH, while Staking uses DELEGATION_TYPEHASH\\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\\n\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n\\n        /// @dev Verify address is not null and PK is not null either.\\n        require(\\n            RSKAddrValidator.checkPKNotZero(signatory),\\n            \\\"GovernorAlpha::castVoteBySig: invalid signature\\\"\\n        );\\n        return _castVote(signatory, proposalId, support);\\n    }\\n\\n    /**\\n     * @notice Cast a vote, adding it to the total counting.\\n     * @param voter A governance stakeholder with voting power that is casting the vote.\\n     * @param proposalId Proposal index to access the list proposals[] from storage.\\n     * @param support Vote value, yes or no.\\n     * */\\n    function _castVote(address voter, uint256 proposalId, bool support) internal {\\n        require(\\n            state(proposalId) == ProposalState.Active,\\n            \\\"GovernorAlpha::_castVote: voting is closed\\\"\\n        );\\n        Proposal storage proposal = proposals[proposalId];\\n        Receipt storage receipt = proposal.receipts[voter];\\n        require(receipt.hasVoted == false, \\\"GovernorAlpha::_castVote: voter already voted\\\");\\n        uint96 votes = staking.getPriorVotes(voter, proposal.startBlock, proposal.startTime);\\n\\n        if (support) {\\n            proposal.forVotes = add96(\\n                proposal.forVotes,\\n                votes,\\n                \\\"GovernorAlpha::_castVote: vote overflow\\\"\\n            );\\n        } else {\\n            proposal.againstVotes = add96(\\n                proposal.againstVotes,\\n                votes,\\n                \\\"GovernorAlpha::_castVote: vote overflow\\\"\\n            );\\n        }\\n\\n        receipt.hasVoted = true;\\n        receipt.support = support;\\n        receipt.votes = votes;\\n\\n        emit VoteCast(voter, proposalId, support, votes);\\n    }\\n\\n    /// @dev Timelock wrapper w/ sender check.\\n    function __acceptAdmin() public {\\n        require(\\n            msg.sender == guardian,\\n            \\\"GovernorAlpha::__acceptAdmin: sender must be gov guardian\\\"\\n        );\\n        timelock.acceptAdmin();\\n    }\\n\\n    /// @notice Sets guardian address to zero.\\n    function __abdicate() public {\\n        require(msg.sender == guardian, \\\"GovernorAlpha::__abdicate: sender must be gov guardian\\\");\\n        guardian = address(0);\\n    }\\n\\n    /// @dev Timelock wrapper w/ sender check.\\n    function __queueSetTimelockPendingAdmin(address newPendingAdmin, uint256 eta) public {\\n        require(\\n            msg.sender == guardian,\\n            \\\"GovernorAlpha::__queueSetTimelockPendingAdmin: sender must be gov guardian\\\"\\n        );\\n        timelock.queueTransaction(\\n            address(timelock),\\n            0,\\n            \\\"setPendingAdmin(address)\\\",\\n            abi.encode(newPendingAdmin),\\n            eta\\n        );\\n    }\\n\\n    /// @dev Timelock wrapper w/ sender check.\\n    function __executeSetTimelockPendingAdmin(address newPendingAdmin, uint256 eta) public {\\n        require(\\n            msg.sender == guardian,\\n            \\\"GovernorAlpha::__executeSetTimelockPendingAdmin: sender must be gov guardian\\\"\\n        );\\n        timelock.executeTransaction(\\n            address(timelock),\\n            0,\\n            \\\"setPendingAdmin(address)\\\",\\n            abi.encode(newPendingAdmin),\\n            eta\\n        );\\n    }\\n\\n    /**\\n     * @notice Get a proposal state.\\n     * @param proposalId Proposal index to access the list proposals[] from storage.\\n     * @return The state of the proposal: Canceled, Pending, Active, Defeated,\\n     * Succeeded, Executed, Expired.\\n     * */\\n    function state(uint256 proposalId) public view returns (ProposalState) {\\n        require(\\n            proposalCount >= proposalId && proposalId > 0,\\n            \\\"GovernorAlpha::state: invalid proposal id\\\"\\n        );\\n        Proposal storage proposal = proposals[proposalId];\\n\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        if (block.number <= proposal.startBlock) {\\n            return ProposalState.Pending;\\n        }\\n\\n        if (block.number <= proposal.endBlock) {\\n            return ProposalState.Active;\\n        }\\n\\n        uint96 totalVotes = add96(\\n            proposal.forVotes,\\n            proposal.againstVotes,\\n            \\\"GovernorAlpha:: state: forVotes + againstVotes > uint96\\\"\\n        );\\n        uint96 totalVotesMajorityPercentage = div96(\\n            totalVotes,\\n            100,\\n            \\\"GovernorAlpha:: state: division error\\\"\\n        );\\n        totalVotesMajorityPercentage = mul96(\\n            totalVotesMajorityPercentage,\\n            majorityPercentageVotes,\\n            \\\"GovernorAlpha:: state: totalVotes * majorityPercentage > uint96\\\"\\n        );\\n        if (proposal.forVotes <= totalVotesMajorityPercentage || totalVotes < proposal.quorum) {\\n            return ProposalState.Defeated;\\n        }\\n\\n        if (proposal.eta == 0) {\\n            return ProposalState.Succeeded;\\n        }\\n\\n        if (proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if (block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())) {\\n            return ProposalState.Expired;\\n        }\\n\\n        return ProposalState.Queued;\\n    }\\n\\n    /// @dev TODO: use OpenZeppelin's SafeMath function instead.\\n    function add256(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"addition overflow\\\");\\n        return c;\\n    }\\n\\n    /// @dev TODO: use OpenZeppelin's SafeMath function instead.\\n    function sub256(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"subtraction underflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Retrieve CHAIN_ID of the executing chain.\\n     *\\n     * Chain identifier (chainID) introduced in EIP-155 protects transaction\\n     * included into one chain from being included into another chain.\\n     * Basically, chain identifier is an integer number being used in the\\n     * processes of signing transactions and verifying transaction signatures.\\n     *\\n     * @dev As of version 0.5.12, Solidity includes an assembly function\\n     * chainid() that provides access to the new CHAINID opcode.\\n     *\\n     * TODO: chainId is included in block. So you can get chain id like\\n     * block timestamp or block number: block.chainid;\\n     * */\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\\n/* Interfaces */\\n\\ninterface TimelockInterface {\\n    function delay() external view returns (uint256);\\n\\n    function GRACE_PERIOD() external view returns (uint256);\\n\\n    function acceptAdmin() external;\\n\\n    function queuedTransactions(bytes32 hash) external view returns (bool);\\n\\n    function queueTransaction(\\n        address target,\\n        uint256 value,\\n        string calldata signature,\\n        bytes calldata data,\\n        uint256 eta\\n    ) external returns (bytes32);\\n\\n    function cancelTransaction(\\n        address target,\\n        uint256 value,\\n        string calldata signature,\\n        bytes calldata data,\\n        uint256 eta\\n    ) external;\\n\\n    function executeTransaction(\\n        address target,\\n        uint256 value,\\n        string calldata signature,\\n        bytes calldata data,\\n        uint256 eta\\n    ) external payable returns (bytes memory);\\n}\\n\\ninterface StakingInterface {\\n    function getPriorVotes(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96);\\n\\n    function getPriorTotalVotingPower(\\n        uint32 blockNumber,\\n        uint256 time\\n    ) external view returns (uint96);\\n}\\n\",\"keccak256\":\"0xc622e2ff5757733383bf22728ecc6b8461e9416190864fba8f6c228e446e3be2\"},\"contracts/governance/Staking/SafeMath96.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title SafeMath96 contract.\\n * @notice Improved Solidity's arithmetic operations with added overflow checks.\\n * @dev SafeMath96 uses uint96, unsigned integers of 96 bits length, so every\\n * integer from 0 to 2^96-1 can be operated.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * SafeMath restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this contract instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n * */\\ncontract SafeMath96 {\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe64(uint256 n, string memory errorMessage) internal pure returns (uint64) {\\n        require(n < 2 ** 64, errorMessage);\\n        return uint64(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2 ** 96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `+` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe addition a+b.\\n     * */\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Substracts two unsigned integers, reverting on underflow.\\n     * @dev Counterpart to Solidity's `-` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on underflow.\\n     * @return The safe substraction a-b.\\n     * */\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `*` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe product a*b.\\n     * */\\n    function mul96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint96 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Divides two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `/` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe division a/b.\\n     * */\\n    function div96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint96 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x0d61a134c1d12484602f39426a6927e9cd3e598cfe13e9ebad4f8fe5803def86\"},\"contracts/governance/Staking/interfaces/IStaking.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Interface for Staking modules governance/Staking/modules\\n */\\n\\ninterface IStaking {\\n    /*************************** StakingAdminModule ***************************/\\n\\n    /**\\n     * @notice Add account to Admins ACL.\\n     * @param _admin The addresses of the account to grant permissions.\\n     * */\\n    function addAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Remove account from Admins ACL.\\n     * @param _admin The addresses of the account to revoke permissions.\\n     * */\\n    function removeAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Add account to pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function addPauser(address _pauser) external;\\n\\n    /**\\n     * @notice Remove account from pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function removePauser(address _pauser) external;\\n\\n    /**\\n     * @notice Pause/unpause contract\\n     * @param _pause true when pausing, false when unpausing\\n     * */\\n    function pauseUnpause(bool _pause) external;\\n\\n    /**\\n     * @notice Freeze contract - disable all functions\\n     * @param _freeze true when freezing, false when unfreezing\\n     * @dev When freezing, pause is always applied too. When unfreezing, the contract is left in paused stated.\\n     * */\\n    function freezeUnfreeze(bool _freeze) external;\\n\\n    /**\\n     * @notice Allows the owner to set a fee sharing proxy contract.\\n     * We need it for unstaking with slashing.\\n     * @param _feeSharing The address of FeeSharingCollectorProxy contract.\\n     * */\\n    function setFeeSharing(address _feeSharing) external;\\n\\n    /**\\n     * @notice Allow the owner to set weight scaling.\\n     * We need it for unstaking with slashing.\\n     * @param _weightScaling The weight scaling.\\n     * */\\n    function setWeightScaling(uint96 _weightScaling) external;\\n\\n    /**\\n     * @notice Allow the owner to set a new staking contract.\\n     * As a consequence it allows the stakers to migrate their positions\\n     * to the new contract.\\n     * @dev Doesn't have any influence as long as migrateToNewStakingContract\\n     * is not implemented.\\n     * @param _newStakingContract The address of the new staking contract.\\n     * */\\n    function setNewStakingContract(address _newStakingContract) external;\\n\\n    /**\\n     * @notice Allow a staker to migrate his positions to the new staking contract.\\n     * @dev Staking contract needs to be set before by the owner.\\n     * Currently not implemented, just needed for the interface.\\n     *      In case it's needed at some point in the future,\\n     *      the implementation needs to be changed first.\\n     * */\\n    function migrateToNewStakingContract() external; // dummy - not implemented as of now\\n\\n    /*************************** StakingGovernanceModule ***************************/\\n\\n    /**\\n     * @notice Compute the total voting power at a given time.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @param time The timestamp for which to calculate the total voting power.\\n     * @return The total voting power at the given time.\\n     * */\\n    function getPriorTotalVotingPower(\\n        uint32 blockNumber,\\n        uint256 time\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Get the current votes balance for a user account.\\n     * @param account The address to get votes balance.\\n     * @dev This is a wrapper to simplify arguments. The actual computation is\\n     * performed on WeightedStaking parent contract.\\n     * @return The number of current votes for a user account.\\n     * */\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of votes for a delegatee as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will revert\\n     * to prevent misinformation.\\n     *      Used for Voting, not for fee sharing.\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The number of votes the delegatee had as of the given block.\\n     * */\\n    function getPriorVotes(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The staking date to compute the power for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorStakeByDateForDelegatee(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an unlocking date as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * TODO: WeightedStaking::getPriorTotalStakesForDate should probably better\\n     * be internal instead of a public function.\\n     * @param date The date to check the stakes for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorTotalStakesForDate(\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` which are locked until lockDate to `delegatee`.\\n     * @param delegatee The address to delegate votes to.\\n     * @param lockDate the date if the position to delegate.\\n     * */\\n    function delegate(address delegatee, uint256 lockDate) external;\\n\\n    /*************************** StakingStakeModule ***************************/\\n\\n    event TokensStaked(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 lockedUntil,\\n        uint256 totalStaked\\n    );\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stake(uint96 amount, uint256 until, address stakeFor, address delegatee) external;\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @dev This function will be invoked from receiveApproval\\n     * @dev SOV.approveAndCall -> this.receiveApproval -> this.stakeWithApproval\\n     * @param sender The sender of SOV.approveAndCall\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeWithApproval(\\n        address sender,\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _data The data will be used for low level call.\\n     */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Extend the staking duration until the specified date.\\n     * @param previousLock The old unlocking timestamp.\\n     * @param until The new unlocking timestamp in seconds.\\n     * */\\n    function extendStakingDuration(uint256 previousLock, uint256 until) external;\\n\\n    /**\\n     * @dev DO NOT USE this misspelled function. Use stakeBySchedule function instead.\\n     * This function cannot be deprecated while we have non-upgradeable vesting contracts.\\n     * */\\n    function stakesBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Stake tokens according to the vesting schedule.\\n     * @param amount The amount of tokens to stake.\\n     * @param cliff The time interval to the first withdraw.\\n     * @param duration The staking duration.\\n     * @param intervalLength The length of each staking interval when cliff passed.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Get the number of staked tokens held by the user account.\\n     * @dev Iterate checkpoints adding up stakes.\\n     * @param account The address of the account to get the balance of.\\n     * @return The number of tokens held.\\n     * */\\n    function balanceOf(address account) external view returns (uint96 balance);\\n\\n    /**\\n     * @notice Get the current number of tokens staked for a day.\\n     * @param lockedTS The timestamp to get the staked tokens for.\\n     * */\\n    function getCurrentStakedUntil(uint256 lockedTS) external view returns (uint96);\\n\\n    /**\\n     * @notice Get list of stakes for a user account.\\n     * @param account The address to get stakes.\\n     * @return The arrays of dates and stakes.\\n     * */\\n    function getStakes(\\n        address account\\n    ) external view returns (uint256[] memory dates, uint96[] memory stakes);\\n\\n    /**\\n     * @notice Unstaking is possible every 2 weeks only. This means, to\\n     * calculate the key value for the staking checkpoints, we need to\\n     * map the intended timestamp to the closest available date.\\n     * @param timestamp The unlocking timestamp.\\n     * @return The actual unlocking date (might be up to 2 weeks shorter than intended).\\n     * */\\n    function timestampToLockDate(uint256 timestamp) external view returns (uint256);\\n\\n    /*************************** StakingStorageModule ***************************/\\n\\n    /// @notice The maximum duration to stake tokens\\n    /// @return MAX_DURATION to stake tokens\\n    function getStorageMaxDurationToStakeTokens() external pure returns (uint256);\\n\\n    /// @notice The maximum possible voting weight before adding +1 (actually 10, but need 9 for computation).\\n    /// @return uint256(MAX_VOTING_WEIGHT);\\n    function getStorageMaxVotingWeight() external pure returns (uint256);\\n\\n    /// @notice weight is multiplied with this factor (for allowing decimals, like 1.2x).\\n    /// @dev MAX_VOTING_WEIGHT * WEIGHT_FACTOR needs to be < 792, because there are 100,000,000 SOV with 18 decimals\\n    /// @return uint256(WEIGHT_FACTOR);\\n    function getStorageWeightFactor() external pure returns (uint256);\\n\\n    /// @return uint256(DEFAULT_WEIGHT_SCALING);\\n    function getStorageDefaultWeightScaling() external pure returns (uint256);\\n\\n    /// @notice return (uint256(MIN_WEIGHT_SCALING), uint256(MAX_WEIGHT_SCALING))\\n    function getStorageRangeForWeightScaling()\\n        external\\n        pure\\n        returns (uint256 minWeightScaling, uint256 maxWeightScaling);\\n\\n    /// @notice The EIP-712 typehash for the contract's domain.\\n    /// @return uint256(DOMAIN_TYPEHASH);\\n    function getStorageDomainTypehash() external pure returns (uint256);\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\\n    /// @return uint256(DELEGATION_TYPEHASH);\\n    function getStorageDelegationTypehash() external pure returns (uint256);\\n\\n    /// @return name;\\n    function getStorageName() external view returns (string memory);\\n\\n    /// AUTOGENERATED FUNCTIONS FROM THE STAKING STORAGE PUBLIC VARIABLES ///\\n\\n    /// @notice The timestamp of contract creation. Base for the staking period calculation.\\n    function kickoffTS() external view returns (uint256);\\n\\n    /// @notice The token to be staked\\n    function SOVToken() external view returns (address);\\n\\n    /// @notice Stakers delegated voting power\\n    /// @param staker - the delegating address\\n    /// @param until - delegated voting\\n    /// @return _delegate - voting power delegated to address\\n    function delegates(address staker, uint256 until) external view returns (address _delegate);\\n\\n    /// @notice If this flag is set to true, all tokens are unlocked immediately\\n    /// see function unlockAllTokens() for details\\n    function allUnlocked() external view returns (bool);\\n\\n    /// @notice Used for stake migrations to a new staking contract with a different storage structure\\n    function newStakingContract() external view returns (address);\\n\\n    /// CHECKPOINTS\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 stake;\\n    }\\n\\n    /// @notice A record of tokens to be unstaked at a given time in total.\\n    /// For total voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev totalStakingCheckpoints[date][index] is a checkpoint\\n    function totalStakingCheckpoints(\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date.\\n    /// @dev numTotalStakingCheckpoints[date] is a number.\\n    function numTotalStakingCheckpoints(\\n        uint256 date\\n    ) external view returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which were delegated to a certain address.\\n    /// For delegatee voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev delegateStakingCheckpoints[delegatee][date][index] is a checkpoint.\\n    function delegateStakingCheckpoints(\\n        address delagatee,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per delegate.\\n    /// @dev numDelegateStakingCheckpoints[delegatee][date] is a number.\\n    function numDelegateStakingCheckpoints(\\n        address delegatee,\\n        uint256 date\\n    ) external view returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which per user address (address -> lockDate -> stake checkpoint)\\n    /// @dev userStakingCheckpoints[user][date][index] is a checkpoint.\\n    function userStakingCheckpoints(\\n        address user,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per user.\\n    /// @dev numUserStakingCheckpoints[user][date] is a number\\n    function numUserStakingCheckpoints(\\n        address user,\\n        uint256 date\\n    ) external view returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of states for signing / validating signatures\\n    /// @dev nonces[user] is a number.\\n    function nonces(address user) external view returns (uint256 nonce);\\n\\n    /// SLASHING ///\\n\\n    /// @notice the address of FeeSharingCollectorProxy contract, we need it for unstaking with slashing.\\n    function feeSharing() external view returns (address);\\n\\n    /// @notice used for weight scaling when unstaking with slashing.\\n    /// @return uint96 DEFAULT_WEIGHT_SCALING\\n    function weightScaling() external view returns (uint96);\\n\\n    /// @notice List of vesting contracts, tokens for these contracts won't be slashed if unstaked by governance.\\n    /// @dev vestingWhitelist[contract] is true/false.\\n    function vestingWhitelist(address isWhitelisted) external view returns (bool);\\n\\n    /// @dev user => flag whether user has admin role.\\n    /// @dev multisig should be an admin, admin can invoke only governanceWithdrawVesting function,\\n    /// \\tthis function works only with Team Vesting contracts\\n    function admins(address isAdmin) external view returns (bool);\\n\\n    /// @dev vesting contract code hash => flag whether it's registered code hash\\n    function vestingCodeHashes(bytes32 vestingLogicCodeHash) external view returns (bool);\\n\\n    /// @notice A record of tokens to be unstaked from vesting contract at a given time (lockDate -> vest checkpoint)\\n    /// @dev vestingCheckpoints[date][index] is a checkpoint.\\n    function vestingCheckpoints(\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total vesting checkpoints for each date.\\n    /// @dev numVestingCheckpoints[date] is a number.\\n    function numVestingCheckpoints(uint256 date) external view returns (uint32 checkpointsQty);\\n\\n    ///@notice vesting registry contract PROXY address\\n    function vestingRegistryLogic() external view returns (address);\\n\\n    /// @dev user => flag whether user has pauser role.\\n    function pausers(address isPauser) external view returns (bool);\\n\\n    /// @dev Staking contract is paused\\n    function paused() external view returns (bool);\\n\\n    /// @dev Staking contract is frozen\\n    function frozen() external view returns (bool);\\n\\n    /*************************** StakingVestingModule ***************************/\\n\\n    event VestingStakeSet(uint256 lockedTS, uint96 value);\\n\\n    /**\\n     * @notice Return flag whether the given address is a registered vesting contract.\\n     * @param stakerAddress the address to check\\n     */\\n    function isVestingContract(address stakerAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Remove vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function removeContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Add vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function addContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Determine the prior number of vested stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorVestingStakeByDate(\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * @param date The staking date to compute the power for. Adjusted to the next valid lock date, if necessary.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedVestingStakeByDate(\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Determine the prior weighted vested amount for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     * TODO: WeightedStaking::getPriorVestingWeightedStake is using the variable name \\\"votes\\\"\\n     * to add up token stake, and that could be misleading.\\n     *\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorVestingWeightedStake(\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96 votes);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorUserStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Sets the users' vesting stakes for a giving lock dates and writes checkpoints.\\n     * @param lockedDates The arrays of lock dates.\\n     * @param values The array of values to add to the staked balance.\\n     */\\n    function setVestingStakes(uint256[] calldata lockedDates, uint96[] calldata values) external;\\n\\n    /**\\n     * @notice sets vesting registry\\n     * @param _vestingRegistryProxy the address of vesting registry proxy contract\\n     * @dev _vestingRegistryProxy can be set to 0 as this function can be reused by\\n     * various other functionalities without the necessity of linking it with Vesting Registry\\n     */\\n    function setVestingRegistry(address _vestingRegistryProxy) external;\\n\\n    /*************************** StakingWithdrawModule ***************************/\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens if they are unlocked.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * */\\n    function withdraw(uint96 amount, uint256 until, address receiver) external;\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting\\n     * @dev **WARNING** This function should not be no longer used by Sovryn Protocol.\\n     * Sovryn protocol will use the cancelTeamVesting function for the withdrawal moving forward.\\n     * */\\n    function governanceWithdraw(uint96 amount, uint256 until, address receiver) external;\\n\\n    /**\\n     * @notice Withdraw tokens for vesting contract.\\n     * @param vesting The address of Vesting contract.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting.\\n     * */\\n    function governanceWithdrawVesting(address vesting, address receiver) external;\\n\\n    /**\\n     * @notice Get available and punished amount for withdrawing.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * */\\n    function getWithdrawAmounts(\\n        uint96 amount,\\n        uint256 until\\n    ) external view returns (uint96, uint96);\\n\\n    /**\\n     * @notice Allow the owner to unlock all tokens in case the staking contract\\n     * is going to be replaced\\n     * Note: Not reversible on purpose. once unlocked, everything is unlocked.\\n     * The owner should not be able to just quickly unlock to withdraw his own\\n     * tokens and lock again.\\n     * @dev Last resort.\\n     * */\\n    function unlockAllTokens() external;\\n\\n    /*************************** WeightedStakingModule ***************************/\\n\\n    /**\\n     * @notice Determine the prior weighted stake for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     *\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The date/timestamp of the unstaking time.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorWeightedStake(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96 priorWeightedStake);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * TODO: WeightedStaking::weightedStakeByDate should probably better\\n     * be internal instead of a public function.\\n     * @param account The user address.\\n     * @param date The staking date to compute the power for.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Compute the weight for a specific date.\\n     * @param date The unlocking date.\\n     * @param startDate We compute the weight for the tokens staked until 'date' on 'startDate'.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function computeWeightByDate(\\n        uint256 date,\\n        uint256 startDate\\n    ) external pure returns (uint96 weight);\\n\\n    /**\\n     * @notice Returns public constant MAX_DURATION\\n     * preserved for backwards compatibility\\n     * Use getStorageMaxDurationToStakeTokens()\\n     * @return uint96 MAX_DURATION for staking\\n     **/\\n    function MAX_DURATION() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() external view returns (bool);\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @notice Governance withdraw vesting directly through staking contract.\\n     * This direct withdraw vesting solves the out of gas issue when there are too many iterations when withdrawing.\\n     * This function only allows cancelling vesting contract of the TeamVesting type.\\n     *\\n     * @param vesting The vesting address.\\n     * @param receiver The receiving address.\\n     * @param startFrom The start value for the iterations.\\n     */\\n    function cancelTeamVesting(address vesting, address receiver, uint256 startFrom) external;\\n\\n    /**\\n     * @notice Max iteration for direct withdrawal from staking to prevent out of gas issue.\\n     *\\n     * @return max iteration value.\\n     */\\n    function getMaxVestingWithdrawIterations() external view returns (uint256);\\n\\n    /**\\n     * @dev set max withdraw iterations.\\n     *\\n     * @param maxIterations new max iterations value.\\n     */\\n    function setMaxVestingWithdrawIterations(uint256 maxIterations) external;\\n}\\n\",\"keccak256\":\"0xf9d0f9e354e4af13f94c27881b564e1c7c8a4117ab2e36ca6264b9d413fa7e8f\"},\"contracts/governance/Timelock.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"../openzeppelin/SafeMath.sol\\\";\\nimport \\\"./ErrorDecoder.sol\\\";\\n\\ninterface ITimelock {\\n    function delay() external view returns (uint256);\\n\\n    function GRACE_PERIOD() external view returns (uint256);\\n\\n    function acceptAdmin() external;\\n\\n    function queuedTransactions(bytes32 hash) external view returns (bool);\\n\\n    function queueTransaction(\\n        address target,\\n        uint256 value,\\n        string calldata signature,\\n        bytes calldata data,\\n        uint256 eta\\n    ) external returns (bytes32);\\n\\n    function cancelTransaction(\\n        address target,\\n        uint256 value,\\n        string calldata signature,\\n        bytes calldata data,\\n        uint256 eta\\n    ) external;\\n\\n    function executeTransaction(\\n        address target,\\n        uint256 value,\\n        string calldata signature,\\n        bytes calldata data,\\n        uint256 eta\\n    ) external payable returns (bytes memory);\\n}\\n\\n/**\\n * @title Sovryn Protocol Timelock contract, based on Compound system.\\n *\\n * @notice This contract lets Sovryn governance system set up its\\n * own Time Lock instance to execute transactions proposed through the\\n * GovernorAlpha contract instance.\\n *\\n * The Timelock contract allows its admin (Sovryn governance on\\n * GovernorAlpha contract) to add arbitrary function calls to a\\n * queue. This contract can only execute a function call if the\\n * function call has been in the queue for at least 3 hours.\\n *\\n * Anytime the Timelock contract makes a function call, it must be the\\n * case that the function call was first made public by having been publicly\\n * added to the queue at least 3 hours prior.\\n *\\n * The intention is to provide GovernorAlpha contract the functionality to\\n * queue proposal actions. This would mean that any changes made by Sovryn\\n * governance of any contract would necessarily come with at least an\\n * advanced warning. This makes the Sovryn system follow a \\u201ctime-delayed,\\n * opt-out\\u201d upgrade pattern (rather than an \\u201cinstant, forced\\u201d upgrade pattern).\\n *\\n * Time-delaying admin actions gives users a chance to exit system if its\\n * admins become malicious or compromised (or make a change that the users\\n * do not like). Downside is that honest admins would be unable\\n * to lock down functionality to protect users if a critical bug was found.\\n *\\n * Delayed transactions reduce the amount of trust required by users of Sovryn\\n * and the overall risk for contracts building on top of it, as GovernorAlpha.\\n * */\\ncontract Timelock is ErrorDecoder, ITimelock {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant GRACE_PERIOD = 14 days;\\n    uint256 public constant MINIMUM_DELAY = 3 hours;\\n    uint256 public constant MAXIMUM_DELAY = 30 days;\\n\\n    address public admin;\\n    address public pendingAdmin;\\n    uint256 public delay;\\n\\n    mapping(bytes32 => bool) public queuedTransactions;\\n\\n    event NewAdmin(address indexed newAdmin);\\n    event NewPendingAdmin(address indexed newPendingAdmin);\\n    event NewDelay(uint256 indexed newDelay);\\n    event CancelTransaction(\\n        bytes32 indexed txHash,\\n        address indexed target,\\n        uint256 value,\\n        string signature,\\n        bytes data,\\n        uint256 eta\\n    );\\n    event ExecuteTransaction(\\n        bytes32 indexed txHash,\\n        address indexed target,\\n        uint256 value,\\n        string signature,\\n        bytes data,\\n        uint256 eta\\n    );\\n    event QueueTransaction(\\n        bytes32 indexed txHash,\\n        address indexed target,\\n        uint256 value,\\n        string signature,\\n        bytes data,\\n        uint256 eta\\n    );\\n\\n    /**\\n     * @notice Function called on instance deployment of the contract.\\n     * @param admin_ Governance contract address.\\n     * @param delay_ Time to wait for queued transactions to be executed.\\n     * */\\n    constructor(address admin_, uint256 delay_) public {\\n        require(\\n            delay_ >= MINIMUM_DELAY,\\n            \\\"Timelock::constructor: Delay must exceed minimum delay.\\\"\\n        );\\n        require(\\n            delay_ <= MAXIMUM_DELAY,\\n            \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\"\\n        );\\n\\n        admin = admin_;\\n        delay = delay_;\\n    }\\n\\n    /**\\n     * @notice Fallback function is to react to receiving value (rBTC).\\n     * */\\n    function() external payable {}\\n\\n    /**\\n     * @notice Set a new delay when executing the contract calls.\\n     * @param delay_ The amount of time to wait until execution.\\n     * */\\n    function setDelay(uint256 delay_) public {\\n        require(msg.sender == address(this), \\\"Timelock::setDelay: Call must come from Timelock.\\\");\\n        require(delay_ >= MINIMUM_DELAY, \\\"Timelock::setDelay: Delay must exceed minimum delay.\\\");\\n        require(\\n            delay_ <= MAXIMUM_DELAY,\\n            \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\"\\n        );\\n        delay = delay_;\\n\\n        emit NewDelay(delay);\\n    }\\n\\n    /**\\n     * @notice Accept a new admin for the timelock.\\n     * */\\n    function acceptAdmin() public {\\n        require(\\n            msg.sender == pendingAdmin,\\n            \\\"Timelock::acceptAdmin: Call must come from pendingAdmin.\\\"\\n        );\\n        admin = msg.sender;\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(admin);\\n    }\\n\\n    /**\\n     * @notice Set a new pending admin for the timelock.\\n     * @param pendingAdmin_ The new pending admin address.\\n     * */\\n    function setPendingAdmin(address pendingAdmin_) public {\\n        require(\\n            msg.sender == address(this),\\n            \\\"Timelock::setPendingAdmin: Call must come from Timelock.\\\"\\n        );\\n        pendingAdmin = pendingAdmin_;\\n\\n        emit NewPendingAdmin(pendingAdmin);\\n    }\\n\\n    /**\\n     * @notice Queue a new transaction from the governance contract.\\n     * @param target The contract to call.\\n     * @param value The amount to send in the transaction.\\n     * @param signature The stanndard representation of the function called.\\n     * @param data The ethereum transaction input data payload.\\n     * @param eta Estimated Time of Accomplishment. The timestamp that the\\n     * proposal will be available for execution, set once the vote succeeds.\\n     * */\\n    function queueTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) public returns (bytes32) {\\n        require(msg.sender == admin, \\\"Timelock::queueTransaction: Call must come from admin.\\\");\\n        require(\\n            eta >= getBlockTimestamp().add(delay),\\n            \\\"Timelock::queueTransaction: Estimated execution block must satisfy delay.\\\"\\n        );\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        queuedTransactions[txHash] = true;\\n\\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\\n        return txHash;\\n    }\\n\\n    /**\\n     * @notice Cancel a transaction.\\n     * @param target The contract to call.\\n     * @param value The amount to send in the transaction.\\n     * @param signature The stanndard representation of the function called.\\n     * @param data The ethereum transaction input data payload.\\n     * @param eta Estimated Time of Accomplishment. The timestamp that the\\n     * proposal will be available for execution, set once the vote succeeds.\\n     * */\\n    function cancelTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) public {\\n        require(msg.sender == admin, \\\"Timelock::cancelTransaction: Call must come from admin.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        queuedTransactions[txHash] = false;\\n\\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\\n    }\\n\\n    /**\\n     * @notice Executes a previously queued transaction from the governance.\\n     * @param target The contract to call.\\n     * @param value The amount to send in the transaction.\\n     * @param signature The stanndard representation of the function called.\\n     * @param data The ethereum transaction input data payload.\\n     * @param eta Estimated Time of Accomplishment. The timestamp that the\\n     * proposal will be available for execution, set once the vote succeeds.\\n     * */\\n    function executeTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) public payable returns (bytes memory) {\\n        require(msg.sender == admin, \\\"Timelock::executeTransaction: Call must come from admin.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        require(\\n            queuedTransactions[txHash],\\n            \\\"Timelock::executeTransaction: Transaction hasn't been queued.\\\"\\n        );\\n        require(\\n            getBlockTimestamp() >= eta,\\n            \\\"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\\\"\\n        );\\n        require(\\n            getBlockTimestamp() <= eta.add(GRACE_PERIOD),\\n            \\\"Timelock::executeTransaction: Transaction is stale.\\\"\\n        );\\n\\n        queuedTransactions[txHash] = false;\\n\\n        bytes memory callData;\\n\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\n        }\\n\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, bytes memory returnData) = target.call.value(value)(callData);\\n        if (!success) {\\n            if (returnData.length <= ERROR_MESSAGE_SHIFT) {\\n                revert(\\\"Timelock::executeTransaction: Transaction execution reverted.\\\");\\n            } else {\\n                revert(_addErrorMessage(\\\"Timelock::executeTransaction: \\\", string(returnData)));\\n            }\\n        }\\n\\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\\n\\n        return returnData;\\n    }\\n\\n    /**\\n     * @notice A function used to get the current Block Timestamp.\\n     * @dev Timestamp of the current block in seconds since the epoch.\\n     * It is a Unix time stamp. So, it has the complete information about\\n     * the date, hours, minutes, and seconds (in UTC) when the block was\\n     * created.\\n     * */\\n    function getBlockTimestamp() internal view returns (uint256) {\\n        // solium-disable-next-line security/no-block-members\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xb3aaa58d4af578707396910508328558f4f5ec9e295c6f560fd28e4955696509\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"},\"contracts/rsk/RSKAddrValidator.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.5.17;\\n\\nlibrary RSKAddrValidator {\\n    /*\\n     * @param addr it is an address to check that it does not originates from\\n     * signing with PK = ZERO. RSK has a small difference in which @ZERO_PK_ADDR is\\n     * also an address from PK = ZERO. So we check for both of them.\\n     * */\\n    function checkPKNotZero(address addr) internal pure returns (bool) {\\n        return (addr != 0xdcc703c0E500B653Ca82273B7BFAd8045D85a470 && addr != address(0));\\n    }\\n\\n    /*\\n     * Safely compares two addresses, checking they do not originate from\\n     * a zero private key.\\n     * */\\n    function safeEquals(address addr1, address addr2) internal pure returns (bool) {\\n        return (addr1 == addr2 &&\\n            addr1 != 0xdcc703c0E500B653Ca82273B7BFAd8045D85a470 &&\\n            addr1 != address(0));\\n    }\\n}\\n\",\"keccak256\":\"0xf25255f771a734eef130f68e899d00a71e2bcab4e6b109e06f61cff93ab58d74\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620044ee380380620044ee8339810160408190526200003491620000de565b600080546001600160a01b03199081166001600160a01b039788161790915560018054821695871695909517909455600280549094169290941691909117909155600480546001600160601b0319166001600160601b0392831617600160601b600160c01b0319166c010000000000000000000000009290931691909102919091179055620001a1565b8051620000cb816200017c565b92915050565b8051620000cb8162000196565b600080600080600060a08688031215620000f757600080fd5b6000620001058888620000be565b95505060206200011888828901620000be565b94505060406200012b88828901620000be565b93505060606200013e88828901620000d1565b92505060806200015188828901620000d1565b9150509295509295909350565b60006001600160a01b038216620000cb565b6001600160601b031690565b62000187816200015e565b81146200019357600080fd5b50565b620001878162000170565b61433d80620001b16000396000f3fe6080604052600436106101c25760003560e01c8063760fbc13116100f7578063d33219b411610095578063deaaa7cc11610064578063deaaa7cc146104ce578063e23a9a52146104e3578063e265379014610510578063fe0d94c114610525576101c2565b8063d33219b414610464578063da35c66414610479578063da95691a1461048e578063ddf0b009146104ae576101c2565b8063a3f4df7e116100d1578063a3f4df7e14610403578063b2b0d91f14610425578063b58131b01461043a578063b9a619611461044f576101c2565b8063760fbc13146103b95780637bdbe4d0146103ce57806391500671146103e3576101c2565b8063328dd9821161016457806340e58ee51161013e57806340e58ee514610335578063452a9320146103555780634634c61f146103775780634cf088d914610397576101c2565b8063328dd982146102c35780633932abb1146102f35780633e4f49e614610308576101c2565b806317977c61116101a057806317977c611461024c57806320606b701461026c57806321f43e421461028157806324bc1a64146102a1576101c2565b8063013cf08b146101c757806302a251a31461020857806315373e3d1461022a575b600080fd5b3480156101d357600080fd5b506101e76101e2366004612c28565b610538565b6040516101ff9c9b9a99989796959493929190613e01565b60405180910390f35b34801561021457600080fd5b5061021d6105d8565b6040516101ff9190613b13565b34801561023657600080fd5b5061024a610245366004612c76565b6105df565b005b34801561025857600080fd5b5061021d610267366004612a71565b6105ee565b34801561027857600080fd5b5061021d610600565b34801561028d57600080fd5b5061024a61029c366004612a97565b610617565b3480156102ad57600080fd5b506102b66106fe565b6040516101ff9190613ec2565b3480156102cf57600080fd5b506102e36102de366004612c28565b610805565b6040516101ff9493929190613ac6565b3480156102ff57600080fd5b5061021d610a94565b34801561031457600080fd5b50610328610323366004612c28565b610a99565b6040516101ff9190613bc1565b34801561034157600080fd5b5061024a610350366004612c28565b610d21565b34801561036157600080fd5b5061036a610ef9565b6040516101ff919061393a565b34801561038357600080fd5b5061024a610392366004612ca6565b610f08565b3480156103a357600080fd5b506103ac61109b565b6040516101ff9190613bb3565b3480156103c557600080fd5b5061024a6110aa565b3480156103da57600080fd5b5061021d6110e6565b3480156103ef57600080fd5b5061024a6103fe366004612a97565b6110eb565b34801561040f57600080fd5b506104186111c0565b6040516101ff9190613bcf565b34801561043157600080fd5b506102b66111f1565b34801561044657600080fd5b506102b6611200565b34801561045b57600080fd5b5061024a6112cd565b34801561047057600080fd5b506103ac611352565b34801561048557600080fd5b5061021d611361565b34801561049a57600080fd5b5061021d6104a9366004612ad1565b611367565b3480156104ba57600080fd5b5061024a6104c9366004612c28565b6119ee565b3480156104da57600080fd5b5061021d611c9e565b3480156104ef57600080fd5b506105036104fe366004612c46565b611caa565b6040516101ff9190613d30565b34801561051c57600080fd5b506102b6611d19565b61024a610533366004612c28565b611d2f565b6005602052600090815260409020805460018201546002830154600390930154919263ffffffff808316936401000000008404909116926001600160601b03600160401b808304821694600160a01b90930482169383831693600160601b8104909316926001600160401b03600160c01b9091048116929082169160ff918104821691600160481b820416906001600160a01b03600160501b909104168c565b610b405b90565b6105ea338383611f11565b5050565b60066020526000908152604090205481565b60405161060c90613924565b604051809103902081565b6002546001600160a01b0316331461064a5760405162461bcd60e51b815260040161064190613c10565b60405180910390fd5b600080546040516001600160a01b0390911691630825f38f9183919061067490879060200161393a565b604051602081830303815290604052856040518563ffffffff1660e01b81526004016106a39493929190613970565b600060405180830381600087803b1580156106bd57600080fd5b505af11580156106d1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106f99190810190612bf4565b505050565b600080600160009054906101000a90046001600160a01b03166001600160a01b0316632522d7ba61074a600143036040518060600160405280603181526020016141446031913961217c565b426040518363ffffffff1660e01b8152600401610768929190613eb4565b60206040518083038186803b15801561078057600080fd5b505afa158015610794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107b89190810190612d0e565b600454604080516060810190915260328082529293506064926107ee926001600160601b031691859161417560208301396121ac565b6001600160601b0316816107fe57fe5b0491505090565b6060806060806000600560008781526020019081526020016000209050806004018160050182600601836007018380548060200260200160405190810160405280929190818152602001828054801561088757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610869575b50505050509350828054806020026020016040519081016040528092919081815260200182805480156108d957602002820191906000526020600020905b8154815260200190600101908083116108c5575b5050505050925081805480602002602001604051908101604052809291908181526020016000905b828210156109ac5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156109985780601f1061096d57610100808354040283529160200191610998565b820191906000526020600020905b81548152906001019060200180831161097b57829003601f168201915b505050505081526020019060010190610901565b50505050915080805480602002602001604051908101604052809291908181526020016000905b82821015610a7e5760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610a6a5780601f10610a3f57610100808354040283529160200191610a6a565b820191906000526020600020905b815481529060010190602001808311610a4d57829003601f168201915b5050505050815260200190600101906109d3565b5050505090509450945094509450509193509193565b600190565b60008160035410158015610aad5750600082115b610ac95760405162461bcd60e51b815260040161064190613c20565b60008281526005602052604090206003810154600160401b900460ff1615610af5576002915050610d1c565b600181015463ffffffff164311610b10576000915050610d1c565b6001810154640100000000900463ffffffff164311610b33576001915050610d1c565b600181015460408051606081019091526037808252600092610b78926001600160601b03600160401b8304811693600160a01b90930416916141c96020830139612215565b90506000610ba082606460405180606001604052806025815260200161424260259139612248565b9050610bda816004600c9054906101000a90046001600160601b03166040518060600160405280603f81526020016140ad603f91396121ac565b60018401549091506001600160601b03808316600160401b90920416111580610c13575060028301546001600160601b03908116908316105b15610c245760039350505050610d1c565b6002830154600160c01b90046001600160401b0316610c495760049350505050610d1c565b6003830154600160481b900460ff1615610c695760079350505050610d1c565b6002830154600054604080516360d143f160e11b81529051610d0293600160c01b90046001600160401b0316926001600160a01b03169163c1a287e2916004808301926020929190829003018186803b158015610cc557600080fd5b505afa158015610cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cfd9190810190612bd6565b61229a565b4210610d145760069350505050610d1c565b600593505050505b919050565b6000610d2c82610a99565b90506007816007811115610d3c57fe5b1415610d5a5760405162461bcd60e51b815260040161064190613cf0565b60008281526005602052604090206002546001600160a01b03163314610d925760405162461bcd60e51b815260040161064190613c90565b60038101805468ff00000000000000001916600160401b17905560005b6004820154811015610ebc576000546004830180546001600160a01b039092169163591fcdfe919084908110610de157fe5b6000918252602090912001546005850180546001600160a01b039092169185908110610e0957fe5b9060005260206000200154856006018581548110610e2357fe5b90600052602060002001866007018681548110610e3c57fe5b906000526020600020018760020160189054906101000a90046001600160401b03166040518663ffffffff1660e01b8152600401610e7e959493929190613a4e565b600060405180830381600087803b158015610e9857600080fd5b505af1158015610eac573d6000803e3d6000fd5b505060019092019150610daf9050565b507f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c83604051610eec9190613b13565b60405180910390a1505050565b6002546001600160a01b031681565b6000604051610f1690613924565b604080519182900382208282019091526015825274536f7672796e20476f7665726e6f7220416c70686160581b6020909201919091527fddf6fbf241d6c602c276b8332aecac376ff7e0ef2276d109c25930e6911ca2bd610f756122bf565b30604051602001610f899493929190613b21565b6040516020818303038152906040528051906020012090506000604051610faf9061392f565b604051908190038120610fc89189908990602001613b56565b60405160208183030381529060405280519060200120905060008282604051602001610ff59291906138f3565b6040516020818303038152906040528051906020012090506000600182888888604051600081526020016040526040516110329493929190613b7e565b6020604051602081039080840390855afa158015611054573d6000803e3d6000fd5b505050602060405103519050611069816122c3565b6110855760405162461bcd60e51b815260040161064190613cd0565b611090818a8a611f11565b505050505050505050565b6001546001600160a01b031681565b6002546001600160a01b031633146110d45760405162461bcd60e51b815260040161064190613d20565b600280546001600160a01b0319169055565b600a90565b6002546001600160a01b031633146111155760405162461bcd60e51b815260040161064190613c50565b600080546040516001600160a01b0390911691633a66f9019183919061113f90879060200161393a565b604051602081830303815290604052856040518563ffffffff1660e01b815260040161116e9493929190613970565b602060405180830381600087803b15801561118857600080fd5b505af115801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106f99190810190612bd6565b60405180604001604052806015815260200174536f7672796e20476f7665726e6f7220416c70686160581b81525081565b6004546001600160601b031681565b600080600160009054906101000a90046001600160a01b03166001600160a01b0316632522d7ba61124c6001430360405180606001604052806037815260200161429a6037913961217c565b426040518363ffffffff1660e01b815260040161126a929190613eb4565b60206040518083038186803b15801561128257600080fd5b505afa158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112ba9190810190612d0e565b905060646001600160601b0382166107fe565b6002546001600160a01b031633146112f75760405162461bcd60e51b815260040161064190613be0565b6000805460408051630e18b68160e01b815290516001600160a01b0390921692630e18b6819260048084019382900301818387803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b50505050565b6000546001600160a01b031681565b60035481565b600080611372611200565b600180549192506001600160601b038316916001600160a01b03169063836eebee9033906113a19043906122fc565b426040518463ffffffff1660e01b81526004016113c093929190613948565b60206040518083038186803b1580156113d857600080fd5b505afa1580156113ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114109190810190612d0e565b6001600160601b0316116114365760405162461bcd60e51b815260040161064190613cc0565b85518751148015611448575084518751145b8015611455575083518751145b6114715760405162461bcd60e51b815260040161064190613c80565b865161148f5760405162461bcd60e51b815260040161064190613cb0565b6114976110e6565b875111156114b75760405162461bcd60e51b815260040161064190613c60565b3360009081526006602052604090205480156115345760006114d882610a99565b905060018160078111156114e857fe5b14156115065760405162461bcd60e51b815260040161064190613ce0565b600081600781111561151457fe5b14156115325760405162461bcd60e51b815260040161064190613c40565b505b600061154243610cfd610a94565b9050600061155282610cfd6105d8565b60038054600101905590506115656124aa565b604051806102000160405280600354815260200161159b856040518060600160405280603381526020016142676033913961217c565b63ffffffff1681526020016115c8846040518060600160405280603181526020016141136031913961217c565b63ffffffff16815260200160006001600160601b0316815260200160006001600160601b0316815260200161162b600460009054906101000a90046001600160601b031688604051806060016040528060368152602001614077603691396121ac565b6001600160601b031681526020016116716004600c9054906101000a90046001600160601b031688604051806080016040528060428152602001614200604291396121ac565b6001600160601b0316815260200160006001600160401b031681526020016116b1426040518060600160405280602a81526020016142d1602a9139612324565b6001600160401b03168152602001600015158152602001600015158152602001336001600160a01b031681526020018c81526020018b81526020018a81526020018981525090508060056000836000015181526020019081526020016000206000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555060408201518160010160046101000a81548163ffffffff021916908363ffffffff16021790555060608201518160010160086101000a8154816001600160601b0302191690836001600160601b0316021790555060808201518160010160146101000a8154816001600160601b0302191690836001600160601b0316021790555060a08201518160020160006101000a8154816001600160601b0302191690836001600160601b0316021790555060c082015181600201600c6101000a8154816001600160601b0302191690836001600160601b0316021790555060e08201518160020160186101000a8154816001600160401b0302191690836001600160401b031602179055506101008201518160030160006101000a8154816001600160401b0302191690836001600160401b031602179055506101208201518160030160086101000a81548160ff0219169083151502179055506101408201518160030160096101000a81548160ff02191690831515021790555061016082015181600301600a6101000a8154816001600160a01b0302191690836001600160a01b03160217905550610180820151816004019080519060200190611904929190612530565b506101a08201518051611921916005840191602090910190612595565b506101c0820151805161193e9160068401916020909101906125dc565b506101e0820151805161195b916007840191602090910190612635565b509050508060000151600660008361016001516001600160a01b03166001600160a01b03168152602001908152602001600020819055507f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e08160000151338d8d8d8d89898f6040516119d599989796959493929190613d3e565b60405180910390a1519450505050505b95945050505050565b60046119f982610a99565b6007811115611a0457fe5b14611a215760405162461bcd60e51b815260040161064190613bf0565b600081815260056020908152604080832083548251630d48571f60e31b81529251919493611a7a9342936001600160a01b0390931692636a42b8f892600480840193919291829003018186803b158015610cc557600080fd5b905060005b6004830154811015611c2257611c1a836004018281548110611a9d57fe5b6000918252602090912001546005850180546001600160a01b039092169184908110611ac557fe5b9060005260206000200154856006018481548110611adf57fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611b6d5780601f10611b4257610100808354040283529160200191611b6d565b820191906000526020600020905b815481529060010190602001808311611b5057829003601f168201915b5050505050866007018581548110611b8157fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611c0f5780601f10611be457610100808354040283529160200191611c0f565b820191906000526020600020905b815481529060010190602001808311611bf257829003601f168201915b50505050508661234b565b600101611a7f565b50611c45816040518060600160405280602281526020016141a760229139612324565b8260020160186101000a8154816001600160401b0302191690836001600160401b031602179055507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda28928382604051610eec929190613de6565b60405161060c9061392f565b611cb261268e565b5060008281526005602090815260408083206001600160a01b03851684526008018252918290208251606081018452905460ff80821615158352610100820416151592820192909252620100009091046001600160601b0316918101919091525b92915050565b600454600160601b90046001600160601b031681565b6005611d3a82610a99565b6007811115611d4557fe5b14611d625760405162461bcd60e51b815260040161064190613c00565b600081815260056020526040812060038101805469ff0000000000000000001916600160481b179055905b6004820154811015611ed5576000546005830180546001600160a01b0390921691630825f38f919084908110611dbf57fe5b9060005260206000200154846004018481548110611dd957fe5b6000918252602090912001546005860180546001600160a01b039092169186908110611e0157fe5b9060005260206000200154866006018681548110611e1b57fe5b90600052602060002001876007018781548110611e3457fe5b906000526020600020018860020160189054906101000a90046001600160401b03166040518763ffffffff1660e01b8152600401611e76959493929190613a4e565b6000604051808303818588803b158015611e8f57600080fd5b505af1158015611ea3573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052611ecc9190810190612bf4565b50600101611d8d565b507f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f82604051611f059190613b13565b60405180910390a15050565b6001611f1c83610a99565b6007811115611f2757fe5b14611f445760405162461bcd60e51b815260040161064190613d00565b60008281526005602090815260408083206001600160a01b038716845260088101909252909120805460ff1615611f8d5760405162461bcd60e51b815260040161064190613c30565b600180549083015460038401546040516341b775f760e11b81526000936001600160a01b03169263836eebee92611fd9928b9263ffffffff16916001600160401b031690600401613a9e565b60206040518083038186803b158015611ff157600080fd5b505afa158015612005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120299190810190612d0e565b905083156120985761206b8360010160089054906101000a90046001600160601b0316826040518060600160405280602781526020016140ec60279139612215565b8360010160086101000a8154816001600160601b0302191690836001600160601b031602179055506120fb565b6120d28360010160149054906101000a90046001600160601b0316826040518060600160405280602781526020016140ec60279139612215565b8360010160146101000a8154816001600160601b0302191690836001600160601b031602179055505b8154600160ff199091161761ff00191661010085151502176dffffffffffffffffffffffff00001916620100006001600160601b038316021782556040517f877856338e13f63d0c36822ff0ef736b80934cd90574a3a5bc9262c39d217c469061216c9088908890889086906139bf565b60405180910390a1505050505050565b60008164010000000084106121a45760405162461bcd60e51b81526004016106419190613bcf565b509192915050565b60006001600160601b0384166121c45750600061220e565b8383026001600160601b0380851690808716908316816121e057fe5b046001600160601b031614839061220a5760405162461bcd60e51b81526004016106419190613bcf565b5090505b9392505050565b6000838301826001600160601b03808716908316101561220a5760405162461bcd60e51b81526004016106419190613bcf565b6000816001600160601b0384166122725760405162461bcd60e51b81526004016106419190613bcf565b506000836001600160601b0316856001600160601b03168161229057fe5b0495945050505050565b60008282018381101561220e5760405162461bcd60e51b815260040161064190613c70565b4690565b600073dcc703c0e500b653ca82273b7bfad8045d85a4706001600160a01b03831614801590611d135750506001600160a01b0316151590565b60008282111561231e5760405162461bcd60e51b815260040161064190613d10565b50900390565b600081600160401b84106121a45760405162461bcd60e51b81526004016106419190613bcf565b6000546040516001600160a01b039091169063f2b065379061237990889088908890889088906020016139f4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016123ab9190613b13565b60206040518083038186803b1580156123c357600080fd5b505afa1580156123d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123fb9190810190612bb8565b156124185760405162461bcd60e51b815260040161064190613ca0565b600054604051633a66f90160e01b81526001600160a01b0390911690633a66f9019061245090889088908890889088906004016139f4565b602060405180830381600087803b15801561246a57600080fd5b505af115801561247e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124a29190810190612bd6565b505050505050565b604080516102008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082018390526101208201839052610140820183905261016082019290925261018081018290526101a081018290526101c081018290526101e081019190915290565b828054828255906000526020600020908101928215612585579160200282015b8281111561258557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612550565b506125919291506126ae565b5090565b8280548282559060005260206000209081019282156125d0579160200282015b828111156125d05782518255916020019190600101906125b5565b506125919291506126d2565b828054828255906000526020600020908101928215612629579160200282015b8281111561262957825180516126199184916020909101906126ec565b50916020019190600101906125fc565b50612591929150612759565b828054828255906000526020600020908101928215612682579160200282015b8281111561268257825180516126729184916020909101906126ec565b5091602001919060010190612655565b5061259192915061277c565b604080516060810182526000808252602082018190529181019190915290565b6105dc91905b808211156125915780546001600160a01b03191681556001016126b4565b6105dc91905b8082111561259157600081556001016126d8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061272d57805160ff19168380011785556125d0565b828001600101855582156125d057918201828111156125d05782518255916020019190600101906125b5565b6105dc91905b80821115612591576000612773828261279f565b5060010161275f565b6105dc91905b80821115612591576000612796828261279f565b50600101612782565b50805460018160011615610100020316600290046000825580601f106127c557506127e3565b601f0160209004906000526020600020908101906127e391906126d2565b50565b8035611d138161403e565b600082601f83011261280257600080fd5b813561281561281082613ef6565b613ed0565b9150818183526020840193506020810190508385602084028201111561283a57600080fd5b60005b83811015612866578161285088826127e6565b845250602092830192919091019060010161283d565b5050505092915050565b600082601f83011261288157600080fd5b813561288f61281082613ef6565b81815260209384019390925082018360005b8381101561286657813586016128b788826129c6565b84525060209283019291909101906001016128a1565b600082601f8301126128de57600080fd5b81356128ec61281082613ef6565b81815260209384019390925082018360005b83811015612866578135860161291488826129c6565b84525060209283019291909101906001016128fe565b600082601f83011261293b57600080fd5b813561294961281082613ef6565b9150818183526020840193506020810190508385602084028201111561296e57600080fd5b60005b83811015612866578161298488826129b0565b8452506020928301929190910190600101612971565b8035611d1381614052565b8051611d1381614052565b8035611d138161405b565b8051611d138161405b565b600082601f8301126129d757600080fd5b81356129e561281082613f16565b91508082526020830160208301858383011115612a0157600080fd5b612a0c838284613ff2565b50505092915050565b600082601f830112612a2657600080fd5b8151612a3461281082613f16565b91508082526020830160208301858383011115612a5057600080fd5b612a0c838284613ffe565b8035611d1381614064565b8051611d138161406d565b600060208284031215612a8357600080fd5b6000612a8f84846127e6565b949350505050565b60008060408385031215612aaa57600080fd5b6000612ab685856127e6565b9250506020612ac7858286016129b0565b9150509250929050565b600080600080600060a08688031215612ae957600080fd5b85356001600160401b03811115612aff57600080fd5b612b0b888289016127f1565b95505060208601356001600160401b03811115612b2757600080fd5b612b338882890161292a565b94505060408601356001600160401b03811115612b4f57600080fd5b612b5b888289016128cd565b93505060608601356001600160401b03811115612b7757600080fd5b612b8388828901612870565b92505060808601356001600160401b03811115612b9f57600080fd5b612bab888289016129c6565b9150509295509295909350565b600060208284031215612bca57600080fd5b6000612a8f84846129a5565b600060208284031215612be857600080fd5b6000612a8f84846129bb565b600060208284031215612c0657600080fd5b81516001600160401b03811115612c1c57600080fd5b612a8f84828501612a15565b600060208284031215612c3a57600080fd5b6000612a8f84846129b0565b60008060408385031215612c5957600080fd5b6000612c6585856129b0565b9250506020612ac7858286016127e6565b60008060408385031215612c8957600080fd5b6000612c9585856129b0565b9250506020612ac78582860161299a565b600080600080600060a08688031215612cbe57600080fd5b6000612cca88886129b0565b9550506020612cdb8882890161299a565b9450506040612cec88828901612a5b565b9350506060612cfd888289016129b0565b9250506080612bab888289016129b0565b600060208284031215612d2057600080fd5b6000612a8f8484612a66565b6000612d388383612d67565b505060200190565b600061220e8383612f09565b6000612d388383612eef565b612d6181613fa9565b82525050565b612d6181613f5c565b6000612d7b82613f4f565b612d858185613f53565b9350612d9083613f3d565b8060005b83811015612dbe578151612da88882612d2c565b9750612db383613f3d565b925050600101612d94565b509495945050505050565b6000612dd482613f4f565b612dde8185613f53565b935083602082028501612df085613f3d565b8060005b85811015612e2a5784840389528151612e0d8582612d40565b9450612e1883613f3d565b60209a909a0199925050600101612df4565b5091979650505050505050565b6000612e4282613f4f565b612e4c8185613f53565b935083602082028501612e5e85613f3d565b8060005b85811015612e2a5784840389528151612e7b8582612d40565b9450612e8683613f3d565b60209a909a0199925050600101612e62565b6000612ea382613f4f565b612ead8185613f53565b9350612eb883613f3d565b8060005b83811015612dbe578151612ed08882612d4c565b9750612edb83613f3d565b925050600101612ebc565b612d6181613f67565b612d61816105dc565b612d61612f04826105dc565b6105dc565b6000612f1482613f4f565b612f1e8185613f53565b9350612f2e818560208601613ffe565b612f378161402a565b9093019392505050565b600081546001811660008114612f5e5760018114612f8457612fc3565b607f6002830416612f6f8187613f53565b60ff1984168152955050602085019250612fc3565b60028204612f928187613f53565b9550612f9d85613f43565b60005b82811015612fbc57815488820152600190910190602001612fa0565b8701945050505b505092915050565b612d6181613fb0565b612d6181613fbb565b612d6181613fc6565b6000612ff3603983613f53565b7f476f7665726e6f72416c7068613a3a5f5f61636365707441646d696e3a20736581527f6e646572206d75737420626520676f7620677561726469616e00000000000000602082015260400192915050565b6000613052604483613f53565b7f476f7665726e6f72416c7068613a3a71756575653a2070726f706f73616c206381527f616e206f6e6c79206265207175657565642069662069742069732073756363656020820152631959195960e21b604082015260600192915050565b60006130be604583613f53565b7f476f7665726e6f72416c7068613a3a657865637574653a2070726f706f73616c81527f2063616e206f6e6c7920626520657865637574656420696620697420697320716020820152641d595d595960da1b604082015260600192915050565b600061312b600283610d1c565b61190160f01b815260020192915050565b6000613149604c83613f53565b7f476f7665726e6f72416c7068613a3a5f5f6578656375746553657454696d656c81527f6f636b50656e64696e6741646d696e3a2073656e646572206d7573742062652060208201526b33b7bb1033bab0b93234b0b760a11b604082015260600192915050565b60006131bd601883613f53565b7f73657450656e64696e6741646d696e2861646472657373290000000000000000815260200192915050565b60006131f6602983613f53565b7f476f7665726e6f72416c7068613a3a73746174653a20696e76616c69642070728152681bdc1bdcd85b081a5960ba1b602082015260400192915050565b6000613241602d83613f53565b7f476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f7465722081526c185b1c9958591e481d9bdd1959609a1b602082015260400192915050565b6000613290605983613f53565b7f476f7665726e6f72416c7068613a3a70726f706f73653a206f6e65206c69766581527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60208201527f20616c72656164792070656e64696e672070726f706f73616c00000000000000604082015260600192915050565b6000613315604a83613f53565b7f476f7665726e6f72416c7068613a3a5f5f717565756553657454696d656c6f6381527f6b50656e64696e6741646d696e3a2073656e646572206d75737420626520676f6020820152693b1033bab0b93234b0b760b11b604082015260600192915050565b6000613387602883613f53565b7f476f7665726e6f72416c7068613a3a70726f706f73653a20746f6f206d616e7981526720616374696f6e7360c01b602082015260400192915050565b60006133d1601183613f53565b706164646974696f6e206f766572666c6f7760781b815260200192915050565b60006133fe604383610d1c565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000613469602783610d1c565b7f42616c6c6f742875696e743235362070726f706f73616c49642c626f6f6c20738152667570706f72742960c81b602082015260270192915050565b60006134b2604483613f53565b7f476f7665726e6f72416c7068613a3a70726f706f73653a2070726f706f73616c81527f2066756e6374696f6e20696e666f726d6174696f6e206172697479206d69736d6020820152630c2e8c6d60e31b604082015260600192915050565b600061351e602e83613f53565b7f476f7665726e6f72416c7068613a3a63616e63656c3a2073656e64657220697381526d3713ba10309033bab0b93234b0b760911b602082015260400192915050565b600061356e604483613f53565b7f476f7665726e6f72416c7068613a3a5f71756575654f725265766572743a207081527f726f706f73616c20616374696f6e20616c7265616479207175657565642061746020820152632065746160e01b604082015260600192915050565b60006135da602c83613f53565b7f476f7665726e6f72416c7068613a3a70726f706f73653a206d7573742070726f81526b7669646520616374696f6e7360a01b602082015260400192915050565b6000613628603f83613f53565b7f476f7665726e6f72416c7068613a3a70726f706f73653a2070726f706f73657281527f20766f7465732062656c6f772070726f706f73616c207468726573686f6c6400602082015260400192915050565b6000613687602f83613f53565b7f476f7665726e6f72416c7068613a3a63617374566f746542795369673a20696e81526e76616c6964207369676e617475726560881b602082015260400192915050565b60006136d8605883613f53565b7f476f7665726e6f72416c7068613a3a70726f706f73653a206f6e65206c69766581527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60208201527f20616c7265616479206163746976652070726f706f73616c0000000000000000604082015260600192915050565b600061375d603683613f53565b7f476f7665726e6f72416c7068613a3a63616e63656c3a2063616e6e6f742063618152751b98d95b08195e1958dd5d1959081c1c9bdc1bdcd85b60521b602082015260400192915050565b60006137b5602a83613f53565b7f476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f74696e67815269081a5cc818db1bdcd95960b21b602082015260400192915050565b6000613801601583613f53565b747375627472616374696f6e20756e646572666c6f7760581b815260200192915050565b6000613832603683613f53565b7f476f7665726e6f72416c7068613a3a5f5f61626469636174653a2073656e6465815275391036bab9ba1031329033b7bb1033bab0b93234b0b760511b602082015260400192915050565b8051606083019061388e8482612ee6565b5060208201516138a16020850182612ee6565b50604082015161134c60408501826138ea565b612d6181613fd1565b612d6181613f82565b612d6181613fdc565b612d6181613f8b565b612d6181613f97565b612d6181613fe7565b612d6181613f9d565b60006138fe8261311e565b915061390a8285612ef8565b60208201915061391a8284612ef8565b5060200192915050565b6000611d13826133f1565b6000611d138261345c565b60208101611d138284612d67565b606081016139568286612d58565b6139636020830185612eef565b612a8f6040830184612eef565b60a0810161397e8287612d67565b61398b6020830186612fdd565b818103604083015261399c816131b0565b905081810360608301526139b08185612f09565b90506119e56080830184612eef565b608081016139cd8287612d67565b6139da6020830186612eef565b6139e76040830185612ee6565b6119e560608301846138e1565b60a08101613a028288612d67565b613a0f6020830187612eef565b8181036040830152613a218186612f09565b90508181036060830152613a358185612f09565b9050613a446080830184612eef565b9695505050505050565b60a08101613a5c8288612d67565b613a696020830187612eef565b8181036040830152613a7b8186612f41565b90508181036060830152613a8f8185612f41565b9050613a4460808301846138c6565b60608101613aac8286612d67565b613ab960208301856138b4565b612a8f60408301846138c6565b60808082528101613ad78187612d70565b90508181036020830152613aeb8186612e98565b90508181036040830152613aff8185612e37565b90508181036060830152613a448184612dc9565b60208101611d138284612eef565b60808101613b2f8287612eef565b613b3c6020830186612eef565b613b496040830185612eef565b6119e56060830184612d67565b60608101613b648286612eef565b613b716020830185612eef565b612a8f6040830184612ee6565b60808101613b8c8287612eef565b613b9960208301866138d8565b613ba66040830185612eef565b6119e56060830184612eef565b60208101611d138284612fcb565b60208101611d138284612fd4565b6020808252810161220e8184612f09565b60208082528101611d1381612fe6565b60208082528101611d1381613045565b60208082528101611d13816130b1565b60208082528101611d138161313c565b60208082528101611d13816131e9565b60208082528101611d1381613234565b60208082528101611d1381613283565b60208082528101611d1381613308565b60208082528101611d138161337a565b60208082528101611d13816133c4565b60208082528101611d13816134a5565b60208082528101611d1381613511565b60208082528101611d1381613561565b60208082528101611d13816135cd565b60208082528101611d138161361b565b60208082528101611d138161367a565b60208082528101611d13816136cb565b60208082528101611d1381613750565b60208082528101611d13816137a8565b60208082528101611d13816137f4565b60208082528101611d1381613825565b60608101611d13828461387d565b6101208101613d4d828c612eef565b613d5a602083018b612d58565b8181036040830152613d6c818a612d70565b90508181036060830152613d808189612e98565b90508181036080830152613d948188612e37565b905081810360a0830152613da88187612dc9565b9050613db760c0830186612eef565b613dc460e0830185612eef565b818103610100830152613dd78184612f09565b9b9a5050505050505050505050565b60408101613df48285612eef565b61220e6020830184612eef565b6101808101613e10828f612eef565b613e1d602083018e6138bd565b613e2a604083018d6138bd565b613e37606083018c6138ea565b613e44608083018b6138ea565b613e5160a083018a6138ea565b613e5e60c08301896138ea565b613e6b60e08301886138cf565b613e796101008301876138cf565b613e87610120830186612ee6565b613e95610140830185612ee6565b613ea3610160830184612d67565b9d9c50505050505050505050505050565b60408101613df482856138bd565b60208101611d1382846138ea565b6040518181016001600160401b0381118282101715613eee57600080fd5b604052919050565b60006001600160401b03821115613f0c57600080fd5b5060209081020190565b60006001600160401b03821115613f2c57600080fd5b506020601f91909101601f19160190565b60200190565b60009081526020902090565b5190565b90815260200190565b6000611d1382613f76565b151590565b80610d1c81614034565b6001600160a01b031690565b63ffffffff1690565b6001600160401b031690565b60ff1690565b6001600160601b031690565b6000611d13825b6000611d1382613f5c565b6000611d1382613f6c565b6000611d13826105dc565b6000611d1382613f82565b6000611d1382613f8b565b6000611d1382613f9d565b82818337506000910152565b60005b83811015614019578181015183820152602001614001565b8381111561134c5750506000910152565b601f01601f191690565b600881106127e357fe5b61404781613f5c565b81146127e357600080fd5b61404781613f67565b614047816105dc565b61404781613f97565b61404781613f9d56fe476f7665726e6f72416c7068613a3a70726f706f73653a206f766572666c6f77206f6e2071756f72756d20636f6d7075746174696f6e476f7665726e6f72416c7068613a3a2073746174653a20746f74616c566f746573202a206d616a6f7269747950657263656e74616765203e2075696e743936476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f7465206f766572666c6f77476f7665726e6f72416c7068613a3a70726f706f73653a20656e6420626c6f636b206e756d626572206f766572666c6f77476f7665726e6f72416c7068613a3a71756f72756d566f7465733a20626c6f636b206e756d626572206f766572666c6f77476f7665726e6f72416c7068613a3a71756f72756d566f7465733a6d756c7469706c69636174696f6e206f766572666c6f77476f7665726e6f72416c7068613a3a71756575653a20455441206f766572666c6f77476f7665726e6f72416c7068613a3a2073746174653a20666f72566f746573202b20616761696e7374566f746573203e2075696e743936476f7665726e6f72416c7068613a3a70726f706f73653a206f766572666c6f77206f6e206d616a6f7269747950657263656e7461676520636f6d7075746174696f6e476f7665726e6f72416c7068613a3a2073746174653a206469766973696f6e206572726f72476f7665726e6f72416c7068613a3a70726f706f73653a20737461727420626c6f636b206e756d626572206f766572666c6f77476f7665726e6f72416c7068613a3a70726f706f73616c5468726573686f6c643a20626c6f636b206e756d626572206f766572666c6f77476f7665726e6f72416c7068613a3a70726f706f73653a20737461727454696d65206f766572666c6f77a365627a7a72315820149c8298370b1aeec0d4e5ba58997433b4feccdb0e3db22c089160e1dfabbaa76c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c8063760fbc13116100f7578063d33219b411610095578063deaaa7cc11610064578063deaaa7cc146104ce578063e23a9a52146104e3578063e265379014610510578063fe0d94c114610525576101c2565b8063d33219b414610464578063da35c66414610479578063da95691a1461048e578063ddf0b009146104ae576101c2565b8063a3f4df7e116100d1578063a3f4df7e14610403578063b2b0d91f14610425578063b58131b01461043a578063b9a619611461044f576101c2565b8063760fbc13146103b95780637bdbe4d0146103ce57806391500671146103e3576101c2565b8063328dd9821161016457806340e58ee51161013e57806340e58ee514610335578063452a9320146103555780634634c61f146103775780634cf088d914610397576101c2565b8063328dd982146102c35780633932abb1146102f35780633e4f49e614610308576101c2565b806317977c61116101a057806317977c611461024c57806320606b701461026c57806321f43e421461028157806324bc1a64146102a1576101c2565b8063013cf08b146101c757806302a251a31461020857806315373e3d1461022a575b600080fd5b3480156101d357600080fd5b506101e76101e2366004612c28565b610538565b6040516101ff9c9b9a99989796959493929190613e01565b60405180910390f35b34801561021457600080fd5b5061021d6105d8565b6040516101ff9190613b13565b34801561023657600080fd5b5061024a610245366004612c76565b6105df565b005b34801561025857600080fd5b5061021d610267366004612a71565b6105ee565b34801561027857600080fd5b5061021d610600565b34801561028d57600080fd5b5061024a61029c366004612a97565b610617565b3480156102ad57600080fd5b506102b66106fe565b6040516101ff9190613ec2565b3480156102cf57600080fd5b506102e36102de366004612c28565b610805565b6040516101ff9493929190613ac6565b3480156102ff57600080fd5b5061021d610a94565b34801561031457600080fd5b50610328610323366004612c28565b610a99565b6040516101ff9190613bc1565b34801561034157600080fd5b5061024a610350366004612c28565b610d21565b34801561036157600080fd5b5061036a610ef9565b6040516101ff919061393a565b34801561038357600080fd5b5061024a610392366004612ca6565b610f08565b3480156103a357600080fd5b506103ac61109b565b6040516101ff9190613bb3565b3480156103c557600080fd5b5061024a6110aa565b3480156103da57600080fd5b5061021d6110e6565b3480156103ef57600080fd5b5061024a6103fe366004612a97565b6110eb565b34801561040f57600080fd5b506104186111c0565b6040516101ff9190613bcf565b34801561043157600080fd5b506102b66111f1565b34801561044657600080fd5b506102b6611200565b34801561045b57600080fd5b5061024a6112cd565b34801561047057600080fd5b506103ac611352565b34801561048557600080fd5b5061021d611361565b34801561049a57600080fd5b5061021d6104a9366004612ad1565b611367565b3480156104ba57600080fd5b5061024a6104c9366004612c28565b6119ee565b3480156104da57600080fd5b5061021d611c9e565b3480156104ef57600080fd5b506105036104fe366004612c46565b611caa565b6040516101ff9190613d30565b34801561051c57600080fd5b506102b6611d19565b61024a610533366004612c28565b611d2f565b6005602052600090815260409020805460018201546002830154600390930154919263ffffffff808316936401000000008404909116926001600160601b03600160401b808304821694600160a01b90930482169383831693600160601b8104909316926001600160401b03600160c01b9091048116929082169160ff918104821691600160481b820416906001600160a01b03600160501b909104168c565b610b405b90565b6105ea338383611f11565b5050565b60066020526000908152604090205481565b60405161060c90613924565b604051809103902081565b6002546001600160a01b0316331461064a5760405162461bcd60e51b815260040161064190613c10565b60405180910390fd5b600080546040516001600160a01b0390911691630825f38f9183919061067490879060200161393a565b604051602081830303815290604052856040518563ffffffff1660e01b81526004016106a39493929190613970565b600060405180830381600087803b1580156106bd57600080fd5b505af11580156106d1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106f99190810190612bf4565b505050565b600080600160009054906101000a90046001600160a01b03166001600160a01b0316632522d7ba61074a600143036040518060600160405280603181526020016141446031913961217c565b426040518363ffffffff1660e01b8152600401610768929190613eb4565b60206040518083038186803b15801561078057600080fd5b505afa158015610794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107b89190810190612d0e565b600454604080516060810190915260328082529293506064926107ee926001600160601b031691859161417560208301396121ac565b6001600160601b0316816107fe57fe5b0491505090565b6060806060806000600560008781526020019081526020016000209050806004018160050182600601836007018380548060200260200160405190810160405280929190818152602001828054801561088757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610869575b50505050509350828054806020026020016040519081016040528092919081815260200182805480156108d957602002820191906000526020600020905b8154815260200190600101908083116108c5575b5050505050925081805480602002602001604051908101604052809291908181526020016000905b828210156109ac5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156109985780601f1061096d57610100808354040283529160200191610998565b820191906000526020600020905b81548152906001019060200180831161097b57829003601f168201915b505050505081526020019060010190610901565b50505050915080805480602002602001604051908101604052809291908181526020016000905b82821015610a7e5760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610a6a5780601f10610a3f57610100808354040283529160200191610a6a565b820191906000526020600020905b815481529060010190602001808311610a4d57829003601f168201915b5050505050815260200190600101906109d3565b5050505090509450945094509450509193509193565b600190565b60008160035410158015610aad5750600082115b610ac95760405162461bcd60e51b815260040161064190613c20565b60008281526005602052604090206003810154600160401b900460ff1615610af5576002915050610d1c565b600181015463ffffffff164311610b10576000915050610d1c565b6001810154640100000000900463ffffffff164311610b33576001915050610d1c565b600181015460408051606081019091526037808252600092610b78926001600160601b03600160401b8304811693600160a01b90930416916141c96020830139612215565b90506000610ba082606460405180606001604052806025815260200161424260259139612248565b9050610bda816004600c9054906101000a90046001600160601b03166040518060600160405280603f81526020016140ad603f91396121ac565b60018401549091506001600160601b03808316600160401b90920416111580610c13575060028301546001600160601b03908116908316105b15610c245760039350505050610d1c565b6002830154600160c01b90046001600160401b0316610c495760049350505050610d1c565b6003830154600160481b900460ff1615610c695760079350505050610d1c565b6002830154600054604080516360d143f160e11b81529051610d0293600160c01b90046001600160401b0316926001600160a01b03169163c1a287e2916004808301926020929190829003018186803b158015610cc557600080fd5b505afa158015610cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cfd9190810190612bd6565b61229a565b4210610d145760069350505050610d1c565b600593505050505b919050565b6000610d2c82610a99565b90506007816007811115610d3c57fe5b1415610d5a5760405162461bcd60e51b815260040161064190613cf0565b60008281526005602052604090206002546001600160a01b03163314610d925760405162461bcd60e51b815260040161064190613c90565b60038101805468ff00000000000000001916600160401b17905560005b6004820154811015610ebc576000546004830180546001600160a01b039092169163591fcdfe919084908110610de157fe5b6000918252602090912001546005850180546001600160a01b039092169185908110610e0957fe5b9060005260206000200154856006018581548110610e2357fe5b90600052602060002001866007018681548110610e3c57fe5b906000526020600020018760020160189054906101000a90046001600160401b03166040518663ffffffff1660e01b8152600401610e7e959493929190613a4e565b600060405180830381600087803b158015610e9857600080fd5b505af1158015610eac573d6000803e3d6000fd5b505060019092019150610daf9050565b507f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c83604051610eec9190613b13565b60405180910390a1505050565b6002546001600160a01b031681565b6000604051610f1690613924565b604080519182900382208282019091526015825274536f7672796e20476f7665726e6f7220416c70686160581b6020909201919091527fddf6fbf241d6c602c276b8332aecac376ff7e0ef2276d109c25930e6911ca2bd610f756122bf565b30604051602001610f899493929190613b21565b6040516020818303038152906040528051906020012090506000604051610faf9061392f565b604051908190038120610fc89189908990602001613b56565b60405160208183030381529060405280519060200120905060008282604051602001610ff59291906138f3565b6040516020818303038152906040528051906020012090506000600182888888604051600081526020016040526040516110329493929190613b7e565b6020604051602081039080840390855afa158015611054573d6000803e3d6000fd5b505050602060405103519050611069816122c3565b6110855760405162461bcd60e51b815260040161064190613cd0565b611090818a8a611f11565b505050505050505050565b6001546001600160a01b031681565b6002546001600160a01b031633146110d45760405162461bcd60e51b815260040161064190613d20565b600280546001600160a01b0319169055565b600a90565b6002546001600160a01b031633146111155760405162461bcd60e51b815260040161064190613c50565b600080546040516001600160a01b0390911691633a66f9019183919061113f90879060200161393a565b604051602081830303815290604052856040518563ffffffff1660e01b815260040161116e9493929190613970565b602060405180830381600087803b15801561118857600080fd5b505af115801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106f99190810190612bd6565b60405180604001604052806015815260200174536f7672796e20476f7665726e6f7220416c70686160581b81525081565b6004546001600160601b031681565b600080600160009054906101000a90046001600160a01b03166001600160a01b0316632522d7ba61124c6001430360405180606001604052806037815260200161429a6037913961217c565b426040518363ffffffff1660e01b815260040161126a929190613eb4565b60206040518083038186803b15801561128257600080fd5b505afa158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112ba9190810190612d0e565b905060646001600160601b0382166107fe565b6002546001600160a01b031633146112f75760405162461bcd60e51b815260040161064190613be0565b6000805460408051630e18b68160e01b815290516001600160a01b0390921692630e18b6819260048084019382900301818387803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b50505050565b6000546001600160a01b031681565b60035481565b600080611372611200565b600180549192506001600160601b038316916001600160a01b03169063836eebee9033906113a19043906122fc565b426040518463ffffffff1660e01b81526004016113c093929190613948565b60206040518083038186803b1580156113d857600080fd5b505afa1580156113ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114109190810190612d0e565b6001600160601b0316116114365760405162461bcd60e51b815260040161064190613cc0565b85518751148015611448575084518751145b8015611455575083518751145b6114715760405162461bcd60e51b815260040161064190613c80565b865161148f5760405162461bcd60e51b815260040161064190613cb0565b6114976110e6565b875111156114b75760405162461bcd60e51b815260040161064190613c60565b3360009081526006602052604090205480156115345760006114d882610a99565b905060018160078111156114e857fe5b14156115065760405162461bcd60e51b815260040161064190613ce0565b600081600781111561151457fe5b14156115325760405162461bcd60e51b815260040161064190613c40565b505b600061154243610cfd610a94565b9050600061155282610cfd6105d8565b60038054600101905590506115656124aa565b604051806102000160405280600354815260200161159b856040518060600160405280603381526020016142676033913961217c565b63ffffffff1681526020016115c8846040518060600160405280603181526020016141136031913961217c565b63ffffffff16815260200160006001600160601b0316815260200160006001600160601b0316815260200161162b600460009054906101000a90046001600160601b031688604051806060016040528060368152602001614077603691396121ac565b6001600160601b031681526020016116716004600c9054906101000a90046001600160601b031688604051806080016040528060428152602001614200604291396121ac565b6001600160601b0316815260200160006001600160401b031681526020016116b1426040518060600160405280602a81526020016142d1602a9139612324565b6001600160401b03168152602001600015158152602001600015158152602001336001600160a01b031681526020018c81526020018b81526020018a81526020018981525090508060056000836000015181526020019081526020016000206000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555060408201518160010160046101000a81548163ffffffff021916908363ffffffff16021790555060608201518160010160086101000a8154816001600160601b0302191690836001600160601b0316021790555060808201518160010160146101000a8154816001600160601b0302191690836001600160601b0316021790555060a08201518160020160006101000a8154816001600160601b0302191690836001600160601b0316021790555060c082015181600201600c6101000a8154816001600160601b0302191690836001600160601b0316021790555060e08201518160020160186101000a8154816001600160401b0302191690836001600160401b031602179055506101008201518160030160006101000a8154816001600160401b0302191690836001600160401b031602179055506101208201518160030160086101000a81548160ff0219169083151502179055506101408201518160030160096101000a81548160ff02191690831515021790555061016082015181600301600a6101000a8154816001600160a01b0302191690836001600160a01b03160217905550610180820151816004019080519060200190611904929190612530565b506101a08201518051611921916005840191602090910190612595565b506101c0820151805161193e9160068401916020909101906125dc565b506101e0820151805161195b916007840191602090910190612635565b509050508060000151600660008361016001516001600160a01b03166001600160a01b03168152602001908152602001600020819055507f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e08160000151338d8d8d8d89898f6040516119d599989796959493929190613d3e565b60405180910390a1519450505050505b95945050505050565b60046119f982610a99565b6007811115611a0457fe5b14611a215760405162461bcd60e51b815260040161064190613bf0565b600081815260056020908152604080832083548251630d48571f60e31b81529251919493611a7a9342936001600160a01b0390931692636a42b8f892600480840193919291829003018186803b158015610cc557600080fd5b905060005b6004830154811015611c2257611c1a836004018281548110611a9d57fe5b6000918252602090912001546005850180546001600160a01b039092169184908110611ac557fe5b9060005260206000200154856006018481548110611adf57fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611b6d5780601f10611b4257610100808354040283529160200191611b6d565b820191906000526020600020905b815481529060010190602001808311611b5057829003601f168201915b5050505050866007018581548110611b8157fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611c0f5780601f10611be457610100808354040283529160200191611c0f565b820191906000526020600020905b815481529060010190602001808311611bf257829003601f168201915b50505050508661234b565b600101611a7f565b50611c45816040518060600160405280602281526020016141a760229139612324565b8260020160186101000a8154816001600160401b0302191690836001600160401b031602179055507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda28928382604051610eec929190613de6565b60405161060c9061392f565b611cb261268e565b5060008281526005602090815260408083206001600160a01b03851684526008018252918290208251606081018452905460ff80821615158352610100820416151592820192909252620100009091046001600160601b0316918101919091525b92915050565b600454600160601b90046001600160601b031681565b6005611d3a82610a99565b6007811115611d4557fe5b14611d625760405162461bcd60e51b815260040161064190613c00565b600081815260056020526040812060038101805469ff0000000000000000001916600160481b179055905b6004820154811015611ed5576000546005830180546001600160a01b0390921691630825f38f919084908110611dbf57fe5b9060005260206000200154846004018481548110611dd957fe5b6000918252602090912001546005860180546001600160a01b039092169186908110611e0157fe5b9060005260206000200154866006018681548110611e1b57fe5b90600052602060002001876007018781548110611e3457fe5b906000526020600020018860020160189054906101000a90046001600160401b03166040518763ffffffff1660e01b8152600401611e76959493929190613a4e565b6000604051808303818588803b158015611e8f57600080fd5b505af1158015611ea3573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052611ecc9190810190612bf4565b50600101611d8d565b507f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f82604051611f059190613b13565b60405180910390a15050565b6001611f1c83610a99565b6007811115611f2757fe5b14611f445760405162461bcd60e51b815260040161064190613d00565b60008281526005602090815260408083206001600160a01b038716845260088101909252909120805460ff1615611f8d5760405162461bcd60e51b815260040161064190613c30565b600180549083015460038401546040516341b775f760e11b81526000936001600160a01b03169263836eebee92611fd9928b9263ffffffff16916001600160401b031690600401613a9e565b60206040518083038186803b158015611ff157600080fd5b505afa158015612005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120299190810190612d0e565b905083156120985761206b8360010160089054906101000a90046001600160601b0316826040518060600160405280602781526020016140ec60279139612215565b8360010160086101000a8154816001600160601b0302191690836001600160601b031602179055506120fb565b6120d28360010160149054906101000a90046001600160601b0316826040518060600160405280602781526020016140ec60279139612215565b8360010160146101000a8154816001600160601b0302191690836001600160601b031602179055505b8154600160ff199091161761ff00191661010085151502176dffffffffffffffffffffffff00001916620100006001600160601b038316021782556040517f877856338e13f63d0c36822ff0ef736b80934cd90574a3a5bc9262c39d217c469061216c9088908890889086906139bf565b60405180910390a1505050505050565b60008164010000000084106121a45760405162461bcd60e51b81526004016106419190613bcf565b509192915050565b60006001600160601b0384166121c45750600061220e565b8383026001600160601b0380851690808716908316816121e057fe5b046001600160601b031614839061220a5760405162461bcd60e51b81526004016106419190613bcf565b5090505b9392505050565b6000838301826001600160601b03808716908316101561220a5760405162461bcd60e51b81526004016106419190613bcf565b6000816001600160601b0384166122725760405162461bcd60e51b81526004016106419190613bcf565b506000836001600160601b0316856001600160601b03168161229057fe5b0495945050505050565b60008282018381101561220e5760405162461bcd60e51b815260040161064190613c70565b4690565b600073dcc703c0e500b653ca82273b7bfad8045d85a4706001600160a01b03831614801590611d135750506001600160a01b0316151590565b60008282111561231e5760405162461bcd60e51b815260040161064190613d10565b50900390565b600081600160401b84106121a45760405162461bcd60e51b81526004016106419190613bcf565b6000546040516001600160a01b039091169063f2b065379061237990889088908890889088906020016139f4565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016123ab9190613b13565b60206040518083038186803b1580156123c357600080fd5b505afa1580156123d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123fb9190810190612bb8565b156124185760405162461bcd60e51b815260040161064190613ca0565b600054604051633a66f90160e01b81526001600160a01b0390911690633a66f9019061245090889088908890889088906004016139f4565b602060405180830381600087803b15801561246a57600080fd5b505af115801561247e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124a29190810190612bd6565b505050505050565b604080516102008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082018390526101208201839052610140820183905261016082019290925261018081018290526101a081018290526101c081018290526101e081019190915290565b828054828255906000526020600020908101928215612585579160200282015b8281111561258557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612550565b506125919291506126ae565b5090565b8280548282559060005260206000209081019282156125d0579160200282015b828111156125d05782518255916020019190600101906125b5565b506125919291506126d2565b828054828255906000526020600020908101928215612629579160200282015b8281111561262957825180516126199184916020909101906126ec565b50916020019190600101906125fc565b50612591929150612759565b828054828255906000526020600020908101928215612682579160200282015b8281111561268257825180516126729184916020909101906126ec565b5091602001919060010190612655565b5061259192915061277c565b604080516060810182526000808252602082018190529181019190915290565b6105dc91905b808211156125915780546001600160a01b03191681556001016126b4565b6105dc91905b8082111561259157600081556001016126d8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061272d57805160ff19168380011785556125d0565b828001600101855582156125d057918201828111156125d05782518255916020019190600101906125b5565b6105dc91905b80821115612591576000612773828261279f565b5060010161275f565b6105dc91905b80821115612591576000612796828261279f565b50600101612782565b50805460018160011615610100020316600290046000825580601f106127c557506127e3565b601f0160209004906000526020600020908101906127e391906126d2565b50565b8035611d138161403e565b600082601f83011261280257600080fd5b813561281561281082613ef6565b613ed0565b9150818183526020840193506020810190508385602084028201111561283a57600080fd5b60005b83811015612866578161285088826127e6565b845250602092830192919091019060010161283d565b5050505092915050565b600082601f83011261288157600080fd5b813561288f61281082613ef6565b81815260209384019390925082018360005b8381101561286657813586016128b788826129c6565b84525060209283019291909101906001016128a1565b600082601f8301126128de57600080fd5b81356128ec61281082613ef6565b81815260209384019390925082018360005b83811015612866578135860161291488826129c6565b84525060209283019291909101906001016128fe565b600082601f83011261293b57600080fd5b813561294961281082613ef6565b9150818183526020840193506020810190508385602084028201111561296e57600080fd5b60005b83811015612866578161298488826129b0565b8452506020928301929190910190600101612971565b8035611d1381614052565b8051611d1381614052565b8035611d138161405b565b8051611d138161405b565b600082601f8301126129d757600080fd5b81356129e561281082613f16565b91508082526020830160208301858383011115612a0157600080fd5b612a0c838284613ff2565b50505092915050565b600082601f830112612a2657600080fd5b8151612a3461281082613f16565b91508082526020830160208301858383011115612a5057600080fd5b612a0c838284613ffe565b8035611d1381614064565b8051611d138161406d565b600060208284031215612a8357600080fd5b6000612a8f84846127e6565b949350505050565b60008060408385031215612aaa57600080fd5b6000612ab685856127e6565b9250506020612ac7858286016129b0565b9150509250929050565b600080600080600060a08688031215612ae957600080fd5b85356001600160401b03811115612aff57600080fd5b612b0b888289016127f1565b95505060208601356001600160401b03811115612b2757600080fd5b612b338882890161292a565b94505060408601356001600160401b03811115612b4f57600080fd5b612b5b888289016128cd565b93505060608601356001600160401b03811115612b7757600080fd5b612b8388828901612870565b92505060808601356001600160401b03811115612b9f57600080fd5b612bab888289016129c6565b9150509295509295909350565b600060208284031215612bca57600080fd5b6000612a8f84846129a5565b600060208284031215612be857600080fd5b6000612a8f84846129bb565b600060208284031215612c0657600080fd5b81516001600160401b03811115612c1c57600080fd5b612a8f84828501612a15565b600060208284031215612c3a57600080fd5b6000612a8f84846129b0565b60008060408385031215612c5957600080fd5b6000612c6585856129b0565b9250506020612ac7858286016127e6565b60008060408385031215612c8957600080fd5b6000612c9585856129b0565b9250506020612ac78582860161299a565b600080600080600060a08688031215612cbe57600080fd5b6000612cca88886129b0565b9550506020612cdb8882890161299a565b9450506040612cec88828901612a5b565b9350506060612cfd888289016129b0565b9250506080612bab888289016129b0565b600060208284031215612d2057600080fd5b6000612a8f8484612a66565b6000612d388383612d67565b505060200190565b600061220e8383612f09565b6000612d388383612eef565b612d6181613fa9565b82525050565b612d6181613f5c565b6000612d7b82613f4f565b612d858185613f53565b9350612d9083613f3d565b8060005b83811015612dbe578151612da88882612d2c565b9750612db383613f3d565b925050600101612d94565b509495945050505050565b6000612dd482613f4f565b612dde8185613f53565b935083602082028501612df085613f3d565b8060005b85811015612e2a5784840389528151612e0d8582612d40565b9450612e1883613f3d565b60209a909a0199925050600101612df4565b5091979650505050505050565b6000612e4282613f4f565b612e4c8185613f53565b935083602082028501612e5e85613f3d565b8060005b85811015612e2a5784840389528151612e7b8582612d40565b9450612e8683613f3d565b60209a909a0199925050600101612e62565b6000612ea382613f4f565b612ead8185613f53565b9350612eb883613f3d565b8060005b83811015612dbe578151612ed08882612d4c565b9750612edb83613f3d565b925050600101612ebc565b612d6181613f67565b612d61816105dc565b612d61612f04826105dc565b6105dc565b6000612f1482613f4f565b612f1e8185613f53565b9350612f2e818560208601613ffe565b612f378161402a565b9093019392505050565b600081546001811660008114612f5e5760018114612f8457612fc3565b607f6002830416612f6f8187613f53565b60ff1984168152955050602085019250612fc3565b60028204612f928187613f53565b9550612f9d85613f43565b60005b82811015612fbc57815488820152600190910190602001612fa0565b8701945050505b505092915050565b612d6181613fb0565b612d6181613fbb565b612d6181613fc6565b6000612ff3603983613f53565b7f476f7665726e6f72416c7068613a3a5f5f61636365707441646d696e3a20736581527f6e646572206d75737420626520676f7620677561726469616e00000000000000602082015260400192915050565b6000613052604483613f53565b7f476f7665726e6f72416c7068613a3a71756575653a2070726f706f73616c206381527f616e206f6e6c79206265207175657565642069662069742069732073756363656020820152631959195960e21b604082015260600192915050565b60006130be604583613f53565b7f476f7665726e6f72416c7068613a3a657865637574653a2070726f706f73616c81527f2063616e206f6e6c7920626520657865637574656420696620697420697320716020820152641d595d595960da1b604082015260600192915050565b600061312b600283610d1c565b61190160f01b815260020192915050565b6000613149604c83613f53565b7f476f7665726e6f72416c7068613a3a5f5f6578656375746553657454696d656c81527f6f636b50656e64696e6741646d696e3a2073656e646572206d7573742062652060208201526b33b7bb1033bab0b93234b0b760a11b604082015260600192915050565b60006131bd601883613f53565b7f73657450656e64696e6741646d696e2861646472657373290000000000000000815260200192915050565b60006131f6602983613f53565b7f476f7665726e6f72416c7068613a3a73746174653a20696e76616c69642070728152681bdc1bdcd85b081a5960ba1b602082015260400192915050565b6000613241602d83613f53565b7f476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f7465722081526c185b1c9958591e481d9bdd1959609a1b602082015260400192915050565b6000613290605983613f53565b7f476f7665726e6f72416c7068613a3a70726f706f73653a206f6e65206c69766581527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60208201527f20616c72656164792070656e64696e672070726f706f73616c00000000000000604082015260600192915050565b6000613315604a83613f53565b7f476f7665726e6f72416c7068613a3a5f5f717565756553657454696d656c6f6381527f6b50656e64696e6741646d696e3a2073656e646572206d75737420626520676f6020820152693b1033bab0b93234b0b760b11b604082015260600192915050565b6000613387602883613f53565b7f476f7665726e6f72416c7068613a3a70726f706f73653a20746f6f206d616e7981526720616374696f6e7360c01b602082015260400192915050565b60006133d1601183613f53565b706164646974696f6e206f766572666c6f7760781b815260200192915050565b60006133fe604383610d1c565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000613469602783610d1c565b7f42616c6c6f742875696e743235362070726f706f73616c49642c626f6f6c20738152667570706f72742960c81b602082015260270192915050565b60006134b2604483613f53565b7f476f7665726e6f72416c7068613a3a70726f706f73653a2070726f706f73616c81527f2066756e6374696f6e20696e666f726d6174696f6e206172697479206d69736d6020820152630c2e8c6d60e31b604082015260600192915050565b600061351e602e83613f53565b7f476f7665726e6f72416c7068613a3a63616e63656c3a2073656e64657220697381526d3713ba10309033bab0b93234b0b760911b602082015260400192915050565b600061356e604483613f53565b7f476f7665726e6f72416c7068613a3a5f71756575654f725265766572743a207081527f726f706f73616c20616374696f6e20616c7265616479207175657565642061746020820152632065746160e01b604082015260600192915050565b60006135da602c83613f53565b7f476f7665726e6f72416c7068613a3a70726f706f73653a206d7573742070726f81526b7669646520616374696f6e7360a01b602082015260400192915050565b6000613628603f83613f53565b7f476f7665726e6f72416c7068613a3a70726f706f73653a2070726f706f73657281527f20766f7465732062656c6f772070726f706f73616c207468726573686f6c6400602082015260400192915050565b6000613687602f83613f53565b7f476f7665726e6f72416c7068613a3a63617374566f746542795369673a20696e81526e76616c6964207369676e617475726560881b602082015260400192915050565b60006136d8605883613f53565b7f476f7665726e6f72416c7068613a3a70726f706f73653a206f6e65206c69766581527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60208201527f20616c7265616479206163746976652070726f706f73616c0000000000000000604082015260600192915050565b600061375d603683613f53565b7f476f7665726e6f72416c7068613a3a63616e63656c3a2063616e6e6f742063618152751b98d95b08195e1958dd5d1959081c1c9bdc1bdcd85b60521b602082015260400192915050565b60006137b5602a83613f53565b7f476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f74696e67815269081a5cc818db1bdcd95960b21b602082015260400192915050565b6000613801601583613f53565b747375627472616374696f6e20756e646572666c6f7760581b815260200192915050565b6000613832603683613f53565b7f476f7665726e6f72416c7068613a3a5f5f61626469636174653a2073656e6465815275391036bab9ba1031329033b7bb1033bab0b93234b0b760511b602082015260400192915050565b8051606083019061388e8482612ee6565b5060208201516138a16020850182612ee6565b50604082015161134c60408501826138ea565b612d6181613fd1565b612d6181613f82565b612d6181613fdc565b612d6181613f8b565b612d6181613f97565b612d6181613fe7565b612d6181613f9d565b60006138fe8261311e565b915061390a8285612ef8565b60208201915061391a8284612ef8565b5060200192915050565b6000611d13826133f1565b6000611d138261345c565b60208101611d138284612d67565b606081016139568286612d58565b6139636020830185612eef565b612a8f6040830184612eef565b60a0810161397e8287612d67565b61398b6020830186612fdd565b818103604083015261399c816131b0565b905081810360608301526139b08185612f09565b90506119e56080830184612eef565b608081016139cd8287612d67565b6139da6020830186612eef565b6139e76040830185612ee6565b6119e560608301846138e1565b60a08101613a028288612d67565b613a0f6020830187612eef565b8181036040830152613a218186612f09565b90508181036060830152613a358185612f09565b9050613a446080830184612eef565b9695505050505050565b60a08101613a5c8288612d67565b613a696020830187612eef565b8181036040830152613a7b8186612f41565b90508181036060830152613a8f8185612f41565b9050613a4460808301846138c6565b60608101613aac8286612d67565b613ab960208301856138b4565b612a8f60408301846138c6565b60808082528101613ad78187612d70565b90508181036020830152613aeb8186612e98565b90508181036040830152613aff8185612e37565b90508181036060830152613a448184612dc9565b60208101611d138284612eef565b60808101613b2f8287612eef565b613b3c6020830186612eef565b613b496040830185612eef565b6119e56060830184612d67565b60608101613b648286612eef565b613b716020830185612eef565b612a8f6040830184612ee6565b60808101613b8c8287612eef565b613b9960208301866138d8565b613ba66040830185612eef565b6119e56060830184612eef565b60208101611d138284612fcb565b60208101611d138284612fd4565b6020808252810161220e8184612f09565b60208082528101611d1381612fe6565b60208082528101611d1381613045565b60208082528101611d13816130b1565b60208082528101611d138161313c565b60208082528101611d13816131e9565b60208082528101611d1381613234565b60208082528101611d1381613283565b60208082528101611d1381613308565b60208082528101611d138161337a565b60208082528101611d13816133c4565b60208082528101611d13816134a5565b60208082528101611d1381613511565b60208082528101611d1381613561565b60208082528101611d13816135cd565b60208082528101611d138161361b565b60208082528101611d138161367a565b60208082528101611d13816136cb565b60208082528101611d1381613750565b60208082528101611d13816137a8565b60208082528101611d13816137f4565b60208082528101611d1381613825565b60608101611d13828461387d565b6101208101613d4d828c612eef565b613d5a602083018b612d58565b8181036040830152613d6c818a612d70565b90508181036060830152613d808189612e98565b90508181036080830152613d948188612e37565b905081810360a0830152613da88187612dc9565b9050613db760c0830186612eef565b613dc460e0830185612eef565b818103610100830152613dd78184612f09565b9b9a5050505050505050505050565b60408101613df48285612eef565b61220e6020830184612eef565b6101808101613e10828f612eef565b613e1d602083018e6138bd565b613e2a604083018d6138bd565b613e37606083018c6138ea565b613e44608083018b6138ea565b613e5160a083018a6138ea565b613e5e60c08301896138ea565b613e6b60e08301886138cf565b613e796101008301876138cf565b613e87610120830186612ee6565b613e95610140830185612ee6565b613ea3610160830184612d67565b9d9c50505050505050505050505050565b60408101613df482856138bd565b60208101611d1382846138ea565b6040518181016001600160401b0381118282101715613eee57600080fd5b604052919050565b60006001600160401b03821115613f0c57600080fd5b5060209081020190565b60006001600160401b03821115613f2c57600080fd5b506020601f91909101601f19160190565b60200190565b60009081526020902090565b5190565b90815260200190565b6000611d1382613f76565b151590565b80610d1c81614034565b6001600160a01b031690565b63ffffffff1690565b6001600160401b031690565b60ff1690565b6001600160601b031690565b6000611d13825b6000611d1382613f5c565b6000611d1382613f6c565b6000611d13826105dc565b6000611d1382613f82565b6000611d1382613f8b565b6000611d1382613f9d565b82818337506000910152565b60005b83811015614019578181015183820152602001614001565b8381111561134c5750506000910152565b601f01601f191690565b600881106127e357fe5b61404781613f5c565b81146127e357600080fd5b61404781613f67565b614047816105dc565b61404781613f97565b61404781613f9d56fe476f7665726e6f72416c7068613a3a70726f706f73653a206f766572666c6f77206f6e2071756f72756d20636f6d7075746174696f6e476f7665726e6f72416c7068613a3a2073746174653a20746f74616c566f746573202a206d616a6f7269747950657263656e74616765203e2075696e743936476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f7465206f766572666c6f77476f7665726e6f72416c7068613a3a70726f706f73653a20656e6420626c6f636b206e756d626572206f766572666c6f77476f7665726e6f72416c7068613a3a71756f72756d566f7465733a20626c6f636b206e756d626572206f766572666c6f77476f7665726e6f72416c7068613a3a71756f72756d566f7465733a6d756c7469706c69636174696f6e206f766572666c6f77476f7665726e6f72416c7068613a3a71756575653a20455441206f766572666c6f77476f7665726e6f72416c7068613a3a2073746174653a20666f72566f746573202b20616761696e7374566f746573203e2075696e743936476f7665726e6f72416c7068613a3a70726f706f73653a206f766572666c6f77206f6e206d616a6f7269747950657263656e7461676520636f6d7075746174696f6e476f7665726e6f72416c7068613a3a2073746174653a206469766973696f6e206572726f72476f7665726e6f72416c7068613a3a70726f706f73653a20737461727420626c6f636b206e756d626572206f766572666c6f77476f7665726e6f72416c7068613a3a70726f706f73616c5468726573686f6c643a20626c6f636b206e756d626572206f766572666c6f77476f7665726e6f72416c7068613a3a70726f706f73653a20737461727454696d65206f766572666c6f77a365627a7a72315820149c8298370b1aeec0d4e5ba58997433b4feccdb0e3db22c089160e1dfabbaa76c6578706572696d656e74616cf564736f6c63430005110040",
  "devdoc": {
    "methods": {
      "__acceptAdmin()": {
        "details": "Timelock wrapper w/ sender check."
      },
      "__executeSetTimelockPendingAdmin(address,uint256)": {
        "details": "Timelock wrapper w/ sender check."
      },
      "__queueSetTimelockPendingAdmin(address,uint256)": {
        "details": "Timelock wrapper w/ sender check."
      },
      "cancel(uint256)": {
        "params": {
          "proposalId": "Proposal index to access the list proposals[] from storage."
        }
      },
      "castVote(uint256,bool)": {
        "params": {
          "proposalId": "Proposal index to access the list proposals[] from storage.",
          "support": "Vote value, yes or no."
        }
      },
      "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)": {
        "details": "The signature needs to be broken up into 3 parameters, known as v, r and s: const r = '0x' + sig.substring(2).substring(0, 64); const s = '0x' + sig.substring(2).substring(64, 128); const v = '0x' + sig.substring(2).substring(128, 130);",
        "params": {
          "proposalId": "Proposal index to access the list proposals[] from storage.",
          "r": "Half of the ECDSA signature pair.",
          "s": "Half of the ECDSA signature pair.",
          "support": "Vote value, yes or no.",
          "v": "The recovery byte of the signature."
        }
      },
      "execute(uint256)": {
        "params": {
          "proposalId": "Proposal index to access the list proposals[] from storage."
        }
      },
      "getActions(uint256)": {
        "params": {
          "proposalId": "Proposal index to access the list proposals[] from storage."
        },
        "return": "Arrays of the 4 call parameters: targets, values, signatures, calldatas."
      },
      "getReceipt(uint256,address)": {
        "params": {
          "proposalId": "Proposal index to access the list proposals[] from storage.",
          "voter": "A governance stakeholder with voting power."
        },
        "return": "The voter receipt of the proposal."
      },
      "propose(address[],uint256[],string[],bytes[],string)": {
        "params": {
          "calldatas": "Array of payloads for the calls on proposal execution.",
          "description": "Text describing the purpose of the proposal.",
          "signatures": "Array of function signatures to call on proposal execution.",
          "targets": "Array of contract addresses to perform proposal execution.",
          "values": "Array of rBTC amounts to send on proposal execution."
        }
      },
      "queue(uint256)": {
        "params": {
          "proposalId": "Proposal index to access the list proposals[] from storage."
        }
      },
      "state(uint256)": {
        "params": {
          "proposalId": "Proposal index to access the list proposals[] from storage."
        },
        "return": "The state of the proposal: Canceled, Pending, Active, Defeated, Succeeded, Executed, Expired."
      }
    },
    "title": "Governance Contract."
  },
  "userdoc": {
    "methods": {
      "__abdicate()": {
        "notice": "Sets guardian address to zero."
      },
      "cancel(uint256)": {
        "notice": "Cancel a proposal by looping and cancelling everyone of its calls."
      },
      "castVote(uint256,bool)": {
        "notice": "Casts a vote by sender."
      },
      "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)": {
        "notice": "Voting with EIP-712 Signatures.     * Voting power can be delegated to any address, and then can be used to vote on proposals. A key benefit to users of by-signature functionality is that they can create a signed vote transaction for free, and have a trusted third-party spend rBTC(or ETH) on gas fees and write it to the blockchain for them.     * The third party in this scenario, submitting the SOV-holder’s signed transaction holds a voting power that is for only a single proposal. The signatory still holds the power to vote on their own behalf in the proposal if the third party has not yet published the signed transaction that was given to them."
      },
      "execute(uint256)": {
        "notice": "Execute a proposal by looping and performing everyone of its calls."
      },
      "getActions(uint256)": {
        "notice": "Get a proposal list of its calls."
      },
      "getReceipt(uint256,address)": {
        "notice": "Get a proposal receipt."
      },
      "proposalMaxOperations()": {
        "notice": "The maximum number of actions that can be included in a proposal."
      },
      "proposalThreshold()": {
        "notice": "The number of votes required in order for a voter to become a proposer."
      },
      "propose(address[],uint256[],string[],bytes[],string)": {
        "notice": "Create a new proposal."
      },
      "queue(uint256)": {
        "notice": "Enqueue a proposal and everyone of its calls."
      },
      "quorumVotes()": {
        "notice": "The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed."
      },
      "state(uint256)": {
        "notice": "Get a proposal state."
      },
      "votingDelay()": {
        "notice": "The delay before voting on a proposal may take place, once proposed."
      },
      "votingPeriod()": {
        "notice": "The duration of voting on a proposal, in blocks."
      }
    },
    "notice": "This is an adapted clone of compound’s governance model. In general, the process is the same: Token holders can make (executable) proposals if they possess enough voting power, vote on proposals during a predefined voting period and in the end evaluate the outcome. If successful, the proposal will be scheduled on the timelock contract. Only after sufficient time passed, it can be executed. A minimum voting power is required for making a proposal as well as a minimum quorum. * Voting power in the Bitocracy: Stakers will receive voting power in the Bitocracy in return for their staking commitment. This voting power is weighted by how much SOV is staked and for how long the staking period is - staking more SOV over longer staking periods results in higher voting power. With this voting power, users can vote for or against any SIP in bitocracy.sovryn.app."
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15540,
        "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
        "label": "timelock",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITimelock)24592"
      },
      {
        "astId": 15542,
        "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
        "label": "staking",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IStaking)17840"
      },
      {
        "astId": 15544,
        "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
        "label": "guardian",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 15546,
        "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
        "label": "proposalCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 15548,
        "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
        "label": "quorumPercentageVotes",
        "offset": 0,
        "slot": "4",
        "type": "t_uint96"
      },
      {
        "astId": 15550,
        "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
        "label": "majorityPercentageVotes",
        "offset": 12,
        "slot": "4",
        "type": "t_uint96"
      },
      {
        "astId": 15611,
        "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
        "label": "proposals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Proposal)15591_storage)"
      },
      {
        "astId": 15615,
        "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
        "label": "latestProposalIds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IStaking)17840": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      },
      "t_contract(ITimelock)24592": {
        "encoding": "inplace",
        "label": "contract ITimelock",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Receipt)15598_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GovernorAlpha.Receipt)",
        "numberOfBytes": "32",
        "value": "t_struct(Receipt)15598_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Proposal)15591_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernorAlpha.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)15591_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)15591_storage": {
        "encoding": "inplace",
        "label": "struct GovernorAlpha.Proposal",
        "members": [
          {
            "astId": 15552,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15554,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "startBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 15556,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "endBlock",
            "offset": 4,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 15558,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "forVotes",
            "offset": 8,
            "slot": "1",
            "type": "t_uint96"
          },
          {
            "astId": 15560,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "againstVotes",
            "offset": 20,
            "slot": "1",
            "type": "t_uint96"
          },
          {
            "astId": 15562,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "quorum",
            "offset": 0,
            "slot": "2",
            "type": "t_uint96"
          },
          {
            "astId": 15564,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "majorityPercentage",
            "offset": 12,
            "slot": "2",
            "type": "t_uint96"
          },
          {
            "astId": 15566,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "eta",
            "offset": 24,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 15568,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 15570,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "canceled",
            "offset": 8,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 15572,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "executed",
            "offset": 9,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 15574,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "proposer",
            "offset": 10,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 15577,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "targets",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 15580,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "values",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 15583,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "signatures",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 15586,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "calldatas",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 15590,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "receipts",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_struct(Receipt)15598_storage)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Receipt)15598_storage": {
        "encoding": "inplace",
        "label": "struct GovernorAlpha.Receipt",
        "members": [
          {
            "astId": 15593,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "hasVoted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 15595,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "support",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 15597,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "votes",
            "offset": 2,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}