{
  "address": "0x43A6e777113508165Ae910f4427524ee57845020",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isHeld",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFeeTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenBonusAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sovBonusAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sovBonusAmountPaid",
          "type": "uint256"
        }
      ],
      "name": "PayTradingFeeToAffiliate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingFeeTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenBonusAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sovBonusAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sovBonusAmountTryingToPaid",
          "type": "uint256"
        }
      ],
      "name": "PayTradingFeeToAffiliateFail",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevModuleContractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newModuleContractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "module",
          "type": "bytes32"
        }
      ],
      "name": "ProtocolModuleContractReplaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "SetAffiliatesReferrer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "alreadySet",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "userNotFirstTrade",
          "type": "bool"
        }
      ],
      "name": "SetAffiliatesReferrerFail",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "SetUserNotFirstTradeFlag",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAffiliatesReferrerTokenFees",
      "type": "event"
    },
    {
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "affiliateFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "affiliateRewardsHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "affiliateTradingTokenFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "affiliatesReferrerBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "affiliatesUserReferrer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowerNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "borrowerOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLoanTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLoanTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationTimestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "borrowingFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowingFeeTokensHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowingFeeTokensPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegatedManagers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeRebatePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feesController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "getAffiliateRewardsHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAffiliateTradingTokenFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "getAffiliatesReferrerBalances",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "referrerTokensList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "referrerTokensBalances",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getAffiliatesReferrerTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "getAffiliatesReferrerTokensList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokensList",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "getAffiliatesTokenRewardsValueInRbtc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rbtcTotalAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAffiliatesUserReferrer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getMinReferralsToPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "getReferralsList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "refList",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserNotFirstTradeFlag",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lenderInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principalTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "owedPerDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "owedTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paidTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedTimestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "lenderOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLoanTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLoanTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationTimestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lendingFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lendingFeeTokensHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lendingFeeTokensPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "liquidationIncentivePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "loanInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "owedPerDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedTimestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "loanParams",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "loanToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minInitialMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maintenanceMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLoanTerm",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loanPoolToUnderlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "loanParamsId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "pendingTradesId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lockedSOVAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "logicTargets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxDisagreement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxSwapSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minReferralsToPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tradingFeeTokenBaseAmount",
          "type": "uint256"
        }
      ],
      "name": "payTradingFeeToAffiliatesReferrer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "referrerBonusSovAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referrerBonusTokenAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "priceFeeds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolTokenHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocolTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rolloverBaseReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rolloverFlexFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "setAffiliatesReferrer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "setUserNotFirstTradeFlag",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sourceBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sovTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sovrynSwapContractRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "specialRebates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "swapsImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tradingFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tradingFeeTokensHeld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tradingFeeTokensPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "underlyingToLoanPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userNotFirstTradeFlag",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAffiliatesReferrerTokenFees",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdrawAllAffiliatesReferrerTokenFees",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "wrbtcToken",
      "outputs": [
        {
          "internalType": "contract IWrbtcERC20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8483a76de3ead84507ee4bb21ba6712d08a7323906e1fec4f3d8f26f479ba95f",
  "receipt": {
    "to": null,
    "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
    "contractAddress": "0x43A6e777113508165Ae910f4427524ee57845020",
    "transactionIndex": 0,
    "gasUsed": "3545099",
    "logsBloom": "0x00000000000020000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000001000000000000000000000000000000000000020000000000000000001a00000000000000000000000000000000400000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa829d4375b9295e12a5e1e079a06b4476ddbac5fff24a014b861929d3d210d2a",
    "transactionHash": "0x8483a76de3ead84507ee4bb21ba6712d08a7323906e1fec4f3d8f26f479ba95f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4578779,
        "transactionHash": "0x8483a76de3ead84507ee4bb21ba6712d08a7323906e1fec4f3d8f26f479ba95f",
        "address": "0x43A6e777113508165Ae910f4427524ee57845020",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000013be55487d37fe3c66ee7305e1e9c1ac85de75ae"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa829d4375b9295e12a5e1e079a06b4476ddbac5fff24a014b861929d3d210d2a"
      }
    ],
    "blockNumber": 4578779,
    "cumulativeGasUsed": "3545099",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9310031b42d2950fea7a6220c73f2cc4",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isHeld\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFeeTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenBonusAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sovBonusAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sovBonusAmountPaid\",\"type\":\"uint256\"}],\"name\":\"PayTradingFeeToAffiliate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFeeTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenBonusAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sovBonusAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sovBonusAmountTryingToPaid\",\"type\":\"uint256\"}],\"name\":\"PayTradingFeeToAffiliateFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevModuleContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newModuleContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"module\",\"type\":\"bytes32\"}],\"name\":\"ProtocolModuleContractReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"SetAffiliatesReferrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"alreadySet\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"userNotFirstTrade\",\"type\":\"bool\"}],\"name\":\"SetAffiliatesReferrerFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SetUserNotFirstTradeFlag\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAffiliatesReferrerTokenFees\",\"type\":\"event\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateRewardsHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateTradingTokenFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliatesReferrerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliatesUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowerNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"borrowerOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRebatePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"getAffiliateRewardsHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAffiliateTradingTokenFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"getAffiliatesReferrerBalances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"referrerTokensList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"referrerTokensBalances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAffiliatesReferrerTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"getAffiliatesReferrerTokensList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensList\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"getAffiliatesTokenRewardsValueInRbtc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rbtcTotalAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAffiliatesUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinReferralsToPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"getReferralsList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"refList\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserNotFirstTradeFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lenderInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principalTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lenderOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationIncentivePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owedPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loanParams\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintenanceMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanTerm\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loanPoolToUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"loanParamsId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pendingTradesId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedSOVAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"logicTargets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDisagreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSwapSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minReferralsToPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeTokenBaseAmount\",\"type\":\"uint256\"}],\"name\":\"payTradingFeeToAffiliatesReferrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerBonusSovAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerBonusTokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rolloverBaseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rolloverFlexFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"setAffiliatesReferrer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setUserNotFirstTradeFlag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sourceBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sovTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sovrynSwapContractRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"specialRebates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapsImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingFeeTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingFeeTokensPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underlyingToLoanPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNotFirstTradeFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAffiliatesReferrerTokenFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawAllAffiliatesReferrerTokenFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wrbtcToken\",\"outputs\":[{\"internalType\":\"contract IWrbtcERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Module: Affiliates upgradable  Storage: from State, functions called from Protocol by delegatecall\",\"methods\":{\"getAffiliateRewardsHeld(address)\":{\"params\":{\"referrer\":\"The address of the referrer.\"},\"return\":\"The affiliateRewardsHeld mapping value by referrer key.\"},\"getAffiliateTradingTokenFeePercent()\":{\"details\":\"It returns a value defined at protocol storage (State.sol)\",\"return\":\"The percentage of fee share w/ 18 decimals.\"},\"getAffiliatesReferrerBalances(address)\":{\"params\":{\"referrer\":\"The address of the referrer.\"},\"return\":\"referrerTokensList The array of available tokens (keys).referrerTokensBalances The array of token balances (values).\"},\"getAffiliatesReferrerTokenBalance(address,address)\":{\"params\":{\"referrer\":\"The address of the referrer.\",\"token\":\"The address of the token to get balance for.\"},\"return\":\"The affiliatesReferrerBalances mapping value by referrer and token keys.\"},\"getAffiliatesReferrerTokensList(address)\":{\"params\":{\"referrer\":\"The address of a given referrer.\"},\"return\":\"tokensList The list of available tokens.\"},\"getAffiliatesTokenRewardsValueInRbtc(address)\":{\"details\":\"Get all token rewards estimation value in rbtc.\",\"params\":{\"referrer\":\"Address of referrer.\"},\"return\":\"The value estimation in rbtc.\"},\"getAffiliatesUserReferrer(address)\":{\"params\":{\"user\":\"The address of the user.\"},\"return\":\"The address on affiliatesUserReferrer mapping value by user key.\"},\"getMinReferralsToPayout()\":{\"details\":\"It returns a value defined at protocol storage (State.sol)\",\"return\":\"The minimum number of referrals set by Protocol.\"},\"getReferralsList(address)\":{\"params\":{\"referrer\":\"The address of a given referrer.\"},\"return\":\"The referralsList mapping value by referrer.\"},\"getUserNotFirstTradeFlag(address)\":{\"params\":{\"user\":\"The address of a given user.\"},\"return\":\"The userNotFirstTradeFlag mapping value by user.\"},\"initialize(address)\":{\"details\":\"This contract is designed as a module, this way logic can be  expanded and upgraded w/o losing storage that is kept in the protocol (State.sol)  initialize() is used to register in the proxy external (module) functions  to be called via the proxy.\",\"params\":{\"target\":\"The address of a new logic implementation.\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payTradingFeeToAffiliatesReferrer(address,address,address,uint256)\":{\"details\":\"Affiliates program has 2 kind of rewards:    1. x% based on the fee of the token that is traded (in form of the token itself).    2. x% based on the fee of the token that is traded (in form of SOV).  Both are paid in this function.Actually they are not paid, but just holded by protocol until user claims them by  actively calling withdrawAffiliatesReferrerTokenFees() function,  and/or when unvesting lockedSOV.To be precise, what this function does is updating the registers of the rewards  for the referrer including the assignment of the SOV tokens as rewards to the  referrer's vesting contract.\",\"params\":{\"referrer\":\"The address of the referrer.\",\"token\":\"The address of the token in which the trading/borrowing fee was paid.\",\"trader\":\"The address of the trader.\",\"tradingFeeTokenBaseAmount\":\"Total trading fee amount, the base for calculating referrer's fees.\"},\"return\":\"referrerBonusSovAmount The amount of SOV tokens paid to the referrer (through a vesting contract, lockedSOV).referrerBonusTokenAmount The amount of trading tokens paid directly to the referrer.\"},\"setAffiliatesReferrer(address,address)\":{\"params\":{\"referrer\":\"The address of the referrer the user is coming from.\",\"user\":\"The address of the user that is trading on loan pools.\"}},\"setUserNotFirstTradeFlag(address)\":{\"params\":{\"user\":\"The address of a given user.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAffiliatesReferrerTokenFees(address,address,uint256)\":{\"details\":\"Rewards are held by protocol in different tokens coming from trading fees.  Referrer has to claim them one by one for every token with accumulated balance.\",\"params\":{\"amount\":\"The amount of tokens to claim. If greater than balance, just sends balance.\",\"receiver\":\"The address of the withdrawal beneficiary.\",\"token\":\"The address of the token to withdraw.\"}},\"withdrawAllAffiliatesReferrerTokenFees(address)\":{\"details\":\"It's done by looping through its available tokens.\",\"params\":{\"receiver\":\"The address of the withdrawal beneficiary.\"}}},\"title\":\"Affiliates contract.\"},\"userdoc\":{\"methods\":{\"constructor\":\"Void constructor.\",\"getAffiliateRewardsHeld(address)\":{\"notice\":\"Getter to query the reward amount held for a given referrer.\"},\"getAffiliateTradingTokenFeePercent()\":{\"notice\":\"Getter to query the fee share of trading token fee for affiliate program.\"},\"getAffiliatesReferrerBalances(address)\":{\"notice\":\"Get all token balances of a referrer.\"},\"getAffiliatesReferrerTokenBalance(address,address)\":{\"notice\":\"Getter to query the affiliate balance for a given referrer and token.\"},\"getAffiliatesReferrerTokensList(address)\":{\"notice\":\"Get all available tokens at the affiliates program for a given referrer.\"},\"getAffiliatesUserReferrer(address)\":{\"notice\":\"Getter to query the address of referrer for a given user.\"},\"getMinReferralsToPayout()\":{\"notice\":\"Getter to query referral threshold for paying out to the referrer.\"},\"getReferralsList(address)\":{\"notice\":\"Getter to query the referrals coming from a referrer.\"},\"getUserNotFirstTradeFlag(address)\":{\"notice\":\"Getter to query the not-first-trade flag of a user.\"},\"initialize(address)\":{\"notice\":\"Set delegate callable functions by proxy contract.\"},\"payTradingFeeToAffiliatesReferrer(address,address,address,uint256)\":{\"notice\":\"Protocol calls this function to pay the affiliates rewards to a user (referrer).\"},\"setAffiliatesReferrer(address,address)\":{\"notice\":\"Loan pool calls this function to tell affiliates  a user coming from a referrer is trading and should be registered if not yet.  Taking into account some user status flags may lead to the user and referrer  become added or not to the affiliates record.\"},\"setUserNotFirstTradeFlag(address)\":{\"notice\":\"Setter to toggle on the not-first-trade flag of a user.\"},\"withdrawAffiliatesReferrerTokenFees(address,address,uint256)\":{\"notice\":\"Referrer calls this function to receive its reward in a given token.  It will send the other (non-SOV) reward tokens from trading protocol fees,  to the referrer\\u2019s wallet.\"},\"withdrawAllAffiliatesReferrerTokenFees(address)\":{\"notice\":\"Withdraw to msg.sender all token fees for a referrer.\"}},\"notice\":\"Track referrals and reward referrers (affiliates) with tokens.  In-detail specifications are found at https://wiki.sovryn.app/en/community/Affiliates\"}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Affiliates.sol\":\"Affiliates\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/Objects.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./objects/LoanStruct.sol\\\";\\nimport \\\"./objects/LoanParamsStruct.sol\\\";\\nimport \\\"./objects/OrderStruct.sol\\\";\\nimport \\\"./objects/LenderInterestStruct.sol\\\";\\nimport \\\"./objects/LoanInterestStruct.sol\\\";\\n\\n/**\\n * @title Objects contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract inherints and aggregates several structures needed to handle\\n * loans on the protocol.\\n * */\\ncontract Objects is\\n    LoanStruct,\\n    LoanParamsStruct,\\n    OrderStruct,\\n    LenderInterestStruct,\\n    LoanInterestStruct\\n{\\n\\n}\\n\",\"keccak256\":\"0xa30b8887af813997ebb480f0aa296245f9f3bd728382060059aa087cd9ee332c\"},\"contracts/core/State.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./Objects.sol\\\";\\nimport \\\"../mixins/EnumerableAddressSet.sol\\\";\\nimport \\\"../mixins/EnumerableBytes32Set.sol\\\";\\nimport \\\"../openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"../openzeppelin/Ownable.sol\\\";\\nimport \\\"../openzeppelin/SafeMath.sol\\\";\\nimport \\\"../interfaces/IWrbtcERC20.sol\\\";\\nimport \\\"../reentrancy/SharedReentrancyGuard.sol\\\";\\n\\n/**\\n * @title State contract.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage values of the Protocol.\\n * */\\ncontract State is Objects, ReentrancyGuard, SharedReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n    using EnumerableAddressSet for EnumerableAddressSet.AddressSet; // enumerable map of addresses\\n    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set; // enumerable map of bytes32 or addresses\\n\\n    /// Handles asset reference price lookups.\\n    address public priceFeeds;\\n\\n    /// Handles asset swaps using dex liquidity.\\n    address public swapsImpl;\\n\\n    /// Contract registry address of the Sovryn swap network.\\n    address public sovrynSwapContractRegistryAddress;\\n\\n    /// Implementations of protocol functions.\\n    mapping(bytes4 => address) public logicTargets;\\n\\n    /// Loans: loanId => Loan\\n    mapping(bytes32 => Loan) public loans;\\n\\n    /// Loan parameters: loanParamsId => LoanParams\\n    mapping(bytes32 => LoanParams) public loanParams;\\n\\n    /// lender => orderParamsId => Order\\n    mapping(address => mapping(bytes32 => Order)) public lenderOrders;\\n\\n    /// borrower => orderParamsId => Order\\n    mapping(address => mapping(bytes32 => Order)) public borrowerOrders;\\n\\n    /// loanId => delegated => approved\\n    mapping(bytes32 => mapping(address => bool)) public delegatedManagers;\\n\\n    /**\\n     *** Interest ***\\n     **/\\n\\n    /// lender => loanToken => LenderInterest object\\n    mapping(address => mapping(address => LenderInterest)) public lenderInterest;\\n\\n    /// loanId => LoanInterest object\\n    mapping(bytes32 => LoanInterest) public loanInterest;\\n\\n    /**\\n     *** Internals ***\\n     **/\\n\\n    /// Implementations set.\\n    EnumerableBytes32Set.Bytes32Set internal logicTargetsSet;\\n\\n    /// Active loans set.\\n    EnumerableBytes32Set.Bytes32Set internal activeLoansSet;\\n\\n    /// Lender loans set.\\n    mapping(address => EnumerableBytes32Set.Bytes32Set) internal lenderLoanSets;\\n\\n    /// Borrow loans set.\\n    mapping(address => EnumerableBytes32Set.Bytes32Set) internal borrowerLoanSets;\\n\\n    /// User loan params set.\\n    mapping(address => EnumerableBytes32Set.Bytes32Set) internal userLoanParamSets;\\n\\n    /// Address controlling fee withdrawals.\\n    address public feesController;\\n\\n    /// 10% fee /// Fee taken from lender interest payments.\\n    uint256 public lendingFeePercent = 10**19;\\n\\n    /// Total interest fees received and not withdrawn per asset.\\n    mapping(address => uint256) public lendingFeeTokensHeld;\\n\\n    /// Total interest fees withdraw per asset.\\n    /// lifetime fees = lendingFeeTokensHeld + lendingFeeTokensPaid\\n    mapping(address => uint256) public lendingFeeTokensPaid;\\n\\n    /// 0.15% fee /// Fee paid for each trade.\\n    uint256 public tradingFeePercent = 15 * 10**16;\\n\\n    /// Total trading fees received and not withdrawn per asset.\\n    mapping(address => uint256) public tradingFeeTokensHeld;\\n\\n    /// Total trading fees withdraw per asset\\n    /// lifetime fees = tradingFeeTokensHeld + tradingFeeTokensPaid\\n    mapping(address => uint256) public tradingFeeTokensPaid;\\n\\n    /// 0.09% fee /// Origination fee paid for each loan.\\n    uint256 public borrowingFeePercent = 9 * 10**16;\\n\\n    /// Total borrowing fees received and not withdrawn per asset.\\n    mapping(address => uint256) public borrowingFeeTokensHeld;\\n\\n    /// Total borrowing fees withdraw per asset.\\n    /// lifetime fees = borrowingFeeTokensHeld + borrowingFeeTokensPaid\\n    mapping(address => uint256) public borrowingFeeTokensPaid;\\n\\n    /// Current protocol token deposit balance.\\n    uint256 public protocolTokenHeld;\\n\\n    /// Lifetime total payout of protocol token.\\n    uint256 public protocolTokenPaid;\\n\\n    /// 5% fee share in form of SOV /// Fee share for affiliate program.\\n    uint256 public affiliateFeePercent = 5 * 10**18;\\n\\n    /// 5% collateral discount /// Discount on collateral for liquidators.\\n    uint256 public liquidationIncentivePercent = 5 * 10**18;\\n\\n    /// loanPool => underlying\\n    mapping(address => address) public loanPoolToUnderlying;\\n\\n    /// underlying => loanPool\\n    mapping(address => address) public underlyingToLoanPool;\\n\\n    /// Loan pools set.\\n    EnumerableBytes32Set.Bytes32Set internal loanPoolsSet;\\n\\n    /// Supported tokens for swaps.\\n    mapping(address => bool) public supportedTokens;\\n\\n    /// % disagreement between swap rate and reference rate.\\n    uint256 public maxDisagreement = 5 * 10**18;\\n\\n    /// Used as buffer for swap source amount estimations.\\n    uint256 public sourceBuffer = 10000;\\n\\n    /// Maximum support swap size in rBTC\\n    uint256 public maxSwapSize = 50 ether;\\n\\n    /// Nonce per borrower. Used for loan id creation.\\n    mapping(address => uint256) public borrowerNonce;\\n\\n    /// Rollover transaction costs around 0.0000168 rBTC, it is denominated in wrBTC.\\n    uint256 public rolloverBaseReward = 16800000000000;\\n    uint256 public rolloverFlexFeePercent = 0.1 ether; /// 0.1%\\n\\n    IWrbtcERC20 public wrbtcToken;\\n    address public protocolTokenAddress;\\n\\n    /// 50% fee rebate\\n    /// potocolToken reward to user, it is worth % of trading/borrowing fee.\\n    uint256 public feeRebatePercent = 50 * 10**18;\\n\\n    address public admin;\\n\\n    /// For modules interaction.\\n    address public protocolAddress;\\n\\n    /**\\n     *** Affiliates ***\\n     **/\\n\\n    /// The flag is set on the user's first trade.\\n    mapping(address => bool) public userNotFirstTradeFlag;\\n\\n    /// User => referrer (affiliate).\\n    mapping(address => address) public affiliatesUserReferrer;\\n\\n    /// List of referral addresses affiliated to the referrer.\\n    mapping(address => EnumerableAddressSet.AddressSet) internal referralsList;\\n\\n    /// @dev Referral threshold for paying out to the referrer.\\n    ///   The referrer reward is being accumulated and locked until the threshold is passed.\\n    uint256 public minReferralsToPayout = 3;\\n\\n    /// @dev Total affiliate SOV rewards that held in the protocol\\n    ///   (Because the minimum referrals is less than the rule)\\n    mapping(address => uint256) public affiliateRewardsHeld;\\n\\n    /// @dev For affiliates SOV Bonus proccess.\\n    address public sovTokenAddress;\\n    address public lockedSOVAddress;\\n\\n    /// @dev 20% fee share of trading token fee.\\n    ///   Fee share of trading token fee for affiliate program.\\n    uint256 public affiliateTradingTokenFeePercent = 20 * 10**18;\\n\\n    /// @dev Addresses of tokens in which commissions were paid to referrers.\\n    mapping(address => EnumerableAddressSet.AddressSet) internal affiliatesReferrerTokensList;\\n\\n    /// @dev [referrerAddress][tokenAddress] is a referrer's token balance of accrued fees.\\n    mapping(address => mapping(address => uint256)) public affiliatesReferrerBalances;\\n\\n    mapping(address => mapping(address => uint256)) public specialRebates; // Special rate rebates for spesific pair -- if not set, then use the default one\\n    bool public pause; //Flag to pause all protocol modules\\n\\n    uint256 internal swapExtrernalFeePercent; /// Fee percentage for protocol swap\\n\\n    /// @dev Defines the portion of the trading rebate rewards (SOV) which is to be paid out in a liquid form in basis points. The rest is vested. The max value is 9999 (means 99.99% liquid, 0.01% vested)\\n    uint256 internal tradingRebateRewardsBasisPoint;\\n\\n    /// @dev Defines the defaultPath of conversion swap. This is created to prevent the non-rbtc pairs returning the shortest path which will not give the best rate.\\n    /// Will be used in internal swap.\\n    mapping(address => mapping(address => IERC20[])) internal defaultPathConversion;\\n\\n    address internal pauser;\\n\\n    /**\\n     * @notice Add signature and target to storage.\\n     * @dev Protocol is a proxy and requires a way to add every\\n     *   module function dynamically during deployment.\\n     * */\\n    function _setTarget(bytes4 sig, address target) internal {\\n        logicTargets[sig] = target;\\n\\n        if (target != address(0)) {\\n            logicTargetsSet.addBytes32(bytes32(sig));\\n        } else {\\n            logicTargetsSet.removeBytes32(bytes32(sig));\\n        }\\n    }\\n\\n    modifier onlyAdminOrOwner() {\\n        require(isOwner() || admin == (msg.sender), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyPauserOrOwner() {\\n        require(isOwner() || pauser == (msg.sender), \\\"unauthorized\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf8dfc02f3dc790c73b390a69898d0281c4473487bc91fec1f28fbebceacd3b3c\"},\"contracts/core/objects/LenderInterestStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Lender Interest.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Lender Interest.\\n * */\\ncontract LenderInterestStruct {\\n    struct LenderInterest {\\n        uint256 principalTotal; /// Total borrowed amount outstanding of asset.\\n        uint256 owedPerDay; /// Interest owed per day for all loans of asset.\\n        uint256 owedTotal; /// Total interest owed for all loans of asset (assuming they go to full term).\\n        uint256 paidTotal; /// Total interest paid so far for asset.\\n        uint256 updatedTimestamp; /// Last update.\\n    }\\n}\\n\",\"keccak256\":\"0x6583baadddded384836cec469980e7973ec09310ae505b4a2ec67fb7bc19e452\"},\"contracts/core/objects/LoanInterestStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Loan Interest.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Loan Interest.\\n * */\\ncontract LoanInterestStruct {\\n    struct LoanInterest {\\n        uint256 owedPerDay; /// Interest owed per day for loan.\\n        uint256 depositTotal; /// Total escrowed interest for loan.\\n        uint256 updatedTimestamp; /// Last update.\\n    }\\n}\\n\",\"keccak256\":\"0xd9034c6adb1b72e1593589dca024dc4730a1ee8bf6b2dca9d22283f2e7159590\"},\"contracts/core/objects/LoanParamsStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Loan Parameters.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Loan Parameters.\\n * */\\ncontract LoanParamsStruct {\\n    struct LoanParams {\\n        /// @dev ID of loan params object.\\n        bytes32 id;\\n        /// @dev If false, this object has been disabled by the owner and can't\\n        ///   be used for future loans.\\n        bool active;\\n        /// @dev Owner of this object.\\n        address owner;\\n        /// @dev The token being loaned.\\n        address loanToken;\\n        /// @dev The required collateral token.\\n        address collateralToken;\\n        /// @dev The minimum allowed initial margin.\\n        uint256 minInitialMargin;\\n        /// @dev An unhealthy loan when current margin is at or below this value.\\n        uint256 maintenanceMargin;\\n        /// @dev The maximum term for new loans (0 means there's no max term).\\n        uint256 maxLoanTerm;\\n    }\\n}\\n\",\"keccak256\":\"0xe15aa97713521da7f501e5225af9d92cf34bd68d286dbfed86aa75aabb323945\"},\"contracts/core/objects/LoanStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Loan Object.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Loan Object.\\n * */\\ncontract LoanStruct {\\n    struct Loan {\\n        bytes32 id; /// ID of the loan.\\n        bytes32 loanParamsId; /// The linked loan params ID.\\n        bytes32 pendingTradesId; /// The linked pending trades ID.\\n        bool active; /// If false, the loan has been fully closed.\\n        uint256 principal; /// Total borrowed amount outstanding.\\n        uint256 collateral; /// Total collateral escrowed for the loan.\\n        uint256 startTimestamp; /// Loan start time.\\n        uint256 endTimestamp; /// For active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time.\\n        uint256 startMargin; /// Initial margin when the loan opened.\\n        uint256 startRate; /// Reference rate when the loan opened for converting collateralToken to loanToken.\\n        address borrower; /// Borrower of this loan.\\n        address lender; /// Lender of this loan.\\n    }\\n}\\n\",\"keccak256\":\"0x7d05c3096a86d5892e4e72f3a01a5a806f13a5ac90ca6339c611e75c603637b4\"},\"contracts/core/objects/OrderStruct.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title The Loan Order.\\n * @notice This contract code comes from bZx. bZx is a protocol for tokenized\\n * margin trading and lending https://bzx.network similar to the dYdX protocol.\\n *\\n * This contract contains the storage structure of the Loan Order.\\n * */\\ncontract OrderStruct {\\n    struct Order {\\n        uint256 lockedAmount; /// Escrowed amount waiting for a counterparty.\\n        uint256 interestRate; /// Interest rate defined by the creator of this order.\\n        uint256 minLoanTerm; /// Minimum loan term allowed.\\n        uint256 maxLoanTerm; /// Maximum loan term allowed.\\n        uint256 createdTimestamp; /// Timestamp when this order was created.\\n        uint256 expirationTimestamp; /// Timestamp when this order expires.\\n    }\\n}\\n\",\"keccak256\":\"0xcc053c5da34a5927041162259bf856ba913f3524ca03e63ad0c5877777d17e0f\"},\"contracts/events/AffiliatesEvents.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./ModulesCommonEvents.sol\\\";\\n\\ncontract AffiliatesEvents is ModulesCommonEvents {\\n    event SetAffiliatesReferrer(address indexed user, address indexed referrer);\\n\\n    event SetAffiliatesReferrerFail(\\n        address indexed user,\\n        address indexed referrer,\\n        bool alreadySet,\\n        bool userNotFirstTrade\\n    );\\n\\n    event SetUserNotFirstTradeFlag(address indexed user);\\n\\n    event PayTradingFeeToAffiliate(\\n        address indexed referrer,\\n        address trader,\\n        address indexed token,\\n        bool indexed isHeld,\\n        uint256 tradingFeeTokenAmount,\\n        uint256 tokenBonusAmount,\\n        uint256 sovBonusAmount,\\n        uint256 sovBonusAmountPaid\\n    );\\n\\n    event PayTradingFeeToAffiliateFail(\\n        address indexed referrer,\\n        address trader,\\n        address indexed token,\\n        uint256 tradingFeeTokenAmount,\\n        uint256 tokenBonusAmount,\\n        uint256 sovBonusAmount,\\n        uint256 sovBonusAmountTryingToPaid\\n    );\\n\\n    event WithdrawAffiliatesReferrerTokenFees(\\n        address indexed referrer,\\n        address indexed receiver,\\n        address indexed tokenAddress,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0xf72cf23e90db3c49589ddc4e1796680ebfb69a9b146db89f9b61f5fcf6dd95ba\"},\"contracts/events/ModulesCommonEvents.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n/**\\n * @title The common events for all modules\\n * @notice This contract contains the events which will be used by all modules\\n **/\\n\\ncontract ModulesCommonEvents {\\n    event ProtocolModuleContractReplaced(\\n        address indexed prevModuleContractAddress,\\n        address indexed newModuleContractAddress,\\n        bytes32 indexed module\\n    );\\n}\\n\",\"keccak256\":\"0xb07af42d7e6b0fe983889b883691b662a58d2ef8d75b3f32f17faff1871c8b8f\"},\"contracts/feeds/IPriceFeeds.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\ninterface IPriceFeeds {\\n    function queryRate(address sourceToken, address destToken)\\n        external\\n        view\\n        returns (uint256 rate, uint256 precision);\\n\\n    function queryPrecision(address sourceToken, address destToken)\\n        external\\n        view\\n        returns (uint256 precision);\\n\\n    function queryReturn(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceAmount\\n    ) external view returns (uint256 destAmount);\\n\\n    function checkPriceDisagreement(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceAmount,\\n        uint256 destAmount,\\n        uint256 maxSlippage\\n    ) external view returns (uint256 sourceToDestSwapRate);\\n\\n    function amountInEth(address Token, uint256 amount) external view returns (uint256 ethAmount);\\n\\n    function getMaxDrawdown(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount,\\n        uint256 maintenanceMargin\\n    ) external view returns (uint256);\\n\\n    function getCurrentMarginAndCollateralSize(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount\\n    ) external view returns (uint256 currentMargin, uint256 collateralInEthAmount);\\n\\n    function getCurrentMargin(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount\\n    ) external view returns (uint256 currentMargin, uint256 collateralToLoanRate);\\n\\n    function shouldLiquidate(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount,\\n        uint256 maintenanceMargin\\n    ) external view returns (bool);\\n\\n    function getFastGasPrice(address payToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e2c2b393336efedb97659a2fc21c8dfb75b70e15d2422a3bcbf7ebd5fc83c82\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _who) external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbc0c9bb48f19651930ec9aff366b2e11a1abf89c846e4b2d52d8102b15ce6721\"},\"contracts/interfaces/IWrbtc.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ninterface IWrbtc {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x20fdfe4b5e32fd7f863b3fa128e3c80bd4ccf090a4ffba56186ef3b7f2a80492\"},\"contracts/interfaces/IWrbtcERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./IWrbtc.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract IWrbtcERC20 is IWrbtc, IERC20 {}\\n\",\"keccak256\":\"0x7301a8c8ca7aa016ec94268a16d07366875f2e406442e929968dd745b1ee5be5\"},\"contracts/locked/ILockedSOV.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n *  @title The Locked SOV Interface.\\n *  @author Franklin Richards - powerhousefrank@protonmail.com\\n *  @notice This interface is an incomplete yet useful for future migration of LockedSOV Contract.\\n *  @dev Only use it if you know what you are doing.\\n */\\ninterface ILockedSOV {\\n    /**\\n     * @notice Adds SOV to the user balance (Locked and Unlocked Balance based on `_basisPoint`).\\n     * @param _userAddress The user whose locked balance has to be updated with `_sovAmount`.\\n     * @param _sovAmount The amount of SOV to be added to the locked and/or unlocked balance.\\n     * @param _basisPoint The % (in Basis Point)which determines how much will be unlocked immediately.\\n     */\\n    function deposit(\\n        address _userAddress,\\n        uint256 _sovAmount,\\n        uint256 _basisPoint\\n    ) external;\\n\\n    /**\\n     * @notice Adds SOV to the locked balance of a user.\\n     * @param _userAddress The user whose locked balance has to be updated with _sovAmount.\\n     * @param _sovAmount The amount of SOV to be added to the locked balance.\\n     */\\n    function depositSOV(address _userAddress, uint256 _sovAmount) external;\\n\\n    /**\\n     * @notice Withdraws unlocked tokens and Stakes Locked tokens for a user who already have a vesting created.\\n     * @param _userAddress The address of user tokens will be withdrawn.\\n     */\\n    function withdrawAndStakeTokensFrom(address _userAddress) external;\\n\\n    function cliff() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function getLockedBalance(address _addr) external view returns (uint256 _balance);\\n\\n    function getUnlockedBalance(address _addr) external view returns (uint256 _balance);\\n}\\n\",\"keccak256\":\"0x2ecf9d6c3704b4210b86d15a35650b34a1c44d0fb57795668fd2b2b4eab6104f\"},\"contracts/mixins/EnumerableAddressSet.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Based on Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * As of v2.5.0, only `address` sets are supported.\\n *\\n * Include with `using EnumerableSet for EnumerableSet.AddressSet;`.\\n *\\n * _Available since v2.5.0._\\n */\\nlibrary EnumerableAddressSet {\\n    struct AddressSet {\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(address => uint256) index;\\n        address[] values;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     * Returns false if the value was already in the set.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set.index[value] = set.values.push(value);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     * Returns false if the value was not present in the set.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        if (contains(set, value)) {\\n            uint256 toDeleteIndex = set.index[value] - 1;\\n            uint256 lastIndex = set.values.length - 1;\\n\\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\\n            if (lastIndex != toDeleteIndex) {\\n                address lastValue = set.values[lastIndex];\\n\\n                // Move the last value to the index where the deleted value is\\n                set.values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the index entry for the deleted value\\n            delete set.index[value];\\n\\n            // Delete the old entry for the moved value\\n            set.values.pop();\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns an array with all values in the set. O(N).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     */\\n    function enumerate(AddressSet storage set) internal view returns (address[] memory) {\\n        address[] memory output = new address[](set.values.length);\\n        for (uint256 i; i < set.values.length; i++) {\\n            output[i] = set.values[i];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Returns a chunk of array as recommended in enumerate() to avoid running of gas.\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     \\n     * @param start start index of chunk\\n     * @param count num of element to return; if count == 0 then returns all the elements from the @param start\\n     */\\n    function enumerateChunk(\\n        AddressSet storage set,\\n        uint256 start,\\n        uint256 count\\n    ) internal view returns (address[] memory output) {\\n        uint256 end = start + count;\\n        require(end >= start, \\\"addition overflow\\\");\\n        end = (set.values.length < end || count == 0) ? set.values.length : end;\\n        if (end == 0 || start >= end) {\\n            return output;\\n        }\\n\\n        output = new address[](end - start);\\n        for (uint256 i; i < end - start; i++) {\\n            output[i] = set.values[i + start];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements on the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return set.values.length;\\n    }\\n\\n    /** @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function get(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return set.values[index];\\n    }\\n}\\n\",\"keccak256\":\"0xea6fba941ec8502aa11a7ab37e74b917d0dc47bb254e359a2870a87ef97d9872\"},\"contracts/mixins/EnumerableBytes32Set.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @title Library for managing loan sets.\\n *\\n * @notice Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\\n * */\\nlibrary EnumerableBytes32Set {\\n    struct Bytes32Set {\\n        /// Position of the value in the `values` array, plus 1 because index 0\\n        /// means a value is not in the set.\\n        mapping(bytes32 => uint256) index;\\n        bytes32[] values;\\n    }\\n\\n    /**\\n     * @notice Add an address value to a set. O(1).\\n     *\\n     * @param set The set of values.\\n     * @param addrvalue The address to add.\\n     *\\n     * @return False if the value was already in the set.\\n     */\\n    function addAddress(Bytes32Set storage set, address addrvalue) internal returns (bool) {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return addBytes32(set, value);\\n    }\\n\\n    /**\\n     * @notice Add a value to a set. O(1).\\n     *\\n     * @param set The set of values.\\n     * @param value The new value to add.\\n     *\\n     * @return False if the value was already in the set.\\n     */\\n    function addBytes32(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set.index[value] = set.values.push(value);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove an address value from a set. O(1).\\n     *\\n     * @param set The set of values.\\n     * @param addrvalue The address to remove.\\n     *\\n     * @return False if the address was not present in the set.\\n     */\\n    function removeAddress(Bytes32Set storage set, address addrvalue) internal returns (bool) {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return removeBytes32(set, value);\\n    }\\n\\n    /**\\n     * @notice Remove a value from a set. O(1).\\n     *\\n     * @param set The set of values.\\n     * @param value The value to remove.\\n     *\\n     * @return False if the value was not present in the set.\\n     */\\n    function removeBytes32(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        if (contains(set, value)) {\\n            uint256 toDeleteIndex = set.index[value] - 1;\\n            uint256 lastIndex = set.values.length - 1;\\n\\n            /// If the element we're deleting is the last one,\\n            /// we can just remove it without doing a swap.\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set.values[lastIndex];\\n\\n                /// Move the last value to the index where the deleted value is.\\n                set.values[toDeleteIndex] = lastValue;\\n\\n                /// Update the index for the moved value.\\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            /// Delete the index entry for the deleted value.\\n            delete set.index[value];\\n\\n            /// Delete the old entry for the moved value.\\n            set.values.pop();\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Find out whether a value exists in the set.\\n     *\\n     * @param set The set of values.\\n     * @param value The value to find.\\n     *\\n     * @return True if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function containsAddress(Bytes32Set storage set, address addrvalue)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @notice Get all set values.\\n     *\\n     * @param set The set of values.\\n     * @param start The offset of the returning set.\\n     * @param count The limit of number of values to return.\\n     *\\n     * @return An array with all values in the set. O(N).\\n     *\\n     * @dev Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     */\\n    function enumerate(\\n        Bytes32Set storage set,\\n        uint256 start,\\n        uint256 count\\n    ) internal view returns (bytes32[] memory output) {\\n        uint256 end = start + count;\\n        require(end >= start, \\\"addition overflow\\\");\\n        end = set.values.length < end ? set.values.length : end;\\n        if (end == 0 || start >= end) {\\n            return output;\\n        }\\n\\n        output = new bytes32[](end - start);\\n        for (uint256 i; i < end - start; i++) {\\n            output[i] = set.values[i + start];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @notice Get the legth of the set.\\n     *\\n     * @param set The set of values.\\n     *\\n     * @return the number of elements on the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return set.values.length;\\n    }\\n\\n    /**\\n     * @notice Get an item from the set by its index.\\n     *\\n     * @dev Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     *\\n     * @param set The set of values.\\n     * @param index The index of the value to return.\\n     *\\n     * @return the element stored at position `index` in the set. O(1).\\n     */\\n    function get(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return set.values[index];\\n    }\\n}\\n\",\"keccak256\":\"0xa2801a585c566e07f21c1ebccd0cd0447dd5fd9fe6c1ff2b58d4d979d88a6db0\"},\"contracts/mixins/ModuleCommonFunctionalities.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"../core/State.sol\\\";\\n\\ncontract ModuleCommonFunctionalities is State {\\n    modifier whenNotPaused() {\\n        require(!pause, \\\"Paused\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9ed7a6a635ef960b53888b28a2a6bed8b071255cad8cd33f00386a634cbddb74\"},\"contracts/modules/Affiliates.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, Sovryn, All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../core/State.sol\\\";\\nimport \\\"../mixins/EnumerableBytes32Set.sol\\\";\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../events/AffiliatesEvents.sol\\\";\\nimport \\\"../feeds/IPriceFeeds.sol\\\";\\nimport \\\"../locked/ILockedSOV.sol\\\";\\nimport \\\"../mixins/ModuleCommonFunctionalities.sol\\\";\\n\\n/**\\n * @title Affiliates contract.\\n * @notice Track referrals and reward referrers (affiliates) with tokens.\\n *   In-detail specifications are found at https://wiki.sovryn.app/en/community/Affiliates\\n * @dev Module: Affiliates upgradable\\n *   Storage: from State, functions called from Protocol by delegatecall\\n */\\ncontract Affiliates is State, AffiliatesEvents, ModuleCommonFunctionalities {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Void constructor.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() public {}\\n\\n    /**\\n     * @notice Avoid calls to this contract except for those explicitly declared.\\n     */\\n    function() external {\\n        revert(\\\"Affiliates - fallback not allowed\\\");\\n    }\\n\\n    /**\\n     * @notice Set delegate callable functions by proxy contract.\\n     * @dev This contract is designed as a module, this way logic can be\\n     *   expanded and upgraded w/o losing storage that is kept in the protocol (State.sol)\\n     *   initialize() is used to register in the proxy external (module) functions\\n     *   to be called via the proxy.\\n     * @param target The address of a new logic implementation.\\n     */\\n    function initialize(address target) external onlyOwner {\\n        address prevModuleContractAddress = logicTargets[this.setAffiliatesReferrer.selector];\\n        _setTarget(this.setAffiliatesReferrer.selector, target);\\n        _setTarget(this.getUserNotFirstTradeFlag.selector, target);\\n        _setTarget(this.getReferralsList.selector, target);\\n        _setTarget(this.setUserNotFirstTradeFlag.selector, target);\\n        _setTarget(this.payTradingFeeToAffiliatesReferrer.selector, target);\\n        _setTarget(this.getAffiliatesReferrerBalances.selector, target);\\n        _setTarget(this.getAffiliatesReferrerTokenBalance.selector, target);\\n        _setTarget(this.getAffiliatesReferrerTokensList.selector, target);\\n        _setTarget(this.withdrawAffiliatesReferrerTokenFees.selector, target);\\n        _setTarget(this.withdrawAllAffiliatesReferrerTokenFees.selector, target);\\n        _setTarget(this.getMinReferralsToPayout.selector, target);\\n        _setTarget(this.getAffiliatesUserReferrer.selector, target);\\n        _setTarget(this.getAffiliateRewardsHeld.selector, target);\\n        _setTarget(this.getAffiliateTradingTokenFeePercent.selector, target);\\n        _setTarget(this.getAffiliatesTokenRewardsValueInRbtc.selector, target);\\n        emit ProtocolModuleContractReplaced(prevModuleContractAddress, target, \\\"Affiliates\\\");\\n    }\\n\\n    /**\\n     * @notice Function modifier to avoid any other calls not coming from loan pools.\\n     */\\n    modifier onlyCallableByLoanPools() {\\n        require(loanPoolToUnderlying[msg.sender] != address(0), \\\"Affiliates: not authorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Function modifier to avoid any other calls not coming from within protocol functions.\\n     */\\n    modifier onlyCallableInternal() {\\n        require(msg.sender == protocolAddress, \\\"Affiliates: not authorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Data structure comprised of 3 flags to compute the result of setting a referrer.\\n     */\\n    struct SetAffiliatesReferrerResult {\\n        bool success;\\n        bool alreadySet;\\n        bool userNotFirstTradeFlag;\\n    }\\n\\n    /**\\n     * @notice Loan pool calls this function to tell affiliates\\n     *   a user coming from a referrer is trading and should be registered if not yet.\\n     *   Taking into account some user status flags may lead to the user and referrer\\n     *   become added or not to the affiliates record.\\n     *\\n     * @param user The address of the user that is trading on loan pools.\\n     * @param referrer The address of the referrer the user is coming from.\\n     */\\n    function setAffiliatesReferrer(address user, address referrer)\\n        external\\n        onlyCallableByLoanPools\\n        whenNotPaused\\n    {\\n        SetAffiliatesReferrerResult memory result;\\n\\n        result.userNotFirstTradeFlag = getUserNotFirstTradeFlag(user);\\n        result.alreadySet = affiliatesUserReferrer[user] != address(0);\\n        result.success = !(result.userNotFirstTradeFlag || result.alreadySet || user == referrer);\\n        if (result.success) {\\n            affiliatesUserReferrer[user] = referrer;\\n            referralsList[referrer].add(user);\\n            emit SetAffiliatesReferrer(user, referrer);\\n        } else {\\n            emit SetAffiliatesReferrerFail(\\n                user,\\n                referrer,\\n                result.alreadySet,\\n                result.userNotFirstTradeFlag\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter to query the referrals coming from a referrer.\\n     * @param referrer The address of a given referrer.\\n     * @return The referralsList mapping value by referrer.\\n     */\\n    function getReferralsList(address referrer) external view returns (address[] memory refList) {\\n        refList = referralsList[referrer].enumerate();\\n        return refList;\\n    }\\n\\n    /**\\n     * @notice Getter to query the not-first-trade flag of a user.\\n     * @param user The address of a given user.\\n     * @return The userNotFirstTradeFlag mapping value by user.\\n     */\\n    function getUserNotFirstTradeFlag(address user) public view returns (bool) {\\n        return userNotFirstTradeFlag[user];\\n    }\\n\\n    /**\\n     * @notice Setter to toggle on the not-first-trade flag of a user.\\n     * @param user The address of a given user.\\n     */\\n    function setUserNotFirstTradeFlag(address user)\\n        external\\n        onlyCallableByLoanPools\\n        whenNotPaused\\n    {\\n        if (!userNotFirstTradeFlag[user]) {\\n            userNotFirstTradeFlag[user] = true;\\n            emit SetUserNotFirstTradeFlag(user);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal getter to query the fee share for affiliate program.\\n     * @dev It returns a value defined at protocol storage (State.sol)\\n     * @return The percentage of fee share w/ 18 decimals.\\n     */\\n    function _getAffiliatesTradingFeePercentForSOV() internal view returns (uint256) {\\n        return affiliateFeePercent;\\n    }\\n\\n    /**\\n     * @notice Internal to calculate the affiliates trading token fee amount.\\n     *   Affiliates program has 2 kind of rewards:\\n     *     1. x% based on the fee of the token that is traded (in form of the token itself).\\n     *     2. x% based on the fee of the token that is traded (in form of SOV).\\n     *   This _getReferrerTradingFeeForToken calculates the first one\\n     *   by applying a custom percentage multiplier.\\n     * @param feeTokenAmount The trading token fee amount.\\n     * @return The affiliates share of the trading token fee amount.\\n     */\\n    function _getReferrerTradingFeeForToken(uint256 feeTokenAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return feeTokenAmount.mul(getAffiliateTradingTokenFeePercent()).div(10**20);\\n    }\\n\\n    /**\\n     * @notice Getter to query the fee share of trading token fee for affiliate program.\\n     * @dev It returns a value defined at protocol storage (State.sol)\\n     * @return The percentage of fee share w/ 18 decimals.\\n     */\\n    function getAffiliateTradingTokenFeePercent() public view returns (uint256) {\\n        return affiliateTradingTokenFeePercent;\\n    }\\n\\n    /**\\n     * @notice Getter to query referral threshold for paying out to the referrer.\\n     * @dev It returns a value defined at protocol storage (State.sol)\\n     * @return The minimum number of referrals set by Protocol.\\n     */\\n    function getMinReferralsToPayout() public view returns (uint256) {\\n        return minReferralsToPayout;\\n    }\\n\\n    /**\\n     * @notice Get the sovToken reward of a trade.\\n     * @dev The reward is worth x% of the trading fee.\\n     * @param feeToken The address of the token in which the trading/borrowing fee was paid.\\n     * @param feeAmount The height of the fee.\\n     * @return The reward amount.\\n     * */\\n    function _getSovBonusAmount(address feeToken, uint256 feeAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 rewardAmount;\\n        address _priceFeeds = priceFeeds;\\n\\n        /// @dev Calculate the reward amount, querying the price feed.\\n        (bool success, bytes memory data) =\\n            _priceFeeds.staticcall(\\n                abi.encodeWithSelector(\\n                    IPriceFeeds(_priceFeeds).queryReturn.selector,\\n                    feeToken,\\n                    sovTokenAddress, /// dest token = SOV\\n                    feeAmount.mul(_getAffiliatesTradingFeePercentForSOV()).div(1e20)\\n                )\\n            );\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if eq(success, 1) {\\n                rewardAmount := mload(add(data, 32))\\n            }\\n        }\\n\\n        return rewardAmount;\\n    }\\n\\n    /**\\n     * @notice Protocol calls this function to pay the affiliates rewards to a user (referrer).\\n     *\\n     * @dev Affiliates program has 2 kind of rewards:\\n     *     1. x% based on the fee of the token that is traded (in form of the token itself).\\n     *     2. x% based on the fee of the token that is traded (in form of SOV).\\n     *   Both are paid in this function.\\n     *\\n     * @dev Actually they are not paid, but just holded by protocol until user claims them by\\n     *   actively calling withdrawAffiliatesReferrerTokenFees() function,\\n     *   and/or when unvesting lockedSOV.\\n     *\\n     * @dev To be precise, what this function does is updating the registers of the rewards\\n     *   for the referrer including the assignment of the SOV tokens as rewards to the\\n     *   referrer's vesting contract.\\n     *\\n     * @param referrer The address of the referrer.\\n     * @param trader The address of the trader.\\n     * @param token The address of the token in which the trading/borrowing fee was paid.\\n     * @param tradingFeeTokenBaseAmount Total trading fee amount, the base for calculating referrer's fees.\\n     *\\n     * @return referrerBonusSovAmount The amount of SOV tokens paid to the referrer (through a vesting contract, lockedSOV).\\n     * @return referrerBonusTokenAmount The amount of trading tokens paid directly to the referrer.\\n     */\\n    function payTradingFeeToAffiliatesReferrer(\\n        address referrer,\\n        address trader,\\n        address token,\\n        uint256 tradingFeeTokenBaseAmount\\n    )\\n        external\\n        onlyCallableInternal\\n        whenNotPaused\\n        returns (uint256 referrerBonusSovAmount, uint256 referrerBonusTokenAmount)\\n    {\\n        bool isHeld = referralsList[referrer].length() < getMinReferralsToPayout();\\n        bool bonusPaymentIsSuccess = true;\\n        uint256 paidReferrerBonusSovAmount;\\n\\n        /// Process token fee rewards first.\\n        referrerBonusTokenAmount = _getReferrerTradingFeeForToken(tradingFeeTokenBaseAmount);\\n        if (!affiliatesReferrerTokensList[referrer].contains(token))\\n            affiliatesReferrerTokensList[referrer].add(token);\\n        affiliatesReferrerBalances[referrer][token] = affiliatesReferrerBalances[referrer][token]\\n            .add(referrerBonusTokenAmount);\\n\\n        /// Then process SOV rewards.\\n        referrerBonusSovAmount = _getSovBonusAmount(token, tradingFeeTokenBaseAmount);\\n        uint256 rewardsHeldByProtocol = affiliateRewardsHeld[referrer];\\n\\n        if (isHeld) {\\n            /// If referrals less than minimum, temp the rewards SOV to the storage\\n            affiliateRewardsHeld[referrer] = rewardsHeldByProtocol.add(referrerBonusSovAmount);\\n        } else {\\n            /// If referrals >= minimum, directly send all of the remain rewards to locked sov\\n            /// Call depositSOV() in LockedSov contract\\n            /// Set the affiliaterewardsheld = 0\\n            if (affiliateRewardsHeld[referrer] > 0) {\\n                affiliateRewardsHeld[referrer] = 0;\\n            }\\n\\n            paidReferrerBonusSovAmount = referrerBonusSovAmount.add(rewardsHeldByProtocol);\\n            IERC20(sovTokenAddress).approve(lockedSOVAddress, paidReferrerBonusSovAmount);\\n\\n            (bool success, ) =\\n                lockedSOVAddress.call(\\n                    abi.encodeWithSignature(\\n                        \\\"depositSOV(address,uint256)\\\",\\n                        referrer,\\n                        paidReferrerBonusSovAmount\\n                    )\\n                );\\n\\n            if (!success) {\\n                bonusPaymentIsSuccess = false;\\n            }\\n        }\\n\\n        if (bonusPaymentIsSuccess) {\\n            emit PayTradingFeeToAffiliate(\\n                referrer,\\n                trader, // trader\\n                token,\\n                isHeld,\\n                tradingFeeTokenBaseAmount,\\n                referrerBonusTokenAmount,\\n                referrerBonusSovAmount,\\n                paidReferrerBonusSovAmount\\n            );\\n        } else {\\n            emit PayTradingFeeToAffiliateFail(\\n                referrer,\\n                trader, // trader\\n                token,\\n                tradingFeeTokenBaseAmount,\\n                referrerBonusTokenAmount,\\n                referrerBonusSovAmount,\\n                paidReferrerBonusSovAmount\\n            );\\n        }\\n\\n        return (referrerBonusSovAmount, referrerBonusTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Referrer calls this function to receive its reward in a given token.\\n     *   It will send the other (non-SOV) reward tokens from trading protocol fees,\\n     *   to the referrer\\u2019s wallet.\\n     * @dev Rewards are held by protocol in different tokens coming from trading fees.\\n     *   Referrer has to claim them one by one for every token with accumulated balance.\\n     * @param token The address of the token to withdraw.\\n     * @param receiver The address of the withdrawal beneficiary.\\n     * @param amount The amount of tokens to claim. If greater than balance, just sends balance.\\n     */\\n    function withdrawAffiliatesReferrerTokenFees(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) public whenNotPaused {\\n        require(receiver != address(0), \\\"Affiliates: cannot withdraw to zero address\\\");\\n        address referrer = msg.sender;\\n        uint256 referrerTokenBalance = affiliatesReferrerBalances[referrer][token];\\n        uint256 withdrawAmount = referrerTokenBalance > amount ? amount : referrerTokenBalance;\\n\\n        require(withdrawAmount > 0, \\\"Affiliates: cannot withdraw zero amount\\\");\\n\\n        require(\\n            referralsList[referrer].length() >= getMinReferralsToPayout(),\\n            \\\"Your referrals has not reached the minimum request\\\"\\n        );\\n\\n        uint256 newReferrerTokenBalance = referrerTokenBalance.sub(withdrawAmount);\\n\\n        if (newReferrerTokenBalance == 0) {\\n            _removeAffiliatesReferrerToken(referrer, token);\\n        } else {\\n            affiliatesReferrerBalances[referrer][token] = newReferrerTokenBalance;\\n        }\\n\\n        IERC20(token).safeTransfer(receiver, withdrawAmount);\\n\\n        emit WithdrawAffiliatesReferrerTokenFees(referrer, receiver, token, withdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw to msg.sender all token fees for a referrer.\\n     * @dev It's done by looping through its available tokens.\\n     * @param receiver The address of the withdrawal beneficiary.\\n     */\\n    function withdrawAllAffiliatesReferrerTokenFees(address receiver) external whenNotPaused {\\n        require(receiver != address(0), \\\"Affiliates: cannot withdraw to zero address\\\");\\n        address referrer = msg.sender;\\n\\n        require(\\n            referralsList[referrer].length() >= getMinReferralsToPayout(),\\n            \\\"Your referrals has not reached the minimum request\\\"\\n        );\\n\\n        (address[] memory tokenAddresses, uint256[] memory tokenBalances) =\\n            getAffiliatesReferrerBalances(referrer);\\n        for (uint256 i; i < tokenAddresses.length; i++) {\\n            withdrawAffiliatesReferrerTokenFees(tokenAddresses[i], receiver, tokenBalances[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to delete a referrer's token balance.\\n     * @param referrer The address of the referrer.\\n     * @param token The address of the token specifying the balance to remove.\\n     */\\n    function _removeAffiliatesReferrerToken(address referrer, address token) internal {\\n        delete affiliatesReferrerBalances[referrer][token];\\n        affiliatesReferrerTokensList[referrer].remove(token);\\n    }\\n\\n    /**\\n     * @notice Get all token balances of a referrer.\\n     * @param referrer The address of the referrer.\\n     * @return referrerTokensList The array of available tokens (keys).\\n     * @return referrerTokensBalances The array of token balances (values).\\n     */\\n    function getAffiliatesReferrerBalances(address referrer)\\n        public\\n        view\\n        returns (address[] memory referrerTokensList, uint256[] memory referrerTokensBalances)\\n    {\\n        referrerTokensList = getAffiliatesReferrerTokensList(referrer);\\n        referrerTokensBalances = new uint256[](referrerTokensList.length);\\n        for (uint256 i; i < referrerTokensList.length; i++) {\\n            referrerTokensBalances[i] = getAffiliatesReferrerTokenBalance(\\n                referrer,\\n                referrerTokensList[i]\\n            );\\n        }\\n        return (referrerTokensList, referrerTokensBalances);\\n    }\\n\\n    /**\\n     * @dev Get all token rewards estimation value in rbtc.\\n     *\\n     * @param referrer Address of referrer.\\n     *\\n     * @return The value estimation in rbtc.\\n     */\\n    function getAffiliatesTokenRewardsValueInRbtc(address referrer)\\n        external\\n        view\\n        returns (uint256 rbtcTotalAmount)\\n    {\\n        address[] memory tokensList = getAffiliatesReferrerTokensList(referrer);\\n        address _priceFeeds = priceFeeds;\\n\\n        for (uint256 i; i < tokensList.length; i++) {\\n            // Get the value of each token in rbtc\\n\\n            (bool success, bytes memory data) =\\n                _priceFeeds.staticcall(\\n                    abi.encodeWithSelector(\\n                        IPriceFeeds(_priceFeeds).queryReturn.selector,\\n                        tokensList[i], // source token\\n                        address(wrbtcToken), // dest token = SOV\\n                        affiliatesReferrerBalances[referrer][tokensList[i]] // total token rewards\\n                    )\\n                );\\n\\n            assembly {\\n                if eq(success, 1) {\\n                    rbtcTotalAmount := add(rbtcTotalAmount, mload(add(data, 32)))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get all available tokens at the affiliates program for a given referrer.\\n     * @param referrer The address of a given referrer.\\n     * @return tokensList The list of available tokens.\\n     */\\n    function getAffiliatesReferrerTokensList(address referrer)\\n        public\\n        view\\n        returns (address[] memory tokensList)\\n    {\\n        tokensList = affiliatesReferrerTokensList[referrer].enumerate();\\n        return tokensList;\\n    }\\n\\n    /**\\n     * @notice Getter to query the affiliate balance for a given referrer and token.\\n     * @param referrer The address of the referrer.\\n     * @param token The address of the token to get balance for.\\n     * @return The affiliatesReferrerBalances mapping value by referrer and token keys.\\n     */\\n    function getAffiliatesReferrerTokenBalance(address referrer, address token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return affiliatesReferrerBalances[referrer][token];\\n    }\\n\\n    /**\\n     * @notice Getter to query the address of referrer for a given user.\\n     * @param user The address of the user.\\n     * @return The address on affiliatesUserReferrer mapping value by user key.\\n     */\\n    function getAffiliatesUserReferrer(address user) public view returns (address) {\\n        return affiliatesUserReferrer[user];\\n    }\\n\\n    /**\\n     * @notice Getter to query the reward amount held for a given referrer.\\n     * @param referrer The address of the referrer.\\n     * @return The affiliateRewardsHeld mapping value by referrer key.\\n     */\\n    function getAffiliateRewardsHeld(address referrer) public view returns (uint256) {\\n        return affiliateRewardsHeld[referrer];\\n    }\\n}\\n\",\"keccak256\":\"0x70d84b9ddf1e160bda1cfba0ff50c7778bb722a2ae78356258e9b350a428b468\"},\"contracts/openzeppelin/Address.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html\\n     *   #use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x23df48a01dbac9b25e86c9131174fb7752bbc7e741e63f1aa982de22e055ad54\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen <remco@2\\u03c0.com>, Eenae <alexey@mixbytes.io>\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard {\\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\\n\\n    /// @dev Constant for locked guard state\\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\\n\\n    /**\\n     * @dev We use a single lock for the whole contract.\\n     */\\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * If you mark a function `nonReentrant`, you should also\\n     * mark it `external`. Calling one `nonReentrant` function from\\n     * another is not supported. Instead, you can implement a\\n     * `private` function doing the actual work, and an `external`\\n     * wrapper marked as `nonReentrant`.\\n     */\\n    modifier nonReentrant() {\\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \\\"nonReentrant\\\");\\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\\n        _;\\n        reentrancyLock = REENTRANCY_GUARD_FREE;\\n    }\\n}\\n\",\"keccak256\":\"0xd347de96ad57d1e45b07a2efe3050c1bd4b809236bbf354acb593de56d21a5c9\"},\"contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).sub(\\n                value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe99b4d979cb976a6b70e297600242afe38b8cd8f1b1ba6ee373f39f7abb3ca79\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"},\"contracts/reentrancy/Mutex.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/*\\n * @title Global Mutex contract\\n *\\n * @notice A mutex contract that allows only one function to be called at a time out\\n * of a large set of functions. *Anyone* in the network can freely use any instance\\n * of this contract to add a universal mutex to any function in any contract.\\n */\\ncontract Mutex {\\n    /*\\n     * We use an uint to store the mutex state.\\n     */\\n    uint256 public value;\\n\\n    /*\\n     * @notice Increment the mutex state and return the new value.\\n     *\\n     * @dev This is the function that will be called by anyone to change the mutex\\n     * state. It is purposely not protected by any access control\\n     */\\n    function incrementAndGetValue() external returns (uint256) {\\n        /*\\n         * increment value using unsafe math. This is safe because we are\\n         * pretty certain no one will ever increment the value 2^256 times\\n         * in a single transaction.\\n         */\\n        return ++value;\\n    }\\n}\\n\",\"keccak256\":\"0xd10b0fd07d5fed1ae1237e7c87e6501970fce2a86e2b8862e502258b0d3aeb2c\"},\"contracts/reentrancy/SharedReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"./Mutex.sol\\\";\\n\\n/*\\n * @title Abstract contract for shared reentrancy guards\\n *\\n * @notice Exposes a single modifier `globallyNonReentrant` that can be used to ensure\\n * that there's no reentrancy between *any* functions marked with the modifier.\\n *\\n * @dev The Mutex contract address is hardcoded because the address is deployed using a\\n * special deployment method (similar to ERC1820Registry). This contract therefore has no\\n * state and is thus safe to add to the inheritance chain of upgradeable contracts.\\n */\\ncontract SharedReentrancyGuard {\\n    /*\\n     * This is the address of the mutex contract that will be used as the\\n     * reentrancy guard.\\n     *\\n     * The address is hardcoded to avoid changing the memory layout of\\n     * derived contracts (possibly upgradable). Hardcoding the address is possible,\\n     * because the Mutex contract is always deployed to the same address, with the\\n     * same method used in the deployment of ERC1820Registry.\\n     */\\n    Mutex private constant MUTEX = Mutex(0xba10edD6ABC7696Eae685839217BdcC42139612b);\\n\\n    /*\\n     * This is the modifier that will be used to protect functions from\\n     * reentrancy. It will call the mutex contract to increment the mutex\\n     * state and then revert if the mutex state was changed by another\\n     * nested call.\\n     */\\n    modifier globallyNonReentrant() {\\n        uint256 previous = MUTEX.incrementAndGetValue();\\n\\n        _;\\n\\n        /*\\n         * If the mutex state was changed by a nested function call, then\\n         * the value of the state variable will be different from the previous value.\\n         */\\n        require(previous == MUTEX.value(), \\\"reentrancy violation\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2d0e61b104b91c1764f20fbeb381ba0f8a8889934ba7f6e8a167ed542ec2c124\"}},\"version\":1}",
  "bytecode": "0x60806040526001600055678ac7230489e80000601555670214e8348c4f000060185567013fbe85edc90000601b55674563918244f40000602055674563918244f40000602155674563918244f400006027556127106028556802b5e3af16b1880000602955650f478e084000602b5567016345785d8a0000602c556802b5e3af16b1880000602f5560036035556801158e460913d000006039553480156100a557600080fd5b5060006100b96001600160e01b0361010c16565b600180546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610110565b3390565b612e6c80620001206000396000f3fe608060405234801561001057600080fd5b50600436106103fc5760003560e01c806392d894f811610215578063c9ddf44811610125578063edab119f116100b8578063f2fde38b11610087578063f2fde38b14610872578063f589a3e714610885578063f6ddc8b31461088d578063f706b1f214610895578063f851a4401461089d576103fc565b8063edab119f1461082e578063f06a9c6b14610836578063f0e085f514610849578063f19ece6f14610851576103fc565b8063d473c2da116100f4578063d473c2da146107f8578063d485045e14610800578063d80100ea14610813578063e8f6276414610826576103fc565b8063c9ddf448146107a3578063cb6eacd1146107b6578063cd5d808d146107dd578063d288208c146107f0576103fc565b8063b05f6570116101a8578063b9cffa3e11610177578063b9cffa3e14610742578063ba4861e91461074a578063bdee453c14610752578063c4a9081514610765578063c4d66de814610790576103fc565b8063b05f657014610701578063b30643d914610714578063b41263b614610727578063b7e152411461072f576103fc565b8063acc04348116101e4578063acc04348146106c9578063adfcbc98146106d1578063ae0a8530146106e4578063afe84009146106ec576103fc565b806392d894f814610686578063959083d314610699578063a22473a2146106a1578063ac92fd8e146106b4576103fc565b80634699f84611610310578063742e6798116102a35780638417a2ae116102725780638417a2ae146106485780638456cb591461065b5780638da5cb5b146106635780638dc48ba51461066b5780638f32d59b1461067e576103fc565b8063742e67981461062857806378d849ed146106305780637a8faeb814610638578063824fcdc914610640576103fc565b806362fff3f6116102df57806362fff3f6146105d657806368c4ac26146105fa5780636e6637301461060d5780637420ca3e14610620576103fc565b80634699f8461461059c5780634f28cac2146105a4578063569fc1fb146105ac578063574442cc146105ce576103fc565b8063249556fb116103935780633432423c116103625780633432423c1461053d5780633452d2d4146105505780633fca506e146105635780634115a2b6146105765780634203e39514610589576103fc565b8063249556fb146104fa57806324cc57491461050d5780632a3240271461052d5780632f47076414610535576103fc565b806317548b79116103cf57806317548b79146104945780631b7bde74146104a75780631c9f66c2146104c7578063218b39c6146104e7576103fc565b8063065d810f1461041d5780630676c1b71461044b5780630d4d11fe14610460578063115cc0ce14610481575b60405162461bcd60e51b815260040161041490612c56565b60405180910390fd5b61043061042b366004612482565b6108a5565b60405161044296959493929190612d1b565b60405180910390f35b6104536108e5565b60405161044291906129c1565b61047361046e3660046123d4565b6108f4565b604051610442929190612ce4565b61045361048f36600461237c565b610ccf565b6104536104a236600461250d565b610ced565b6104ba6104b536600461239a565b610d08565b6040516104429190612cd6565b6104da6104d536600461237c565b610d25565b6040516104429190612a5e565b6104536104f536600461237c565b610d4f565b6104da61050836600461237c565b610d6a565b61052061051b36600461237c565b610d8e565b6040516104429190612a94565b6104ba610da3565b6104ba610da9565b61043061054b366004612482565b610daf565b6104ba61055e36600461237c565b610def565b6104ba61057136600461237c565b610e01565b6105206105843660046124ee565b610e13565b6104ba61059736600461237c565b610e33565b6104ba610e45565b6104ba610e4b565b6105bf6105ba3660046124d0565b610e51565b60405161044293929190612cf2565b6104ba610e72565b6105e96105e436600461239a565b610e78565b604051610442959493929190612d0d565b61052061060836600461237c565b610eb2565b61045361061b36600461237c565b610ec7565b610453610ee2565b6104ba610ef1565b610453610ef7565b6104ba610f06565b6104ba610f0c565b6104ba61065636600461237c565b610f12565b610520610f2d565b610453610f36565b61045361067936600461237c565b610f45565b610520610f60565b6104ba61069436600461237c565b610f86565b6104ba610f98565b6104ba6106af36600461239a565b610f9e565b6106c76106c2366004612435565b610fc9565b005b6104ba611178565b6106c76106df36600461237c565b61117e565b6104ba61126b565b6106f4611271565b6040516104429190612be7565b61052061070f36600461237c565b611280565b6104ba61072236600461237c565b61129e565b6104ba6112b0565b6104ba61073d36600461237c565b6112b6565b6104536112c8565b6104536112d7565b6104ba61076036600461237c565b6112e6565b6107786107733660046124d0565b6112f8565b6040516104429c9b9a99989796959493929190612b34565b6106c761079e36600461237c565b61136a565b6106c76107b136600461239a565b611516565b6107c96107c43660046124d0565b6116c0565b604051610442989796959493929190612abd565b6104ba6107eb36600461239a565b611712565b61045361172f565b6104ba61173e565b6104ba61080e36600461237c565b611744565b6104ba61082136600461237c565b611756565b6104536118da565b6104ba6118e9565b6106c761084436600461237c565b6118ef565b6104ba6119b4565b61086461085f36600461237c565b6119ba565b604051610442929190612a6f565b6106c761088036600461237c565b611a44565b6104ba611a71565b6104ba611a77565b610453611a7d565b610453611a8c565b6009602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b6031546001600160a01b031681565b60315460009081906001600160a01b031633146109235760405162461bcd60e51b815260040161041490612c76565b603d5460ff16156109465760405162461bcd60e51b815260040161041490612c16565b60006109506112b0565b6001600160a01b038816600090815260346020526040902061097190611a9b565b1090506001600061098186611aa2565b6001600160a01b038a166000908152603a602052604090209094506109ac908863ffffffff611ad516565b6109da576001600160a01b0389166000908152603a602052604090206109d8908863ffffffff611af316565b505b6001600160a01b03808a166000908152603b60209081526040808320938b1683529290522054610a10908563ffffffff611b5316565b6001600160a01b03808b166000908152603b60209081526040808320938c1683529290522055610a408787611b7f565b6001600160a01b038a166000908152603660205260409020549095508315610a9057610a72818763ffffffff611b5316565b6001600160a01b038b16600090815260366020526040902055610c0d565b6001600160a01b038a1660009081526036602052604090205415610ac8576001600160a01b038a166000908152603660205260408120555b610ad8868263ffffffff611b5316565b60375460385460405163095ea7b360e01b81529294506001600160a01b039182169263095ea7b392610b1092169086906004016129f7565b602060405180830381600087803b158015610b2a57600080fd5b505af1158015610b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b6291908101906124b2565b506038546040516000916001600160a01b031690610b86908d9086906024016129f7565b60408051601f198184030181529181526020820180516001600160e01b031663f33bf9a160e01b17905251610bbb91906129b5565b6000604051808303816000865af19150503d8060008114610bf8576040519150601f19603f3d011682016040523d82523d6000602084013e610bfd565b606091505b5050905080610c0b57600093505b505b8215610c6e57831515886001600160a01b03168b6001600160a01b03167f956d8d442c76f1bedc4178cda59c4ad17c135bd6ec5a603a39fbfe5a320dbbc08c8b8a8c89604051610c61959493929190612a12565b60405180910390a4610cc2565b876001600160a01b03168a6001600160a01b03167f0909aef8097f3ad1e03459f173d44656bde668485239e8d83d9dcbc8af63d1408b8a898b88604051610cb9959493929190612a12565b60405180910390a35b5050505094509492505050565b6001600160a01b039081166000908152603360205260409020541690565b6005602052600090815260409020546001600160a01b031681565b603b60209081526000928352604080842090915290825290205481565b6001600160a01b0381166000908152603a60205260409020606090610d4990611c7f565b92915050565b6023602052600090815260409020546001600160a01b031681565b6001600160a01b0381166000908152603460205260409020606090610d4990611c7f565b60326020526000908152604090205460ff1681565b60185481565b601f5481565b6008602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b601a6020526000908152604090205481565b602a6020526000908152604090205481565b600a60209081526000928352604080842090915290825290205460ff1681565b60166020526000908152604090205481565b60155481565b60295481565b600c6020526000908152604090208054600182015460029092015490919083565b602b5481565b600b602090815260009283526040808420909152908252902080546001820154600283015460038401546004909401549293919290919085565b60266020526000908152604090205460ff1681565b6033602052600090815260409020546001600160a01b031681565b6003546001600160a01b031681565b60355481565b6002546001600160a01b031681565b601e5481565b60395490565b6001600160a01b031660009081526036602052604090205490565b603d5460ff1681565b6001546001600160a01b031690565b6022602052600090815260409020546001600160a01b031681565b6001546000906001600160a01b0316610f77611d25565b6001600160a01b031614905090565b60176020526000908152604090205481565b602c5481565b6001600160a01b039182166000908152603b6020908152604080832093909416825291909152205490565b603d5460ff1615610fec5760405162461bcd60e51b815260040161041490612c16565b6001600160a01b0382166110125760405162461bcd60e51b815260040161041490612ca6565b336000818152603b602090815260408083206001600160a01b0388168452909152812054908382116110445781611046565b835b9050600081116110685760405162461bcd60e51b815260040161041490612c36565b6110706112b0565b6001600160a01b038416600090815260346020526040902061109190611a9b565b10156110af5760405162461bcd60e51b815260040161041490612c06565b60006110c1838363ffffffff611d2916565b9050806110d7576110d28488611d6b565b611100565b6001600160a01b038085166000908152603b60209081526040808320938b168352929052208190555b61111a6001600160a01b038816878463ffffffff611dae16565b866001600160a01b0316866001600160a01b0316856001600160a01b03167f7e121a301046a79dbdc6bb475ff36f651f88a7cb91fefd7cb8aa4b9f4a33b20b856040516111679190612cd6565b60405180910390a450505050505050565b602f5481565b603d5460ff16156111a15760405162461bcd60e51b815260040161041490612c16565b6001600160a01b0381166111c75760405162461bcd60e51b815260040161041490612ca6565b336111d06112b0565b6001600160a01b03821660009081526034602052604090206111f190611a9b565b101561120f5760405162461bcd60e51b815260040161041490612c06565b60608061121b836119ba565b9150915060005b82518110156112645761125c83828151811061123a57fe5b60200260200101518684848151811061124f57fe5b6020026020010151610fc9565b600101611222565b5050505050565b60205481565b602d546001600160a01b031681565b6001600160a01b031660009081526032602052604090205460ff1690565b601d6020526000908152604090205481565b60355490565b601c6020526000908152604090205481565b6037546001600160a01b031681565b6004546001600160a01b031681565b60366020526000908152604090205481565b600660208190526000918252604090912080546001820154600283015460038401546004850154600586015496860154600787015460088801546009890154600a8a0154600b909a0154989a9799969860ff909616979496949593949293919290916001600160a01b0391821691168c565b611372610f60565b61138e5760405162461bcd60e51b815260040161041490612c96565b63193bbe8960e31b600081905260056020527fa32428c5f7f1f49cbf6b6f0ae7823841efc255f4d2b6125ce4b307c53dc525c7546001600160a01b0316906113d69083611e07565b6113e7630b05f65760e41b83611e07565b6113f863249556fb60e01b83611e07565b61140963f06a9c6b60e01b83611e07565b61141a6306a688ff60e11b83611e07565b61142b63f19ece6f60e01b83611e07565b61143c63511239d160e11b83611e07565b61144d630e4fb36160e11b83611e07565b61145e6356497ec760e11b83611e07565b61146f6315bf979360e31b83611e07565b611480635a0931db60e11b83611e07565b6114916308ae606760e11b83611e07565b6114a263420bd15760e11b83611e07565b6114b363824fcdc960e01b83611e07565b6114c4636c00807560e11b83611e07565b69416666696c696174657360b01b826001600160a01b0316826001600160a01b03167f1420e3a2094d671bc2eb897941fa3d94ffa37f0cb6d530651946250a2151cb7f60405160405180910390a45050565b336000908152602260205260409020546001600160a01b031661154b5760405162461bcd60e51b815260040161041490612c76565b603d5460ff161561156e5760405162461bcd60e51b815260040161041490612c16565b611576612330565b61157f83611280565b151560408083019182526001600160a01b03858116600090815260336020908152929020541615159083015251806115b8575080602001515b806115d45750816001600160a01b0316836001600160a01b0316145b1580825215611665576001600160a01b03838116600090815260336020908152604080832080546001600160a01b0319169487169485179055928252603490522061161f9084611af3565b50816001600160a01b0316836001600160a01b03167f01085a2bdafb7e1bf8c2744a99befcb7d35fd44ce0fec8273e65687bf69b40d260405160405180910390a36116bb565b816001600160a01b0316836001600160a01b03167f5fcda235bf45571cdfcce3194fdec51249320ea208d33ddf19457f971fbce052836020015184604001516040516116b2929190612aa2565b60405180910390a35b505050565b6007602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949560ff8516956101009095046001600160a01b03908116959481169493169288565b603c60209081526000928352604080842090915290825290205481565b6038546001600160a01b031681565b60275481565b60196020526000908152604090205481565b6000606061176383610d25565b6002549091506001600160a01b031660005b82518110156118d25782516000906060906001600160a01b0385169063d138f9a160e01b908790869081106117a657fe5b6020026020010151602d60009054906101000a90046001600160a01b0316603b60008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008a89815181106117f757fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054604051602401611832939291906129cf565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161187091906129b5565b600060405180830381855afa9150503d80600081146118ab576040519150601f19603f3d011682016040523d82523d6000602084013e6118b0565b606091505b509150915060018214156118c8576020810151860195505b5050600101611775565b505050919050565b6014546001600160a01b031681565b601b5481565b336000908152602260205260409020546001600160a01b03166119245760405162461bcd60e51b815260040161041490612c76565b603d5460ff16156119475760405162461bcd60e51b815260040161041490612c16565b6001600160a01b03811660009081526032602052604090205460ff166119b1576001600160a01b038116600081815260326020526040808220805460ff19166001179055517fa4c47359ccbdf26dba0d446255196fdc8d493dea957ded328aaa20f86afa694d9190a25b50565b60285481565b6060806119c683610d25565b915081516040519080825280602002602001820160405280156119f3578160200160208202803883390190505b50905060005b8251811015611a3e57611a1f84848381518110611a1257fe5b6020026020010151610f9e565b828281518110611a2b57fe5b60209081029190910101526001016119f9565b50915091565b611a4c610f60565b611a685760405162461bcd60e51b815260040161041490612c96565b6119b181611e81565b60395481565b60215481565b602e546001600160a01b031681565b6030546001600160a01b031681565b6001015490565b6000610d4968056bc75e2d63100000611ac9611abc610f0c565b859063ffffffff611f0316565b9063ffffffff611f3d16565b6001600160a01b031660009081526020919091526040902054151590565b6000611aff8383611ad5565b611b4b5750600182810180548083018083556000928352602080842090920180546001600160a01b0319166001600160a01b038716908117909155835290859052604090912055610d49565b506000610d49565b600082820183811015611b785760405162461bcd60e51b815260040161041490612c46565b9392505050565b60025460375460009182916001600160a01b03918216918391606091849163d138f9a160e01b918a9116611bce68056bc75e2d63100000611ac9611bc1611f7f565b8d9063ffffffff611f0316565b604051602401611be0939291906129cf565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611c1e91906129b5565b600060405180830381855afa9150503d8060008114611c59576040519150601f19603f3d011682016040523d82523d6000602084013e611c5e565b606091505b50915091506001821415611c7457602081015193505b509195945050505050565b6060808260010180549050604051908082528060200260200182016040528015611cb3578160200160208202803883390190505b50905060005b6001840154811015611d1e57836001018181548110611cd457fe5b9060005260206000200160009054906101000a90046001600160a01b0316828281518110611cfe57fe5b6001600160a01b0390921660209283029190910190910152600101611cb9565b5092915050565b3390565b6000611b7883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611f85565b6001600160a01b038083166000818152603b602090815260408083209486168352938152838220829055918152603a909152206116bb908263ffffffff611fb116565b6040516116bb90849063a9059cbb60e01b90611dd090869086906024016129f7565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526120bc565b6001600160e01b03198216600090815260056020526040902080546001600160a01b0319166001600160a01b03831690811790915515611e6257611e5c600d6001600160e01b0319841663ffffffff6121a716565b50611e7d565b6116bb600d6001600160e01b0319841663ffffffff6121e716565b5050565b6001600160a01b038116611ea75760405162461bcd60e51b815260040161041490612c26565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b600082611f1257506000610d49565b82820282848281611f1f57fe5b0414611b785760405162461bcd60e51b815260040161041490612c86565b6000611b7883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506122a8565b60205490565b60008184841115611fa95760405162461bcd60e51b81526004016104149190612bf5565b505050900390565b6000611fbd8383611ad5565b15611b4b576001600160a01b0382166000908152602084905260409020546001840154600019918201910180821461206857600085600101828154811061200057fe5b6000918252602090912001546001870180546001600160a01b03909216925082918590811061202b57fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815290869052604090206001830190555b6001600160a01b0384166000908152602086905260408120556001850180548061208e57fe5b600082815260209020810160001990810180546001600160a01b03191690550190555060019150610d499050565b6120ce826001600160a01b03166122df565b6120ea5760405162461bcd60e51b815260040161041490612cc6565b60006060836001600160a01b03168360405161210691906129b5565b6000604051808303816000865af19150503d8060008114612143576040519150601f19603f3d011682016040523d82523d6000602084013e612148565b606091505b50915091508161216a5760405162461bcd60e51b815260040161041490612c66565b8051156121a1578080602001905161218591908101906124b2565b6121a15760405162461bcd60e51b815260040161041490612cb6565b50505050565b60006121b3838361231b565b611b4b5750600180830180548083018083556000928352602080842090920185905584835290859052604090912055610d49565b60006121f3838361231b565b15611b4b576000828152602084905260409020546001840154600019918201910180821461226b57600085600101828154811061222c57fe5b906000526020600020015490508086600101848154811061224957fe5b6000918252602080832090910192909255918252869052604090206001830190555b6000848152602086905260408120556001850180548061228757fe5b60019003818190600052602060002001600090559055600192505050610d49565b600081836122c95760405162461bcd60e51b81526004016104149190612bf5565b5060008385816122d557fe5b0495945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061231357508115155b949350505050565b60009081526020919091526040902054151590565b604080516060810182526000808252602082018190529181019190915290565b8035610d4981612dfa565b8051610d4981612e0e565b8035610d4981612e17565b8035610d4981612e20565b60006020828403121561238e57600080fd5b60006123138484612350565b600080604083850312156123ad57600080fd5b60006123b98585612350565b92505060206123ca85828601612350565b9150509250929050565b600080600080608085870312156123ea57600080fd5b60006123f68787612350565b945050602061240787828801612350565b935050604061241887828801612350565b925050606061242987828801612366565b91505092959194509250565b60008060006060848603121561244a57600080fd5b60006124568686612350565b935050602061246786828701612350565b925050604061247886828701612366565b9150509250925092565b6000806040838503121561249557600080fd5b60006124a18585612350565b92505060206123ca85828601612366565b6000602082840312156124c457600080fd5b6000612313848461235b565b6000602082840312156124e257600080fd5b60006123138484612366565b6000806040838503121561250157600080fd5b60006123b98585612366565b60006020828403121561251f57600080fd5b60006123138484612371565b6000612537838361254b565b505060200190565b6000612537838361260a565b61255481612d8d565b82525050565b600061256582612d7b565b61256f8185612d7f565b935061257a83612d75565b8060005b838110156125a8578151612592888261252b565b975061259d83612d75565b92505060010161257e565b509495945050505050565b60006125be82612d7b565b6125c88185612d7f565b93506125d383612d75565b8060005b838110156125a85781516125eb888261253f565b97506125f683612d75565b9250506001016125d7565b61255481612d98565b61255481612d9d565b600061261e82612d7b565b6126288185612d88565b9350612638818560208601612dc4565b9290920192915050565b61255481612db9565b600061265682612d7b565b6126608185612d7f565b9350612670818560208601612dc4565b61267981612df0565b9093019392505050565b6000612690603283612d7f565b7f596f757220726566657272616c7320686173206e6f74207265616368656420748152711a19481b5a5b9a5b5d5b481c995c5d595cdd60721b602082015260400192915050565b60006126e4600683612d7f565b6514185d5cd95960d21b815260200192915050565b6000612706602683612d7f565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b600061274e602783612d7f565b7f416666696c69617465733a2063616e6e6f74207769746864726177207a65726f81526608185b5bdd5b9d60ca1b602082015260400192915050565b6000612797601b83612d7f565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006127d0602183612d7f565b7f416666696c6961746573202d2066616c6c6261636b206e6f7420616c6c6f77658152601960fa1b602082015260400192915050565b6000612813602083612d7f565b7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815260200192915050565b600061284c601a83612d7f565b7f416666696c69617465733a206e6f7420617574686f72697a6564000000000000815260200192915050565b6000612885602183612d7f565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006128c8600c83612d7f565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b60006128f0602b83612d7f565b7f416666696c69617465733a2063616e6e6f7420776974686472617720746f207a81526a65726f206164647265737360a81b602082015260400192915050565b600061293d602a83612d7f565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b6000612989601f83612d7f565b7f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400815260200192915050565b6000611b788284612613565b60208101610d49828461254b565b606081016129dd828661254b565b6129ea602083018561254b565b612313604083018461260a565b60408101612a05828561254b565b611b78602083018461260a565b60a08101612a20828861254b565b612a2d602083018761260a565b612a3a604083018661260a565b612a47606083018561260a565b612a54608083018461260a565b9695505050505050565b60208082528101611b78818461255a565b60408082528101612a80818561255a565b9050818103602083015261231381846125b3565b60208101610d498284612601565b60408101612ab08285612601565b611b786020830184612601565b6101008101612acc828b61260a565b612ad9602083018a612601565b612ae6604083018961254b565b612af3606083018861254b565b612b00608083018761254b565b612b0d60a083018661260a565b612b1a60c083018561260a565b612b2760e083018461260a565b9998505050505050505050565b6101808101612b43828f61260a565b612b50602083018e61260a565b612b5d604083018d61260a565b612b6a606083018c612601565b612b77608083018b61260a565b612b8460a083018a61260a565b612b9160c083018961260a565b612b9e60e083018861260a565b612bac61010083018761260a565b612bba61012083018661260a565b612bc861014083018561254b565b612bd661016083018461254b565b9d9c50505050505050505050505050565b60208101610d498284612642565b60208082528101611b78818461264b565b60208082528101610d4981612683565b60208082528101610d49816126d7565b60208082528101610d49816126f9565b60208082528101610d4981612741565b60208082528101610d498161278a565b60208082528101610d49816127c3565b60208082528101610d4981612806565b60208082528101610d498161283f565b60208082528101610d4981612878565b60208082528101610d49816128bb565b60208082528101610d49816128e3565b60208082528101610d4981612930565b60208082528101610d498161297c565b60208101610d49828461260a565b60408101612a05828561260a565b60608101612d00828661260a565b6129ea602083018561260a565b60a08101612a20828861260a565b60c08101612d29828961260a565b612d36602083018861260a565b612d43604083018761260a565b612d50606083018661260a565b612d5d608083018561260a565b612d6a60a083018461260a565b979650505050505050565b60200190565b5190565b90815260200190565b919050565b6000610d4982612dad565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b6000610d4982612d8d565b60005b83811015612ddf578181015183820152602001612dc7565b838111156121a15750506000910152565b601f01601f191690565b612e0381612d8d565b81146119b157600080fd5b612e0381612d98565b612e0381612d9d565b612e0381612da056fea365627a7a72315820cc4649bd91a7441aca3ff2dadfd86af2ac268ee91a3f5fb2961b7109692e7f926c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103fc5760003560e01c806392d894f811610215578063c9ddf44811610125578063edab119f116100b8578063f2fde38b11610087578063f2fde38b14610872578063f589a3e714610885578063f6ddc8b31461088d578063f706b1f214610895578063f851a4401461089d576103fc565b8063edab119f1461082e578063f06a9c6b14610836578063f0e085f514610849578063f19ece6f14610851576103fc565b8063d473c2da116100f4578063d473c2da146107f8578063d485045e14610800578063d80100ea14610813578063e8f6276414610826576103fc565b8063c9ddf448146107a3578063cb6eacd1146107b6578063cd5d808d146107dd578063d288208c146107f0576103fc565b8063b05f6570116101a8578063b9cffa3e11610177578063b9cffa3e14610742578063ba4861e91461074a578063bdee453c14610752578063c4a9081514610765578063c4d66de814610790576103fc565b8063b05f657014610701578063b30643d914610714578063b41263b614610727578063b7e152411461072f576103fc565b8063acc04348116101e4578063acc04348146106c9578063adfcbc98146106d1578063ae0a8530146106e4578063afe84009146106ec576103fc565b806392d894f814610686578063959083d314610699578063a22473a2146106a1578063ac92fd8e146106b4576103fc565b80634699f84611610310578063742e6798116102a35780638417a2ae116102725780638417a2ae146106485780638456cb591461065b5780638da5cb5b146106635780638dc48ba51461066b5780638f32d59b1461067e576103fc565b8063742e67981461062857806378d849ed146106305780637a8faeb814610638578063824fcdc914610640576103fc565b806362fff3f6116102df57806362fff3f6146105d657806368c4ac26146105fa5780636e6637301461060d5780637420ca3e14610620576103fc565b80634699f8461461059c5780634f28cac2146105a4578063569fc1fb146105ac578063574442cc146105ce576103fc565b8063249556fb116103935780633432423c116103625780633432423c1461053d5780633452d2d4146105505780633fca506e146105635780634115a2b6146105765780634203e39514610589576103fc565b8063249556fb146104fa57806324cc57491461050d5780632a3240271461052d5780632f47076414610535576103fc565b806317548b79116103cf57806317548b79146104945780631b7bde74146104a75780631c9f66c2146104c7578063218b39c6146104e7576103fc565b8063065d810f1461041d5780630676c1b71461044b5780630d4d11fe14610460578063115cc0ce14610481575b60405162461bcd60e51b815260040161041490612c56565b60405180910390fd5b61043061042b366004612482565b6108a5565b60405161044296959493929190612d1b565b60405180910390f35b6104536108e5565b60405161044291906129c1565b61047361046e3660046123d4565b6108f4565b604051610442929190612ce4565b61045361048f36600461237c565b610ccf565b6104536104a236600461250d565b610ced565b6104ba6104b536600461239a565b610d08565b6040516104429190612cd6565b6104da6104d536600461237c565b610d25565b6040516104429190612a5e565b6104536104f536600461237c565b610d4f565b6104da61050836600461237c565b610d6a565b61052061051b36600461237c565b610d8e565b6040516104429190612a94565b6104ba610da3565b6104ba610da9565b61043061054b366004612482565b610daf565b6104ba61055e36600461237c565b610def565b6104ba61057136600461237c565b610e01565b6105206105843660046124ee565b610e13565b6104ba61059736600461237c565b610e33565b6104ba610e45565b6104ba610e4b565b6105bf6105ba3660046124d0565b610e51565b60405161044293929190612cf2565b6104ba610e72565b6105e96105e436600461239a565b610e78565b604051610442959493929190612d0d565b61052061060836600461237c565b610eb2565b61045361061b36600461237c565b610ec7565b610453610ee2565b6104ba610ef1565b610453610ef7565b6104ba610f06565b6104ba610f0c565b6104ba61065636600461237c565b610f12565b610520610f2d565b610453610f36565b61045361067936600461237c565b610f45565b610520610f60565b6104ba61069436600461237c565b610f86565b6104ba610f98565b6104ba6106af36600461239a565b610f9e565b6106c76106c2366004612435565b610fc9565b005b6104ba611178565b6106c76106df36600461237c565b61117e565b6104ba61126b565b6106f4611271565b6040516104429190612be7565b61052061070f36600461237c565b611280565b6104ba61072236600461237c565b61129e565b6104ba6112b0565b6104ba61073d36600461237c565b6112b6565b6104536112c8565b6104536112d7565b6104ba61076036600461237c565b6112e6565b6107786107733660046124d0565b6112f8565b6040516104429c9b9a99989796959493929190612b34565b6106c761079e36600461237c565b61136a565b6106c76107b136600461239a565b611516565b6107c96107c43660046124d0565b6116c0565b604051610442989796959493929190612abd565b6104ba6107eb36600461239a565b611712565b61045361172f565b6104ba61173e565b6104ba61080e36600461237c565b611744565b6104ba61082136600461237c565b611756565b6104536118da565b6104ba6118e9565b6106c761084436600461237c565b6118ef565b6104ba6119b4565b61086461085f36600461237c565b6119ba565b604051610442929190612a6f565b6106c761088036600461237c565b611a44565b6104ba611a71565b6104ba611a77565b610453611a7d565b610453611a8c565b6009602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b6031546001600160a01b031681565b60315460009081906001600160a01b031633146109235760405162461bcd60e51b815260040161041490612c76565b603d5460ff16156109465760405162461bcd60e51b815260040161041490612c16565b60006109506112b0565b6001600160a01b038816600090815260346020526040902061097190611a9b565b1090506001600061098186611aa2565b6001600160a01b038a166000908152603a602052604090209094506109ac908863ffffffff611ad516565b6109da576001600160a01b0389166000908152603a602052604090206109d8908863ffffffff611af316565b505b6001600160a01b03808a166000908152603b60209081526040808320938b1683529290522054610a10908563ffffffff611b5316565b6001600160a01b03808b166000908152603b60209081526040808320938c1683529290522055610a408787611b7f565b6001600160a01b038a166000908152603660205260409020549095508315610a9057610a72818763ffffffff611b5316565b6001600160a01b038b16600090815260366020526040902055610c0d565b6001600160a01b038a1660009081526036602052604090205415610ac8576001600160a01b038a166000908152603660205260408120555b610ad8868263ffffffff611b5316565b60375460385460405163095ea7b360e01b81529294506001600160a01b039182169263095ea7b392610b1092169086906004016129f7565b602060405180830381600087803b158015610b2a57600080fd5b505af1158015610b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b6291908101906124b2565b506038546040516000916001600160a01b031690610b86908d9086906024016129f7565b60408051601f198184030181529181526020820180516001600160e01b031663f33bf9a160e01b17905251610bbb91906129b5565b6000604051808303816000865af19150503d8060008114610bf8576040519150601f19603f3d011682016040523d82523d6000602084013e610bfd565b606091505b5050905080610c0b57600093505b505b8215610c6e57831515886001600160a01b03168b6001600160a01b03167f956d8d442c76f1bedc4178cda59c4ad17c135bd6ec5a603a39fbfe5a320dbbc08c8b8a8c89604051610c61959493929190612a12565b60405180910390a4610cc2565b876001600160a01b03168a6001600160a01b03167f0909aef8097f3ad1e03459f173d44656bde668485239e8d83d9dcbc8af63d1408b8a898b88604051610cb9959493929190612a12565b60405180910390a35b5050505094509492505050565b6001600160a01b039081166000908152603360205260409020541690565b6005602052600090815260409020546001600160a01b031681565b603b60209081526000928352604080842090915290825290205481565b6001600160a01b0381166000908152603a60205260409020606090610d4990611c7f565b92915050565b6023602052600090815260409020546001600160a01b031681565b6001600160a01b0381166000908152603460205260409020606090610d4990611c7f565b60326020526000908152604090205460ff1681565b60185481565b601f5481565b6008602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b601a6020526000908152604090205481565b602a6020526000908152604090205481565b600a60209081526000928352604080842090915290825290205460ff1681565b60166020526000908152604090205481565b60155481565b60295481565b600c6020526000908152604090208054600182015460029092015490919083565b602b5481565b600b602090815260009283526040808420909152908252902080546001820154600283015460038401546004909401549293919290919085565b60266020526000908152604090205460ff1681565b6033602052600090815260409020546001600160a01b031681565b6003546001600160a01b031681565b60355481565b6002546001600160a01b031681565b601e5481565b60395490565b6001600160a01b031660009081526036602052604090205490565b603d5460ff1681565b6001546001600160a01b031690565b6022602052600090815260409020546001600160a01b031681565b6001546000906001600160a01b0316610f77611d25565b6001600160a01b031614905090565b60176020526000908152604090205481565b602c5481565b6001600160a01b039182166000908152603b6020908152604080832093909416825291909152205490565b603d5460ff1615610fec5760405162461bcd60e51b815260040161041490612c16565b6001600160a01b0382166110125760405162461bcd60e51b815260040161041490612ca6565b336000818152603b602090815260408083206001600160a01b0388168452909152812054908382116110445781611046565b835b9050600081116110685760405162461bcd60e51b815260040161041490612c36565b6110706112b0565b6001600160a01b038416600090815260346020526040902061109190611a9b565b10156110af5760405162461bcd60e51b815260040161041490612c06565b60006110c1838363ffffffff611d2916565b9050806110d7576110d28488611d6b565b611100565b6001600160a01b038085166000908152603b60209081526040808320938b168352929052208190555b61111a6001600160a01b038816878463ffffffff611dae16565b866001600160a01b0316866001600160a01b0316856001600160a01b03167f7e121a301046a79dbdc6bb475ff36f651f88a7cb91fefd7cb8aa4b9f4a33b20b856040516111679190612cd6565b60405180910390a450505050505050565b602f5481565b603d5460ff16156111a15760405162461bcd60e51b815260040161041490612c16565b6001600160a01b0381166111c75760405162461bcd60e51b815260040161041490612ca6565b336111d06112b0565b6001600160a01b03821660009081526034602052604090206111f190611a9b565b101561120f5760405162461bcd60e51b815260040161041490612c06565b60608061121b836119ba565b9150915060005b82518110156112645761125c83828151811061123a57fe5b60200260200101518684848151811061124f57fe5b6020026020010151610fc9565b600101611222565b5050505050565b60205481565b602d546001600160a01b031681565b6001600160a01b031660009081526032602052604090205460ff1690565b601d6020526000908152604090205481565b60355490565b601c6020526000908152604090205481565b6037546001600160a01b031681565b6004546001600160a01b031681565b60366020526000908152604090205481565b600660208190526000918252604090912080546001820154600283015460038401546004850154600586015496860154600787015460088801546009890154600a8a0154600b909a0154989a9799969860ff909616979496949593949293919290916001600160a01b0391821691168c565b611372610f60565b61138e5760405162461bcd60e51b815260040161041490612c96565b63193bbe8960e31b600081905260056020527fa32428c5f7f1f49cbf6b6f0ae7823841efc255f4d2b6125ce4b307c53dc525c7546001600160a01b0316906113d69083611e07565b6113e7630b05f65760e41b83611e07565b6113f863249556fb60e01b83611e07565b61140963f06a9c6b60e01b83611e07565b61141a6306a688ff60e11b83611e07565b61142b63f19ece6f60e01b83611e07565b61143c63511239d160e11b83611e07565b61144d630e4fb36160e11b83611e07565b61145e6356497ec760e11b83611e07565b61146f6315bf979360e31b83611e07565b611480635a0931db60e11b83611e07565b6114916308ae606760e11b83611e07565b6114a263420bd15760e11b83611e07565b6114b363824fcdc960e01b83611e07565b6114c4636c00807560e11b83611e07565b69416666696c696174657360b01b826001600160a01b0316826001600160a01b03167f1420e3a2094d671bc2eb897941fa3d94ffa37f0cb6d530651946250a2151cb7f60405160405180910390a45050565b336000908152602260205260409020546001600160a01b031661154b5760405162461bcd60e51b815260040161041490612c76565b603d5460ff161561156e5760405162461bcd60e51b815260040161041490612c16565b611576612330565b61157f83611280565b151560408083019182526001600160a01b03858116600090815260336020908152929020541615159083015251806115b8575080602001515b806115d45750816001600160a01b0316836001600160a01b0316145b1580825215611665576001600160a01b03838116600090815260336020908152604080832080546001600160a01b0319169487169485179055928252603490522061161f9084611af3565b50816001600160a01b0316836001600160a01b03167f01085a2bdafb7e1bf8c2744a99befcb7d35fd44ce0fec8273e65687bf69b40d260405160405180910390a36116bb565b816001600160a01b0316836001600160a01b03167f5fcda235bf45571cdfcce3194fdec51249320ea208d33ddf19457f971fbce052836020015184604001516040516116b2929190612aa2565b60405180910390a35b505050565b6007602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949560ff8516956101009095046001600160a01b03908116959481169493169288565b603c60209081526000928352604080842090915290825290205481565b6038546001600160a01b031681565b60275481565b60196020526000908152604090205481565b6000606061176383610d25565b6002549091506001600160a01b031660005b82518110156118d25782516000906060906001600160a01b0385169063d138f9a160e01b908790869081106117a657fe5b6020026020010151602d60009054906101000a90046001600160a01b0316603b60008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008a89815181106117f757fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054604051602401611832939291906129cf565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161187091906129b5565b600060405180830381855afa9150503d80600081146118ab576040519150601f19603f3d011682016040523d82523d6000602084013e6118b0565b606091505b509150915060018214156118c8576020810151860195505b5050600101611775565b505050919050565b6014546001600160a01b031681565b601b5481565b336000908152602260205260409020546001600160a01b03166119245760405162461bcd60e51b815260040161041490612c76565b603d5460ff16156119475760405162461bcd60e51b815260040161041490612c16565b6001600160a01b03811660009081526032602052604090205460ff166119b1576001600160a01b038116600081815260326020526040808220805460ff19166001179055517fa4c47359ccbdf26dba0d446255196fdc8d493dea957ded328aaa20f86afa694d9190a25b50565b60285481565b6060806119c683610d25565b915081516040519080825280602002602001820160405280156119f3578160200160208202803883390190505b50905060005b8251811015611a3e57611a1f84848381518110611a1257fe5b6020026020010151610f9e565b828281518110611a2b57fe5b60209081029190910101526001016119f9565b50915091565b611a4c610f60565b611a685760405162461bcd60e51b815260040161041490612c96565b6119b181611e81565b60395481565b60215481565b602e546001600160a01b031681565b6030546001600160a01b031681565b6001015490565b6000610d4968056bc75e2d63100000611ac9611abc610f0c565b859063ffffffff611f0316565b9063ffffffff611f3d16565b6001600160a01b031660009081526020919091526040902054151590565b6000611aff8383611ad5565b611b4b5750600182810180548083018083556000928352602080842090920180546001600160a01b0319166001600160a01b038716908117909155835290859052604090912055610d49565b506000610d49565b600082820183811015611b785760405162461bcd60e51b815260040161041490612c46565b9392505050565b60025460375460009182916001600160a01b03918216918391606091849163d138f9a160e01b918a9116611bce68056bc75e2d63100000611ac9611bc1611f7f565b8d9063ffffffff611f0316565b604051602401611be0939291906129cf565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611c1e91906129b5565b600060405180830381855afa9150503d8060008114611c59576040519150601f19603f3d011682016040523d82523d6000602084013e611c5e565b606091505b50915091506001821415611c7457602081015193505b509195945050505050565b6060808260010180549050604051908082528060200260200182016040528015611cb3578160200160208202803883390190505b50905060005b6001840154811015611d1e57836001018181548110611cd457fe5b9060005260206000200160009054906101000a90046001600160a01b0316828281518110611cfe57fe5b6001600160a01b0390921660209283029190910190910152600101611cb9565b5092915050565b3390565b6000611b7883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611f85565b6001600160a01b038083166000818152603b602090815260408083209486168352938152838220829055918152603a909152206116bb908263ffffffff611fb116565b6040516116bb90849063a9059cbb60e01b90611dd090869086906024016129f7565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526120bc565b6001600160e01b03198216600090815260056020526040902080546001600160a01b0319166001600160a01b03831690811790915515611e6257611e5c600d6001600160e01b0319841663ffffffff6121a716565b50611e7d565b6116bb600d6001600160e01b0319841663ffffffff6121e716565b5050565b6001600160a01b038116611ea75760405162461bcd60e51b815260040161041490612c26565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b600082611f1257506000610d49565b82820282848281611f1f57fe5b0414611b785760405162461bcd60e51b815260040161041490612c86565b6000611b7883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506122a8565b60205490565b60008184841115611fa95760405162461bcd60e51b81526004016104149190612bf5565b505050900390565b6000611fbd8383611ad5565b15611b4b576001600160a01b0382166000908152602084905260409020546001840154600019918201910180821461206857600085600101828154811061200057fe5b6000918252602090912001546001870180546001600160a01b03909216925082918590811061202b57fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815290869052604090206001830190555b6001600160a01b0384166000908152602086905260408120556001850180548061208e57fe5b600082815260209020810160001990810180546001600160a01b03191690550190555060019150610d499050565b6120ce826001600160a01b03166122df565b6120ea5760405162461bcd60e51b815260040161041490612cc6565b60006060836001600160a01b03168360405161210691906129b5565b6000604051808303816000865af19150503d8060008114612143576040519150601f19603f3d011682016040523d82523d6000602084013e612148565b606091505b50915091508161216a5760405162461bcd60e51b815260040161041490612c66565b8051156121a1578080602001905161218591908101906124b2565b6121a15760405162461bcd60e51b815260040161041490612cb6565b50505050565b60006121b3838361231b565b611b4b5750600180830180548083018083556000928352602080842090920185905584835290859052604090912055610d49565b60006121f3838361231b565b15611b4b576000828152602084905260409020546001840154600019918201910180821461226b57600085600101828154811061222c57fe5b906000526020600020015490508086600101848154811061224957fe5b6000918252602080832090910192909255918252869052604090206001830190555b6000848152602086905260408120556001850180548061228757fe5b60019003818190600052602060002001600090559055600192505050610d49565b600081836122c95760405162461bcd60e51b81526004016104149190612bf5565b5060008385816122d557fe5b0495945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061231357508115155b949350505050565b60009081526020919091526040902054151590565b604080516060810182526000808252602082018190529181019190915290565b8035610d4981612dfa565b8051610d4981612e0e565b8035610d4981612e17565b8035610d4981612e20565b60006020828403121561238e57600080fd5b60006123138484612350565b600080604083850312156123ad57600080fd5b60006123b98585612350565b92505060206123ca85828601612350565b9150509250929050565b600080600080608085870312156123ea57600080fd5b60006123f68787612350565b945050602061240787828801612350565b935050604061241887828801612350565b925050606061242987828801612366565b91505092959194509250565b60008060006060848603121561244a57600080fd5b60006124568686612350565b935050602061246786828701612350565b925050604061247886828701612366565b9150509250925092565b6000806040838503121561249557600080fd5b60006124a18585612350565b92505060206123ca85828601612366565b6000602082840312156124c457600080fd5b6000612313848461235b565b6000602082840312156124e257600080fd5b60006123138484612366565b6000806040838503121561250157600080fd5b60006123b98585612366565b60006020828403121561251f57600080fd5b60006123138484612371565b6000612537838361254b565b505060200190565b6000612537838361260a565b61255481612d8d565b82525050565b600061256582612d7b565b61256f8185612d7f565b935061257a83612d75565b8060005b838110156125a8578151612592888261252b565b975061259d83612d75565b92505060010161257e565b509495945050505050565b60006125be82612d7b565b6125c88185612d7f565b93506125d383612d75565b8060005b838110156125a85781516125eb888261253f565b97506125f683612d75565b9250506001016125d7565b61255481612d98565b61255481612d9d565b600061261e82612d7b565b6126288185612d88565b9350612638818560208601612dc4565b9290920192915050565b61255481612db9565b600061265682612d7b565b6126608185612d7f565b9350612670818560208601612dc4565b61267981612df0565b9093019392505050565b6000612690603283612d7f565b7f596f757220726566657272616c7320686173206e6f74207265616368656420748152711a19481b5a5b9a5b5d5b481c995c5d595cdd60721b602082015260400192915050565b60006126e4600683612d7f565b6514185d5cd95960d21b815260200192915050565b6000612706602683612d7f565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b600061274e602783612d7f565b7f416666696c69617465733a2063616e6e6f74207769746864726177207a65726f81526608185b5bdd5b9d60ca1b602082015260400192915050565b6000612797601b83612d7f565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006127d0602183612d7f565b7f416666696c6961746573202d2066616c6c6261636b206e6f7420616c6c6f77658152601960fa1b602082015260400192915050565b6000612813602083612d7f565b7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815260200192915050565b600061284c601a83612d7f565b7f416666696c69617465733a206e6f7420617574686f72697a6564000000000000815260200192915050565b6000612885602183612d7f565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006128c8600c83612d7f565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b60006128f0602b83612d7f565b7f416666696c69617465733a2063616e6e6f7420776974686472617720746f207a81526a65726f206164647265737360a81b602082015260400192915050565b600061293d602a83612d7f565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b6000612989601f83612d7f565b7f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400815260200192915050565b6000611b788284612613565b60208101610d49828461254b565b606081016129dd828661254b565b6129ea602083018561254b565b612313604083018461260a565b60408101612a05828561254b565b611b78602083018461260a565b60a08101612a20828861254b565b612a2d602083018761260a565b612a3a604083018661260a565b612a47606083018561260a565b612a54608083018461260a565b9695505050505050565b60208082528101611b78818461255a565b60408082528101612a80818561255a565b9050818103602083015261231381846125b3565b60208101610d498284612601565b60408101612ab08285612601565b611b786020830184612601565b6101008101612acc828b61260a565b612ad9602083018a612601565b612ae6604083018961254b565b612af3606083018861254b565b612b00608083018761254b565b612b0d60a083018661260a565b612b1a60c083018561260a565b612b2760e083018461260a565b9998505050505050505050565b6101808101612b43828f61260a565b612b50602083018e61260a565b612b5d604083018d61260a565b612b6a606083018c612601565b612b77608083018b61260a565b612b8460a083018a61260a565b612b9160c083018961260a565b612b9e60e083018861260a565b612bac61010083018761260a565b612bba61012083018661260a565b612bc861014083018561254b565b612bd661016083018461254b565b9d9c50505050505050505050505050565b60208101610d498284612642565b60208082528101611b78818461264b565b60208082528101610d4981612683565b60208082528101610d49816126d7565b60208082528101610d49816126f9565b60208082528101610d4981612741565b60208082528101610d498161278a565b60208082528101610d49816127c3565b60208082528101610d4981612806565b60208082528101610d498161283f565b60208082528101610d4981612878565b60208082528101610d49816128bb565b60208082528101610d49816128e3565b60208082528101610d4981612930565b60208082528101610d498161297c565b60208101610d49828461260a565b60408101612a05828561260a565b60608101612d00828661260a565b6129ea602083018561260a565b60a08101612a20828861260a565b60c08101612d29828961260a565b612d36602083018861260a565b612d43604083018761260a565b612d50606083018661260a565b612d5d608083018561260a565b612d6a60a083018461260a565b979650505050505050565b60200190565b5190565b90815260200190565b919050565b6000610d4982612dad565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b6000610d4982612d8d565b60005b83811015612ddf578181015183820152602001612dc7565b838111156121a15750506000910152565b601f01601f191690565b612e0381612d8d565b81146119b157600080fd5b612e0381612d98565b612e0381612d9d565b612e0381612da056fea365627a7a72315820cc4649bd91a7441aca3ff2dadfd86af2ac268ee91a3f5fb2961b7109692e7f926c6578706572696d656e74616cf564736f6c63430005110040",
  "libraries": {},
  "devdoc": {
    "details": "Module: Affiliates upgradable  Storage: from State, functions called from Protocol by delegatecall",
    "methods": {
      "getAffiliateRewardsHeld(address)": {
        "params": {
          "referrer": "The address of the referrer."
        },
        "return": "The affiliateRewardsHeld mapping value by referrer key."
      },
      "getAffiliateTradingTokenFeePercent()": {
        "details": "It returns a value defined at protocol storage (State.sol)",
        "return": "The percentage of fee share w/ 18 decimals."
      },
      "getAffiliatesReferrerBalances(address)": {
        "params": {
          "referrer": "The address of the referrer."
        },
        "return": "referrerTokensList The array of available tokens (keys).referrerTokensBalances The array of token balances (values)."
      },
      "getAffiliatesReferrerTokenBalance(address,address)": {
        "params": {
          "referrer": "The address of the referrer.",
          "token": "The address of the token to get balance for."
        },
        "return": "The affiliatesReferrerBalances mapping value by referrer and token keys."
      },
      "getAffiliatesReferrerTokensList(address)": {
        "params": {
          "referrer": "The address of a given referrer."
        },
        "return": "tokensList The list of available tokens."
      },
      "getAffiliatesTokenRewardsValueInRbtc(address)": {
        "details": "Get all token rewards estimation value in rbtc.",
        "params": {
          "referrer": "Address of referrer."
        },
        "return": "The value estimation in rbtc."
      },
      "getAffiliatesUserReferrer(address)": {
        "params": {
          "user": "The address of the user."
        },
        "return": "The address on affiliatesUserReferrer mapping value by user key."
      },
      "getMinReferralsToPayout()": {
        "details": "It returns a value defined at protocol storage (State.sol)",
        "return": "The minimum number of referrals set by Protocol."
      },
      "getReferralsList(address)": {
        "params": {
          "referrer": "The address of a given referrer."
        },
        "return": "The referralsList mapping value by referrer."
      },
      "getUserNotFirstTradeFlag(address)": {
        "params": {
          "user": "The address of a given user."
        },
        "return": "The userNotFirstTradeFlag mapping value by user."
      },
      "initialize(address)": {
        "details": "This contract is designed as a module, this way logic can be  expanded and upgraded w/o losing storage that is kept in the protocol (State.sol)  initialize() is used to register in the proxy external (module) functions  to be called via the proxy.",
        "params": {
          "target": "The address of a new logic implementation."
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payTradingFeeToAffiliatesReferrer(address,address,address,uint256)": {
        "details": "Affiliates program has 2 kind of rewards:    1. x% based on the fee of the token that is traded (in form of the token itself).    2. x% based on the fee of the token that is traded (in form of SOV).  Both are paid in this function.Actually they are not paid, but just holded by protocol until user claims them by  actively calling withdrawAffiliatesReferrerTokenFees() function,  and/or when unvesting lockedSOV.To be precise, what this function does is updating the registers of the rewards  for the referrer including the assignment of the SOV tokens as rewards to the  referrer's vesting contract.",
        "params": {
          "referrer": "The address of the referrer.",
          "token": "The address of the token in which the trading/borrowing fee was paid.",
          "trader": "The address of the trader.",
          "tradingFeeTokenBaseAmount": "Total trading fee amount, the base for calculating referrer's fees."
        },
        "return": "referrerBonusSovAmount The amount of SOV tokens paid to the referrer (through a vesting contract, lockedSOV).referrerBonusTokenAmount The amount of trading tokens paid directly to the referrer."
      },
      "setAffiliatesReferrer(address,address)": {
        "params": {
          "referrer": "The address of the referrer the user is coming from.",
          "user": "The address of the user that is trading on loan pools."
        }
      },
      "setUserNotFirstTradeFlag(address)": {
        "params": {
          "user": "The address of a given user."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAffiliatesReferrerTokenFees(address,address,uint256)": {
        "details": "Rewards are held by protocol in different tokens coming from trading fees.  Referrer has to claim them one by one for every token with accumulated balance.",
        "params": {
          "amount": "The amount of tokens to claim. If greater than balance, just sends balance.",
          "receiver": "The address of the withdrawal beneficiary.",
          "token": "The address of the token to withdraw."
        }
      },
      "withdrawAllAffiliatesReferrerTokenFees(address)": {
        "details": "It's done by looping through its available tokens.",
        "params": {
          "receiver": "The address of the withdrawal beneficiary."
        }
      }
    },
    "title": "Affiliates contract."
  },
  "userdoc": {
    "methods": {
      "constructor": "Void constructor.",
      "getAffiliateRewardsHeld(address)": {
        "notice": "Getter to query the reward amount held for a given referrer."
      },
      "getAffiliateTradingTokenFeePercent()": {
        "notice": "Getter to query the fee share of trading token fee for affiliate program."
      },
      "getAffiliatesReferrerBalances(address)": {
        "notice": "Get all token balances of a referrer."
      },
      "getAffiliatesReferrerTokenBalance(address,address)": {
        "notice": "Getter to query the affiliate balance for a given referrer and token."
      },
      "getAffiliatesReferrerTokensList(address)": {
        "notice": "Get all available tokens at the affiliates program for a given referrer."
      },
      "getAffiliatesUserReferrer(address)": {
        "notice": "Getter to query the address of referrer for a given user."
      },
      "getMinReferralsToPayout()": {
        "notice": "Getter to query referral threshold for paying out to the referrer."
      },
      "getReferralsList(address)": {
        "notice": "Getter to query the referrals coming from a referrer."
      },
      "getUserNotFirstTradeFlag(address)": {
        "notice": "Getter to query the not-first-trade flag of a user."
      },
      "initialize(address)": {
        "notice": "Set delegate callable functions by proxy contract."
      },
      "payTradingFeeToAffiliatesReferrer(address,address,address,uint256)": {
        "notice": "Protocol calls this function to pay the affiliates rewards to a user (referrer)."
      },
      "setAffiliatesReferrer(address,address)": {
        "notice": "Loan pool calls this function to tell affiliates  a user coming from a referrer is trading and should be registered if not yet.  Taking into account some user status flags may lead to the user and referrer  become added or not to the affiliates record."
      },
      "setUserNotFirstTradeFlag(address)": {
        "notice": "Setter to toggle on the not-first-trade flag of a user."
      },
      "withdrawAffiliatesReferrerTokenFees(address,address,uint256)": {
        "notice": "Referrer calls this function to receive its reward in a given token.  It will send the other (non-SOV) reward tokens from trading protocol fees,  to the referrer’s wallet."
      },
      "withdrawAllAffiliatesReferrerTokenFees(address)": {
        "notice": "Withdraw to msg.sender all token fees for a referrer."
      }
    },
    "notice": "Track referrals and reward referrers (affiliates) with tokens.  In-detail specifications are found at https://wiki.sovryn.app/en/community/Affiliates"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54790,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "reentrancyLock",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 54606,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6188,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "priceFeeds",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6190,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "swapsImpl",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6192,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "sovrynSwapContractRegistryAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6196,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "logicTargets",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 6200,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "loans",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(Loan)6566_storage)"
      },
      {
        "astId": 6204,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "loanParams",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(LoanParams)6538_storage)"
      },
      {
        "astId": 6210,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "lenderOrders",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Order)6582_storage))"
      },
      {
        "astId": 6216,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "borrowerOrders",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Order)6582_storage))"
      },
      {
        "astId": 6222,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "delegatedManagers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6228,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "lenderInterest",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(LenderInterest)6508_storage))"
      },
      {
        "astId": 6232,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "loanInterest",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_struct(LoanInterest)6518_storage)"
      },
      {
        "astId": 6234,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "logicTargetsSet",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Bytes32Set)36272_storage"
      },
      {
        "astId": 6236,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "activeLoansSet",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Bytes32Set)36272_storage"
      },
      {
        "astId": 6240,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "lenderLoanSets",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)36272_storage)"
      },
      {
        "astId": 6244,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "borrowerLoanSets",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)36272_storage)"
      },
      {
        "astId": 6248,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "userLoanParamSets",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)36272_storage)"
      },
      {
        "astId": 6250,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "feesController",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 6255,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "lendingFeePercent",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 6259,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "lendingFeeTokensHeld",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6263,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "lendingFeeTokensPaid",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6270,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "tradingFeePercent",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 6274,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "tradingFeeTokensHeld",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6278,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "tradingFeeTokensPaid",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6285,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "borrowingFeePercent",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 6289,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "borrowingFeeTokensHeld",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6293,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "borrowingFeeTokensPaid",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6295,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "protocolTokenHeld",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 6297,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "protocolTokenPaid",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 6304,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "affiliateFeePercent",
        "offset": 0,
        "slot": "32",
        "type": "t_uint256"
      },
      {
        "astId": 6311,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "liquidationIncentivePercent",
        "offset": 0,
        "slot": "33",
        "type": "t_uint256"
      },
      {
        "astId": 6315,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "loanPoolToUnderlying",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6319,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "underlyingToLoanPool",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6321,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "loanPoolsSet",
        "offset": 0,
        "slot": "36",
        "type": "t_struct(Bytes32Set)36272_storage"
      },
      {
        "astId": 6325,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "supportedTokens",
        "offset": 0,
        "slot": "38",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6332,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "maxDisagreement",
        "offset": 0,
        "slot": "39",
        "type": "t_uint256"
      },
      {
        "astId": 6335,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "sourceBuffer",
        "offset": 0,
        "slot": "40",
        "type": "t_uint256"
      },
      {
        "astId": 6338,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "maxSwapSize",
        "offset": 0,
        "slot": "41",
        "type": "t_uint256"
      },
      {
        "astId": 6342,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "borrowerNonce",
        "offset": 0,
        "slot": "42",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6345,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "rolloverBaseReward",
        "offset": 0,
        "slot": "43",
        "type": "t_uint256"
      },
      {
        "astId": 6348,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "rolloverFlexFeePercent",
        "offset": 0,
        "slot": "44",
        "type": "t_uint256"
      },
      {
        "astId": 6350,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "wrbtcToken",
        "offset": 0,
        "slot": "45",
        "type": "t_contract(IWrbtcERC20)35073"
      },
      {
        "astId": 6352,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "protocolTokenAddress",
        "offset": 0,
        "slot": "46",
        "type": "t_address"
      },
      {
        "astId": 6359,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "feeRebatePercent",
        "offset": 0,
        "slot": "47",
        "type": "t_uint256"
      },
      {
        "astId": 6361,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "admin",
        "offset": 0,
        "slot": "48",
        "type": "t_address"
      },
      {
        "astId": 6363,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "protocolAddress",
        "offset": 0,
        "slot": "49",
        "type": "t_address"
      },
      {
        "astId": 6367,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "userNotFirstTradeFlag",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6371,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "affiliatesUserReferrer",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6375,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "referralsList",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_struct(AddressSet)35966_storage)"
      },
      {
        "astId": 6378,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "minReferralsToPayout",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 6382,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "affiliateRewardsHeld",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6384,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "sovTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 6386,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "lockedSOVAddress",
        "offset": 0,
        "slot": "56",
        "type": "t_address"
      },
      {
        "astId": 6393,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "affiliateTradingTokenFeePercent",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 6397,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "affiliatesReferrerTokensList",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_struct(AddressSet)35966_storage)"
      },
      {
        "astId": 6403,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "affiliatesReferrerBalances",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6409,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "specialRebates",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6411,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "pause",
        "offset": 0,
        "slot": "61",
        "type": "t_bool"
      },
      {
        "astId": 6413,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "swapExtrernalFeePercent",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      },
      {
        "astId": 6415,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "tradingRebateRewardsBasisPoint",
        "offset": 0,
        "slot": "63",
        "type": "t_uint256"
      },
      {
        "astId": 6422,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "defaultPathConversion",
        "offset": 0,
        "slot": "64",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_contract(IERC20)33292)dyn_storage))"
      },
      {
        "astId": 6424,
        "contract": "contracts/modules/Affiliates.sol:Affiliates",
        "label": "pauser",
        "offset": 0,
        "slot": "65",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC20)33292)dyn_storage": {
        "base": "t_contract(IERC20)33292",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IERC20)33292": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IWrbtcERC20)35073": {
        "encoding": "inplace",
        "label": "contract IWrbtcERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_contract(IERC20)33292)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IERC20[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(IERC20)33292)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_contract(IERC20)33292)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => contract IERC20[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_contract(IERC20)33292)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(LenderInterest)6508_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct LenderInterestStruct.LenderInterest))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(LenderInterest)6508_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Order)6582_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct OrderStruct.Order))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Order)6582_storage)"
      },
      "t_mapping(t_address,t_struct(AddressSet)35966_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableAddressSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)35966_storage"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)36272_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableBytes32Set.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)36272_storage"
      },
      "t_mapping(t_address,t_struct(LenderInterest)6508_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LenderInterestStruct.LenderInterest)",
        "numberOfBytes": "32",
        "value": "t_struct(LenderInterest)6508_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(Loan)6566_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LoanStruct.Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)6566_storage"
      },
      "t_mapping(t_bytes32,t_struct(LoanInterest)6518_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LoanInterestStruct.LoanInterest)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanInterest)6518_storage"
      },
      "t_mapping(t_bytes32,t_struct(LoanParams)6538_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LoanParamsStruct.LoanParams)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanParams)6538_storage"
      },
      "t_mapping(t_bytes32,t_struct(Order)6582_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct OrderStruct.Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)6582_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AddressSet)35966_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableAddressSet.AddressSet",
        "members": [
          {
            "astId": 35962,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 35965,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)36272_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableBytes32Set.Bytes32Set",
        "members": [
          {
            "astId": 36268,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 36271,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LenderInterest)6508_storage": {
        "encoding": "inplace",
        "label": "struct LenderInterestStruct.LenderInterest",
        "members": [
          {
            "astId": 6499,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "principalTotal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6501,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "owedPerDay",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6503,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "owedTotal",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6505,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "paidTotal",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6507,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "updatedTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Loan)6566_storage": {
        "encoding": "inplace",
        "label": "struct LoanStruct.Loan",
        "members": [
          {
            "astId": 6543,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 6545,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "loanParamsId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 6547,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "pendingTradesId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 6549,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 6551,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "principal",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6553,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "collateral",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6555,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6557,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6559,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "startMargin",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6561,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "startRate",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 6563,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "borrower",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 6565,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "lender",
            "offset": 0,
            "slot": "11",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(LoanInterest)6518_storage": {
        "encoding": "inplace",
        "label": "struct LoanInterestStruct.LoanInterest",
        "members": [
          {
            "astId": 6513,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "owedPerDay",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6515,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "depositTotal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6517,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "updatedTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LoanParams)6538_storage": {
        "encoding": "inplace",
        "label": "struct LoanParamsStruct.LoanParams",
        "members": [
          {
            "astId": 6523,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 6525,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "active",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 6527,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "owner",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6529,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "loanToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6531,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "collateralToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6533,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "minInitialMargin",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6535,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "maintenanceMargin",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6537,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "maxLoanTerm",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Order)6582_storage": {
        "encoding": "inplace",
        "label": "struct OrderStruct.Order",
        "members": [
          {
            "astId": 6571,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "lockedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6573,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "interestRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6575,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "minLoanTerm",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6577,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "maxLoanTerm",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6579,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "createdTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6581,
            "contract": "contracts/modules/Affiliates.sol:Affiliates",
            "label": "expirationTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}