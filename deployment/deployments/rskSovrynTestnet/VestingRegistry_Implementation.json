{
  "address": "0x7acCf9Fcb7C0e89CA1dEe1918F282401f50e3d22",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "AdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdminManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdminManager",
          "type": "address"
        }
      ],
      "name": "AdminManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "removedAdminManager",
          "type": "address"
        }
      ],
      "name": "AdminManagerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "AdminRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SOVTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vesting",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cliff",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vestingCreationType",
          "type": "uint256"
        }
      ],
      "name": "TeamVestingCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vesting",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vesting",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cliff",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vestingCreationType",
          "type": "uint256"
        }
      ],
      "name": "VestingCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vesting",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isSet",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "vestingType",
              "type": "uint32"
            },
            {
              "internalType": "uint128",
              "name": "vestingCreationType",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct VestingRegistryStorage.VestingCreationAndTypeDetails",
          "name": "vestingCreationAndType",
          "type": "tuple"
        }
      ],
      "name": "VestingCreationAndTypesSet",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "SOV",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokenOwners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_vestingCreationTypes",
          "type": "uint256[]"
        }
      ],
      "name": "addDeployedVestings",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokenOwners",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_vestingAddresses",
          "type": "address[]"
        }
      ],
      "name": "addFourYearVestings",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "admins",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cliff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingCreationType",
          "type": "uint256"
        }
      ],
      "name": "createTeamVesting",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cliff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "createVesting",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cliff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingCreationType",
          "type": "uint256"
        }
      ],
      "name": "createVestingAddr",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeSharingCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAdminManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "_adminManager",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cliff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingCreationType",
          "type": "uint256"
        }
      ],
      "name": "getTeamVesting",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOwner",
          "type": "address"
        }
      ],
      "name": "getVesting",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cliff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingCreationType",
          "type": "uint256"
        }
      ],
      "name": "getVestingAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_vestingAddress",
          "type": "address"
        }
      ],
      "name": "getVestingDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cliff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOwner",
          "type": "address"
        }
      ],
      "name": "getVestingsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "vestingType",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingCreationType",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "vestingAddress",
              "type": "address"
            }
          ],
          "internalType": "struct VestingRegistryStorage.Vesting[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_vestingFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_SOV",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeSharingCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vestingOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockedSOV",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_vestingRegistries",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_vestingAddress",
          "type": "address"
        }
      ],
      "name": "isTeamVesting",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isVesting",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_vestingAddress",
          "type": "address"
        }
      ],
      "name": "isVestingAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isVestingAddr",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lockedSOV",
      "outputs": [
        {
          "internalType": "contract ILockedSOV",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_vestingAddresses",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isSet",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "vestingType",
              "type": "uint32"
            },
            {
              "internalType": "uint128",
              "name": "vestingCreationType",
              "type": "uint128"
            }
          ],
          "internalType": "struct VestingRegistryStorage.VestingCreationAndTypeDetails[]",
          "name": "_vestingCreationAndTypes",
          "type": "tuple[]"
        }
      ],
      "name": "registerVestingToVestingCreationAndTypes",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "removeAdminManager",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdminManager",
          "type": "address"
        }
      ],
      "name": "setAdminManager",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_vestingFactory",
          "type": "address"
        }
      ],
      "name": "setVestingFactory",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_vesting",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferSOV",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vestingCreationAndTypes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "vestingType",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "vestingCreationType",
          "type": "uint128"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vestingFactory",
      "outputs": [
        {
          "internalType": "contract IVestingFactory",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vestingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vestingRegistries",
      "outputs": [
        {
          "internalType": "contract IVestingRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vestings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "vestingType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingCreationType",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vestingAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vestingsOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c49f45d7db43aea11122d3ccc954c7630a63ea07244e51ba70c4d56535c3aed",
  "receipt": {
    "to": null,
    "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
    "contractAddress": "0x7acCf9Fcb7C0e89CA1dEe1918F282401f50e3d22",
    "transactionIndex": 0,
    "gasUsed": "3583456",
    "logsBloom": "0x
    "blockHash": "0x410d2ff00fb38dd30b91d0e50aa7936e344692e36a64b642e5986fb288b917e8",
    "transactionHash": "0x7c49f45d7db43aea11122d3ccc954c7630a63ea07244e51ba70c4d56535c3aed",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4814405,
        "transactionHash": "0x7c49f45d7db43aea11122d3ccc954c7630a63ea07244e51ba70c4d56535c3aed",
        "address": "0x7acCf9Fcb7C0e89CA1dEe1918F282401f50e3d22",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000013be55487d37fe3c66ee7305e1e9c1ac85de75ae"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x410d2ff00fb38dd30b91d0e50aa7936e344692e36a64b642e5986fb288b917e8"
      }
    ],
    "blockNumber": 4814405,
    "cumulativeGasUsed": "3583456",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "757b9c0328cdd77755520b9ff358f21a",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdminManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdminManager\",\"type\":\"address\"}],\"name\":\"AdminManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedAdminManager\",\"type\":\"address\"}],\"name\":\"AdminManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SOVTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingCreationType\",\"type\":\"uint256\"}],\"name\":\"TeamVestingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingCreationType\",\"type\":\"uint256\"}],\"name\":\"VestingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vestingType\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"vestingCreationType\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct VestingRegistryStorage.VestingCreationAndTypeDetails\",\"name\":\"vestingCreationAndType\",\"type\":\"tuple\"}],\"name\":\"VestingCreationAndTypesSet\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenOwners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_vestingCreationTypes\",\"type\":\"uint256[]\"}],\"name\":\"addDeployedVestings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenOwners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_vestingAddresses\",\"type\":\"address[]\"}],\"name\":\"addFourYearVestings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingCreationType\",\"type\":\"uint256\"}],\"name\":\"createTeamVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingCreationType\",\"type\":\"uint256\"}],\"name\":\"createVestingAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeSharingCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_adminManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingCreationType\",\"type\":\"uint256\"}],\"name\":\"getTeamVesting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"getVesting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingCreationType\",\"type\":\"uint256\"}],\"name\":\"getVestingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingAddress\",\"type\":\"address\"}],\"name\":\"getVestingDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"getVestingsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vestingType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingCreationType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vestingAddress\",\"type\":\"address\"}],\"internalType\":\"struct VestingRegistryStorage.Vesting[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SOV\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeSharingCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockedSOV\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_vestingRegistries\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingAddress\",\"type\":\"address\"}],\"name\":\"isTeamVesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingAddress\",\"type\":\"address\"}],\"name\":\"isVestingAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isVestingAddr\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedSOV\",\"outputs\":[{\"internalType\":\"contract ILockedSOV\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vestingAddresses\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vestingType\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"vestingCreationType\",\"type\":\"uint128\"}],\"internalType\":\"struct VestingRegistryStorage.VestingCreationAndTypeDetails[]\",\"name\":\"_vestingCreationAndTypes\",\"type\":\"tuple[]\"}],\"name\":\"registerVestingToVestingCreationAndTypes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeAdminManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdminManager\",\"type\":\"address\"}],\"name\":\"setAdminManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingFactory\",\"type\":\"address\"}],\"name\":\"setVestingFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vesting\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferSOV\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingCreationAndTypes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"vestingType\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"vestingCreationType\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingFactory\",\"outputs\":[{\"internalType\":\"contract IVestingFactory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingRegistries\",\"outputs\":[{\"internalType\":\"contract IVestingRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingCreationType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vestingAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addAdmin(address)\":{\"params\":{\"_admin\":\"The addresses of the account to grant permissions.\"}},\"addDeployedVestings(address[],uint256[])\":{\"details\":\"migration of data from previous vesting registy contracts\"},\"addFourYearVestings(address[],address[])\":{\"params\":{\"_tokenOwners\":\"array of token owners\",\"_vestingAddresses\":\"array of vesting addresses\"}},\"createTeamVesting(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"the amount to be staked\",\"_cliff\":\"the cliff in seconds\",\"_duration\":\"the total duration in seconds\",\"_tokenOwner\":\"the owner of the tokens\",\"_vestingCreationType\":\"the type of vesting created(e.g. Origin, Bug Bounty etc.)\"}},\"createVesting(address,uint256,uint256,uint256)\":{\"details\":\"Calls a public createVestingAddr function with vestingCreationType. This is to accomodate the existing logic for LockedSOVvestingCreationType 0 = LockedSOV\",\"params\":{\"_amount\":\"the amount to be staked\",\"_cliff\":\"the cliff in seconds\",\"_duration\":\"the total duration in seconds\",\"_tokenOwner\":\"the owner of the tokens\"}},\"createVestingAddr(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"the amount to be staked\",\"_cliff\":\"the cliff in seconds\",\"_duration\":\"the total duration in seconds\",\"_tokenOwner\":\"the owner of the tokens\",\"_vestingCreationType\":\"the type of vesting created(e.g. Origin, Bug Bounty etc.)\"}},\"getAdminManager()\":{\"return\":\"Address of admin manager.\"},\"getVesting(address)\":{\"details\":\"Calls a public getVestingAddr function with cliff and duration. This is to accomodate the existing logic for LockedSOVWe need to use LockedSOV.changeRegistryCliffAndDuration function very judiciouslyvestingCreationType 0 - LockedSOV\",\"params\":{\"_tokenOwner\":\"the owner of the tokens\"}},\"getVestingAddr(address,uint256,uint256,uint256)\":{\"details\":\"Important: Please use this instead of getVesting function\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"isTeamVesting(address)\":{\"details\":\"check if the specific vesting address is team vesting or notread the vestingType from vestingCreationAndTypes storage\",\"params\":{\"_vestingAddress\":\"address of vesting contract\"},\"return\":\"true for teamVesting, false for normal vesting\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerVestingToVestingCreationAndTypes(address[],(bool,uint32,uint128)[])\":{\"details\":\"setter function to register existing vesting contract to vestingCreationAndTypes storageneed to set the function visilibty to public to support VestingCreationAndTypeDetails struct as parameter\",\"params\":{\"_vestingAddresses\":\"array of vesting address\",\"_vestingCreationAndTypes\":\"array for VestingCreationAndTypeDetails struct\"}},\"removeAdmin(address)\":{\"params\":{\"_admin\":\"The addresses of the account to revoke permissions.\"}},\"setAdminManager(address)\":{\"params\":{\"_newAdminManager\":\"The addresses of the account to grant permissions.\"}},\"setVestingFactory(address)\":{\"params\":{\"_vestingFactory\":\"the address of vesting factory contract\"}},\"stakeTokens(address,uint256)\":{\"params\":{\"_amount\":\"the amount of tokens to stake\",\"_vesting\":\"the address of Vesting contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferSOV(address,uint256)\":{\"params\":{\"_amount\":\"the amount to be transferred\",\"_receiver\":\"the address of the SOV receiver\"}}}},\"userdoc\":{\"methods\":{\"addAdmin(address)\":{\"notice\":\"Add account to ACL.\"},\"addDeployedVestings(address[],uint256[])\":{\"notice\":\"adds vestings that were deployed in previous vesting registries\"},\"addFourYearVestings(address[],address[])\":{\"notice\":\"adds four year vestings to vesting registry logic\"},\"createTeamVesting(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"creates Team Vesting contract\"},\"createVesting(address,uint256,uint256,uint256)\":{\"notice\":\"creates Vesting contract\"},\"createVestingAddr(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"creates Vesting contract\"},\"getAdminManager()\":{\"notice\":\"Return address of the admin manager.\"},\"getTeamVesting(address,uint256,uint256,uint256)\":{\"notice\":\"returns team vesting contract address for the given token owner, cliff, duration\"},\"getVesting(address)\":{\"notice\":\"returns vesting contract address for the given token owner\"},\"getVestingAddr(address,uint256,uint256,uint256)\":{\"notice\":\"public function that returns vesting contract address for the given token owner, cliff, duration\"},\"getVestingDetails(address)\":{\"notice\":\"returns cliff and duration for Vesting & TeamVesting contracts\"},\"getVestingsOf(address)\":{\"notice\":\"returns all vesting details for the given token owner\"},\"initialize(address,address,address,address,address,address,address[])\":{\"notice\":\"Replace constructor with initialize function for Upgradable Contracts This function will be called only once by the owner\"},\"isVestingAddress(address)\":{\"notice\":\"returns if the address is a vesting address\"},\"removeAdmin(address)\":{\"notice\":\"Remove account from ACL.\"},\"removeAdminManager()\":{\"notice\":\"Set admin manager to 0 address.\"},\"setAdminManager(address)\":{\"notice\":\"Set new admin manager.\"},\"setVestingFactory(address)\":{\"notice\":\"sets vesting factory address\"},\"stakeTokens(address,uint256)\":{\"notice\":\"stakes tokens according to the vesting schedule\"},\"transferSOV(address,uint256)\":{\"notice\":\"transfers SOV tokens to given address\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Vesting/VestingRegistryLogic.sol\":\"VestingRegistryLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/governance/ApprovalReceiver.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"./ErrorDecoder.sol\\\";\\nimport \\\"../token/IApproveAndCall.sol\\\";\\n\\n/**\\n * @title Base contract for receiving approval from SOV token.\\n */\\ncontract ApprovalReceiver is ErrorDecoder, IApproveAndCall {\\n    modifier onlyThisContract() {\\n        // Accepts calls only from receiveApproval function.\\n        require(msg.sender == address(this), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _data The data will be used for low level call.\\n     */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external {\\n        // Accepts calls only from SOV token.\\n        require(msg.sender == _getToken(), \\\"unauthorized\\\");\\n        require(msg.sender == _token, \\\"unauthorized\\\");\\n\\n        // Only allowed methods.\\n        bool isAllowed = false;\\n        bytes4[] memory selectors = _getSelectors();\\n        bytes4 sig = _getSig(_data);\\n        for (uint256 i = 0; i < selectors.length; i++) {\\n            if (sig == selectors[i]) {\\n                isAllowed = true;\\n                break;\\n            }\\n        }\\n        require(isAllowed, \\\"method is not allowed\\\");\\n\\n        // Check sender and amount.\\n        address sender;\\n        uint256 amount;\\n        (, sender, amount) = abi.decode(\\n            abi.encodePacked(bytes28(0), _data),\\n            (bytes32, address, uint256)\\n        );\\n        require(sender == _sender, \\\"sender mismatch\\\");\\n        require(amount == _amount, \\\"amount mismatch\\\");\\n\\n        _call(_data);\\n    }\\n\\n    /**\\n     * @notice Returns token address, only this address can be a sender for receiveApproval.\\n     * @dev Should be overridden in child contracts, otherwise error will be thrown.\\n     * @return By default, 0x. When overriden, the token address making the call.\\n     */\\n    function _getToken() internal view returns (address) {\\n        return address(0);\\n    }\\n\\n    /**\\n     * @notice Returns list of function selectors allowed to be invoked.\\n     * @dev Should be overridden in child contracts, otherwise error will be thrown.\\n     * @return By default, empty array. When overriden, allowed selectors.\\n     */\\n    function _getSelectors() internal pure returns (bytes4[] memory) {\\n        return new bytes4[](0);\\n    }\\n\\n    /**\\n     * @notice Makes call and reverts w/ enhanced error message.\\n     * @param _data Error message as bytes.\\n     */\\n    function _call(bytes memory _data) internal {\\n        (bool success, bytes memory returnData) = address(this).call(_data);\\n        if (!success) {\\n            if (returnData.length <= ERROR_MESSAGE_SHIFT) {\\n                revert(\\\"receiveApproval: Transaction execution reverted.\\\");\\n            } else {\\n                revert(_addErrorMessage(\\\"receiveApproval: \\\", string(returnData)));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Extracts the called function selector, a hash of the signature.\\n     * @dev The first four bytes of the call data for a function call specifies\\n     * the function to be called. It is the first (left, high-order in big-endian)\\n     * four bytes of the Keccak-256 (SHA-3) hash of the signature of the function.\\n     * Solidity doesn't yet support a casting of byte[4] to bytes4.\\n     * Example:\\n     *  msg.data:\\n     *    0xcdcd77c000000000000000000000000000000000000000000000000000000000000\\n     *    000450000000000000000000000000000000000000000000000000000000000000001\\n     *  selector (or method ID): 0xcdcd77c0\\n     *  signature: baz(uint32,bool)\\n     * @param _data The msg.data from the low level call.\\n     * @return sig First 4 bytes of msg.data i.e. the selector, hash of the signature.\\n     */\\n    function _getSig(bytes memory _data) internal pure returns (bytes4 sig) {\\n        assembly {\\n            sig := mload(add(_data, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfec344456774fa83b0885dd71825ccb6780be8db63c394f3ca09107977c65429\"},\"contracts/governance/ErrorDecoder.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Base contract to properly handle returned data on failed calls\\n * @dev On EVM if the return data length of a call is less than 68,\\n * then the transaction fails silently without a revert message!\\n *\\n * As described in the Solidity documentation\\n * https://solidity.readthedocs.io/en/v0.5.17/control-structures.html#revert\\n * the revert reason is an ABI-encoded string consisting of:\\n * 0x08c379a0 // Function selector (method id) for \\\"Error(string)\\\" signature\\n * 0x0000000000000000000000000000000000000000000000000000000000000020 // Data offset\\n * 0x000000000000000000000000000000000000000000000000000000000000001a // String length\\n * 0x4e6f7420656e6f7567682045746865722070726f76696465642e000000000000 // String data\\n *\\n * Another example, debug data from test:\\n *   0x08c379a0\\n *   0000000000000000000000000000000000000000000000000000000000000020\\n *   0000000000000000000000000000000000000000000000000000000000000034\\n *   54696d656c6f636b3a3a73657444656c61793a2044656c6179206d7573742065\\n *   7863656564206d696e696d756d2064656c61792e000000000000000000000000\\n *\\n * Parsed into:\\n *   Data offset: 20\\n *   Length: 34\\n *   Error message:\\n *     54696d656c6f636b3a3a73657444656c61793a2044656c6179206d7573742065\\n *     7863656564206d696e696d756d2064656c61792e000000000000000000000000\\n */\\ncontract ErrorDecoder {\\n    uint256 constant ERROR_MESSAGE_SHIFT = 68; // EVM silent revert error string length\\n\\n    /**\\n     * @notice Concats two error strings taking into account ERROR_MESSAGE_SHIFT.\\n     * @param str1 First string, usually a hardcoded context written by dev.\\n     * @param str2 Second string, usually the error message from the reverted call.\\n     * @return The concatenated error string\\n     */\\n    function _addErrorMessage(string memory str1, string memory str2)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory bytesStr1 = bytes(str1);\\n        bytes memory bytesStr2 = bytes(str2);\\n        string memory str12 =\\n            new string(bytesStr1.length + bytesStr2.length - ERROR_MESSAGE_SHIFT);\\n        bytes memory bytesStr12 = bytes(str12);\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < bytesStr1.length; i++) {\\n            bytesStr12[j++] = bytesStr1[i];\\n        }\\n        for (uint256 i = ERROR_MESSAGE_SHIFT; i < bytesStr2.length; i++) {\\n            bytesStr12[j++] = bytesStr2[i];\\n        }\\n        return string(bytesStr12);\\n    }\\n}\\n\",\"keccak256\":\"0xa0fa7986924aab574ca9e7c265f8c7bf00671ba1d86dbad143df7c14455f1c6a\"},\"contracts/governance/IFeeSharingCollector.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for contract governance/FeeSharingCollector/FeeSharingCollector.sol\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * */\\ninterface IFeeSharingCollector {\\n    function withdrawFees(address[] calldata _token) external;\\n\\n    function transferTokens(address _token, uint96 _amount) external;\\n\\n    function withdraw(\\n        address _loanPoolToken,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7794cb434d9395ea983dcf8ded48db5b68897a338429320f60172c4caa47fb40\"},\"contracts/governance/Staking/interfaces/IStaking.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Interface for Staking modules governance/Staking/modules\\n */\\n\\ninterface IStaking {\\n    /*************************** StakingAdminModule ***************************/\\n\\n    /**\\n     * @notice Add account to Admins ACL.\\n     * @param _admin The addresses of the account to grant permissions.\\n     * */\\n    function addAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Remove account from Admins ACL.\\n     * @param _admin The addresses of the account to revoke permissions.\\n     * */\\n    function removeAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Add account to pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function addPauser(address _pauser) external;\\n\\n    /**\\n     * @notice Remove account from pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function removePauser(address _pauser) external;\\n\\n    /**\\n     * @notice Pause/unpause contract\\n     * @param _pause true when pausing, false when unpausing\\n     * */\\n    function pauseUnpause(bool _pause) external;\\n\\n    /**\\n     * @notice Freeze contract - disable all functions\\n     * @param _freeze true when freezing, false when unfreezing\\n     * @dev When freezing, pause is always applied too. When unfreezing, the contract is left in paused stated.\\n     * */\\n    function freezeUnfreeze(bool _freeze) external;\\n\\n    /**\\n     * @notice Allows the owner to set a fee sharing proxy contract.\\n     * We need it for unstaking with slashing.\\n     * @param _feeSharing The address of FeeSharingCollectorProxy contract.\\n     * */\\n    function setFeeSharing(address _feeSharing) external;\\n\\n    /**\\n     * @notice Allow the owner to set weight scaling.\\n     * We need it for unstaking with slashing.\\n     * @param _weightScaling The weight scaling.\\n     * */\\n    function setWeightScaling(uint96 _weightScaling) external;\\n\\n    /**\\n     * @notice Allow the owner to set a new staking contract.\\n     * As a consequence it allows the stakers to migrate their positions\\n     * to the new contract.\\n     * @dev Doesn't have any influence as long as migrateToNewStakingContract\\n     * is not implemented.\\n     * @param _newStakingContract The address of the new staking contract.\\n     * */\\n    function setNewStakingContract(address _newStakingContract) external;\\n\\n    /**\\n     * @notice Allow a staker to migrate his positions to the new staking contract.\\n     * @dev Staking contract needs to be set before by the owner.\\n     * Currently not implemented, just needed for the interface.\\n     *      In case it's needed at some point in the future,\\n     *      the implementation needs to be changed first.\\n     * */\\n    function migrateToNewStakingContract() external; // dummy - not implemented as of now\\n\\n    /*************************** StakingGovernanceModule ***************************/\\n\\n    /**\\n     * @notice Compute the total voting power at a given time.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @param time The timestamp for which to calculate the total voting power.\\n     * @return The total voting power at the given time.\\n     * */\\n    function getPriorTotalVotingPower(uint32 blockNumber, uint256 time)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Get the current votes balance for a user account.\\n     * @param account The address to get votes balance.\\n     * @dev This is a wrapper to simplify arguments. The actual computation is\\n     * performed on WeightedStaking parent contract.\\n     * @return The number of current votes for a user account.\\n     * */\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of votes for a delegatee as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will revert\\n     * to prevent misinformation.\\n     *      Used for Voting, not for fee sharing.\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The number of votes the delegatee had as of the given block.\\n     * */\\n    function getPriorVotes(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The staking date to compute the power for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorStakeByDateForDelegatee(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an unlocking date as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * TODO: WeightedStaking::getPriorTotalStakesForDate should probably better\\n     * be internal instead of a public function.\\n     * @param date The date to check the stakes for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorTotalStakesForDate(uint256 date, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` which are locked until lockDate to `delegatee`.\\n     * @param delegatee The address to delegate votes to.\\n     * @param lockDate the date if the position to delegate.\\n     * */\\n    function delegate(address delegatee, uint256 lockDate) external;\\n\\n    /*************************** StakingStakeModule ***************************/\\n\\n    event TokensStaked(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 lockedUntil,\\n        uint256 totalStaked\\n    );\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stake(\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @dev This function will be invoked from receiveApproval\\n     * @dev SOV.approveAndCall -> this.receiveApproval -> this.stakeWithApproval\\n     * @param sender The sender of SOV.approveAndCall\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeWithApproval(\\n        address sender,\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _data The data will be used for low level call.\\n     */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Extend the staking duration until the specified date.\\n     * @param previousLock The old unlocking timestamp.\\n     * @param until The new unlocking timestamp in seconds.\\n     * */\\n    function extendStakingDuration(uint256 previousLock, uint256 until) external;\\n\\n    /**\\n     * @dev DO NOT USE this misspelled function. Use stakeBySchedule function instead.\\n     * This function cannot be deprecated while we have non-upgradeable vesting contracts.\\n     * */\\n    function stakesBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Stake tokens according to the vesting schedule.\\n     * @param amount The amount of tokens to stake.\\n     * @param cliff The time interval to the first withdraw.\\n     * @param duration The staking duration.\\n     * @param intervalLength The length of each staking interval when cliff passed.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Get the number of staked tokens held by the user account.\\n     * @dev Iterate checkpoints adding up stakes.\\n     * @param account The address of the account to get the balance of.\\n     * @return The number of tokens held.\\n     * */\\n    function balanceOf(address account) external view returns (uint96 balance);\\n\\n    /**\\n     * @notice Get the current number of tokens staked for a day.\\n     * @param lockedTS The timestamp to get the staked tokens for.\\n     * */\\n    function getCurrentStakedUntil(uint256 lockedTS) external view returns (uint96);\\n\\n    /**\\n     * @notice Get list of stakes for a user account.\\n     * @param account The address to get stakes.\\n     * @return The arrays of dates and stakes.\\n     * */\\n    function getStakes(address account)\\n        external\\n        view\\n        returns (uint256[] memory dates, uint96[] memory stakes);\\n\\n    /**\\n     * @notice Unstaking is possible every 2 weeks only. This means, to\\n     * calculate the key value for the staking checkpoints, we need to\\n     * map the intended timestamp to the closest available date.\\n     * @param timestamp The unlocking timestamp.\\n     * @return The actual unlocking date (might be up to 2 weeks shorter than intended).\\n     * */\\n    function timestampToLockDate(uint256 timestamp) external view returns (uint256);\\n\\n    /*************************** StakingStorageModule ***************************/\\n\\n    /// @notice The maximum duration to stake tokens\\n    /// @return MAX_DURATION to stake tokens\\n    function getStorageMaxDurationToStakeTokens() external pure returns (uint256);\\n\\n    /// @notice The maximum possible voting weight before adding +1 (actually 10, but need 9 for computation).\\n    /// @return uint256(MAX_VOTING_WEIGHT);\\n    function getStorageMaxVotingWeight() external pure returns (uint256);\\n\\n    /// @notice weight is multiplied with this factor (for allowing decimals, like 1.2x).\\n    /// @dev MAX_VOTING_WEIGHT * WEIGHT_FACTOR needs to be < 792, because there are 100,000,000 SOV with 18 decimals\\n    /// @return uint256(WEIGHT_FACTOR);\\n    function getStorageWeightFactor() external pure returns (uint256);\\n\\n    /// @return uint256(DEFAULT_WEIGHT_SCALING);\\n    function getStorageDefaultWeightScaling() external pure returns (uint256);\\n\\n    /// @notice return (uint256(MIN_WEIGHT_SCALING), uint256(MAX_WEIGHT_SCALING))\\n    function getStorageRangeForWeightScaling()\\n        external\\n        pure\\n        returns (uint256 minWeightScaling, uint256 maxWeightScaling);\\n\\n    /// @notice The EIP-712 typehash for the contract's domain.\\n    /// @return uint256(DOMAIN_TYPEHASH);\\n    function getStorageDomainTypehash() external pure returns (uint256);\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\\n    /// @return uint256(DELEGATION_TYPEHASH);\\n    function getStorageDelegationTypehash() external pure returns (uint256);\\n\\n    /// @return name;\\n    function getStorageName() external view returns (string memory);\\n\\n    /// AUTOGENERATED FUNCTIONS FROM THE STAKING STORAGE PUBLIC VARIABLES ///\\n\\n    /// @notice The timestamp of contract creation. Base for the staking period calculation.\\n    function kickoffTS() external view returns (uint256);\\n\\n    /// @notice The token to be staked\\n    function SOVToken() external view returns (address);\\n\\n    /// @notice Stakers delegated voting power\\n    /// @param staker - the delegating address\\n    /// @param until - delegated voting\\n    /// @return _delegate - voting power delegated to address\\n    function delegates(address staker, uint256 until) external view returns (address _delegate);\\n\\n    /// @notice If this flag is set to true, all tokens are unlocked immediately\\n    /// see function unlockAllTokens() for details\\n    function allUnlocked() external view returns (bool);\\n\\n    /// @notice Used for stake migrations to a new staking contract with a different storage structure\\n    function newStakingContract() external view returns (address);\\n\\n    /// CHECKPOINTS\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 stake;\\n    }\\n\\n    /// @notice A record of tokens to be unstaked at a given time in total.\\n    /// For total voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev totalStakingCheckpoints[date][index] is a checkpoint\\n    function totalStakingCheckpoints(uint256 date, uint32 index)\\n        external\\n        view\\n        returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date.\\n    /// @dev numTotalStakingCheckpoints[date] is a number.\\n    function numTotalStakingCheckpoints(uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which were delegated to a certain address.\\n    /// For delegatee voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev delegateStakingCheckpoints[delegatee][date][index] is a checkpoint.\\n    function delegateStakingCheckpoints(\\n        address delagatee,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per delegate.\\n    /// @dev numDelegateStakingCheckpoints[delegatee][date] is a number.\\n    function numDelegateStakingCheckpoints(address delegatee, uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which per user address (address -> lockDate -> stake checkpoint)\\n    /// @dev userStakingCheckpoints[user][date][index] is a checkpoint.\\n    function userStakingCheckpoints(\\n        address user,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per user.\\n    /// @dev numUserStakingCheckpoints[user][date] is a number\\n    function numUserStakingCheckpoints(address user, uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of states for signing / validating signatures\\n    /// @dev nonces[user] is a number.\\n    function nonces(address user) external view returns (uint256 nonce);\\n\\n    /// SLASHING ///\\n\\n    /// @notice the address of FeeSharingCollectorProxy contract, we need it for unstaking with slashing.\\n    function feeSharing() external view returns (address);\\n\\n    /// @notice used for weight scaling when unstaking with slashing.\\n    /// @return uint96 DEFAULT_WEIGHT_SCALING\\n    function weightScaling() external view returns (uint96);\\n\\n    /// @notice List of vesting contracts, tokens for these contracts won't be slashed if unstaked by governance.\\n    /// @dev vestingWhitelist[contract] is true/false.\\n    function vestingWhitelist(address isWhitelisted) external view returns (bool);\\n\\n    /// @dev user => flag whether user has admin role.\\n    /// @dev multisig should be an admin, admin can invoke only governanceWithdrawVesting function,\\n    /// \\tthis function works only with Team Vesting contracts\\n    function admins(address isAdmin) external view returns (bool);\\n\\n    /// @dev vesting contract code hash => flag whether it's registered code hash\\n    function vestingCodeHashes(bytes32 vestingLogicCodeHash) external view returns (bool);\\n\\n    /// @notice A record of tokens to be unstaked from vesting contract at a given time (lockDate -> vest checkpoint)\\n    /// @dev vestingCheckpoints[date][index] is a checkpoint.\\n    function vestingCheckpoints(uint256 date, uint32 index)\\n        external\\n        view\\n        returns (Checkpoint memory);\\n\\n    /// @notice The number of total vesting checkpoints for each date.\\n    /// @dev numVestingCheckpoints[date] is a number.\\n    function numVestingCheckpoints(uint256 date) external view returns (uint32 checkpointsQty);\\n\\n    ///@notice vesting registry contract PROXY address\\n    function vestingRegistryLogic() external view returns (address);\\n\\n    /// @dev user => flag whether user has pauser role.\\n    function pausers(address isPauser) external view returns (bool);\\n\\n    /// @dev Staking contract is paused\\n    function paused() external view returns (bool);\\n\\n    /// @dev Staking contract is frozen\\n    function frozen() external view returns (bool);\\n\\n    /*************************** StakingVestingModule ***************************/\\n\\n    event VestingStakeSet(uint256 lockedTS, uint96 value);\\n\\n    /**\\n     * @notice Return flag whether the given address is a registered vesting contract.\\n     * @param stakerAddress the address to check\\n     */\\n    function isVestingContract(address stakerAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Remove vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function removeContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Add vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function addContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Determine the prior number of vested stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorVestingStakeByDate(uint256 date, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * @param date The staking date to compute the power for. Adjusted to the next valid lock date, if necessary.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedVestingStakeByDate(\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Determine the prior weighted vested amount for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     * TODO: WeightedStaking::getPriorVestingWeightedStake is using the variable name \\\"votes\\\"\\n     * to add up token stake, and that could be misleading.\\n     *\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorVestingWeightedStake(uint256 blockNumber, uint256 date)\\n        external\\n        view\\n        returns (uint96 votes);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorUserStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Sets the users' vesting stakes for a giving lock dates and writes checkpoints.\\n     * @param lockedDates The arrays of lock dates.\\n     * @param values The array of values to add to the staked balance.\\n     */\\n    function setVestingStakes(uint256[] calldata lockedDates, uint96[] calldata values) external;\\n\\n    /**\\n     * @notice sets vesting registry\\n     * @param _vestingRegistryProxy the address of vesting registry proxy contract\\n     * @dev _vestingRegistryProxy can be set to 0 as this function can be reused by\\n     * various other functionalities without the necessity of linking it with Vesting Registry\\n     */\\n    function setVestingRegistry(address _vestingRegistryProxy) external;\\n\\n    /*************************** StakingWithdrawModule ***************************/\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens if they are unlocked.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * */\\n    function withdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting\\n     * @dev **WARNING** This function should not be no longer used by Sovryn Protocol.\\n     * Sovryn protocol will use the cancelTeamVesting function for the withdrawal moving forward.\\n     * */\\n    function governanceWithdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw tokens for vesting contract.\\n     * @param vesting The address of Vesting contract.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting.\\n     * */\\n    function governanceWithdrawVesting(address vesting, address receiver) external;\\n\\n    /**\\n     * @notice Get available and punished amount for withdrawing.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * */\\n    function getWithdrawAmounts(uint96 amount, uint256 until)\\n        external\\n        view\\n        returns (uint96, uint96);\\n\\n    /**\\n     * @notice Allow the owner to unlock all tokens in case the staking contract\\n     * is going to be replaced\\n     * Note: Not reversible on purpose. once unlocked, everything is unlocked.\\n     * The owner should not be able to just quickly unlock to withdraw his own\\n     * tokens and lock again.\\n     * @dev Last resort.\\n     * */\\n    function unlockAllTokens() external;\\n\\n    /*************************** WeightedStakingModule ***************************/\\n\\n    /**\\n     * @notice Determine the prior weighted stake for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     *\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The date/timestamp of the unstaking time.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorWeightedStake(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96 priorWeightedStake);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * TODO: WeightedStaking::weightedStakeByDate should probably better\\n     * be internal instead of a public function.\\n     * @param account The user address.\\n     * @param date The staking date to compute the power for.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Compute the weight for a specific date.\\n     * @param date The unlocking date.\\n     * @param startDate We compute the weight for the tokens staked until 'date' on 'startDate'.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function computeWeightByDate(uint256 date, uint256 startDate)\\n        external\\n        pure\\n        returns (uint96 weight);\\n\\n    /**\\n     * @notice Returns public constant MAX_DURATION\\n     * preserved for backwards compatibility\\n     * Use getStorageMaxDurationToStakeTokens()\\n     * @return uint96 MAX_DURATION for staking\\n     **/\\n    function MAX_DURATION() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() external view returns (bool);\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @notice Governance withdraw vesting directly through staking contract.\\n     * This direct withdraw vesting solves the out of gas issue when there are too many iterations when withdrawing.\\n     * This function only allows cancelling vesting contract of the TeamVesting type.\\n     *\\n     * @param vesting The vesting address.\\n     * @param receiver The receiving address.\\n     * @param startFrom The start value for the iterations.\\n     */\\n    function cancelTeamVesting(\\n        address vesting,\\n        address receiver,\\n        uint256 startFrom\\n    ) external;\\n\\n    /**\\n     * @notice Max iteration for direct withdrawal from staking to prevent out of gas issue.\\n     *\\n     * @return max iteration value.\\n     */\\n    function getMaxVestingWithdrawIterations() external view returns (uint256);\\n\\n    /**\\n     * @dev set max withdraw iterations.\\n     *\\n     * @param maxIterations new max iterations value.\\n     */\\n    function setMaxVestingWithdrawIterations(uint256 maxIterations) external;\\n}\\n\",\"keccak256\":\"0x720bd2cc1042cb4abc2bd3a6839131638eafd3d224571ad9ac21cae36625ec2e\"},\"contracts/governance/Vesting/ITeamVesting.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for TeamVesting contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * This interface is used by Staking contract to call governanceWithdrawTokens\\n * function having the vesting contract instance address.\\n */\\ninterface ITeamVesting {\\n    function startDate() external view returns (uint256);\\n\\n    function cliff() external view returns (uint256);\\n\\n    function endDate() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function tokenOwner() external view returns (address);\\n\\n    function governanceWithdrawTokens(address receiver) external;\\n}\\n\",\"keccak256\":\"0xeb926db5c0681a7bdbc70c3d25df2551a6124e191654b3b8a0f810b0d03ec66f\"},\"contracts/governance/Vesting/IVesting.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for Vesting contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * This interface is used by VestingLogic contract to implement stakeTokens function\\n * and on VestingRegistry contract to call IVesting(vesting).stakeTokens function\\n * at a vesting instance.\\n */\\ninterface IVesting {\\n    function duration() external returns (uint256);\\n\\n    function endDate() external returns (uint256);\\n\\n    function stakeTokens(uint256 amount) external;\\n\\n    function tokenOwner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3482a1e27402655f85f5ff2cb06e0876e9bb94e1a63446a09e33babd60274b4b\"},\"contracts/governance/Vesting/IVestingFactory.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for Vesting Factory contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * This interface is used by VestingFactory contract to override empty\\n * implemention of deployVesting and deployTeamVesting functions\\n * and on VestingRegistry contract to use an instance of VestingFactory.\\n */\\ninterface IVestingFactory {\\n    function deployVesting(\\n        address _SOV,\\n        address _staking,\\n        address _tokenOwner,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        address _feeSharing,\\n        address _owner\\n    ) external returns (address);\\n\\n    function deployTeamVesting(\\n        address _SOV,\\n        address _staking,\\n        address _tokenOwner,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        address _feeSharing,\\n        address _owner\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xc77e276b71ec23ca6d4eead9a842bc01cc37bcfe55a88528190f1f6106773175\"},\"contracts/governance/Vesting/IVestingRegistry.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for upgradable Vesting Registry contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n */\\ninterface IVestingRegistry {\\n    function getVesting(address _tokenOwner) external view returns (address);\\n\\n    function getTeamVesting(address _tokenOwner) external view returns (address);\\n\\n    function setVestingRegistry(address _vestingRegistryProxy) external;\\n\\n    function isVestingAddress(address _vestingAddress) external view returns (bool);\\n\\n    function isTeamVesting(address _vestingAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x08bf5badf1813b59f8b06d3bb9280f4b35d3d07947c728dad79e43fcc1d4130e\"},\"contracts/governance/Vesting/VestingLogic.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../Staking/interfaces/IStaking.sol\\\";\\nimport \\\"../IFeeSharingCollector.sol\\\";\\nimport \\\"./IVesting.sol\\\";\\nimport \\\"../ApprovalReceiver.sol\\\";\\nimport \\\"./VestingStorage.sol\\\";\\n\\n/**\\n * @title Vesting Logic contract.\\n * @notice Staking, delegating and withdrawal functionality.\\n * @dev Deployed by a VestingFactory contract.\\n * */\\ncontract VestingLogic is IVesting, VestingStorage, ApprovalReceiver {\\n    /* Events */\\n\\n    event TokensStaked(address indexed caller, uint256 amount);\\n    event VotesDelegated(address indexed caller, address delegatee);\\n    event TokensWithdrawn(address indexed caller, address receiver);\\n    event DividendsCollected(\\n        address indexed caller,\\n        address loanPoolToken,\\n        address receiver,\\n        uint32 maxCheckpoints\\n    );\\n    event MigratedToNewStakingContract(address indexed caller, address newStakingContract);\\n\\n    /* Modifiers */\\n\\n    /**\\n     * @dev Throws if called by any account other than the token owner or the contract owner.\\n     */\\n    modifier onlyOwners() {\\n        require(msg.sender == tokenOwner || isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the token owner.\\n     */\\n    modifier onlyTokenOwner() {\\n        require(msg.sender == tokenOwner, \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice Stakes tokens according to the vesting schedule.\\n     * @param _amount The amount of tokens to stake.\\n     * */\\n    function stakeTokens(uint256 _amount) public {\\n        _stakeTokens(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Stakes tokens according to the vesting schedule.\\n     * @dev This function will be invoked from receiveApproval.\\n     * @dev SOV.approveAndCall -> this.receiveApproval -> this.stakeTokensWithApproval\\n     * @param _sender The sender of SOV.approveAndCall\\n     * @param _amount The amount of tokens to stake.\\n     * */\\n    function stakeTokensWithApproval(address _sender, uint256 _amount) public onlyThisContract {\\n        _stakeTokens(_sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Stakes tokens according to the vesting schedule. Low level function.\\n     * @dev Once here the allowance of tokens is taken for granted.\\n     * @param _sender The sender of tokens to stake.\\n     * @param _amount The amount of tokens to stake.\\n     * */\\n    function _stakeTokens(address _sender, uint256 _amount) internal {\\n        /// @dev Maybe better to allow staking unil the cliff was reached.\\n        if (startDate == 0) {\\n            startDate = staking.timestampToLockDate(block.timestamp);\\n        }\\n        endDate = staking.timestampToLockDate(block.timestamp + duration);\\n\\n        /// @dev Transfer the tokens to this contract.\\n        bool success = SOV.transferFrom(_sender, address(this), _amount);\\n        require(success);\\n\\n        /// @dev Allow the staking contract to access them.\\n        SOV.approve(address(staking), _amount);\\n\\n        staking.stakeBySchedule(_amount, cliff, duration, FOUR_WEEKS, address(this), tokenOwner);\\n\\n        emit TokensStaked(_sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` which are locked until lockDate\\n     * to `delegatee`.\\n     * @param _delegatee The address to delegate votes to.\\n     * */\\n    function delegate(address _delegatee) public onlyTokenOwner {\\n        require(_delegatee != address(0), \\\"delegatee address invalid\\\");\\n\\n        /// @dev Withdraw for each unlocked position.\\n        /// @dev Don't change FOUR_WEEKS to TWO_WEEKS, a lot of vestings already deployed with FOUR_WEEKS\\n        ///\\t\\tworkaround found, but it doesn't work with TWO_WEEKS\\n        for (uint256 i = startDate + cliff; i <= endDate; i += FOUR_WEEKS) {\\n            staking.delegate(_delegatee, i);\\n        }\\n        emit VotesDelegated(msg.sender, _delegatee);\\n    }\\n\\n    /**\\n     * @notice Withdraws all tokens from the staking contract and\\n     * forwards them to an address specified by the token owner.\\n     * @param receiver The receiving address.\\n     * @dev Can be called only by owner.\\n     * @dev **WARNING** This function should not be no longer used by Sovryn Protocol.\\n     * Sovryn protocol will use the cancelTeamVesting function for the withdrawal moving forward.\\n     * */\\n    function governanceWithdrawTokens(address receiver) public {\\n        require(msg.sender == address(staking), \\\"unauthorized\\\");\\n\\n        _withdrawTokens(receiver, true);\\n    }\\n\\n    /**\\n     * @notice Withdraws unlocked tokens from the staking contract and\\n     * forwards them to an address specified by the token owner.\\n     * @param receiver The receiving address.\\n     * */\\n    function withdrawTokens(address receiver) public onlyOwners {\\n        _withdrawTokens(receiver, false);\\n    }\\n\\n    /**\\n     * @notice Withdraws tokens from the staking contract and forwards them\\n     * to an address specified by the token owner. Low level function.\\n     * @dev Once here the caller permission is taken for granted.\\n     * @param receiver The receiving address.\\n     * @param isGovernance Whether all tokens (true)\\n     * or just unlocked tokens (false).\\n     * */\\n    function _withdrawTokens(address receiver, bool isGovernance) internal {\\n        require(receiver != address(0), \\\"receiver address invalid\\\");\\n\\n        uint96 stake;\\n\\n        /// @dev Usually we just need to iterate over the possible dates until now.\\n        uint256 end;\\n\\n        /// @dev In the unlikely case that all tokens have been unlocked early,\\n        ///   allow to withdraw all of them.\\n        if (staking.allUnlocked() || isGovernance) {\\n            end = endDate;\\n        } else {\\n            end = block.timestamp;\\n        }\\n\\n        /// @dev Withdraw for each unlocked position.\\n        /// @dev Don't change FOUR_WEEKS to TWO_WEEKS, a lot of vestings already deployed with FOUR_WEEKS\\n        ///\\t\\tworkaround found, but it doesn't work with TWO_WEEKS\\n        for (uint256 i = startDate + cliff; i <= end; i += FOUR_WEEKS) {\\n            /// @dev Read amount to withdraw.\\n            stake = staking.getPriorUserStakeByDate(address(this), i, block.number - 1);\\n\\n            /// @dev Withdraw if > 0\\n            if (stake > 0) {\\n                if (isGovernance) {\\n                    staking.governanceWithdraw(stake, i, receiver);\\n                } else {\\n                    staking.withdraw(stake, i, receiver);\\n                }\\n            }\\n        }\\n\\n        emit TokensWithdrawn(msg.sender, receiver);\\n    }\\n\\n    /**\\n     * @notice Collect dividends from fee sharing proxy.\\n     * @param _loanPoolToken The loan pool token address.\\n     * @param _maxCheckpoints Maximum number of checkpoints to be processed.\\n     * @param _receiver The receiver of tokens or msg.sender\\n     * */\\n    function collectDividends(\\n        address _loanPoolToken,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    ) public onlyOwners {\\n        require(_receiver != address(0), \\\"receiver address invalid\\\");\\n\\n        /// @dev Invokes the fee sharing proxy.\\n        feeSharingCollector.withdraw(_loanPoolToken, _maxCheckpoints, _receiver);\\n\\n        emit DividendsCollected(msg.sender, _loanPoolToken, _receiver, _maxCheckpoints);\\n    }\\n\\n    /**\\n     * @notice Allows the owners to migrate the positions\\n     * to a new staking contract.\\n     * */\\n    function migrateToNewStakingContract() public onlyOwners {\\n        staking.migrateToNewStakingContract();\\n        staking = IStaking(staking.newStakingContract());\\n        emit MigratedToNewStakingContract(msg.sender, address(staking));\\n    }\\n\\n    /**\\n     * @notice Overrides default ApprovalReceiver._getToken function to\\n     * register SOV token on this contract.\\n     * @return The address of SOV token.\\n     * */\\n    function _getToken() internal view returns (address) {\\n        return address(SOV);\\n    }\\n\\n    /**\\n     * @notice Overrides default ApprovalReceiver._getSelectors function to\\n     * register stakeTokensWithApproval selector on this contract.\\n     * @return The array of registered selectors on this contract.\\n     * */\\n    function _getSelectors() internal pure returns (bytes4[] memory) {\\n        bytes4[] memory selectors = new bytes4[](1);\\n        selectors[0] = this.stakeTokensWithApproval.selector;\\n        return selectors;\\n    }\\n}\\n\",\"keccak256\":\"0x44622e8c7eef783fc97fb37c59262d448b05c72f02076428cbff18177ed3b3ac\"},\"contracts/governance/Vesting/VestingRegistry.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../Staking/interfaces/IStaking.sol\\\";\\nimport \\\"../IFeeSharingCollector.sol\\\";\\nimport \\\"./IVestingFactory.sol\\\";\\nimport \\\"./IVesting.sol\\\";\\nimport \\\"./ITeamVesting.sol\\\";\\nimport \\\"../../openzeppelin/SafeMath.sol\\\";\\n\\n/**\\n * @title Vesting Registry contract.\\n *\\n * @notice On January 25, 2020, Sovryn launched the Genesis Reservation system.\\n * Sovryn community members who controlled a special NFT were granted access to\\n * stake BTC or rBTC for cSOV tokens at a rate of 2500 satoshis per cSOV. Per\\n * SIP-0003, up to 2,000,000 cSOV were made available in the Genesis event,\\n * which will be redeemable on a 1:1 basis for cSOV, subject to approval by\\n * existing SOV holders.\\n *\\n * On 15 Feb 2021 Sovryn is taking another step in its journey to decentralized\\n * financial sovereignty with the vote on SIP 0005. This proposal will enable\\n * participants of the Genesis Reservation system to redeem their reserved cSOV\\n * tokens for SOV. They will also have the choice to redeem cSOV for rBTC if\\n * they decide to exit the system.\\n *\\n * This contract deals with the vesting and redemption of cSOV tokens.\\n * */\\ncontract VestingRegistry is Ownable {\\n    using SafeMath for uint256;\\n\\n    /* Storage */\\n\\n    /// @notice Constant used for computing the vesting dates.\\n    uint256 public constant FOUR_WEEKS = 4 weeks;\\n\\n    uint256 public constant CSOV_VESTING_CLIFF = FOUR_WEEKS;\\n    uint256 public constant CSOV_VESTING_DURATION = 10 * FOUR_WEEKS;\\n\\n    IVestingFactory public vestingFactory;\\n\\n    /// @notice The SOV token contract.\\n    address public SOV;\\n\\n    /// @notice The cSOV token contracts.\\n    address[] public CSOVtokens;\\n\\n    uint256 public priceSats;\\n\\n    /// @notice The staking contract address.\\n    address public staking;\\n\\n    /// @notice Fee sharing proxy.\\n    address public feeSharingCollector;\\n\\n    /// @notice The vesting owner (e.g. governance timelock address).\\n    address public vestingOwner;\\n\\n    /// @dev TODO: Add to the documentation: address can have only one vesting of each type.\\n    /// @dev user => vesting type => vesting contract.\\n    mapping(address => mapping(uint256 => address)) public vestingContracts;\\n\\n    /**\\n     * @dev Struct can be created to save storage slots, but it doesn't make\\n     * sense. We don't have a lot of blacklisted accounts or account with\\n     * locked amount.\\n     * */\\n\\n    /// @dev user => flag whether user has already exchange cSOV or got a reimbursement.\\n    mapping(address => bool) public processedList;\\n\\n    /// @dev user => flag whether user shouldn't be able to exchange or reimburse.\\n    mapping(address => bool) public blacklist;\\n\\n    /// @dev user => amount of tokens should not be processed.\\n    mapping(address => uint256) public lockedAmount;\\n\\n    /// @dev user => flag whether user has admin role.\\n    mapping(address => bool) public admins;\\n\\n    enum VestingType {\\n        TeamVesting, // MultisigVesting\\n        Vesting // TokenHolderVesting\\n    }\\n\\n    /* Events */\\n\\n    event CSOVReImburse(address from, uint256 CSOVamount, uint256 reImburseAmount);\\n    event CSOVTokensExchanged(address indexed caller, uint256 amount);\\n    event SOVTransferred(address indexed receiver, uint256 amount);\\n    event VestingCreated(\\n        address indexed tokenOwner,\\n        address vesting,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 amount\\n    );\\n    event TeamVestingCreated(\\n        address indexed tokenOwner,\\n        address vesting,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 amount\\n    );\\n    event TokensStaked(address indexed vesting, uint256 amount);\\n    event AdminAdded(address admin);\\n    event AdminRemoved(address admin);\\n\\n    /* Functions */\\n\\n    /**\\n     * @notice Contract deployment settings.\\n     * @param _vestingFactory The address of vesting factory contract.\\n     * @param _SOV The SOV token address.\\n     * @param _CSOVtokens The array of cSOV tokens.\\n     * @param _priceSats The price of cSOV tokens in satoshis.\\n     * @param _staking The address of staking contract.\\n     * @param _feeSharingCollector The address of fee sharing collector proxy contract.\\n     * @param _vestingOwner The address of an owner of vesting contract.\\n     * @dev On Sovryn the vesting owner is Exchequer Multisig.\\n     * According to SIP-0007 The Exchequer Multisig is designated to hold\\n     * certain funds in the form of rBTC and SOV, in order to allow for\\n     * flexible deployment of such funds on:\\n     *  + facilitating rBTC redemptions for Genesis pre-sale participants.\\n     *  + deploying of SOV for the purposes of exchange listings, market\\n     *    making, and partnerships with third parties.\\n     * */\\n    constructor(\\n        address _vestingFactory,\\n        address _SOV,\\n        address[] memory _CSOVtokens,\\n        uint256 _priceSats,\\n        address _staking,\\n        address _feeSharingCollector,\\n        address _vestingOwner\\n    ) public {\\n        require(_SOV != address(0), \\\"SOV address invalid\\\");\\n        require(_staking != address(0), \\\"staking address invalid\\\");\\n        require(_feeSharingCollector != address(0), \\\"feeSharingCollector address invalid\\\");\\n        require(_vestingOwner != address(0), \\\"vestingOwner address invalid\\\");\\n\\n        _setVestingFactory(_vestingFactory);\\n        _setCSOVtokens(_CSOVtokens);\\n\\n        SOV = _SOV;\\n        priceSats = _priceSats;\\n        staking = _staking;\\n        feeSharingCollector = _feeSharingCollector;\\n        vestingOwner = _vestingOwner;\\n    }\\n\\n    //---ACL------------------------------------------------------------------\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner or admin.\\n     * TODO: This ACL logic should be available on OpenZeppeling Ownable.sol\\n     * or on our own overriding sovrynOwnable. This same logic is repeated\\n     * on OriginInvestorsClaim.sol, TokenSender.sol and VestingRegistry2.sol\\n     */\\n    modifier onlyAuthorized() {\\n        require(isOwner() || admins[msg.sender], \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add account to ACL.\\n     * @param _admin The addresses of the account to grant permissions.\\n     * */\\n    function addAdmin(address _admin) public onlyOwner {\\n        admins[_admin] = true;\\n        emit AdminAdded(_admin);\\n    }\\n\\n    /**\\n     * @notice Remove account from ACL.\\n     * @param _admin The addresses of the account to revoke permissions.\\n     * */\\n    function removeAdmin(address _admin) public onlyOwner {\\n        admins[_admin] = false;\\n        emit AdminRemoved(_admin);\\n    }\\n\\n    //---PostCSOV--------------------------------------------------------------\\n\\n    modifier isNotProcessed() {\\n        require(!processedList[msg.sender], \\\"Address cannot be processed twice\\\");\\n        _;\\n    }\\n\\n    modifier isNotBlacklisted() {\\n        require(!blacklist[msg.sender], \\\"Address blacklisted\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice cSOV payout to sender with rBTC currency.\\n     * 1.- Check holder cSOV balance by adding up every cSOV token balance.\\n     * 2.- ReImburse rBTC if funds available.\\n     * 3.- And store holder address in processedList.\\n     */\\n    function reImburse() public isNotProcessed isNotBlacklisted {\\n        uint256 CSOVAmountWei = 0;\\n        for (uint256 i = 0; i < CSOVtokens.length; i++) {\\n            address CSOV = CSOVtokens[i];\\n            uint256 balance = IERC20(CSOV).balanceOf(msg.sender);\\n            CSOVAmountWei = CSOVAmountWei.add(balance);\\n        }\\n\\n        require(CSOVAmountWei > lockedAmount[msg.sender], \\\"holder has no CSOV\\\");\\n        CSOVAmountWei -= lockedAmount[msg.sender];\\n        processedList[msg.sender] = true;\\n\\n        /**\\n         * @dev Found and fixed the SIP-0007 bug on VestingRegistry::reImburse formula.\\n         * More details at Documenting Code issues at point 11 in\\n         * https://docs.google.com/document/d/10idTD1K6JvoBmtPKGuJ2Ub_mMh6qTLLlTP693GQKMyU/\\n         * Previous buggy code: uint256 reImburseAmount = (CSOVAmountWei.mul(priceSats)).div(10**10);\\n         * */\\n        uint256 reImburseAmount = (CSOVAmountWei.mul(priceSats)).div(10**8);\\n        require(address(this).balance >= reImburseAmount, \\\"Not enough funds to reimburse\\\");\\n        msg.sender.transfer(reImburseAmount);\\n\\n        emit CSOVReImburse(msg.sender, CSOVAmountWei, reImburseAmount);\\n    }\\n\\n    /**\\n     * @notice Get contract balance.\\n     * @return The token balance of the contract.\\n     * */\\n    function budget() external view returns (uint256) {\\n        uint256 SCBudget = address(this).balance;\\n        return SCBudget;\\n    }\\n\\n    /**\\n     * @notice Deposit function to receiving value (rBTC).\\n     * */\\n    function deposit() public payable {}\\n\\n    /**\\n     * @notice Send all contract balance to an account.\\n     * @param to The account address to send the balance to.\\n     * */\\n    function withdrawAll(address payable to) public onlyOwner {\\n        to.transfer(address(this).balance);\\n    }\\n\\n    //--------------------------------------------------------------------------------------------------------------------------------------\\n\\n    /**\\n     * @notice Sets vesting factory address. High level endpoint.\\n     * @param _vestingFactory The address of vesting factory contract.\\n     *\\n     * @dev Splitting code on two functions: high level and low level\\n     * is a pattern that makes easy to extend functionality in a readable way,\\n     * without accidentally breaking the actual action being performed.\\n     * For example, checks should be done on high level endpoint, while core\\n     * functionality should be coded on the low level function.\\n     * */\\n    function setVestingFactory(address _vestingFactory) public onlyOwner {\\n        _setVestingFactory(_vestingFactory);\\n    }\\n\\n    /**\\n     * @notice Sets vesting factory address. Low level core function.\\n     * @param _vestingFactory The address of vesting factory contract.\\n     * */\\n    function _setVestingFactory(address _vestingFactory) internal {\\n        require(_vestingFactory != address(0), \\\"vestingFactory address invalid\\\");\\n        vestingFactory = IVestingFactory(_vestingFactory);\\n    }\\n\\n    /**\\n     * @notice Sets cSOV tokens array. High level endpoint.\\n     * @param _CSOVtokens The array of cSOV tokens.\\n     * */\\n    function setCSOVtokens(address[] memory _CSOVtokens) public onlyOwner {\\n        _setCSOVtokens(_CSOVtokens);\\n    }\\n\\n    /**\\n     * @notice Sets cSOV tokens array by looping through input. Low level function.\\n     * @param _CSOVtokens The array of cSOV tokens.\\n     * */\\n    function _setCSOVtokens(address[] memory _CSOVtokens) internal {\\n        for (uint256 i = 0; i < _CSOVtokens.length; i++) {\\n            require(_CSOVtokens[i] != address(0), \\\"CSOV address invalid\\\");\\n        }\\n        CSOVtokens = _CSOVtokens;\\n    }\\n\\n    /**\\n     * @notice Set blacklist flag (true/false).\\n     * @param _account The address to be blacklisted.\\n     * @param _blacklisted The flag to add/remove to/from a blacklist.\\n     * */\\n    function setBlacklistFlag(address _account, bool _blacklisted) public onlyOwner {\\n        require(_account != address(0), \\\"account address invalid\\\");\\n\\n        blacklist[_account] = _blacklisted;\\n    }\\n\\n    /**\\n     * @notice Set amount to be subtracted from user token balance.\\n     * @param _account The address with locked amount.\\n     * @param _amount The amount to be locked.\\n     * */\\n    function setLockedAmount(address _account, uint256 _amount) public onlyOwner {\\n        require(_account != address(0), \\\"account address invalid\\\");\\n        require(_amount != 0, \\\"amount invalid\\\");\\n\\n        lockedAmount[_account] = _amount;\\n    }\\n\\n    /**\\n     * @notice Transfer SOV tokens to given address.\\n     *\\n     * @dev This is a wrapper for ERC-20 transfer function w/\\n     * additional checks and triggering an event.\\n     *\\n     * @param _receiver The address of the SOV receiver.\\n     * @param _amount The amount to be transferred.\\n     * */\\n    function transferSOV(address _receiver, uint256 _amount) public onlyOwner {\\n        require(_receiver != address(0), \\\"receiver address invalid\\\");\\n        require(_amount != 0, \\\"amount invalid\\\");\\n\\n        IERC20(SOV).transfer(_receiver, _amount);\\n        emit SOVTransferred(_receiver, _amount);\\n    }\\n\\n    /**\\n     * @notice Exchange cSOV to SOV with 1:1 rate\\n     */\\n    function exchangeAllCSOV() public isNotProcessed isNotBlacklisted {\\n        processedList[msg.sender] = true;\\n\\n        uint256 amount = 0;\\n        for (uint256 i = 0; i < CSOVtokens.length; i++) {\\n            address CSOV = CSOVtokens[i];\\n            uint256 balance = IERC20(CSOV).balanceOf(msg.sender);\\n            amount += balance;\\n        }\\n\\n        require(amount > lockedAmount[msg.sender], \\\"amount invalid\\\");\\n        amount -= lockedAmount[msg.sender];\\n\\n        _createVestingForCSOV(amount);\\n    }\\n\\n    /**\\n     * @notice cSOV tokens are moved and staked on Vesting contract.\\n     * @param _amount The amount of tokens to be vested.\\n     * */\\n    function _createVestingForCSOV(uint256 _amount) internal {\\n        address vesting =\\n            _getOrCreateVesting(msg.sender, CSOV_VESTING_CLIFF, CSOV_VESTING_DURATION);\\n\\n        IERC20(SOV).approve(vesting, _amount);\\n        IVesting(vesting).stakeTokens(_amount);\\n\\n        emit CSOVTokensExchanged(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Check a token address is among the cSOV token addresses.\\n     * @param _CSOV The cSOV token address.\\n     * */\\n    function _validateCSOV(address _CSOV) internal view {\\n        bool isValid = false;\\n        for (uint256 i = 0; i < CSOVtokens.length; i++) {\\n            if (_CSOV == CSOVtokens[i]) {\\n                isValid = true;\\n                break;\\n            }\\n        }\\n        require(isValid, \\\"wrong CSOV address\\\");\\n    }\\n\\n    /**\\n     * @notice Create Vesting contract.\\n     * @param _tokenOwner The owner of the tokens.\\n     * @param _amount The amount to be staked.\\n     * @param _cliff The time interval to the first withdraw in seconds.\\n     * @param _duration The total duration in seconds.\\n     * */\\n    function createVesting(\\n        address _tokenOwner,\\n        uint256 _amount,\\n        uint256 _cliff,\\n        uint256 _duration\\n    ) public onlyAuthorized {\\n        address vesting = _getOrCreateVesting(_tokenOwner, _cliff, _duration);\\n        emit VestingCreated(_tokenOwner, vesting, _cliff, _duration, _amount);\\n    }\\n\\n    /**\\n     * @notice Create Team Vesting contract.\\n     * @param _tokenOwner The owner of the tokens.\\n     * @param _amount The amount to be staked.\\n     * @param _cliff The time interval to the first withdraw in seconds.\\n     * @param _duration The total duration in seconds.\\n     * */\\n    function createTeamVesting(\\n        address _tokenOwner,\\n        uint256 _amount,\\n        uint256 _cliff,\\n        uint256 _duration\\n    ) public onlyAuthorized {\\n        address vesting = _getOrCreateTeamVesting(_tokenOwner, _cliff, _duration);\\n        emit TeamVestingCreated(_tokenOwner, vesting, _cliff, _duration, _amount);\\n    }\\n\\n    /**\\n     * @notice Stake tokens according to the vesting schedule.\\n     * @param _vesting The address of Vesting contract.\\n     * @param _amount The amount of tokens to stake.\\n     * */\\n    function stakeTokens(address _vesting, uint256 _amount) public onlyAuthorized {\\n        require(_vesting != address(0), \\\"vesting address invalid\\\");\\n        require(_amount > 0, \\\"amount invalid\\\");\\n\\n        IERC20(SOV).approve(_vesting, _amount);\\n        IVesting(_vesting).stakeTokens(_amount);\\n        emit TokensStaked(_vesting, _amount);\\n    }\\n\\n    /**\\n     * @notice Query the vesting contract for an account.\\n     * @param _tokenOwner The owner of the tokens.\\n     * @return The vesting contract address for the given token owner.\\n     * */\\n    function getVesting(address _tokenOwner) public view returns (address) {\\n        return vestingContracts[_tokenOwner][uint256(VestingType.Vesting)];\\n    }\\n\\n    /**\\n     * @notice Query the team vesting contract for an account.\\n     * @param _tokenOwner The owner of the tokens.\\n     * @return The team vesting contract address for the given token owner.\\n     * */\\n    function getTeamVesting(address _tokenOwner) public view returns (address) {\\n        return vestingContracts[_tokenOwner][uint256(VestingType.TeamVesting)];\\n    }\\n\\n    /**\\n     * @notice If not exists, deploy a vesting contract through factory.\\n     * @param _tokenOwner The owner of the tokens.\\n     * @param _cliff The time interval to the first withdraw in seconds.\\n     * @param _duration The total duration in seconds.\\n     * @return The vesting contract address for the given token owner\\n     * whether it existed previously or not.\\n     * */\\n    function _getOrCreateVesting(\\n        address _tokenOwner,\\n        uint256 _cliff,\\n        uint256 _duration\\n    ) internal returns (address) {\\n        uint256 type_ = uint256(VestingType.Vesting);\\n        if (vestingContracts[_tokenOwner][type_] == address(0)) {\\n            /// @dev TODO: Owner of OwnerVesting contracts - the same address as tokenOwner.\\n            address vesting =\\n                vestingFactory.deployVesting(\\n                    SOV,\\n                    staking,\\n                    _tokenOwner,\\n                    _cliff,\\n                    _duration,\\n                    feeSharingCollector,\\n                    _tokenOwner\\n                );\\n            vestingContracts[_tokenOwner][type_] = vesting;\\n        }\\n        return vestingContracts[_tokenOwner][type_];\\n    }\\n\\n    /**\\n     * @notice If not exists, deploy a team vesting contract through factory.\\n     * @param _tokenOwner The owner of the tokens.\\n     * @param _cliff The time interval to the first withdraw in seconds.\\n     * @param _duration The total duration in seconds.\\n     * @return The team vesting contract address for the given token owner\\n     * whether it existed previously or not.\\n     * */\\n    function _getOrCreateTeamVesting(\\n        address _tokenOwner,\\n        uint256 _cliff,\\n        uint256 _duration\\n    ) internal returns (address) {\\n        uint256 type_ = uint256(VestingType.TeamVesting);\\n        if (vestingContracts[_tokenOwner][type_] == address(0)) {\\n            address vesting =\\n                vestingFactory.deployTeamVesting(\\n                    SOV,\\n                    staking,\\n                    _tokenOwner,\\n                    _cliff,\\n                    _duration,\\n                    feeSharingCollector,\\n                    vestingOwner\\n                );\\n            vestingContracts[_tokenOwner][type_] = vesting;\\n        }\\n        return vestingContracts[_tokenOwner][type_];\\n    }\\n}\\n\",\"keccak256\":\"0xd691de2f5a675394f19be5264b659a646b4bc45752a59055484aa80f25c08a57\"},\"contracts/governance/Vesting/VestingRegistryLogic.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../IFeeSharingCollector.sol\\\";\\nimport \\\"./IVesting.sol\\\";\\nimport \\\"./ITeamVesting.sol\\\";\\nimport \\\"./VestingRegistryStorage.sol\\\";\\n\\ncontract VestingRegistryLogic is VestingRegistryStorage {\\n    event SOVTransferred(address indexed receiver, uint256 amount);\\n    event VestingCreated(\\n        address indexed tokenOwner,\\n        address vesting,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 amount,\\n        uint256 vestingCreationType\\n    );\\n    event TeamVestingCreated(\\n        address indexed tokenOwner,\\n        address vesting,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 amount,\\n        uint256 vestingCreationType\\n    );\\n    event TokensStaked(address indexed vesting, uint256 amount);\\n    event VestingCreationAndTypesSet(\\n        address indexed vesting,\\n        VestingCreationAndTypeDetails vestingCreationAndType\\n    );\\n\\n    /**\\n     * @notice Replace constructor with initialize function for Upgradable Contracts\\n     * This function will be called only once by the owner\\n     * */\\n    function initialize(\\n        address _vestingFactory,\\n        address _SOV,\\n        address _staking,\\n        address _feeSharingCollector,\\n        address _vestingOwner,\\n        address _lockedSOV,\\n        address[] calldata _vestingRegistries\\n    ) external onlyOwner initializer {\\n        require(_SOV != address(0), \\\"SOV address invalid\\\");\\n        require(_staking != address(0), \\\"staking address invalid\\\");\\n        require(_feeSharingCollector != address(0), \\\"feeSharingCollector address invalid\\\");\\n        require(_vestingOwner != address(0), \\\"vestingOwner address invalid\\\");\\n        require(_lockedSOV != address(0), \\\"LockedSOV address invalid\\\");\\n\\n        _setVestingFactory(_vestingFactory);\\n        SOV = _SOV;\\n        staking = _staking;\\n        feeSharingCollector = _feeSharingCollector;\\n        vestingOwner = _vestingOwner;\\n        lockedSOV = LockedSOV(_lockedSOV);\\n        for (uint256 i = 0; i < _vestingRegistries.length; i++) {\\n            require(_vestingRegistries[i] != address(0), \\\"Vesting registry address invalid\\\");\\n            vestingRegistries.push(IVestingRegistry(_vestingRegistries[i]));\\n        }\\n    }\\n\\n    /**\\n     * @notice sets vesting factory address\\n     * @param _vestingFactory the address of vesting factory contract\\n     */\\n    function setVestingFactory(address _vestingFactory) external onlyOwner {\\n        _setVestingFactory(_vestingFactory);\\n    }\\n\\n    /**\\n     * @notice Internal function that sets vesting factory address\\n     * @param _vestingFactory the address of vesting factory contract\\n     */\\n    function _setVestingFactory(address _vestingFactory) internal {\\n        require(_vestingFactory != address(0), \\\"vestingFactory address invalid\\\");\\n        vestingFactory = IVestingFactory(_vestingFactory);\\n    }\\n\\n    /**\\n     * @notice transfers SOV tokens to given address\\n     * @param _receiver the address of the SOV receiver\\n     * @param _amount the amount to be transferred\\n     */\\n    function transferSOV(address _receiver, uint256 _amount) external onlyOwner {\\n        require(_receiver != address(0), \\\"receiver address invalid\\\");\\n        require(_amount != 0, \\\"amount invalid\\\");\\n        require(IERC20(SOV).transfer(_receiver, _amount), \\\"transfer failed\\\");\\n        emit SOVTransferred(_receiver, _amount);\\n    }\\n\\n    /**\\n     * @notice adds vestings that were deployed in previous vesting registries\\n     * @dev migration of data from previous vesting registy contracts\\n     */\\n    function addDeployedVestings(\\n        address[] calldata _tokenOwners,\\n        uint256[] calldata _vestingCreationTypes\\n    ) external onlyAuthorized {\\n        for (uint256 i = 0; i < _tokenOwners.length; i++) {\\n            require(_tokenOwners[i] != address(0), \\\"token owner cannot be 0 address\\\");\\n            require(_vestingCreationTypes[i] > 0, \\\"vesting creation type must be greater than 0\\\");\\n            _addDeployedVestings(_tokenOwners[i], _vestingCreationTypes[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice adds four year vestings to vesting registry logic\\n     * @param _tokenOwners array of token owners\\n     * @param _vestingAddresses array of vesting addresses\\n     */\\n    function addFourYearVestings(\\n        address[] calldata _tokenOwners,\\n        address[] calldata _vestingAddresses\\n    ) external onlyAuthorized {\\n        require(_tokenOwners.length == _vestingAddresses.length, \\\"arrays mismatch\\\");\\n        uint256 vestingCreationType = 4;\\n        uint256 cliff = 4 weeks;\\n        uint256 duration = 156 weeks;\\n        for (uint256 i = 0; i < _tokenOwners.length; i++) {\\n            require(!isVesting[_vestingAddresses[i]], \\\"vesting exists\\\");\\n            require(_tokenOwners[i] != address(0), \\\"token owner cannot be 0 address\\\");\\n            require(_vestingAddresses[i] != address(0), \\\"vesting cannot be 0 address\\\");\\n            uint256 uid =\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            _tokenOwners[i],\\n                            uint256(VestingType.Vesting),\\n                            cliff,\\n                            duration,\\n                            vestingCreationType\\n                        )\\n                    )\\n                );\\n            vestings[uid] = Vesting(\\n                uint256(VestingType.Vesting),\\n                vestingCreationType,\\n                _vestingAddresses[i]\\n            );\\n            vestingsOf[_tokenOwners[i]].push(uid);\\n            isVesting[_vestingAddresses[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice creates Vesting contract\\n     * @param _tokenOwner the owner of the tokens\\n     * @param _amount the amount to be staked\\n     * @param _cliff the cliff in seconds\\n     * @param _duration the total duration in seconds\\n     * @dev Calls a public createVestingAddr function with vestingCreationType. This is to accomodate the existing logic for LockedSOV\\n     * @dev vestingCreationType 0 = LockedSOV\\n     */\\n    function createVesting(\\n        address _tokenOwner,\\n        uint256 _amount,\\n        uint256 _cliff,\\n        uint256 _duration\\n    ) external onlyAuthorized {\\n        createVestingAddr(_tokenOwner, _amount, _cliff, _duration, 3);\\n    }\\n\\n    /**\\n     * @notice creates Vesting contract\\n     * @param _tokenOwner the owner of the tokens\\n     * @param _amount the amount to be staked\\n     * @param _cliff the cliff in seconds\\n     * @param _duration the total duration in seconds\\n     * @param _vestingCreationType the type of vesting created(e.g. Origin, Bug Bounty etc.)\\n     */\\n    function createVestingAddr(\\n        address _tokenOwner,\\n        uint256 _amount,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        uint256 _vestingCreationType\\n    ) public onlyAuthorized {\\n        address vesting =\\n            _getOrCreateVesting(\\n                _tokenOwner,\\n                _cliff,\\n                _duration,\\n                uint256(VestingType.Vesting),\\n                _vestingCreationType\\n            );\\n\\n        emit VestingCreated(\\n            _tokenOwner,\\n            vesting,\\n            _cliff,\\n            _duration,\\n            _amount,\\n            _vestingCreationType\\n        );\\n    }\\n\\n    /**\\n     * @notice creates Team Vesting contract\\n     * @param _tokenOwner the owner of the tokens\\n     * @param _amount the amount to be staked\\n     * @param _cliff the cliff in seconds\\n     * @param _duration the total duration in seconds\\n     * @param _vestingCreationType the type of vesting created(e.g. Origin, Bug Bounty etc.)\\n     */\\n    function createTeamVesting(\\n        address _tokenOwner,\\n        uint256 _amount,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        uint256 _vestingCreationType\\n    ) external onlyAuthorized {\\n        address vesting =\\n            _getOrCreateVesting(\\n                _tokenOwner,\\n                _cliff,\\n                _duration,\\n                uint256(VestingType.TeamVesting),\\n                _vestingCreationType\\n            );\\n\\n        emit TeamVestingCreated(\\n            _tokenOwner,\\n            vesting,\\n            _cliff,\\n            _duration,\\n            _amount,\\n            _vestingCreationType\\n        );\\n    }\\n\\n    /**\\n     * @notice stakes tokens according to the vesting schedule\\n     * @param _vesting the address of Vesting contract\\n     * @param _amount the amount of tokens to stake\\n     */\\n    function stakeTokens(address _vesting, uint256 _amount) external onlyAuthorized {\\n        require(_vesting != address(0), \\\"vesting address invalid\\\");\\n        require(_amount > 0, \\\"amount invalid\\\");\\n\\n        IERC20(SOV).approve(_vesting, _amount);\\n        IVesting(_vesting).stakeTokens(_amount);\\n        emit TokensStaked(_vesting, _amount);\\n    }\\n\\n    /**\\n     * @notice returns vesting contract address for the given token owner\\n     * @param _tokenOwner the owner of the tokens\\n     * @dev Calls a public getVestingAddr function with cliff and duration. This is to accomodate the existing logic for LockedSOV\\n     * @dev We need to use LockedSOV.changeRegistryCliffAndDuration function very judiciously\\n     * @dev vestingCreationType 0 - LockedSOV\\n     */\\n    function getVesting(address _tokenOwner) public view returns (address) {\\n        return getVestingAddr(_tokenOwner, lockedSOV.cliff(), lockedSOV.duration(), 3);\\n    }\\n\\n    /**\\n     * @notice public function that returns vesting contract address for the given token owner, cliff, duration\\n     * @dev Important: Please use this instead of getVesting function\\n     */\\n    function getVestingAddr(\\n        address _tokenOwner,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        uint256 _vestingCreationType\\n    ) public view returns (address) {\\n        uint256 type_ = uint256(VestingType.Vesting);\\n        uint256 uid =\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(_tokenOwner, type_, _cliff, _duration, _vestingCreationType)\\n                )\\n            );\\n        return vestings[uid].vestingAddress;\\n    }\\n\\n    /**\\n     * @notice returns team vesting contract address for the given token owner, cliff, duration\\n     */\\n    function getTeamVesting(\\n        address _tokenOwner,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        uint256 _vestingCreationType\\n    ) public view returns (address) {\\n        uint256 type_ = uint256(VestingType.TeamVesting);\\n        uint256 uid =\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(_tokenOwner, type_, _cliff, _duration, _vestingCreationType)\\n                )\\n            );\\n        return vestings[uid].vestingAddress;\\n    }\\n\\n    /**\\n     * @dev check if the specific vesting address is team vesting or not\\n     * @dev read the vestingType from vestingCreationAndTypes storage\\n     *\\n     * @param _vestingAddress address of vesting contract\\n     *\\n     * @return true for teamVesting, false for normal vesting\\n     */\\n    function isTeamVesting(address _vestingAddress) external view returns (bool) {\\n        return (vestingCreationAndTypes[_vestingAddress].isSet &&\\n            vestingCreationAndTypes[_vestingAddress].vestingType ==\\n            uint32(VestingType.TeamVesting));\\n    }\\n\\n    /**\\n     * @dev setter function to register existing vesting contract to vestingCreationAndTypes storage\\n     * @dev need to set the function visilibty to public to support VestingCreationAndTypeDetails struct as parameter\\n     *\\n     * @param _vestingAddresses array of vesting address\\n     * @param _vestingCreationAndTypes array for VestingCreationAndTypeDetails struct\\n     */\\n    function registerVestingToVestingCreationAndTypes(\\n        address[] memory _vestingAddresses,\\n        VestingCreationAndTypeDetails[] memory _vestingCreationAndTypes\\n    ) public onlyAuthorized {\\n        require(_vestingAddresses.length == _vestingCreationAndTypes.length, \\\"Unmatched length\\\");\\n        for (uint256 i = 0; i < _vestingCreationAndTypes.length; i++) {\\n            VestingCreationAndTypeDetails memory _vestingCreationAndType =\\n                _vestingCreationAndTypes[i];\\n            address _vestingAddress = _vestingAddresses[i];\\n\\n            vestingCreationAndTypes[_vestingAddress] = _vestingCreationAndType;\\n\\n            emit VestingCreationAndTypesSet(\\n                _vestingAddress,\\n                vestingCreationAndTypes[_vestingAddress]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to deploy Vesting/Team Vesting contract\\n     * @param _tokenOwner the owner of the tokens\\n     * @param _cliff the cliff in seconds\\n     * @param _duration the total duration in seconds\\n     * @param _type the type of vesting\\n     * @param _vestingCreationType the type of vesting created(e.g. Origin, Bug Bounty etc.)\\n     */\\n    function _getOrCreateVesting(\\n        address _tokenOwner,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        uint256 _type,\\n        uint256 _vestingCreationType\\n    ) internal returns (address) {\\n        address vesting;\\n        uint256 uid =\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(_tokenOwner, _type, _cliff, _duration, _vestingCreationType)\\n                )\\n            );\\n        if (vestings[uid].vestingAddress == address(0)) {\\n            if (_type == 1) {\\n                vesting = vestingFactory.deployVesting(\\n                    SOV,\\n                    staking,\\n                    _tokenOwner,\\n                    _cliff,\\n                    _duration,\\n                    feeSharingCollector,\\n                    _tokenOwner\\n                );\\n            } else {\\n                vesting = vestingFactory.deployTeamVesting(\\n                    SOV,\\n                    staking,\\n                    _tokenOwner,\\n                    _cliff,\\n                    _duration,\\n                    feeSharingCollector,\\n                    vestingOwner\\n                );\\n            }\\n            vestings[uid] = Vesting(_type, _vestingCreationType, vesting);\\n            vestingsOf[_tokenOwner].push(uid);\\n            isVesting[vesting] = true;\\n\\n            vestingCreationAndTypes[vesting] = VestingCreationAndTypeDetails({\\n                isSet: true,\\n                vestingType: uint32(_type),\\n                vestingCreationType: uint128(_vestingCreationType)\\n            });\\n\\n            emit VestingCreationAndTypesSet(vesting, vestingCreationAndTypes[vesting]);\\n        }\\n        return vestings[uid].vestingAddress;\\n    }\\n\\n    /**\\n     * @notice stores the addresses of Vesting contracts from all three previous versions of Vesting Registry\\n     */\\n    function _addDeployedVestings(address _tokenOwner, uint256 _vestingCreationType) internal {\\n        uint256 uid;\\n        uint256 i = _vestingCreationType - 1;\\n\\n        address vestingAddress = vestingRegistries[i].getVesting(_tokenOwner);\\n        if (vestingAddress != address(0)) {\\n            VestingLogic vesting = VestingLogic(vestingAddress);\\n            uid = uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        _tokenOwner,\\n                        uint256(VestingType.Vesting),\\n                        vesting.cliff(),\\n                        vesting.duration(),\\n                        _vestingCreationType\\n                    )\\n                )\\n            );\\n            vestings[uid] = Vesting(\\n                uint256(VestingType.Vesting),\\n                _vestingCreationType,\\n                vestingAddress\\n            );\\n            vestingsOf[_tokenOwner].push(uid);\\n            isVesting[vestingAddress] = true;\\n        }\\n\\n        address teamVestingAddress = vestingRegistries[i].getTeamVesting(_tokenOwner);\\n        if (teamVestingAddress != address(0)) {\\n            VestingLogic vesting = VestingLogic(teamVestingAddress);\\n            uid = uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        _tokenOwner,\\n                        uint256(VestingType.TeamVesting),\\n                        vesting.cliff(),\\n                        vesting.duration(),\\n                        _vestingCreationType\\n                    )\\n                )\\n            );\\n            vestings[uid] = Vesting(\\n                uint256(VestingType.TeamVesting),\\n                _vestingCreationType,\\n                teamVestingAddress\\n            );\\n            vestingsOf[_tokenOwner].push(uid);\\n            isVesting[teamVestingAddress] = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice returns all vesting details for the given token owner\\n     */\\n    function getVestingsOf(address _tokenOwner) external view returns (Vesting[] memory) {\\n        uint256[] memory vestingIds = vestingsOf[_tokenOwner];\\n        uint256 length = vestingIds.length;\\n        Vesting[] memory _vestings = new Vesting[](vestingIds.length);\\n        for (uint256 i = 0; i < length; i++) {\\n            _vestings[i] = vestings[vestingIds[i]];\\n        }\\n        return _vestings;\\n    }\\n\\n    /**\\n     * @notice returns cliff and duration for Vesting & TeamVesting contracts\\n     */\\n    function getVestingDetails(address _vestingAddress)\\n        external\\n        view\\n        returns (uint256 cliff, uint256 duration)\\n    {\\n        VestingLogic vesting = VestingLogic(_vestingAddress);\\n        return (vesting.cliff(), vesting.duration());\\n    }\\n\\n    /**\\n     * @notice returns if the address is a vesting address\\n     */\\n    function isVestingAddress(address _vestingAddress) external view returns (bool isVestingAddr) {\\n        return isVesting[_vestingAddress];\\n    }\\n}\\n\",\"keccak256\":\"0xe5c27d62f4a228d602d1e9142d76540e701d34640b8908a8b1ce19caabb5be85\"},\"contracts/governance/Vesting/VestingRegistryStorage.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"../../openzeppelin/Initializable.sol\\\";\\nimport \\\"../../utils/AdminRoleManaged.sol\\\";\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"./IVestingFactory.sol\\\";\\nimport \\\"../../locked/LockedSOV.sol\\\";\\nimport \\\"./IVestingRegistry.sol\\\";\\n\\n/**\\n * @title Vesting Registry Storage Contract.\\n *\\n * @notice This contract is just the storage required for vesting registry.\\n * It is parent of VestingRegistryProxy and VestingRegistryLogic.\\n *\\n * @dev Use Ownable as a parent to align storage structure for Logic and Proxy contracts.\\n * */\\n\\ncontract VestingRegistryStorage is Initializable, AdminRoleManaged {\\n    ///@notice the vesting factory contract\\n    IVestingFactory public vestingFactory;\\n\\n    ///@notice the Locked SOV contract\\n    ///@dev NOTES: No need to update lockedSOV in this contract, since it might break the vestingRegistry if the new lockedSOV does not have the same value of cliff & duration.\\n    ILockedSOV public lockedSOV;\\n\\n    ///@notice the list of vesting registries\\n    IVestingRegistry[] public vestingRegistries;\\n\\n    ///@notice the SOV token contract\\n    address public SOV;\\n\\n    ///@notice the staking contract address\\n    address public staking;\\n\\n    ///@notice fee sharing proxy\\n    address public feeSharingCollector;\\n\\n    ///@notice the vesting owner (e.g. governance timelock address)\\n    address public vestingOwner;\\n\\n    enum VestingType {\\n        TeamVesting, //MultisigVesting\\n        Vesting //TokenHolderVesting\\n    }\\n\\n    ///@notice Vesting details\\n    struct Vesting {\\n        uint256 vestingType;\\n        uint256 vestingCreationType;\\n        address vestingAddress;\\n    }\\n\\n    ///@notice A record of vesting details for a unique id\\n    ///@dev vestings[uid] returns vesting data\\n    mapping(uint256 => Vesting) public vestings;\\n\\n    ///@notice A record of all unique ids for a particular token owner\\n    ///@dev vestingsOf[tokenOwner] returns array of unique ids\\n    mapping(address => uint256[]) public vestingsOf;\\n\\n    ///@notice A record of all vesting addresses\\n    ///@dev isVesting[address] returns if the address is a vesting address\\n    mapping(address => bool) public isVesting;\\n\\n    /// @notice Store vesting creation type & vesting type information\\n    /// @dev it is packed into 1 single storage slot for cheaper gas usage\\n    struct VestingCreationAndTypeDetails {\\n        bool isSet;\\n        uint32 vestingType;\\n        uint128 vestingCreationType;\\n    }\\n\\n    ///@notice A record of all vesting addresses with the detail\\n    ///@dev vestingDetail[vestingAddress] returns Vesting struct data\\n    ///@dev can be used to easily check the vesting type / creation type based on the vesting address itself\\n    mapping(address => VestingCreationAndTypeDetails) public vestingCreationAndTypes;\\n}\\n\",\"keccak256\":\"0x5499b056e9229b7608b37e93ec8a96b590f00025d00973de9ba2665fd36caca5\"},\"contracts/governance/Vesting/VestingStorage.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../Staking/interfaces/IStaking.sol\\\";\\nimport \\\"../IFeeSharingCollector.sol\\\";\\n\\n/**\\n * @title Vesting Storage Contract.\\n *\\n * @notice This contract is just the storage required for vesting.\\n * It is parent of VestingLogic and TeamVesting.\\n *\\n * @dev Use Ownable as a parent to align storage structure for Logic and Proxy contracts.\\n * */\\ncontract VestingStorage is Ownable {\\n    /// @notice The SOV token contract.\\n    IERC20 public SOV;\\n\\n    /// @notice The staking contract address.\\n    IStaking public staking;\\n\\n    /// @notice The owner of the vested tokens.\\n    address public tokenOwner;\\n\\n    /// @notice Fee sharing Proxy.\\n    IFeeSharingCollector public feeSharingCollector;\\n\\n    /// @notice The cliff. After this time period the tokens begin to unlock.\\n    uint256 public cliff;\\n\\n    /// @notice The duration. After this period all tokens will have been unlocked.\\n    uint256 public duration;\\n\\n    /// @notice The start date of the vesting.\\n    uint256 public startDate;\\n\\n    /// @notice The end date of the vesting.\\n    uint256 public endDate;\\n\\n    /// @notice Constant used for computing the vesting dates.\\n    uint256 constant FOUR_WEEKS = 4 weeks;\\n}\\n\",\"keccak256\":\"0xf70f579d357d8f0aa0839824c1a1d66713c3cd42a58118d2893a35b52baaa140\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _who) external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbc0c9bb48f19651930ec9aff366b2e11a1abf89c846e4b2d52d8102b15ce6721\"},\"contracts/locked/ILockedSOV.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n *  @title The Locked SOV Interface.\\n *  @author Franklin Richards - powerhousefrank@protonmail.com\\n *  @notice This interface is an incomplete yet useful for future migration of LockedSOV Contract.\\n *  @dev Only use it if you know what you are doing.\\n */\\ninterface ILockedSOV {\\n    /**\\n     * @notice Adds SOV to the user balance (Locked and Unlocked Balance based on `_basisPoint`).\\n     * @param _userAddress The user whose locked balance has to be updated with `_sovAmount`.\\n     * @param _sovAmount The amount of SOV to be added to the locked and/or unlocked balance.\\n     * @param _basisPoint The % (in Basis Point)which determines how much will be unlocked immediately.\\n     */\\n    function deposit(\\n        address _userAddress,\\n        uint256 _sovAmount,\\n        uint256 _basisPoint\\n    ) external;\\n\\n    /**\\n     * @notice Adds SOV to the locked balance of a user.\\n     * @param _userAddress The user whose locked balance has to be updated with _sovAmount.\\n     * @param _sovAmount The amount of SOV to be added to the locked balance.\\n     */\\n    function depositSOV(address _userAddress, uint256 _sovAmount) external;\\n\\n    /**\\n     * @notice Withdraws unlocked tokens and Stakes Locked tokens for a user who already have a vesting created.\\n     * @param _userAddress The address of user tokens will be withdrawn.\\n     */\\n    function withdrawAndStakeTokensFrom(address _userAddress) external;\\n\\n    function cliff() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function getLockedBalance(address _addr) external view returns (uint256 _balance);\\n\\n    function getUnlockedBalance(address _addr) external view returns (uint256 _balance);\\n}\\n\",\"keccak256\":\"0x2ecf9d6c3704b4210b86d15a35650b34a1c44d0fb57795668fd2b2b4eab6104f\"},\"contracts/locked/LockedSOV.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"../openzeppelin/SafeMath.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../governance/Vesting/VestingRegistry.sol\\\";\\nimport \\\"../governance/Vesting/VestingLogic.sol\\\";\\nimport \\\"./ILockedSOV.sol\\\";\\n\\n/**\\n *  @title The Locked SOV Contract.\\n *  @author Franklin Richards - powerhousefrank@protonmail.com\\n *  @notice This contract is used to receive reward from other contracts, Create Vesting and Stake Tokens.\\n */\\ncontract LockedSOV is ILockedSOV {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant MAX_BASIS_POINT = 10000;\\n    uint256 public constant MAX_DURATION = 37;\\n\\n    /* Storage */\\n\\n    /// @notice True if the migration to a new Locked SOV Contract has started.\\n    bool public migration;\\n\\n    /// @notice The cliff is the time period after which the tokens begin to unlock.\\n    uint256 public cliff;\\n    /// @notice The duration is the time period after all tokens will have been unlocked.\\n    uint256 public duration;\\n\\n    /// @notice The SOV token contract.\\n    IERC20 public SOV;\\n    /// @notice The Vesting registry contract.\\n    VestingRegistry public vestingRegistry;\\n    /// @notice The New (Future) Locked SOV.\\n    ILockedSOV public newLockedSOV;\\n\\n    /// @notice The locked user balances.\\n    mapping(address => uint256) private lockedBalances;\\n    /// @notice The unlocked user balances.\\n    mapping(address => uint256) private unlockedBalances;\\n    /// @notice The contracts/wallets with admin power.\\n    mapping(address => bool) private isAdmin;\\n\\n    /* Events */\\n\\n    /// @notice Emitted when a new Admin is added to the admin list.\\n    /// @param _initiator The address which initiated this event to be emitted.\\n    /// @param _newAdmin The address of the new admin.\\n    event AdminAdded(address indexed _initiator, address indexed _newAdmin);\\n\\n    /// @notice Emitted when an admin is removed from the admin list.\\n    /// @param _initiator The address which initiated this event to be emitted.\\n    /// @param _removedAdmin The address of the removed admin.\\n    event AdminRemoved(address indexed _initiator, address indexed _removedAdmin);\\n\\n    /// @notice Emitted when Vesting Registry, Duration and/or Cliff is updated.\\n    /// @param _initiator The address which initiated this event to be emitted.\\n    /// @param _vestingRegistry The Vesting Registry Contract.\\n    /// @param _cliff The time period after which the tokens begin to unlock.\\n    /// @param _duration The time period after all tokens will have been unlocked.\\n    event RegistryCliffAndDurationUpdated(\\n        address indexed _initiator,\\n        address indexed _vestingRegistry,\\n        uint256 _cliff,\\n        uint256 _duration\\n    );\\n\\n    /// @notice Emitted when a new deposit is made.\\n    /// @param _initiator The address which initiated this event to be emitted.\\n    /// @param _userAddress The user to whose un/locked balance a new deposit was made.\\n    /// @param _sovAmount The amount of SOV to be added to the un/locked balance.\\n    /// @param _basisPoint The % (in Basis Point) which determines how much will be unlocked immediately.\\n    event Deposited(\\n        address indexed _initiator,\\n        address indexed _userAddress,\\n        uint256 _sovAmount,\\n        uint256 _basisPoint\\n    );\\n\\n    /// @notice Emitted when a user withdraws the fund.\\n    /// @param _initiator The address which initiated this event to be emitted.\\n    /// @param _userAddress The user whose unlocked balance has to be withdrawn.\\n    /// @param _sovAmount The amount of SOV withdrawn from the unlocked balance.\\n    event Withdrawn(address indexed _initiator, address indexed _userAddress, uint256 _sovAmount);\\n\\n    /// @notice Emitted when a user creates a vesting for himself.\\n    /// @param _initiator The address which initiated this event to be emitted.\\n    /// @param _userAddress The user whose unlocked balance has to be withdrawn.\\n    /// @param _vesting The Vesting Contract.\\n    event VestingCreated(\\n        address indexed _initiator,\\n        address indexed _userAddress,\\n        address indexed _vesting\\n    );\\n\\n    /// @notice Emitted when a user stakes tokens.\\n    /// @param _initiator The address which initiated this event to be emitted.\\n    /// @param _vesting The Vesting Contract.\\n    /// @param _amount The amount of locked tokens staked by the user.\\n    event TokenStaked(address indexed _initiator, address indexed _vesting, uint256 _amount);\\n\\n    /// @notice Emitted when an admin initiates a migration to new Locked SOV Contract.\\n    /// @param _initiator The address which initiated this event to be emitted.\\n    /// @param _newLockedSOV The address of the new Locked SOV Contract.\\n    event MigrationStarted(address indexed _initiator, address indexed _newLockedSOV);\\n\\n    /// @notice Emitted when a user initiates the transfer to a new Locked SOV Contract.\\n    /// @param _initiator The address which initiated this event to be emitted.\\n    /// @param _amount The amount of locked tokens to transfer from this contract to the new one.\\n    event UserTransfered(address indexed _initiator, uint256 _amount);\\n\\n    /* Modifiers */\\n\\n    modifier onlyAdmin {\\n        require(isAdmin[msg.sender], \\\"Only admin can call this.\\\");\\n        _;\\n    }\\n\\n    modifier migrationAllowed {\\n        require(migration, \\\"Migration has not yet started.\\\");\\n        _;\\n    }\\n\\n    /* Constructor */\\n\\n    /**\\n     * @notice Setup the required parameters.\\n     * @param _SOV The SOV Token Address.\\n     * @param _vestingRegistry The Vesting Registry Address.\\n     * @param _cliff The time period after which the tokens begin to unlock.\\n     * @param _duration The time period after all tokens will have been unlocked.\\n     * @param _admins The list of Admins to be added.\\n     */\\n    constructor(\\n        address _SOV,\\n        address _vestingRegistry,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        address[] memory _admins\\n    ) public {\\n        require(_SOV != address(0), \\\"Invalid SOV Address.\\\");\\n        require(_vestingRegistry != address(0), \\\"Vesting registry address is invalid.\\\");\\n        require(_duration < MAX_DURATION, \\\"Duration is too long.\\\");\\n\\n        SOV = IERC20(_SOV);\\n        vestingRegistry = VestingRegistry(_vestingRegistry);\\n        cliff = _cliff * 4 weeks;\\n        duration = _duration * 4 weeks;\\n\\n        for (uint256 index = 0; index < _admins.length; index++) {\\n            isAdmin[_admins[index]] = true;\\n        }\\n    }\\n\\n    /* Public or External Functions */\\n\\n    /**\\n     * @notice The function to add a new admin.\\n     * @param _newAdmin The address of the new admin.\\n     * @dev Only callable by an Admin.\\n     */\\n    function addAdmin(address _newAdmin) public onlyAdmin {\\n        require(_newAdmin != address(0), \\\"Invalid Address.\\\");\\n        require(!isAdmin[_newAdmin], \\\"Address is already admin.\\\");\\n        isAdmin[_newAdmin] = true;\\n\\n        emit AdminAdded(msg.sender, _newAdmin);\\n    }\\n\\n    /**\\n     * @notice The function to remove an admin.\\n     * @param _adminToRemove The address of the admin which should be removed.\\n     * @dev Only callable by an Admin.\\n     */\\n    function removeAdmin(address _adminToRemove) public onlyAdmin {\\n        require(isAdmin[_adminToRemove], \\\"Address is not an admin.\\\");\\n        isAdmin[_adminToRemove] = false;\\n\\n        emit AdminRemoved(msg.sender, _adminToRemove);\\n    }\\n\\n    /**\\n     * @notice The function to update the Vesting Registry, Duration and Cliff.\\n     * @param _vestingRegistry The Vesting Registry Address.\\n     * @param _cliff The time period after which the tokens begin to unlock.\\n     * @param _duration The time period after all tokens will have been unlocked.\\n     * @dev IMPORTANT 1: You have to change Vesting Registry if you want to change Duration and/or Cliff.\\n     * IMPORTANT 2: `_cliff` and `_duration` is multiplied by 4 weeks in this function.\\n     */\\n    function changeRegistryCliffAndDuration(\\n        address _vestingRegistry,\\n        uint256 _cliff,\\n        uint256 _duration\\n    ) external onlyAdmin {\\n        require(\\n            address(vestingRegistry) != _vestingRegistry,\\n            \\\"Vesting Registry has to be different for changing duration and cliff.\\\"\\n        );\\n        /// If duration is also zero, then it is similar to Unlocked SOV.\\n        require(_duration != 0, \\\"Duration cannot be zero.\\\");\\n        require(_duration < MAX_DURATION, \\\"Duration is too long.\\\");\\n\\n        vestingRegistry = VestingRegistry(_vestingRegistry);\\n\\n        cliff = _cliff * 4 weeks;\\n        duration = _duration * 4 weeks;\\n\\n        emit RegistryCliffAndDurationUpdated(msg.sender, _vestingRegistry, _cliff, _duration);\\n    }\\n\\n    /**\\n     * @notice Adds SOV to the user balance (Locked and Unlocked Balance based on `_basisPoint`).\\n     * @param _userAddress The user whose locked balance has to be updated with `_sovAmount`.\\n     * @param _sovAmount The amount of SOV to be added to the locked and/or unlocked balance.\\n     * @param _basisPoint The % (in Basis Point)which determines how much will be unlocked immediately.\\n     */\\n    function deposit(\\n        address _userAddress,\\n        uint256 _sovAmount,\\n        uint256 _basisPoint\\n    ) external {\\n        _deposit(_userAddress, _sovAmount, _basisPoint);\\n    }\\n\\n    /**\\n     * @notice Adds SOV to the locked balance of a user.\\n     * @param _userAddress The user whose locked balance has to be updated with _sovAmount.\\n     * @param _sovAmount The amount of SOV to be added to the locked balance.\\n     * @dev This is here because there are dependency with other contracts.\\n     */\\n    function depositSOV(address _userAddress, uint256 _sovAmount) external {\\n        _deposit(_userAddress, _sovAmount, 0);\\n    }\\n\\n    function _deposit(\\n        address _userAddress,\\n        uint256 _sovAmount,\\n        uint256 _basisPoint\\n    ) private {\\n        // MAX_BASIS_POINT is not included because if 100% is unlocked, then LockedSOV is not required to be used.\\n        require(_basisPoint < MAX_BASIS_POINT, \\\"Basis Point has to be less than 10000.\\\");\\n        bool txStatus = SOV.transferFrom(msg.sender, address(this), _sovAmount);\\n        require(txStatus, \\\"Token transfer was not successful. Check receiver address.\\\");\\n\\n        uint256 unlockedBal = _sovAmount.mul(_basisPoint).div(MAX_BASIS_POINT);\\n\\n        unlockedBalances[_userAddress] = unlockedBalances[_userAddress].add(unlockedBal);\\n        lockedBalances[_userAddress] = lockedBalances[_userAddress].add(_sovAmount).sub(\\n            unlockedBal\\n        );\\n\\n        emit Deposited(msg.sender, _userAddress, _sovAmount, _basisPoint);\\n    }\\n\\n    /**\\n     * @notice A function to withdraw the unlocked balance.\\n     * @param _receiverAddress If specified, the unlocked balance will go to this address, else to msg.sender.\\n     */\\n    function withdraw(address _receiverAddress) public {\\n        _withdraw(msg.sender, _receiverAddress);\\n    }\\n\\n    function _withdraw(address _sender, address _receiverAddress) private {\\n        address userAddr = _receiverAddress;\\n        if (_receiverAddress == address(0)) {\\n            userAddr = _sender;\\n        }\\n\\n        uint256 amount = unlockedBalances[_sender];\\n        unlockedBalances[_sender] = 0;\\n\\n        bool txStatus = SOV.transfer(userAddr, amount);\\n        require(txStatus, \\\"Token transfer was not successful. Check receiver address.\\\");\\n\\n        emit Withdrawn(_sender, userAddr, amount);\\n    }\\n\\n    /**\\n     * @notice Creates vesting if not already created and Stakes tokens for a user.\\n     * @dev Only use this function if the `duration` is small.\\n     */\\n    function createVestingAndStake() public {\\n        _createVestingAndStake(msg.sender);\\n    }\\n\\n    function _createVestingAndStake(address _sender) private {\\n        address vestingAddr = _getVesting(_sender);\\n\\n        if (vestingAddr == address(0)) {\\n            vestingAddr = _createVesting(_sender);\\n        }\\n\\n        _stakeTokens(_sender, vestingAddr);\\n    }\\n\\n    /**\\n     * @notice Creates vesting contract (if it hasn't been created yet) for the calling user.\\n     * @return _vestingAddress The New Vesting Contract Created.\\n     */\\n    function createVesting() public returns (address _vestingAddress) {\\n        _vestingAddress = _createVesting(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Stakes tokens for a user who already have a vesting created.\\n     * @dev The user should already have a vesting created, else this function will throw error.\\n     */\\n    function stakeTokens() public {\\n        VestingLogic vesting = VestingLogic(_getVesting(msg.sender));\\n\\n        require(\\n            cliff == vesting.cliff() && duration == vesting.duration(),\\n            \\\"Wrong Vesting Schedule.\\\"\\n        );\\n\\n        _stakeTokens(msg.sender, address(vesting));\\n    }\\n\\n    /**\\n     * @notice Withdraws unlocked tokens and Stakes Locked tokens for a user who already have a vesting created.\\n     * @param _receiverAddress If specified, the unlocked balance will go to this address, else to msg.sender.\\n     */\\n    function withdrawAndStakeTokens(address _receiverAddress) external {\\n        _withdraw(msg.sender, _receiverAddress);\\n        _createVestingAndStake(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraws unlocked tokens and Stakes Locked tokens for a user who already have a vesting created.\\n     * @param _userAddress The address of user tokens will be withdrawn.\\n     */\\n    function withdrawAndStakeTokensFrom(address _userAddress) external {\\n        _withdraw(_userAddress, _userAddress);\\n        _createVestingAndStake(_userAddress);\\n    }\\n\\n    /**\\n     * @notice Function to start the process of migration to new contract.\\n     * @param _newLockedSOV The new locked sov contract address.\\n     */\\n    function startMigration(address _newLockedSOV) external onlyAdmin {\\n        require(_newLockedSOV != address(0), \\\"New Locked SOV Address is Invalid.\\\");\\n        newLockedSOV = ILockedSOV(_newLockedSOV);\\n        SOV.approve(_newLockedSOV, SOV.balanceOf(address(this)));\\n        migration = true;\\n\\n        emit MigrationStarted(msg.sender, _newLockedSOV);\\n    }\\n\\n    /**\\n     * @notice Function to transfer the locked balance from this contract to new LockedSOV Contract.\\n     * @dev Address is not specified to discourage selling lockedSOV to other address.\\n     */\\n    function transfer() external migrationAllowed {\\n        uint256 amount = lockedBalances[msg.sender];\\n        lockedBalances[msg.sender] = 0;\\n\\n        newLockedSOV.depositSOV(msg.sender, amount);\\n\\n        emit UserTransfered(msg.sender, amount);\\n    }\\n\\n    /* Internal Functions */\\n\\n    /**\\n     * @notice Creates a Vesting Contract for a user.\\n     * @param _tokenOwner The owner of the vesting contract.\\n     * @return _vestingAddress The Vesting Contract Address.\\n     * @dev Does not do anything if Vesting Contract was already created.\\n     */\\n    function _createVesting(address _tokenOwner) internal returns (address _vestingAddress) {\\n        /// Here zero is given in place of amount, as amount is not really used in `vestingRegistry.createVesting()`.\\n        vestingRegistry.createVesting(_tokenOwner, 0, cliff, duration);\\n        _vestingAddress = _getVesting(_tokenOwner);\\n        emit VestingCreated(msg.sender, _tokenOwner, _vestingAddress);\\n    }\\n\\n    /**\\n     * @notice Returns the Vesting Contract Address.\\n     * @param _tokenOwner The owner of the vesting contract.\\n     * @return _vestingAddress The Vesting Contract Address.\\n     */\\n    function _getVesting(address _tokenOwner) internal view returns (address _vestingAddress) {\\n        return vestingRegistry.getVesting(_tokenOwner);\\n    }\\n\\n    /**\\n     * @notice Stakes the tokens in a particular vesting contract.\\n     * @param _vesting The Vesting Contract Address.\\n     */\\n    function _stakeTokens(address _sender, address _vesting) internal {\\n        uint256 amount = lockedBalances[_sender];\\n        lockedBalances[_sender] = 0;\\n\\n        require(SOV.approve(_vesting, amount), \\\"Approve failed.\\\");\\n        VestingLogic(_vesting).stakeTokens(amount);\\n\\n        emit TokenStaked(_sender, _vesting, amount);\\n    }\\n\\n    /* Getter or Read Functions */\\n\\n    /**\\n     * @notice The function to get the locked balance of a user.\\n     * @param _addr The address of the user to check the locked balance.\\n     * @return _balance The locked balance of the address `_addr`.\\n     */\\n    function getLockedBalance(address _addr) external view returns (uint256 _balance) {\\n        return lockedBalances[_addr];\\n    }\\n\\n    /**\\n     * @notice The function to get the unlocked balance of a user.\\n     * @param _addr The address of the user to check the unlocked balance.\\n     * @return _balance The unlocked balance of the address `_addr`.\\n     */\\n    function getUnlockedBalance(address _addr) external view returns (uint256 _balance) {\\n        return unlockedBalances[_addr];\\n    }\\n\\n    /**\\n     * @notice The function to check is an address is admin or not.\\n     * @param _addr The address of the user to check the admin status.\\n     * @return _status True if admin, False otherwise.\\n     */\\n    function adminStatus(address _addr) external view returns (bool _status) {\\n        return isAdmin[_addr];\\n    }\\n}\\n\",\"keccak256\":\"0xadc3b976d89a409f04644071a9f40c57d5e96a0b13d364f1aa4324e648607999\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Initializable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa5064e2730ae1037f4efc83654676174484b827890d30ee618048004a04d6b51\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"},\"contracts/token/IApproveAndCall.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for contract governance/ApprovalReceiver.sol\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n */\\ninterface IApproveAndCall {\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _sender The sender of SOV.approveAndCall function.\\n     * @param _amount The amount was approved.\\n     * @param _token The address of token.\\n     * @param _data The data will be used for low level call.\\n     * */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0ca93f8436a4d81d80de5ea9214139b490d96f708f09c975a0869ce9abc61635\"},\"contracts/utils/AdminManagerRole.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"../openzeppelin/Ownable.sol\\\";\\n\\ncontract AdminManagerRole is Ownable {\\n    /// @dev user => flag whether user has adminManager role.\\n    bytes32 private constant KEY_ADMIN_MANAGER_ROLE = keccak256(\\\"key.admin.manager.role\\\");\\n\\n    event AdminManagerChanged(\\n        address indexed sender,\\n        address indexed oldAdminManager,\\n        address indexed newAdminManager\\n    );\\n    event AdminManagerRemoved(address indexed sender, address indexed removedAdminManager);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner or adminManager.\\n     * or on our own overriding sovrynOwnable.\\n     */\\n    modifier onlyOwnerOrAdminManager() {\\n        require(isOwner() || msg.sender == getAdminManager(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set new admin manager.\\n     * @param _newAdminManager The addresses of the account to grant permissions.\\n     * */\\n    function setAdminManager(address _newAdminManager) public onlyOwner {\\n        require(_newAdminManager != address(0), \\\"invalid admin manager\\\");\\n        emit AdminManagerChanged(msg.sender, getAdminManager(), _newAdminManager);\\n\\n        bytes32 key = KEY_ADMIN_MANAGER_ROLE;\\n        assembly {\\n            sstore(key, _newAdminManager)\\n        }\\n    }\\n\\n    /**\\n     * @notice Set admin manager to 0 address.\\n     * */\\n    function removeAdminManager() public onlyOwner {\\n        require(getAdminManager() != address(0), \\\"Admin manager is not set\\\");\\n        emit AdminManagerRemoved(msg.sender, getAdminManager());\\n        address _newAdminManager = address(0);\\n        bytes32 key = KEY_ADMIN_MANAGER_ROLE;\\n        assembly {\\n            sstore(key, _newAdminManager)\\n        }\\n    }\\n\\n    /**\\n     * @notice Return address of the admin manager.\\n     * @return Address of admin manager.\\n     * */\\n    function getAdminManager() public view returns (address _adminManager) {\\n        bytes32 key = KEY_ADMIN_MANAGER_ROLE;\\n        assembly {\\n            _adminManager := sload(key)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x24af34df0602395198ac167e02d42e36b929e4f3575cec86e9ad88d4edecae9d\"},\"contracts/utils/AdminRoleManaged.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"../openzeppelin/Ownable.sol\\\";\\nimport \\\"./AdminManagerRole.sol\\\";\\n\\ncontract AdminRoleManaged is Ownable, AdminManagerRole {\\n    /// @dev user => flag whether user has admin role.\\n    mapping(address => bool) public admins;\\n\\n    event AdminAdded(address admin);\\n    event AdminRemoved(address admin);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner or admin.\\n     * or on our own overriding sovrynOwnable.\\n     */\\n    modifier onlyAuthorized() {\\n        require(isOwner() || admins[msg.sender], \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add account to ACL.\\n     * @param _admin The addresses of the account to grant permissions.\\n     * */\\n    function addAdmin(address _admin) public onlyOwnerOrAdminManager {\\n        admins[_admin] = true;\\n        emit AdminAdded(_admin);\\n    }\\n\\n    /**\\n     * @notice Remove account from ACL.\\n     * @param _admin The addresses of the account to revoke permissions.\\n     * */\\n    function removeAdmin(address _admin) public onlyOwnerOrAdminManager {\\n        admins[_admin] = false;\\n        emit AdminRemoved(_admin);\\n    }\\n}\\n\",\"keccak256\":\"0xd46d8388e348295ec2a9c6a417dd22eaadda880aaa7bb90673582c108b0c188d\"}},\"version\":1}",
  "bytecode": "0x608060405260006100176001600160e01b0361007016565b6000805462010000600160b01b031916620100006001600160a01b038416908102919091178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610074565b3390565b613352806100836000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80638dedf00911610130578063c36519d1116100b8578063efb957331161007c578063efb957331461049f578063f2f46b3b146104bf578063f2fde38b146104c7578063f421ed7e146104da578063f60826ee146104ed57610227565b8063c36519d114610433578063c680c0b714610446578063ca210d8c14610459578063cc49ede71461046c578063dfb9366d1461047f57610227565b8063b810c648116100ff578063b810c648146103df578063bc160758146103f2578063bc84f9ca14610405578063bd7b590814610418578063c0e098521461042057610227565b80638dedf009146103a65780638f32d59b146103c75780639af05157146103cf578063b29d2514146103d757610227565b80636b7dbb2d116101b357806380fcb9921161018257806380fcb99214610327578063821bee7314610349578063842a49d51461036b578063862e229d1461038b5780638da5cb5b1461039e57610227565b80636b7dbb2d146102e657806370480275146102ee578063786931da1461030157806379a83f5a1461031457610227565b80631f509326116101fa5780631f50932614610285578063377220fd14610298578063429b62e5146102ab57806342a82b4f146102cb5780634cf088d9146102de57610227565b806302df04761461022c5780630665a06f1461025557806308dcb3601461026a5780631785f53c14610272575b600080fd5b61023f61023a36600461264e565b6104f5565b60405161024c9190612ef0565b60405180910390f35b61026861026336600461264e565b610556565b005b61023f6105b1565b610268610280366004612520565b6105c0565b6102686102933660046126af565b610662565b6102686102a6366004612520565b610704565b6102be6102b9366004612520565b610734565b60405161024c9190612fe5565b6102686102d936600461255c565b610749565b61023f6109b8565b61023f6109c7565b6102686102fc366004612520565b6109d6565b61026861030f366004612724565b610a72565b610268610322366004612614565b610d61565b61033a610335366004612520565b610f0d565b60405161024c93929190612ff3565b61035c610357366004612811565b610f42565b60405161024c939291906131b3565b61037e610379366004612811565b610f6c565b60405161024c919061301b565b6102686103993660046126af565b610f93565b61023f611022565b6103b96103b4366004612520565b611037565b60405161024c9291906131a5565b6102be61112b565b610268611155565b61023f611212565b6102686103ed366004612724565b611231565b610268610400366004612520565b611341565b610268610413366004612794565b6113ea565b61023f61154a565b6102be61042e366004612520565b611559565b61023f61044136600461264e565b61156e565b610268610454366004612614565b611577565b6102be610467366004612520565b6116b7565b61023f61047a366004612520565b6116d5565b61049261048d366004612614565b6117f4565b60405161024c9190613197565b6104b26104ad366004612520565b611822565b60405161024c9190612fd4565b61037e61196c565b6102686104d5366004612520565b61197b565b6102be6104e8366004612520565b6119a8565b61037e6119f3565b60008060015b905060008682878787604051602001610518959493929190612e8c565b60408051601f198184030181529181528151602092830120600090815260099092529020600201546001600160a01b0316925050505b949350505050565b61055e61112b565b8061057857503360009081526001602052604090205460ff165b61059d5760405162461bcd60e51b8152600401610594906130d9565b60405180910390fd5b6105ab848484846003610662565b50505050565b6005546001600160a01b031681565b6105c861112b565b806105eb57506105d6611212565b6001600160a01b0316336001600160a01b0316145b6106075760405162461bcd60e51b8152600401610594906130d9565b6001600160a01b03811660009081526001602052604090819020805460ff19169055517fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f90610657908390612ef0565b60405180910390a150565b61066a61112b565b8061068457503360009081526001602052604090205460ff165b6106a05760405162461bcd60e51b8152600401610594906130d9565b60006106b186858560015b86611a02565b9050856001600160a01b03167fd6fcfd83804f6b6b63260c7b99eb10060bc1319dbc9177fb6defc7bd614017bf82868689876040516106f4959493929190612f88565b60405180910390a2505050505050565b61070c61112b565b6107285760405162461bcd60e51b8152600401610594906130d9565b61073181611d6a565b50565b60016020526000908152604090205460ff1681565b61075161112b565b61076d5760405162461bcd60e51b8152600401610594906130d9565b600054610100900460ff1680610786575060005460ff16155b6107a25760405162461bcd60e51b8152600401610594906130c9565b600054610100900460ff161580156107cd576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0388166107f35760405162461bcd60e51b815260040161059490613179565b6001600160a01b0387166108195760405162461bcd60e51b815260040161059490613159565b6001600160a01b03861661083f5760405162461bcd60e51b8152600401610594906130e9565b6001600160a01b0385166108655760405162461bcd60e51b8152600401610594906130b9565b6001600160a01b03841661088b5760405162461bcd60e51b815260040161059490613149565b61089489611d6a565b600580546001600160a01b03199081166001600160a01b038b8116919091179092556006805482168a84161790556007805482168984161790556008805482168884161790556003805490911691861691909117905560005b8281101561099a57600084848381811061090357fe5b90506020020160206109189190810190612520565b6001600160a01b0316141561093f5760405162461bcd60e51b815260040161059490613029565b600484848381811061094d57fe5b90506020020160206109629190810190612520565b815460018082018455600093845260209093200180546001600160a01b0319166001600160a01b0392909216919091179055016108ed565b5080156109ad576000805461ff00191690555b505050505050505050565b6006546001600160a01b031681565b6007546001600160a01b031681565b6109de61112b565b80610a0157506109ec611212565b6001600160a01b0316336001600160a01b0316145b610a1d5760405162461bcd60e51b8152600401610594906130d9565b6001600160a01b038116600090815260016020819052604091829020805460ff19169091179055517f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33990610657908390612ef0565b610a7a61112b565b80610a9457503360009081526001602052604090205460ff165b610ab05760405162461bcd60e51b8152600401610594906130d9565b828114610acf5760405162461bcd60e51b815260040161059490613039565b60046224ea0063059fa60060005b86811015610d5757600b6000878784818110610af557fe5b9050602002016020610b0a9190810190612520565b6001600160a01b0316815260208101919091526040016000205460ff1615610b445760405162461bcd60e51b8152600401610594906130a9565b6000888883818110610b5257fe5b9050602002016020610b679190810190612520565b6001600160a01b03161415610b8e5760405162461bcd60e51b815260040161059490613049565b6000868683818110610b9c57fe5b9050602002016020610bb19190810190612520565b6001600160a01b03161415610bd85760405162461bcd60e51b815260040161059490613059565b6000888883818110610be657fe5b9050602002016020610bfb9190810190612520565b6001858588604051602001610c14959493929190612e8c565b60408051808303601f1901815282825280516020918201206060840183526001845290830188905292508101888885818110610c4c57fe5b9050602002016020610c619190810190612520565b6001600160a01b039081169091526000838152600960209081526040808320855181559185015160018301559390930151600290930180546001600160a01b03191693909216929092179055600a908a8a85818110610cbc57fe5b9050602002016020610cd19190810190612520565b6001600160a01b031681526020808201929092526040016000908120805460018181018355918352928220909201839055600b90898986818110610d1157fe5b9050602002016020610d269190810190612520565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905550600101610add565b5050505050505050565b610d6961112b565b80610d8357503360009081526001602052604090205460ff165b610d9f5760405162461bcd60e51b8152600401610594906130d9565b6001600160a01b038216610dc55760405162461bcd60e51b815260040161059490613099565b60008111610de55760405162461bcd60e51b815260040161059490613089565b60055460405163095ea7b360e01b81526001600160a01b039091169063095ea7b390610e179085908590600401612f66565b602060405180830381600087803b158015610e3157600080fd5b505af1158015610e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e6991908101906127f3565b50604051637547c7a360e01b81526001600160a01b03831690637547c7a390610e96908490600401613197565b600060405180830381600087803b158015610eb057600080fd5b505af1158015610ec4573d6000803e3d6000fd5b50505050816001600160a01b03167fb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef82604051610f019190613197565b60405180910390a25050565b600c6020526000908152604090205460ff811690610100810463ffffffff16906501000000000090046001600160801b031683565b6009602052600090815260409020805460018201546002909201549091906001600160a01b031683565b60048181548110610f7957fe5b6000918252602090912001546001600160a01b0316905081565b610f9b61112b565b80610fb557503360009081526001602052604090205460ff165b610fd15760405162461bcd60e51b8152600401610594906130d9565b6000610fdf868585846106ab565b9050856001600160a01b03167f3791c6c90c276d011b4b885c0bfba0554342acf50a539baca1b06f070af25ff482868689876040516106f4959493929190612f88565b6000546201000090046001600160a01b031690565b6000806000839050806001600160a01b03166313d033c06040518163ffffffff1660e01b815260040160206040518083038186803b15801561107857600080fd5b505afa15801561108c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110b0919081019061282f565b816001600160a01b0316630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e957600080fd5b505afa1580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611121919081019061282f565b9250925050915091565b600080546201000090046001600160a01b0316611146611db2565b6001600160a01b031614905090565b61115d61112b565b6111795760405162461bcd60e51b8152600401610594906130d9565b6000611183611212565b6001600160a01b031614156111aa5760405162461bcd60e51b815260040161059490613129565b6111b2611212565b6001600160a01b0316336001600160a01b03167f560ce9bc23860aa4ec0898e6c59b295d3461332304d14f1ac216282407da435f60405160405180910390a3604051600090819061120290612ee5565b6040519081900390209190915550565b60008060405161122190612ee5565b6040519081900390205492915050565b61123961112b565b8061125357503360009081526001602052604090205460ff165b61126f5760405162461bcd60e51b8152600401610594906130d9565b60005b8381101561133a57600085858381811061128857fe5b905060200201602061129d9190810190612520565b6001600160a01b031614156112c45760405162461bcd60e51b815260040161059490613049565b60008383838181106112d257fe5b90506020020135116112f65760405162461bcd60e51b8152600401610594906130f9565b61133285858381811061130557fe5b905060200201602061131a9190810190612520565b84848481811061132657fe5b90506020020135611db6565b600101611272565b5050505050565b61134961112b565b6113655760405162461bcd60e51b8152600401610594906130d9565b6001600160a01b03811661138b5760405162461bcd60e51b815260040161059490613119565b806001600160a01b031661139d611212565b6001600160a01b0316336001600160a01b03167f6bf6a88b1bb767c00d69f519bfabc075817f28425abfc80cfb779ef4e9b0bbe560405160405180910390a4600060405161120290612ee5565b6113f261112b565b8061140c57503360009081526001602052604090205460ff165b6114285760405162461bcd60e51b8152600401610594906130d9565b80518251146114495760405162461bcd60e51b815260040161059490613139565b60005b81518110156115455761145d6122e9565b82828151811061146957fe5b60200260200101519050600084838151811061148157fe5b6020908102919091018101516001600160a01b0381166000818152600c845260409081902086518154958801518884015160ff199097169115159190911764ffffffff00191661010063ffffffff909216919091021765010000000000600160a81b031916650100000000006001600160801b039096169590950294909417845551919350917f4deb6fa84b5232023ce753128000047116f9a6795b40a3b701edf5d8e265ca34916115339190613189565b60405180910390a2505060010161144c565b505050565b6008546001600160a01b031681565b600b6020526000908152604090205460ff1681565b600080806104fb565b61157f61112b565b61159b5760405162461bcd60e51b8152600401610594906130d9565b6001600160a01b0382166115c15760405162461bcd60e51b815260040161059490613109565b806115de5760405162461bcd60e51b815260040161059490613089565b60055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906116109085908590600401612f66565b602060405180830381600087803b15801561162a57600080fd5b505af115801561163e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061166291908101906127f3565b61167e5760405162461bcd60e51b815260040161059490613169565b816001600160a01b03167fe1b0ada289bf82fb641c8c1e1c78f820fae44e8f845760725cdeb09167a289ad82604051610f019190613197565b6001600160a01b03166000908152600b602052604090205460ff1690565b60006117ee82600360009054906101000a90046001600160a01b03166001600160a01b03166313d033c06040518163ffffffff1660e01b815260040160206040518083038186803b15801561172957600080fd5b505afa15801561173d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611761919081019061282f565b600360009054906101000a90046001600160a01b03166001600160a01b0316630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b1580156117af57600080fd5b505afa1580156117c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117e7919081019061282f565b60036104f5565b92915050565b600a602052816000526040600020818154811061180d57fe5b90600052602060002001600091509150505481565b606080600a6000846001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561189457602002820191906000526020600020905b815481526020019060010190808311611880575b50505050509050600081519050606082516040519080825280602002602001820160405280156118de57816020015b6118cb612309565b8152602001906001900390816118c35790505b50905060005b8281101561196357600960008583815181106118fc57fe5b6020908102919091018101518252818101929092526040908101600020815160608101835281548152600182015493810193909352600201546001600160a01b031690820152825183908390811061195057fe5b60209081029190910101526001016118e4565b50949350505050565b6003546001600160a01b031681565b61198361112b565b61199f5760405162461bcd60e51b8152600401610594906130d9565b6107318161225a565b6001600160a01b0381166000908152600c602052604081205460ff1680156117ee5750506001600160a01b03166000908152600c6020526040902054610100900463ffffffff161590565b6002546001600160a01b031681565b60008060008785888887604051602001611a20959493929190612e8c565b60408051601f198184030181529181528151602092830120600081815260099093529120600201549091506001600160a01b0316611d44578460011415611b0457600254600554600654600754604051637d2fbb8f60e11b81526001600160a01b039485169463fa5f771e94611aab9490821693908216928f928f928f929116908490600401612efe565b602060405180830381600087803b158015611ac557600080fd5b505af1158015611ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611afd919081019061253e565b9150611bfa565b600260009054906101000a90046001600160a01b03166001600160a01b031663546344f0600560009054906101000a90046001600160a01b0316600660009054906101000a90046001600160a01b03168b8b8b600760009054906101000a90046001600160a01b0316600860009054906101000a90046001600160a01b03166040518863ffffffff1660e01b8152600401611ba59796959493929190612efe565b602060405180830381600087803b158015611bbf57600080fd5b505af1158015611bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bf7919081019061253e565b91505b604080516060808201835287825260208083018881526001600160a01b038088168587018181526000898152600986528881209751885593516001808901919091559051600290970180549784166001600160a01b031990981697909717909655908e168252600a83528582208054808701825590835283832001879055808252600b8352858220805460ff1990811687179091558651948501875294845263ffffffff808c168585019081526001600160801b03808d16878a01908152848652600c909652938890209551865491519551909416650100000000000265010000000000600160a81b0319959092166101000264ffffffff00199415159190971617929092169490941791909116178155915190917f4deb6fa84b5232023ce753128000047116f9a6795b40a3b701edf5d8e265ca3491611d3b9190613189565b60405180910390a25b6000908152600960205260409020600201546001600160a01b0316979650505050505050565b6001600160a01b038116611d905760405162461bcd60e51b815260040161059490613079565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600080600183039050600060048281548110611dce57fe5b60009182526020909120015460405163cc49ede760e01b81526001600160a01b039091169063cc49ede790611e07908890600401612ef0565b60206040518083038186803b158015611e1f57600080fd5b505afa158015611e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e57919081019061253e565b90506001600160a01b038116156120075780856001826001600160a01b03166313d033c06040518163ffffffff1660e01b815260040160206040518083038186803b158015611ea557600080fd5b505afa158015611eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611edd919081019061282f565b836001600160a01b0316630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1657600080fd5b505afa158015611f2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f4e919081019061282f565b88604051602001611f63959493929190612e8c565b60408051601f19818403018152828252805160209182012060608401835260018085528285018a81526001600160a01b0388811687870181815260008681526009885288812099518a5593518986015551600290980180546001600160a01b031916988316989098179097558c168152600a84528481208054808401825590825284822001839055948552600b90925291909220805460ff19169092179091559350505b60006004838154811061201657fe5b60009182526020909120015460405163c810a3e360e01b81526001600160a01b039091169063c810a3e39061204f908990600401612ef0565b60206040518083038186803b15801561206757600080fd5b505afa15801561207b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061209f919081019061253e565b90506001600160a01b038116156122525780866000826001600160a01b03166313d033c06040518163ffffffff1660e01b815260040160206040518083038186803b1580156120ed57600080fd5b505afa158015612101573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612125919081019061282f565b836001600160a01b0316630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b15801561215e57600080fd5b505afa158015612172573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612196919081019061282f565b896040516020016121ab959493929190612e8c565b60408051601f19818403018152828252805160209182012060608401835260008085528285018b81526001600160a01b03888116878701818152858552600987528785209851895592516001808a01919091559251600290980180546001600160a01b031916988316989098179097558d168252600a84528482208054808301825590835284832001839055948152600b909252919020805460ff19169092179091559450505b505050505050565b6001600160a01b0381166122805760405162461bcd60e51b815260040161059490613069565b600080546040516001600160a01b03808516936201000090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b604080516060810182526000808252602082018190529181019190915290565b6040518060600160405280600081526020016000815260200160006001600160a01b031681525090565b80356117ee816132d7565b80516117ee816132d7565b60008083601f84011261235b57600080fd5b50813567ffffffffffffffff81111561237357600080fd5b60208301915083602082028301111561238b57600080fd5b9250929050565b600082601f8301126123a357600080fd5b81356123b66123b182613202565b6131db565b915081818352602084019350602081019050838560208402820111156123db57600080fd5b60005b8381101561240757816123f18882612333565b84525060209283019291909101906001016123de565b5050505092915050565b600082601f83011261242257600080fd5b81356124306123b182613202565b9150818183526020840193506020810190508385606084028201111561245557600080fd5b60005b83811015612407578161246b8882612499565b84525060209092019160609190910190600101612458565b80356117ee816132eb565b80516117ee816132eb565b6000606082840312156124ab57600080fd5b6124b560606131db565b905060006124c38484612483565b82525060206124d484848301612515565b60208301525060406124e8848285016124f4565b60408301525092915050565b80356117ee816132f4565b80356117ee816132fd565b80516117ee816132fd565b80356117ee81613306565b60006020828403121561253257600080fd5b600061054e8484612333565b60006020828403121561255057600080fd5b600061054e848461233e565b60008060008060008060008060e0898b03121561257857600080fd5b60006125848b8b612333565b98505060206125958b828c01612333565b97505060406125a68b828c01612333565b96505060606125b78b828c01612333565b95505060806125c88b828c01612333565b94505060a06125d98b828c01612333565b93505060c089013567ffffffffffffffff8111156125f657600080fd5b6126028b828c01612349565b92509250509295985092959890939650565b6000806040838503121561262757600080fd5b60006126338585612333565b9250506020612644858286016124ff565b9150509250929050565b6000806000806080858703121561266457600080fd5b60006126708787612333565b9450506020612681878288016124ff565b9350506040612692878288016124ff565b92505060606126a3878288016124ff565b91505092959194509250565b600080600080600060a086880312156126c757600080fd5b60006126d38888612333565b95505060206126e4888289016124ff565b94505060406126f5888289016124ff565b9350506060612706888289016124ff565b9250506080612717888289016124ff565b9150509295509295909350565b6000806000806040858703121561273a57600080fd5b843567ffffffffffffffff81111561275157600080fd5b61275d87828801612349565b9450945050602085013567ffffffffffffffff81111561277c57600080fd5b61278887828801612349565b95989497509550505050565b600080604083850312156127a757600080fd5b823567ffffffffffffffff8111156127be57600080fd5b6127ca85828601612392565b925050602083013567ffffffffffffffff8111156127e757600080fd5b61264485828601612411565b60006020828403121561280557600080fd5b600061054e848461248e565b60006020828403121561282357600080fd5b600061054e84846124ff565b60006020828403121561284157600080fd5b600061054e848461250a565b60006128598383612e29565b505060600190565b61286a81613256565b82525050565b61286a61287c82613256565b6132b9565b600061288c82613229565b612896818561322d565b93506128a183613223565b8060005b838110156128cf5781516128b9888261284d565b97506128c483613223565b9250506001016128a5565b509495945050505050565b61286a81613261565b61286a81613275565b60006128f960208361322d565b7f56657374696e67207265676973747279206164647265737320696e76616c6964815260200192915050565b6000612932600f8361322d565b6e0c2e4e4c2f2e640dad2e6dac2e8c6d608b1b815260200192915050565b600061295d601f8361322d565b7f746f6b656e206f776e65722063616e6e6f742062652030206164647265737300815260200192915050565b6000612996601b8361322d565b7f76657374696e672063616e6e6f74206265203020616464726573730000000000815260200192915050565b60006129cf60268361322d565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000612a17601e8361322d565b7f76657374696e67466163746f7279206164647265737320696e76616c69640000815260200192915050565b6000612a50600e8361322d565b6d185b5bdd5b9d081a5b9d985b1a5960921b815260200192915050565b6000612a7a60178361322d565b7f76657374696e67206164647265737320696e76616c6964000000000000000000815260200192915050565b6000612ab3600e8361322d565b6d76657374696e672065786973747360901b815260200192915050565b6000612add601c8361322d565b7f76657374696e674f776e6572206164647265737320696e76616c696400000000815260200192915050565b6000612b16602e8361322d565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015260400192915050565b6000612b66600c8361322d565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000612b8e60238361322d565b7f66656553686172696e67436f6c6c6563746f72206164647265737320696e76618152621b1a5960ea1b602082015260400192915050565b6000612bd3602c8361322d565b7f76657374696e67206372656174696f6e2074797065206d75737420626520677281526b06561746572207468616e20360a41b602082015260400192915050565b6000612c2160188361322d565b7f7265636569766572206164647265737320696e76616c69640000000000000000815260200192915050565b6000612c5a60158361322d565b7434b73b30b634b21030b236b4b71036b0b730b3b2b960591b815260200192915050565b6000612c8b60188361322d565b7f41646d696e206d616e61676572206973206e6f74207365740000000000000000815260200192915050565b6000612cc460108361322d565b6f0aadcdac2e8c6d0cac840d8cadccee8d60831b815260200192915050565b6000612cf060198361322d565b7f4c6f636b6564534f56206164647265737320696e76616c696400000000000000815260200192915050565b6000612d2960178361322d565b7f7374616b696e67206164647265737320696e76616c6964000000000000000000815260200192915050565b6000612d62600f8361322d565b6e1d1c985b9cd9995c8819985a5b1959608a1b815260200192915050565b6000612d8d60138361322d565b7214d3d5881859191c995cdcc81a5b9d985b1a59606a1b815260200192915050565b6000612dbc601683613236565b756b65792e61646d696e2e6d616e616765722e726f6c6560501b815260160192915050565b80546060830190612df181613280565b612dfb85826128da565b50612e0581613293565b612e126020860182612e83565b50612e1c816132a6565b61133a6040860182612e60565b80516060830190612e3a8482612e69565b506020820151612e4d6020850182612e69565b5060408201516105ab6040850182612861565b61286a81613241565b61286a81613272565b61286a612e7e82613272565b613272565b61286a8161324d565b6000612e988288612870565b601482019150612ea88287612e72565b602082019150612eb88286612e72565b602082019150612ec88285612e72565b602082019150612ed88284612e72565b5060200195945050505050565b60006117ee82612daf565b602081016117ee8284612861565b60e08101612f0c828a612861565b612f196020830189612861565b612f266040830188612861565b612f336060830187612e69565b612f406080830186612e69565b612f4d60a0830185612861565b612f5a60c0830184612861565b98975050505050505050565b60408101612f748285612861565b612f816020830184612e69565b9392505050565b60a08101612f968288612861565b612fa36020830187612e69565b612fb06040830186612e69565b612fbd6060830185612e69565b612fca6080830184612e69565b9695505050505050565b60208082528101612f818184612881565b602081016117ee82846128da565b6060810161300182866128da565b61300e6020830185612e83565b61054e6040830184612e60565b602081016117ee82846128e3565b602080825281016117ee816128ec565b602080825281016117ee81612925565b602080825281016117ee81612950565b602080825281016117ee81612989565b602080825281016117ee816129c2565b602080825281016117ee81612a0a565b602080825281016117ee81612a43565b602080825281016117ee81612a6d565b602080825281016117ee81612aa6565b602080825281016117ee81612ad0565b602080825281016117ee81612b09565b602080825281016117ee81612b59565b602080825281016117ee81612b81565b602080825281016117ee81612bc6565b602080825281016117ee81612c14565b602080825281016117ee81612c4d565b602080825281016117ee81612c7e565b602080825281016117ee81612cb7565b602080825281016117ee81612ce3565b602080825281016117ee81612d1c565b602080825281016117ee81612d55565b602080825281016117ee81612d80565b606081016117ee8284612de1565b602081016117ee8284612e69565b60408101612f748285612e69565b606081016131c18286612e69565b6131ce6020830185612e69565b61054e6040830184612861565b60405181810167ffffffffffffffff811182821017156131fa57600080fd5b604052919050565b600067ffffffffffffffff82111561321957600080fd5b5060209081020190565b60200190565b5190565b90815260200190565b919050565b60ff1690565b6001600160801b031690565b63ffffffff1690565b60006117ee82613266565b151590565b6001600160a01b031690565b90565b60006117ee82613256565b60006117ee61328e83613272565b61323b565b60006117ee6132a1836132d1565b61324d565b60006117ee6132b4836132cb565b613241565b60006117ee8260006117ee8260601b90565b60281c90565b60081c90565b6132e081613256565b811461073157600080fd5b6132e081613261565b6132e081613241565b6132e081613272565b6132e08161324d56fea365627a7a72315820dc2ada767f6100aeabb2dd76de36097a63988151b323d89b951fad1348d343756c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c80638dedf00911610130578063c36519d1116100b8578063efb957331161007c578063efb957331461049f578063f2f46b3b146104bf578063f2fde38b146104c7578063f421ed7e146104da578063f60826ee146104ed57610227565b8063c36519d114610433578063c680c0b714610446578063ca210d8c14610459578063cc49ede71461046c578063dfb9366d1461047f57610227565b8063b810c648116100ff578063b810c648146103df578063bc160758146103f2578063bc84f9ca14610405578063bd7b590814610418578063c0e098521461042057610227565b80638dedf009146103a65780638f32d59b146103c75780639af05157146103cf578063b29d2514146103d757610227565b80636b7dbb2d116101b357806380fcb9921161018257806380fcb99214610327578063821bee7314610349578063842a49d51461036b578063862e229d1461038b5780638da5cb5b1461039e57610227565b80636b7dbb2d146102e657806370480275146102ee578063786931da1461030157806379a83f5a1461031457610227565b80631f509326116101fa5780631f50932614610285578063377220fd14610298578063429b62e5146102ab57806342a82b4f146102cb5780634cf088d9146102de57610227565b806302df04761461022c5780630665a06f1461025557806308dcb3601461026a5780631785f53c14610272575b600080fd5b61023f61023a36600461264e565b6104f5565b60405161024c9190612ef0565b60405180910390f35b61026861026336600461264e565b610556565b005b61023f6105b1565b610268610280366004612520565b6105c0565b6102686102933660046126af565b610662565b6102686102a6366004612520565b610704565b6102be6102b9366004612520565b610734565b60405161024c9190612fe5565b6102686102d936600461255c565b610749565b61023f6109b8565b61023f6109c7565b6102686102fc366004612520565b6109d6565b61026861030f366004612724565b610a72565b610268610322366004612614565b610d61565b61033a610335366004612520565b610f0d565b60405161024c93929190612ff3565b61035c610357366004612811565b610f42565b60405161024c939291906131b3565b61037e610379366004612811565b610f6c565b60405161024c919061301b565b6102686103993660046126af565b610f93565b61023f611022565b6103b96103b4366004612520565b611037565b60405161024c9291906131a5565b6102be61112b565b610268611155565b61023f611212565b6102686103ed366004612724565b611231565b610268610400366004612520565b611341565b610268610413366004612794565b6113ea565b61023f61154a565b6102be61042e366004612520565b611559565b61023f61044136600461264e565b61156e565b610268610454366004612614565b611577565b6102be610467366004612520565b6116b7565b61023f61047a366004612520565b6116d5565b61049261048d366004612614565b6117f4565b60405161024c9190613197565b6104b26104ad366004612520565b611822565b60405161024c9190612fd4565b61037e61196c565b6102686104d5366004612520565b61197b565b6102be6104e8366004612520565b6119a8565b61037e6119f3565b60008060015b905060008682878787604051602001610518959493929190612e8c565b60408051601f198184030181529181528151602092830120600090815260099092529020600201546001600160a01b0316925050505b949350505050565b61055e61112b565b8061057857503360009081526001602052604090205460ff165b61059d5760405162461bcd60e51b8152600401610594906130d9565b60405180910390fd5b6105ab848484846003610662565b50505050565b6005546001600160a01b031681565b6105c861112b565b806105eb57506105d6611212565b6001600160a01b0316336001600160a01b0316145b6106075760405162461bcd60e51b8152600401610594906130d9565b6001600160a01b03811660009081526001602052604090819020805460ff19169055517fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f90610657908390612ef0565b60405180910390a150565b61066a61112b565b8061068457503360009081526001602052604090205460ff165b6106a05760405162461bcd60e51b8152600401610594906130d9565b60006106b186858560015b86611a02565b9050856001600160a01b03167fd6fcfd83804f6b6b63260c7b99eb10060bc1319dbc9177fb6defc7bd614017bf82868689876040516106f4959493929190612f88565b60405180910390a2505050505050565b61070c61112b565b6107285760405162461bcd60e51b8152600401610594906130d9565b61073181611d6a565b50565b60016020526000908152604090205460ff1681565b61075161112b565b61076d5760405162461bcd60e51b8152600401610594906130d9565b600054610100900460ff1680610786575060005460ff16155b6107a25760405162461bcd60e51b8152600401610594906130c9565b600054610100900460ff161580156107cd576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0388166107f35760405162461bcd60e51b815260040161059490613179565b6001600160a01b0387166108195760405162461bcd60e51b815260040161059490613159565b6001600160a01b03861661083f5760405162461bcd60e51b8152600401610594906130e9565b6001600160a01b0385166108655760405162461bcd60e51b8152600401610594906130b9565b6001600160a01b03841661088b5760405162461bcd60e51b815260040161059490613149565b61089489611d6a565b600580546001600160a01b03199081166001600160a01b038b8116919091179092556006805482168a84161790556007805482168984161790556008805482168884161790556003805490911691861691909117905560005b8281101561099a57600084848381811061090357fe5b90506020020160206109189190810190612520565b6001600160a01b0316141561093f5760405162461bcd60e51b815260040161059490613029565b600484848381811061094d57fe5b90506020020160206109629190810190612520565b815460018082018455600093845260209093200180546001600160a01b0319166001600160a01b0392909216919091179055016108ed565b5080156109ad576000805461ff00191690555b505050505050505050565b6006546001600160a01b031681565b6007546001600160a01b031681565b6109de61112b565b80610a0157506109ec611212565b6001600160a01b0316336001600160a01b0316145b610a1d5760405162461bcd60e51b8152600401610594906130d9565b6001600160a01b038116600090815260016020819052604091829020805460ff19169091179055517f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33990610657908390612ef0565b610a7a61112b565b80610a9457503360009081526001602052604090205460ff165b610ab05760405162461bcd60e51b8152600401610594906130d9565b828114610acf5760405162461bcd60e51b815260040161059490613039565b60046224ea0063059fa60060005b86811015610d5757600b6000878784818110610af557fe5b9050602002016020610b0a9190810190612520565b6001600160a01b0316815260208101919091526040016000205460ff1615610b445760405162461bcd60e51b8152600401610594906130a9565b6000888883818110610b5257fe5b9050602002016020610b679190810190612520565b6001600160a01b03161415610b8e5760405162461bcd60e51b815260040161059490613049565b6000868683818110610b9c57fe5b9050602002016020610bb19190810190612520565b6001600160a01b03161415610bd85760405162461bcd60e51b815260040161059490613059565b6000888883818110610be657fe5b9050602002016020610bfb9190810190612520565b6001858588604051602001610c14959493929190612e8c565b60408051808303601f1901815282825280516020918201206060840183526001845290830188905292508101888885818110610c4c57fe5b9050602002016020610c619190810190612520565b6001600160a01b039081169091526000838152600960209081526040808320855181559185015160018301559390930151600290930180546001600160a01b03191693909216929092179055600a908a8a85818110610cbc57fe5b9050602002016020610cd19190810190612520565b6001600160a01b031681526020808201929092526040016000908120805460018181018355918352928220909201839055600b90898986818110610d1157fe5b9050602002016020610d269190810190612520565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905550600101610add565b5050505050505050565b610d6961112b565b80610d8357503360009081526001602052604090205460ff165b610d9f5760405162461bcd60e51b8152600401610594906130d9565b6001600160a01b038216610dc55760405162461bcd60e51b815260040161059490613099565b60008111610de55760405162461bcd60e51b815260040161059490613089565b60055460405163095ea7b360e01b81526001600160a01b039091169063095ea7b390610e179085908590600401612f66565b602060405180830381600087803b158015610e3157600080fd5b505af1158015610e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e6991908101906127f3565b50604051637547c7a360e01b81526001600160a01b03831690637547c7a390610e96908490600401613197565b600060405180830381600087803b158015610eb057600080fd5b505af1158015610ec4573d6000803e3d6000fd5b50505050816001600160a01b03167fb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef82604051610f019190613197565b60405180910390a25050565b600c6020526000908152604090205460ff811690610100810463ffffffff16906501000000000090046001600160801b031683565b6009602052600090815260409020805460018201546002909201549091906001600160a01b031683565b60048181548110610f7957fe5b6000918252602090912001546001600160a01b0316905081565b610f9b61112b565b80610fb557503360009081526001602052604090205460ff165b610fd15760405162461bcd60e51b8152600401610594906130d9565b6000610fdf868585846106ab565b9050856001600160a01b03167f3791c6c90c276d011b4b885c0bfba0554342acf50a539baca1b06f070af25ff482868689876040516106f4959493929190612f88565b6000546201000090046001600160a01b031690565b6000806000839050806001600160a01b03166313d033c06040518163ffffffff1660e01b815260040160206040518083038186803b15801561107857600080fd5b505afa15801561108c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110b0919081019061282f565b816001600160a01b0316630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e957600080fd5b505afa1580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611121919081019061282f565b9250925050915091565b600080546201000090046001600160a01b0316611146611db2565b6001600160a01b031614905090565b61115d61112b565b6111795760405162461bcd60e51b8152600401610594906130d9565b6000611183611212565b6001600160a01b031614156111aa5760405162461bcd60e51b815260040161059490613129565b6111b2611212565b6001600160a01b0316336001600160a01b03167f560ce9bc23860aa4ec0898e6c59b295d3461332304d14f1ac216282407da435f60405160405180910390a3604051600090819061120290612ee5565b6040519081900390209190915550565b60008060405161122190612ee5565b6040519081900390205492915050565b61123961112b565b8061125357503360009081526001602052604090205460ff165b61126f5760405162461bcd60e51b8152600401610594906130d9565b60005b8381101561133a57600085858381811061128857fe5b905060200201602061129d9190810190612520565b6001600160a01b031614156112c45760405162461bcd60e51b815260040161059490613049565b60008383838181106112d257fe5b90506020020135116112f65760405162461bcd60e51b8152600401610594906130f9565b61133285858381811061130557fe5b905060200201602061131a9190810190612520565b84848481811061132657fe5b90506020020135611db6565b600101611272565b5050505050565b61134961112b565b6113655760405162461bcd60e51b8152600401610594906130d9565b6001600160a01b03811661138b5760405162461bcd60e51b815260040161059490613119565b806001600160a01b031661139d611212565b6001600160a01b0316336001600160a01b03167f6bf6a88b1bb767c00d69f519bfabc075817f28425abfc80cfb779ef4e9b0bbe560405160405180910390a4600060405161120290612ee5565b6113f261112b565b8061140c57503360009081526001602052604090205460ff165b6114285760405162461bcd60e51b8152600401610594906130d9565b80518251146114495760405162461bcd60e51b815260040161059490613139565b60005b81518110156115455761145d6122e9565b82828151811061146957fe5b60200260200101519050600084838151811061148157fe5b6020908102919091018101516001600160a01b0381166000818152600c845260409081902086518154958801518884015160ff199097169115159190911764ffffffff00191661010063ffffffff909216919091021765010000000000600160a81b031916650100000000006001600160801b039096169590950294909417845551919350917f4deb6fa84b5232023ce753128000047116f9a6795b40a3b701edf5d8e265ca34916115339190613189565b60405180910390a2505060010161144c565b505050565b6008546001600160a01b031681565b600b6020526000908152604090205460ff1681565b600080806104fb565b61157f61112b565b61159b5760405162461bcd60e51b8152600401610594906130d9565b6001600160a01b0382166115c15760405162461bcd60e51b815260040161059490613109565b806115de5760405162461bcd60e51b815260040161059490613089565b60055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906116109085908590600401612f66565b602060405180830381600087803b15801561162a57600080fd5b505af115801561163e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061166291908101906127f3565b61167e5760405162461bcd60e51b815260040161059490613169565b816001600160a01b03167fe1b0ada289bf82fb641c8c1e1c78f820fae44e8f845760725cdeb09167a289ad82604051610f019190613197565b6001600160a01b03166000908152600b602052604090205460ff1690565b60006117ee82600360009054906101000a90046001600160a01b03166001600160a01b03166313d033c06040518163ffffffff1660e01b815260040160206040518083038186803b15801561172957600080fd5b505afa15801561173d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611761919081019061282f565b600360009054906101000a90046001600160a01b03166001600160a01b0316630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b1580156117af57600080fd5b505afa1580156117c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117e7919081019061282f565b60036104f5565b92915050565b600a602052816000526040600020818154811061180d57fe5b90600052602060002001600091509150505481565b606080600a6000846001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561189457602002820191906000526020600020905b815481526020019060010190808311611880575b50505050509050600081519050606082516040519080825280602002602001820160405280156118de57816020015b6118cb612309565b8152602001906001900390816118c35790505b50905060005b8281101561196357600960008583815181106118fc57fe5b6020908102919091018101518252818101929092526040908101600020815160608101835281548152600182015493810193909352600201546001600160a01b031690820152825183908390811061195057fe5b60209081029190910101526001016118e4565b50949350505050565b6003546001600160a01b031681565b61198361112b565b61199f5760405162461bcd60e51b8152600401610594906130d9565b6107318161225a565b6001600160a01b0381166000908152600c602052604081205460ff1680156117ee5750506001600160a01b03166000908152600c6020526040902054610100900463ffffffff161590565b6002546001600160a01b031681565b60008060008785888887604051602001611a20959493929190612e8c565b60408051601f198184030181529181528151602092830120600081815260099093529120600201549091506001600160a01b0316611d44578460011415611b0457600254600554600654600754604051637d2fbb8f60e11b81526001600160a01b039485169463fa5f771e94611aab9490821693908216928f928f928f929116908490600401612efe565b602060405180830381600087803b158015611ac557600080fd5b505af1158015611ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611afd919081019061253e565b9150611bfa565b600260009054906101000a90046001600160a01b03166001600160a01b031663546344f0600560009054906101000a90046001600160a01b0316600660009054906101000a90046001600160a01b03168b8b8b600760009054906101000a90046001600160a01b0316600860009054906101000a90046001600160a01b03166040518863ffffffff1660e01b8152600401611ba59796959493929190612efe565b602060405180830381600087803b158015611bbf57600080fd5b505af1158015611bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bf7919081019061253e565b91505b604080516060808201835287825260208083018881526001600160a01b038088168587018181526000898152600986528881209751885593516001808901919091559051600290970180549784166001600160a01b031990981697909717909655908e168252600a83528582208054808701825590835283832001879055808252600b8352858220805460ff1990811687179091558651948501875294845263ffffffff808c168585019081526001600160801b03808d16878a01908152848652600c909652938890209551865491519551909416650100000000000265010000000000600160a81b0319959092166101000264ffffffff00199415159190971617929092169490941791909116178155915190917f4deb6fa84b5232023ce753128000047116f9a6795b40a3b701edf5d8e265ca3491611d3b9190613189565b60405180910390a25b6000908152600960205260409020600201546001600160a01b0316979650505050505050565b6001600160a01b038116611d905760405162461bcd60e51b815260040161059490613079565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600080600183039050600060048281548110611dce57fe5b60009182526020909120015460405163cc49ede760e01b81526001600160a01b039091169063cc49ede790611e07908890600401612ef0565b60206040518083038186803b158015611e1f57600080fd5b505afa158015611e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e57919081019061253e565b90506001600160a01b038116156120075780856001826001600160a01b03166313d033c06040518163ffffffff1660e01b815260040160206040518083038186803b158015611ea557600080fd5b505afa158015611eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611edd919081019061282f565b836001600160a01b0316630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1657600080fd5b505afa158015611f2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f4e919081019061282f565b88604051602001611f63959493929190612e8c565b60408051601f19818403018152828252805160209182012060608401835260018085528285018a81526001600160a01b0388811687870181815260008681526009885288812099518a5593518986015551600290980180546001600160a01b031916988316989098179097558c168152600a84528481208054808401825590825284822001839055948552600b90925291909220805460ff19169092179091559350505b60006004838154811061201657fe5b60009182526020909120015460405163c810a3e360e01b81526001600160a01b039091169063c810a3e39061204f908990600401612ef0565b60206040518083038186803b15801561206757600080fd5b505afa15801561207b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061209f919081019061253e565b90506001600160a01b038116156122525780866000826001600160a01b03166313d033c06040518163ffffffff1660e01b815260040160206040518083038186803b1580156120ed57600080fd5b505afa158015612101573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612125919081019061282f565b836001600160a01b0316630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b15801561215e57600080fd5b505afa158015612172573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612196919081019061282f565b896040516020016121ab959493929190612e8c565b60408051601f19818403018152828252805160209182012060608401835260008085528285018b81526001600160a01b03888116878701818152858552600987528785209851895592516001808a01919091559251600290980180546001600160a01b031916988316989098179097558d168252600a84528482208054808301825590835284832001839055948152600b909252919020805460ff19169092179091559450505b505050505050565b6001600160a01b0381166122805760405162461bcd60e51b815260040161059490613069565b600080546040516001600160a01b03808516936201000090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b604080516060810182526000808252602082018190529181019190915290565b6040518060600160405280600081526020016000815260200160006001600160a01b031681525090565b80356117ee816132d7565b80516117ee816132d7565b60008083601f84011261235b57600080fd5b50813567ffffffffffffffff81111561237357600080fd5b60208301915083602082028301111561238b57600080fd5b9250929050565b600082601f8301126123a357600080fd5b81356123b66123b182613202565b6131db565b915081818352602084019350602081019050838560208402820111156123db57600080fd5b60005b8381101561240757816123f18882612333565b84525060209283019291909101906001016123de565b5050505092915050565b600082601f83011261242257600080fd5b81356124306123b182613202565b9150818183526020840193506020810190508385606084028201111561245557600080fd5b60005b83811015612407578161246b8882612499565b84525060209092019160609190910190600101612458565b80356117ee816132eb565b80516117ee816132eb565b6000606082840312156124ab57600080fd5b6124b560606131db565b905060006124c38484612483565b82525060206124d484848301612515565b60208301525060406124e8848285016124f4565b60408301525092915050565b80356117ee816132f4565b80356117ee816132fd565b80516117ee816132fd565b80356117ee81613306565b60006020828403121561253257600080fd5b600061054e8484612333565b60006020828403121561255057600080fd5b600061054e848461233e565b60008060008060008060008060e0898b03121561257857600080fd5b60006125848b8b612333565b98505060206125958b828c01612333565b97505060406125a68b828c01612333565b96505060606125b78b828c01612333565b95505060806125c88b828c01612333565b94505060a06125d98b828c01612333565b93505060c089013567ffffffffffffffff8111156125f657600080fd5b6126028b828c01612349565b92509250509295985092959890939650565b6000806040838503121561262757600080fd5b60006126338585612333565b9250506020612644858286016124ff565b9150509250929050565b6000806000806080858703121561266457600080fd5b60006126708787612333565b9450506020612681878288016124ff565b9350506040612692878288016124ff565b92505060606126a3878288016124ff565b91505092959194509250565b600080600080600060a086880312156126c757600080fd5b60006126d38888612333565b95505060206126e4888289016124ff565b94505060406126f5888289016124ff565b9350506060612706888289016124ff565b9250506080612717888289016124ff565b9150509295509295909350565b6000806000806040858703121561273a57600080fd5b843567ffffffffffffffff81111561275157600080fd5b61275d87828801612349565b9450945050602085013567ffffffffffffffff81111561277c57600080fd5b61278887828801612349565b95989497509550505050565b600080604083850312156127a757600080fd5b823567ffffffffffffffff8111156127be57600080fd5b6127ca85828601612392565b925050602083013567ffffffffffffffff8111156127e757600080fd5b61264485828601612411565b60006020828403121561280557600080fd5b600061054e848461248e565b60006020828403121561282357600080fd5b600061054e84846124ff565b60006020828403121561284157600080fd5b600061054e848461250a565b60006128598383612e29565b505060600190565b61286a81613256565b82525050565b61286a61287c82613256565b6132b9565b600061288c82613229565b612896818561322d565b93506128a183613223565b8060005b838110156128cf5781516128b9888261284d565b97506128c483613223565b9250506001016128a5565b509495945050505050565b61286a81613261565b61286a81613275565b60006128f960208361322d565b7f56657374696e67207265676973747279206164647265737320696e76616c6964815260200192915050565b6000612932600f8361322d565b6e0c2e4e4c2f2e640dad2e6dac2e8c6d608b1b815260200192915050565b600061295d601f8361322d565b7f746f6b656e206f776e65722063616e6e6f742062652030206164647265737300815260200192915050565b6000612996601b8361322d565b7f76657374696e672063616e6e6f74206265203020616464726573730000000000815260200192915050565b60006129cf60268361322d565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000612a17601e8361322d565b7f76657374696e67466163746f7279206164647265737320696e76616c69640000815260200192915050565b6000612a50600e8361322d565b6d185b5bdd5b9d081a5b9d985b1a5960921b815260200192915050565b6000612a7a60178361322d565b7f76657374696e67206164647265737320696e76616c6964000000000000000000815260200192915050565b6000612ab3600e8361322d565b6d76657374696e672065786973747360901b815260200192915050565b6000612add601c8361322d565b7f76657374696e674f776e6572206164647265737320696e76616c696400000000815260200192915050565b6000612b16602e8361322d565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015260400192915050565b6000612b66600c8361322d565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000612b8e60238361322d565b7f66656553686172696e67436f6c6c6563746f72206164647265737320696e76618152621b1a5960ea1b602082015260400192915050565b6000612bd3602c8361322d565b7f76657374696e67206372656174696f6e2074797065206d75737420626520677281526b06561746572207468616e20360a41b602082015260400192915050565b6000612c2160188361322d565b7f7265636569766572206164647265737320696e76616c69640000000000000000815260200192915050565b6000612c5a60158361322d565b7434b73b30b634b21030b236b4b71036b0b730b3b2b960591b815260200192915050565b6000612c8b60188361322d565b7f41646d696e206d616e61676572206973206e6f74207365740000000000000000815260200192915050565b6000612cc460108361322d565b6f0aadcdac2e8c6d0cac840d8cadccee8d60831b815260200192915050565b6000612cf060198361322d565b7f4c6f636b6564534f56206164647265737320696e76616c696400000000000000815260200192915050565b6000612d2960178361322d565b7f7374616b696e67206164647265737320696e76616c6964000000000000000000815260200192915050565b6000612d62600f8361322d565b6e1d1c985b9cd9995c8819985a5b1959608a1b815260200192915050565b6000612d8d60138361322d565b7214d3d5881859191c995cdcc81a5b9d985b1a59606a1b815260200192915050565b6000612dbc601683613236565b756b65792e61646d696e2e6d616e616765722e726f6c6560501b815260160192915050565b80546060830190612df181613280565b612dfb85826128da565b50612e0581613293565b612e126020860182612e83565b50612e1c816132a6565b61133a6040860182612e60565b80516060830190612e3a8482612e69565b506020820151612e4d6020850182612e69565b5060408201516105ab6040850182612861565b61286a81613241565b61286a81613272565b61286a612e7e82613272565b613272565b61286a8161324d565b6000612e988288612870565b601482019150612ea88287612e72565b602082019150612eb88286612e72565b602082019150612ec88285612e72565b602082019150612ed88284612e72565b5060200195945050505050565b60006117ee82612daf565b602081016117ee8284612861565b60e08101612f0c828a612861565b612f196020830189612861565b612f266040830188612861565b612f336060830187612e69565b612f406080830186612e69565b612f4d60a0830185612861565b612f5a60c0830184612861565b98975050505050505050565b60408101612f748285612861565b612f816020830184612e69565b9392505050565b60a08101612f968288612861565b612fa36020830187612e69565b612fb06040830186612e69565b612fbd6060830185612e69565b612fca6080830184612e69565b9695505050505050565b60208082528101612f818184612881565b602081016117ee82846128da565b6060810161300182866128da565b61300e6020830185612e83565b61054e6040830184612e60565b602081016117ee82846128e3565b602080825281016117ee816128ec565b602080825281016117ee81612925565b602080825281016117ee81612950565b602080825281016117ee81612989565b602080825281016117ee816129c2565b602080825281016117ee81612a0a565b602080825281016117ee81612a43565b602080825281016117ee81612a6d565b602080825281016117ee81612aa6565b602080825281016117ee81612ad0565b602080825281016117ee81612b09565b602080825281016117ee81612b59565b602080825281016117ee81612b81565b602080825281016117ee81612bc6565b602080825281016117ee81612c14565b602080825281016117ee81612c4d565b602080825281016117ee81612c7e565b602080825281016117ee81612cb7565b602080825281016117ee81612ce3565b602080825281016117ee81612d1c565b602080825281016117ee81612d55565b602080825281016117ee81612d80565b606081016117ee8284612de1565b602081016117ee8284612e69565b60408101612f748285612e69565b606081016131c18286612e69565b6131ce6020830185612e69565b61054e6040830184612861565b60405181810167ffffffffffffffff811182821017156131fa57600080fd5b604052919050565b600067ffffffffffffffff82111561321957600080fd5b5060209081020190565b60200190565b5190565b90815260200190565b919050565b60ff1690565b6001600160801b031690565b63ffffffff1690565b60006117ee82613266565b151590565b6001600160a01b031690565b90565b60006117ee82613256565b60006117ee61328e83613272565b61323b565b60006117ee6132a1836132d1565b61324d565b60006117ee6132b4836132cb565b613241565b60006117ee8260006117ee8260601b90565b60281c90565b60081c90565b6132e081613256565b811461073157600080fd5b6132e081613261565b6132e081613241565b6132e081613272565b6132e08161324d56fea365627a7a72315820dc2ada767f6100aeabb2dd76de36097a63988151b323d89b951fad1348d343756c6578706572696d656e74616cf564736f6c63430005110040",
  "devdoc": {
    "methods": {
      "addAdmin(address)": {
        "params": {
          "_admin": "The addresses of the account to grant permissions."
        }
      },
      "addDeployedVestings(address[],uint256[])": {
        "details": "migration of data from previous vesting registy contracts"
      },
      "addFourYearVestings(address[],address[])": {
        "params": {
          "_tokenOwners": "array of token owners",
          "_vestingAddresses": "array of vesting addresses"
        }
      },
      "createTeamVesting(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "_amount": "the amount to be staked",
          "_cliff": "the cliff in seconds",
          "_duration": "the total duration in seconds",
          "_tokenOwner": "the owner of the tokens",
          "_vestingCreationType": "the type of vesting created(e.g. Origin, Bug Bounty etc.)"
        }
      },
      "createVesting(address,uint256,uint256,uint256)": {
        "details": "Calls a public createVestingAddr function with vestingCreationType. This is to accomodate the existing logic for LockedSOVvestingCreationType 0 = LockedSOV",
        "params": {
          "_amount": "the amount to be staked",
          "_cliff": "the cliff in seconds",
          "_duration": "the total duration in seconds",
          "_tokenOwner": "the owner of the tokens"
        }
      },
      "createVestingAddr(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "_amount": "the amount to be staked",
          "_cliff": "the cliff in seconds",
          "_duration": "the total duration in seconds",
          "_tokenOwner": "the owner of the tokens",
          "_vestingCreationType": "the type of vesting created(e.g. Origin, Bug Bounty etc.)"
        }
      },
      "getAdminManager()": {
        "return": "Address of admin manager."
      },
      "getVesting(address)": {
        "details": "Calls a public getVestingAddr function with cliff and duration. This is to accomodate the existing logic for LockedSOVWe need to use LockedSOV.changeRegistryCliffAndDuration function very judiciouslyvestingCreationType 0 - LockedSOV",
        "params": {
          "_tokenOwner": "the owner of the tokens"
        }
      },
      "getVestingAddr(address,uint256,uint256,uint256)": {
        "details": "Important: Please use this instead of getVesting function"
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "isTeamVesting(address)": {
        "details": "check if the specific vesting address is team vesting or notread the vestingType from vestingCreationAndTypes storage",
        "params": {
          "_vestingAddress": "address of vesting contract"
        },
        "return": "true for teamVesting, false for normal vesting"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerVestingToVestingCreationAndTypes(address[],(bool,uint32,uint128)[])": {
        "details": "setter function to register existing vesting contract to vestingCreationAndTypes storageneed to set the function visilibty to public to support VestingCreationAndTypeDetails struct as parameter",
        "params": {
          "_vestingAddresses": "array of vesting address",
          "_vestingCreationAndTypes": "array for VestingCreationAndTypeDetails struct"
        }
      },
      "removeAdmin(address)": {
        "params": {
          "_admin": "The addresses of the account to revoke permissions."
        }
      },
      "setAdminManager(address)": {
        "params": {
          "_newAdminManager": "The addresses of the account to grant permissions."
        }
      },
      "setVestingFactory(address)": {
        "params": {
          "_vestingFactory": "the address of vesting factory contract"
        }
      },
      "stakeTokens(address,uint256)": {
        "params": {
          "_amount": "the amount of tokens to stake",
          "_vesting": "the address of Vesting contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferSOV(address,uint256)": {
        "params": {
          "_amount": "the amount to be transferred",
          "_receiver": "the address of the SOV receiver"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "addAdmin(address)": {
        "notice": "Add account to ACL."
      },
      "addDeployedVestings(address[],uint256[])": {
        "notice": "adds vestings that were deployed in previous vesting registries"
      },
      "addFourYearVestings(address[],address[])": {
        "notice": "adds four year vestings to vesting registry logic"
      },
      "createTeamVesting(address,uint256,uint256,uint256,uint256)": {
        "notice": "creates Team Vesting contract"
      },
      "createVesting(address,uint256,uint256,uint256)": {
        "notice": "creates Vesting contract"
      },
      "createVestingAddr(address,uint256,uint256,uint256,uint256)": {
        "notice": "creates Vesting contract"
      },
      "getAdminManager()": {
        "notice": "Return address of the admin manager."
      },
      "getTeamVesting(address,uint256,uint256,uint256)": {
        "notice": "returns team vesting contract address for the given token owner, cliff, duration"
      },
      "getVesting(address)": {
        "notice": "returns vesting contract address for the given token owner"
      },
      "getVestingAddr(address,uint256,uint256,uint256)": {
        "notice": "public function that returns vesting contract address for the given token owner, cliff, duration"
      },
      "getVestingDetails(address)": {
        "notice": "returns cliff and duration for Vesting & TeamVesting contracts"
      },
      "getVestingsOf(address)": {
        "notice": "returns all vesting details for the given token owner"
      },
      "initialize(address,address,address,address,address,address,address[])": {
        "notice": "Replace constructor with initialize function for Upgradable Contracts This function will be called only once by the owner"
      },
      "isVestingAddress(address)": {
        "notice": "returns if the address is a vesting address"
      },
      "removeAdmin(address)": {
        "notice": "Remove account from ACL."
      },
      "removeAdminManager()": {
        "notice": "Set admin manager to 0 address."
      },
      "setAdminManager(address)": {
        "notice": "Set new admin manager."
      },
      "setVestingFactory(address)": {
        "notice": "sets vesting factory address"
      },
      "stakeTokens(address,uint256)": {
        "notice": "stakes tokens according to the vesting schedule"
      },
      "transferSOV(address,uint256)": {
        "notice": "transfers SOV tokens to given address"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54561,
        "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 54563,
        "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 54606,
        "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 62325,
        "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
        "label": "admins",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 31932,
        "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
        "label": "vestingFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IVestingFactory)26100"
      },
      {
        "astId": 31934,
        "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
        "label": "lockedSOV",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ILockedSOV)35121"
      },
      {
        "astId": 31937,
        "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
        "label": "vestingRegistries",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_contract(IVestingRegistry)26136)dyn_storage"
      },
      {
        "astId": 31939,
        "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
        "label": "SOV",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 31941,
        "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
        "label": "staking",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 31943,
        "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
        "label": "feeSharingCollector",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 31945,
        "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
        "label": "vestingOwner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 31959,
        "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
        "label": "vestings",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Vesting)31955_storage)"
      },
      {
        "astId": 31964,
        "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
        "label": "vestingsOf",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 31968,
        "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
        "label": "isVesting",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 31979,
        "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
        "label": "vestingCreationAndTypes",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(VestingCreationAndTypeDetails)31975_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IVestingRegistry)26136)dyn_storage": {
        "base": "t_contract(IVestingRegistry)26136",
        "encoding": "dynamic_array",
        "label": "contract IVestingRegistry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILockedSOV)35121": {
        "encoding": "inplace",
        "label": "contract ILockedSOV",
        "numberOfBytes": "20"
      },
      "t_contract(IVestingFactory)26100": {
        "encoding": "inplace",
        "label": "contract IVestingFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IVestingRegistry)26136": {
        "encoding": "inplace",
        "label": "contract IVestingRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(VestingCreationAndTypeDetails)31975_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VestingRegistryStorage.VestingCreationAndTypeDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingCreationAndTypeDetails)31975_storage"
      },
      "t_mapping(t_uint256,t_struct(Vesting)31955_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VestingRegistryStorage.Vesting)",
        "numberOfBytes": "32",
        "value": "t_struct(Vesting)31955_storage"
      },
      "t_struct(Vesting)31955_storage": {
        "encoding": "inplace",
        "label": "struct VestingRegistryStorage.Vesting",
        "members": [
          {
            "astId": 31950,
            "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
            "label": "vestingType",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 31952,
            "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
            "label": "vestingCreationType",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 31954,
            "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
            "label": "vestingAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(VestingCreationAndTypeDetails)31975_storage": {
        "encoding": "inplace",
        "label": "struct VestingRegistryStorage.VestingCreationAndTypeDetails",
        "members": [
          {
            "astId": 31970,
            "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
            "label": "isSet",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 31972,
            "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
            "label": "vestingType",
            "offset": 1,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 31974,
            "contract": "contracts/governance/Vesting/VestingRegistryLogic.sol:VestingRegistryLogic",
            "label": "vestingCreationType",
            "offset": 5,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}