{
  "address": "0x6645096dEC23E5168C352BA0cB0E6D4970040dde",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "AdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "AdminRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "ContractCodeHashAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "ContractCodeHashRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateStakeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        }
      ],
      "name": "ExtendedStakingDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxIterations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxIterations",
          "type": "uint256"
        }
      ],
      "name": "MaxVestingWithdrawIterationsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "added",
          "type": "bool"
        }
      ],
      "name": "PauserAddedOrRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "setFrozen",
          "type": "bool"
        }
      ],
      "name": "StakingFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "setPaused",
          "type": "bool"
        }
      ],
      "name": "StakingPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "until",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isGovernance",
          "type": "bool"
        }
      ],
      "name": "StakingWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "TeamVestingCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextStartFrom",
          "type": "uint256"
        }
      ],
      "name": "TeamVestingPartiallyCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        }
      ],
      "name": "TokensStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedTS",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "value",
          "type": "uint96"
        }
      ],
      "name": "VestingStakeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vesting",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "VestingTokensWithdrawn",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAX_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAX_VOTING_WEIGHT",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "SOVToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "WEIGHT_FACTOR",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "admins",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allUnlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vesting",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startFrom",
          "type": "uint256"
        }
      ],
      "name": "cancelTeamVesting",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "delegateStakingCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "stake",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeSharing",
      "outputs": [
        {
          "internalType": "contract IFeeSharingCollector",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "frozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getFunctionsList",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "",
          "type": "bytes4[]"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "until",
          "type": "uint256"
        }
      ],
      "name": "getWithdrawAmounts",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "until",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "governanceWithdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vesting",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "governanceWithdrawVesting",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kickoffTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "newStakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "numDelegateStakingCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "numTotalStakingCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "numUserStakingCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "numVestingCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxIterations",
          "type": "uint256"
        }
      ],
      "name": "setMaxVestingWithdrawIterations",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "totalStakingCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "stake",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "unlockAllTokens",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "userStakingCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "stake",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "vestingCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "stake",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "vestingCodeHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vestingRegistryLogic",
      "outputs": [
        {
          "internalType": "contract IVestingRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vestingWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "weightScaling",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "until",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x989bcc436aea14c5b3f6165a94031f270a8940f2d3e3e1eea3634c93cbb0fdbc",
  "receipt": {
    "to": null,
    "from": "0xCF311E7375083b9513566a47B9f3e93F1FcdCfBF",
    "contractAddress": "0x6645096dEC23E5168C352BA0cB0E6D4970040dde",
    "transactionIndex": 1,
    "gasUsed": "3007945",
    "logsBloom": "0x
    "blockHash": "0x71c6b4f2da6229967270a5227d0889e211ff9f7437ce802f92b5b8d99099dd86",
    "transactionHash": "0x989bcc436aea14c5b3f6165a94031f270a8940f2d3e3e1eea3634c93cbb0fdbc",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 312358,
        "transactionHash": "0x989bcc436aea14c5b3f6165a94031f270a8940f2d3e3e1eea3634c93cbb0fdbc",
        "address": "0x6645096dEC23E5168C352BA0cB0E6D4970040dde",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cf311e7375083b9513566a47b9f3e93f1fcdcfbf"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x71c6b4f2da6229967270a5227d0889e211ff9f7437ce802f92b5b8d99099dd86"
      }
    ],
    "blockNumber": 312358,
    "cumulativeGasUsed": "3058386",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2c93ebf59c8148f10476453f6cdb8bb8",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ContractCodeHashAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"ContractCodeHashRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateStakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"ExtendedStakingDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxIterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxIterations\",\"type\":\"uint256\"}],\"name\":\"MaxVestingWithdrawIterationsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"PauserAddedOrRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"setFrozen\",\"type\":\"bool\"}],\"name\":\"StakingFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"setPaused\",\"type\":\"bool\"}],\"name\":\"StakingPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isGovernance\",\"type\":\"bool\"}],\"name\":\"StakingWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"TeamVestingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextStartFrom\",\"type\":\"uint256\"}],\"name\":\"TeamVestingPartiallyCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedTS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"name\":\"VestingStakeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"VestingTokensWithdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VOTING_WEIGHT\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOVToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEIGHT_FACTOR\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startFrom\",\"type\":\"uint256\"}],\"name\":\"cancelTeamVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"delegateStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeSharing\",\"outputs\":[{\"internalType\":\"contract IFeeSharingCollector\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFunctionsList\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"\",\"type\":\"bytes4[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"}],\"name\":\"getWithdrawAmounts\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"governanceWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"governanceWithdrawVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kickoffTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newStakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numDelegateStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numTotalStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numUserStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numVestingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxIterations\",\"type\":\"uint256\"}],\"name\":\"setMaxVestingWithdrawIterations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"totalStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"userStakingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"vestingCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vestingCodeHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingRegistryLogic\",\"outputs\":[{\"internalType\":\"contract IVestingRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weightScaling\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"cancelTeamVesting(address,address,uint256)\":{\"params\":{\"receiver\":\"The receiving address.\",\"startFrom\":\"The start value for the iterations.\",\"vesting\":\"The vesting address.\"}},\"getWithdrawAmounts(uint96,uint256)\":{\"params\":{\"amount\":\"The number of tokens to withdraw.\",\"until\":\"The date until which the tokens were staked. Adjusted to the next valid lock date, if necessary.\"},\"return\":\"Amount to withraw and penalty amount\"},\"governanceWithdraw(uint96,uint256,address)\":{\"details\":\"Can be invoked only by whitelisted contract passed to governanceWithdrawVesting\",\"params\":{\"amount\":\"The number of tokens to withdraw.\",\"receiver\":\"The receiver of the tokens. If not specified, send to the msg.sender\",\"until\":\"The date until which the tokens were staked.\"}},\"governanceWithdrawVesting(address,address)\":{\"details\":\"This function is dedicated only to support backward compatibility for sovryn ecosystem that has been implementing this staking contract.Sovryn protocol will use the cancelTeamVesting function for the withdrawal moving forward. https://github.com/DistributedCollective/Sovryn-smart-contracts/blob/4bbfe5bd0311ca71e4ef0e3af810d3791d8e4061/contracts/governance/Staking/modules/StakingWithdrawModule.sol#L78\",\"params\":{\"receiver\":\"The receiver of the tokens. If not specified, send to the msg.sender\",\"vesting\":\"The address of Vesting contract.\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"setMaxVestingWithdrawIterations(uint256)\":{\"details\":\"set max withdraw iterations.\",\"params\":{\"newMaxIterations\":\"new max iterations value.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlockAllTokens()\":{\"details\":\"Last resort.\"},\"withdraw(uint96,uint256,address)\":{\"details\":\"If until is not a valid lock date, the next lock date after until is used.\",\"params\":{\"amount\":\"The number of tokens to withdraw.\",\"receiver\":\"The receiver of the tokens. If not specified, send to the msg.sender\",\"until\":\"The date until which the tokens were staked.\"}}},\"title\":\"Staking withdrawal functionality module*\"},\"userdoc\":{\"methods\":{\"cancelTeamVesting(address,address,uint256)\":{\"notice\":\"Governance withdraw vesting directly through staking contract. This direct withdraw vesting solves the out of gas issue when there are too many iterations when withdrawing. This function only allows cancelling vesting contract of the TeamVesting type.\"},\"getWithdrawAmounts(uint96,uint256)\":{\"notice\":\"Get available and punished amount for withdrawing.\"},\"governanceWithdraw(uint96,uint256,address)\":{\"notice\":\"Withdraw the given amount of tokens.\"},\"governanceWithdrawVesting(address,address)\":{\"notice\":\"Withdraw tokens for vesting contract.\"},\"unlockAllTokens()\":{\"notice\":\"Allow the owner to unlock all tokens in case the staking contract is going to be replaced Note: Not reversible on purpose. once unlocked, everything is unlocked. The owner should not be able to just quickly unlock to withdraw his own tokens and lock again.\"},\"withdraw(uint96,uint256,address)\":{\"notice\":\"Withdraw the given amount of tokens if they are unlocked.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Staking/modules/StakingWithdrawModule.sol\":\"StakingWithdrawModule\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/governance/IFeeSharingCollector.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for contract governance/FeeSharingCollector/FeeSharingCollector.sol\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * */\\ninterface IFeeSharingCollector {\\n    function withdrawFees(address[] calldata _token) external;\\n\\n    function transferTokens(address _token, uint96 _amount) external;\\n\\n    function withdraw(address _loanPoolToken, uint32 _maxCheckpoints, address _receiver) external;\\n}\\n\",\"keccak256\":\"0x5ba403de9fd9062070463e8c48eeee480eb16919cac3a15f3e27167c0474697f\"},\"contracts/governance/Staking/SafeMath96.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title SafeMath96 contract.\\n * @notice Improved Solidity's arithmetic operations with added overflow checks.\\n * @dev SafeMath96 uses uint96, unsigned integers of 96 bits length, so every\\n * integer from 0 to 2^96-1 can be operated.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * SafeMath restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this contract instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n * */\\ncontract SafeMath96 {\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe64(uint256 n, string memory errorMessage) internal pure returns (uint64) {\\n        require(n < 2 ** 64, errorMessage);\\n        return uint64(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2 ** 96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `+` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe addition a+b.\\n     * */\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Substracts two unsigned integers, reverting on underflow.\\n     * @dev Counterpart to Solidity's `-` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on underflow.\\n     * @return The safe substraction a-b.\\n     * */\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `*` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe product a*b.\\n     * */\\n    function mul96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint96 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Divides two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `/` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe division a/b.\\n     * */\\n    function div96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint96 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x0d61a134c1d12484602f39426a6927e9cd3e598cfe13e9ebad4f8fe5803def86\"},\"contracts/governance/Staking/modules/StakingWithdrawModule.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../proxy/modules/interfaces/IFunctionsList.sol\\\";\\n\\nimport \\\"./shared/CheckpointsShared.sol\\\";\\nimport \\\"../../../rsk/RSKAddrValidator.sol\\\";\\nimport \\\"../../Vesting/ITeamVesting.sol\\\";\\nimport \\\"../../Vesting/IVesting.sol\\\";\\nimport \\\"./shared/StakingShared.sol\\\";\\n\\n/**\\n * @title Staking withdrawal functionality module\\n **/\\ncontract StakingWithdrawModule is IFunctionsList, StakingShared, CheckpointsShared {\\n    using SafeMath for uint256;\\n\\n    event MaxVestingWithdrawIterationsUpdated(uint256 oldMaxIterations, uint256 newMaxIterations);\\n\\n    /// @dev Struct for direct withdraw function -- to avoid stack too deep issue\\n    struct VestingConfig {\\n        address vestingAddress;\\n        uint256 startDate;\\n        uint256 endDate;\\n        uint256 cliff;\\n        uint256 duration;\\n        address tokenOwner;\\n    }\\n\\n    /// @notice An event emitted when staked tokens get withdrawn.\\n    event StakingWithdrawn(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 until,\\n        address indexed receiver,\\n        bool isGovernance\\n    );\\n\\n    /// @notice An event emitted when vesting tokens get withdrawn.\\n    event VestingTokensWithdrawn(address vesting, address receiver);\\n\\n    /// @notice An event emitted when the owner unlocks all tokens.\\n    event TokensUnlocked(uint256 amount);\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens if they are unlocked.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev If until is not a valid lock date, the next lock date after until is used.\\n     * */\\n    function withdraw(uint96 amount, uint256 until, address receiver) external whenNotFrozen {\\n        // adjust until here to avoid adjusting multiple times, and to make sure an adjusted date is passed to\\n        // _notSameBlockAsStakingCheckpoint\\n        until = _adjustDateForOrigin(until);\\n\\n        _notSameBlockAsStakingCheckpoint(until, msg.sender);\\n\\n        _withdraw(amount, until, receiver, false);\\n        // @dev withdraws tokens for lock date 2 weeks later than given lock date if sender is a contract\\n        //\\t\\twe need to check block.timestamp here\\n        _withdrawNext(until, receiver, false);\\n    }\\n\\n    /**\\n     * @notice Governance withdraw vesting directly through staking contract.\\n     * This direct withdraw vesting solves the out of gas issue when there are too many iterations when withdrawing.\\n     * This function only allows cancelling vesting contract of the TeamVesting type.\\n     *\\n     * @param vesting The vesting address.\\n     * @param receiver The receiving address.\\n     * @param startFrom The start value for the iterations.\\n     */\\n    function cancelTeamVesting(\\n        address vesting,\\n        address receiver,\\n        uint256 startFrom\\n    ) external onlyAuthorized whenNotFrozen {\\n        /// require the caller only for team vesting contract.\\n        require(vestingRegistryLogic.isTeamVesting(vesting), \\\"Only team vesting allowed\\\");\\n\\n        _cancelTeamVesting(vesting, receiver, startFrom);\\n    }\\n\\n    /**\\n     * @notice Withdraws tokens from the staking contract and forwards them\\n     * to an address specified by the token owner. Low level function.\\n     * @dev Once here the caller permission is taken for granted.\\n     * @param _vesting The vesting address.\\n     * @param _receiver The receiving address.\\n     * @param _startFrom The start value for the iterations.\\n     * or just unlocked tokens (false).\\n     *\\n     * @return nextStartFrom is a timestamp to be used for next withdrawal.\\n     * @return notCompleted flag that indicates that the cancel team vesting is not completely done.\\n     * */\\n    function _cancelTeamVesting(\\n        address _vesting,\\n        address _receiver,\\n        uint256 _startFrom\\n    ) private returns (uint256 nextStartFrom, bool notCompleted) {\\n        require(_receiver != address(0), \\\"receiver address invalid\\\");\\n\\n        ITeamVesting teamVesting = ITeamVesting(_vesting);\\n\\n        VestingConfig memory vestingConfig = VestingConfig(\\n            _vesting,\\n            teamVesting.startDate(),\\n            teamVesting.endDate(),\\n            teamVesting.cliff(),\\n            teamVesting.duration(),\\n            teamVesting.tokenOwner()\\n        );\\n\\n        /// @dev In the unlikely case that all tokens have been unlocked early,\\n        /// allow to withdraw all of them, as long as the itrations less than maxVestingWithdrawIterations.\\n        uint256 end = vestingConfig.endDate;\\n\\n        uint256 defaultStart = vestingConfig.startDate + vestingConfig.cliff;\\n\\n        _startFrom = _startFrom >= defaultStart ? _startFrom : defaultStart;\\n\\n        /// @dev max iterations need to be decreased by 1, otherwise the iteration will always be surplus by 1\\n        uint256 totalIterationValue = (_startFrom +\\n            (TWO_WEEKS * (maxVestingWithdrawIterations - 1)));\\n        uint256 adjustedEnd = end < totalIterationValue ? end : totalIterationValue;\\n\\n        /// @dev Withdraw for each unlocked position.\\n        for (uint256 i = _startFrom; i <= adjustedEnd; i += TWO_WEEKS) {\\n            /// @dev Read amount to withdraw.\\n            uint96 tempStake = _getPriorUserStakeByDate(_vesting, i, block.number - 1);\\n\\n            if (tempStake > 0) {\\n                /// @dev do governance direct withdraw for team vesting\\n                _withdrawFromTeamVesting(tempStake, i, _receiver, vestingConfig);\\n            }\\n        }\\n\\n        if (adjustedEnd < end) {\\n            nextStartFrom = adjustedEnd + TWO_WEEKS;\\n            emit TeamVestingPartiallyCancelled(msg.sender, _receiver, nextStartFrom);\\n            return (nextStartFrom, true);\\n        } else {\\n            emit TeamVestingCancelled(msg.sender, _receiver);\\n            return (end, false);\\n        }\\n    }\\n\\n    /**\\n     * @notice Send user' staked tokens to a receiver taking into account punishments.\\n     * Sovryn encourages long-term commitment and thinking. When/if you unstake before\\n     * the end of the staking period, a percentage of the original staking amount will\\n     * be slashed. This amount is also added to the reward pool and is distributed\\n     * between all other stakers.\\n     *\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * Needs to be adjusted to the next valid lock date before calling this function.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @param isGovernance Whether all tokens (true)\\n     * or just unlocked tokens (false).\\n     * */\\n    function _withdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver,\\n        bool isGovernance\\n    ) internal {\\n        // @dev it's very unlikely some one will have 1/10**18 SOV staked in Vesting contract\\n        //\\t\\tthis check is a part of workaround for Vesting.withdrawTokens issue\\n        if (amount == 1 && _isVestingContract(msg.sender)) {\\n            return;\\n        }\\n        _validateWithdrawParams(msg.sender, amount, until);\\n\\n        /// @dev Determine the receiver.\\n        if (receiver == address(0)) receiver = msg.sender;\\n\\n        /// @dev Update the checkpoints.\\n        _decreaseDailyStake(until, amount);\\n        _decreaseUserStake(msg.sender, until, amount);\\n        if (_isVestingContract(msg.sender)) _decreaseVestingStake(until, amount);\\n        _decreaseDelegateStake(delegates[msg.sender][until], until, amount);\\n\\n        /// @dev Early unstaking should be punished.\\n        if (block.timestamp < until && !allUnlocked && !isGovernance) {\\n            uint96 punishedAmount = _getPunishedAmount(amount, until);\\n            amount -= punishedAmount;\\n\\n            /// @dev punishedAmount can be 0 if block.timestamp are very close to 'until'\\n            if (punishedAmount > 0) {\\n                require(address(feeSharing) != address(0), \\\"FeeSharing address wasn't set\\\"); // S08\\n                /// @dev Move punished amount to fee sharing.\\n                /// @dev Approve transfer here and let feeSharing do transfer and write checkpoint.\\n                SOVToken.approve(address(feeSharing), punishedAmount);\\n                feeSharing.transferTokens(address(SOVToken), punishedAmount);\\n            }\\n        }\\n\\n        /// @dev transferFrom\\n        bool success = SOVToken.transfer(receiver, amount);\\n        require(success, \\\"Token transfer failed\\\"); // S09\\n\\n        emit StakingWithdrawn(msg.sender, amount, until, receiver, isGovernance);\\n    }\\n\\n    /**\\n     * @notice Send user' staked tokens to a receiver.\\n     * This function is dedicated only for direct withdrawal from staking contract.\\n     * Currently only being used by cancelTeamVesting()\\n     *\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender.\\n     * @param vestingConfig The vesting config.\\n     * @dev VestingConfig struct intended to avoid stack too deep issue, and it contains this properties:\\n        address vestingAddress; // vesting contract address\\n        uint256 startDate; //start date of vesting\\n        uint256 endDate; // end date of vesting\\n        uint256 cliff; // after this time period the tokens begin to unlock\\n        uint256 duration; // after this period all the tokens will be unlocked\\n        address tokenOwner; // owner of the vested tokens\\n     * */\\n    function _withdrawFromTeamVesting(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver,\\n        VestingConfig memory vestingConfig\\n    ) internal {\\n        address vesting = vestingConfig.vestingAddress;\\n\\n        until = _timestampToLockDate(until);\\n        _validateWithdrawParams(vesting, amount, until);\\n\\n        /// @dev Update the checkpoints.\\n        _decreaseDailyStake(until, amount);\\n        _decreaseUserStake(vesting, until, amount);\\n\\n        _decreaseVestingStake(until, amount);\\n        _decreaseDelegateStake(delegates[vesting][until], until, amount);\\n\\n        /// @dev transferFrom\\n        bool success = SOVToken.transfer(receiver, amount);\\n        require(success, \\\"Token transfer failed\\\"); // S09\\n\\n        emit StakingWithdrawn(vesting, amount, until, receiver, true);\\n    }\\n\\n    // @dev withdraws tokens for lock date 2 weeks later than given lock date\\n    function _withdrawNext(uint256 until, address receiver, bool isGovernance) internal {\\n        if (_isVestingContract(msg.sender)) {\\n            // nextLock needs to be adjusted to the next valid lock date to make sure we don't accidentally\\n            // withdraw stakes that are in the future and would get slashed (if until is not\\n            // a valid lock date). but until is already handled in the withdraw function\\n            uint256 nextLock = until.add(TWO_WEEKS);\\n            if (isGovernance || block.timestamp >= nextLock) {\\n                uint96 stakes = _getPriorUserStakeByDate(msg.sender, nextLock, block.number - 1);\\n                if (stakes > 0) {\\n                    _withdraw(stakes, nextLock, receiver, isGovernance);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get available and punished amount for withdrawing.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked. Adjusted to the next valid lock date, if necessary.\\n     * @return Amount to withraw and penalty amount\\n     * */\\n    function getWithdrawAmounts(\\n        uint96 amount,\\n        uint256 until\\n    ) external view returns (uint96, uint96) {\\n        until = _adjustDateForOrigin(until);\\n        _validateWithdrawParams(msg.sender, amount, until);\\n        uint96 punishedAmount = _getPunishedAmount(amount, until);\\n        return (amount - punishedAmount, punishedAmount);\\n    }\\n\\n    /**\\n     * @notice Get punished amount for withdrawing.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * */\\n    function _getPunishedAmount(uint96 amount, uint256 until) internal view returns (uint96) {\\n        uint256 date = _timestampToLockDate(block.timestamp);\\n        uint96 weight = _computeWeightByDate(until, date); /// @dev (10 - 1) * WEIGHT_FACTOR\\n        weight = weight * weightScaling;\\n        return (amount * weight) / WEIGHT_FACTOR / 100;\\n    }\\n\\n    /**\\n     * @notice Validate withdraw parameters.\\n     * @param account Address to be validated.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * */\\n    function _validateWithdrawParams(address account, uint96 amount, uint256 until) internal view {\\n        require(amount > 0, \\\"Amount of tokens to withdraw must be > 0\\\"); // S10\\n        uint96 balance = _getPriorUserStakeByDate(account, until, block.number - 1);\\n        require(amount <= balance, \\\"Staking::withdraw: not enough balance\\\"); // S11\\n    }\\n\\n    /**\\n     * @notice Allow the owner to unlock all tokens in case the staking contract\\n     * is going to be replaced\\n     * Note: Not reversible on purpose. once unlocked, everything is unlocked.\\n     * The owner should not be able to just quickly unlock to withdraw his own\\n     * tokens and lock again.\\n     * @dev Last resort.\\n     * */\\n    function unlockAllTokens() external onlyOwner whenNotFrozen {\\n        allUnlocked = true;\\n        emit TokensUnlocked(SOVToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev set max withdraw iterations.\\n     *\\n     * @param newMaxIterations new max iterations value.\\n     */\\n    function setMaxVestingWithdrawIterations(\\n        uint256 newMaxIterations\\n    ) external onlyAuthorized whenNotFrozen {\\n        require(newMaxIterations > 0, \\\"Invalid max iterations\\\");\\n        emit MaxVestingWithdrawIterationsUpdated(maxVestingWithdrawIterations, newMaxIterations);\\n        maxVestingWithdrawIterations = newMaxIterations;\\n    }\\n\\n    /**\\n     * @notice Withdraw tokens for vesting contract.\\n     * @param vesting The address of Vesting contract.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev This function is dedicated only to support backward compatibility for sovryn ecosystem that has been implementing this staking contract.\\n     * @dev Sovryn protocol will use the cancelTeamVesting function for the withdrawal moving forward.\\n     * https://github.com/DistributedCollective/Sovryn-smart-contracts/blob/4bbfe5bd0311ca71e4ef0e3af810d3791d8e4061/contracts/governance/Staking/modules/StakingWithdrawModule.sol#L78\\n     * */\\n    function governanceWithdrawVesting(\\n        address vesting,\\n        address receiver\\n    ) public onlyAuthorized whenNotFrozen {\\n        require(vestingRegistryLogic.isTeamVesting(vesting), \\\"Only team vesting allowed\\\");\\n\\n        ITeamVesting teamVesting = ITeamVesting(vesting);\\n        uint256 teamVestingStartDate = teamVesting.startDate();\\n        uint256 teamVestingCliff = teamVesting.cliff();\\n\\n        uint256 nextStartFrom = teamVestingStartDate + teamVestingCliff;\\n        bool withdrawFlag = true;\\n\\n        bool notCompleted;\\n\\n        /**\\n         * The withdrawal is limited to certain iterations (set in maxVestingWithdrawIterations), so in order to withdraw all, we need to iterate until it is fully withdrawn.\\n         */\\n        while (withdrawFlag) {\\n            /**\\n             * notCompleted is the flag whether the withdrawal is fully withdrawn or not.\\n             * As long as the notCompleted is true, we will keep the iteration using the nextStartFrom.\\n             */\\n            (nextStartFrom, notCompleted) = _cancelTeamVesting(vesting, receiver, nextStartFrom);\\n            withdrawFlag = notCompleted ? true : false;\\n        }\\n\\n        emit VestingTokensWithdrawn(vesting, receiver);\\n    }\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting\\n     * */\\n    function governanceWithdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver\\n    ) external whenNotFrozen {\\n        require(vestingWhitelist[msg.sender], \\\"unauthorized\\\"); // S07\\n\\n        _notSameBlockAsStakingCheckpoint(until, msg.sender);\\n\\n        _withdraw(amount, until, receiver, true);\\n        // @dev withdraws tokens for lock date 2 weeks later than given lock date if sender is a contract\\n        //\\t\\twe don't need to check block.timestamp here\\n        _withdrawNext(until, receiver, true);\\n    }\\n\\n    function getFunctionsList() external pure returns (bytes4[] memory) {\\n        bytes4[] memory functionsList = new bytes4[](7);\\n        functionsList[0] = this.withdraw.selector;\\n        functionsList[1] = this.cancelTeamVesting.selector;\\n        functionsList[2] = this.getWithdrawAmounts.selector;\\n        functionsList[3] = this.unlockAllTokens.selector;\\n        functionsList[4] = this.setMaxVestingWithdrawIterations.selector;\\n        functionsList[5] = this.governanceWithdraw.selector;\\n        functionsList[6] = this.governanceWithdrawVesting.selector;\\n        return functionsList;\\n    }\\n}\\n\",\"keccak256\":\"0xf37bcd9bde42cfbbfa035965760c03ffe7a3ed74f06961b568b66cc5ba0d0e72\"},\"contracts/governance/Staking/modules/shared/CheckpointsShared.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./StakingStorageShared.sol\\\";\\nimport \\\"../../SafeMath96.sol\\\";\\n\\n/**\\n * @title Checkpoints contract.\\n * @notice Increases and decreases storage values for users, delegatees and\\n * total daily stake.\\n * */\\ncontract CheckpointsShared is StakingStorageShared, SafeMath96 {\\n    /// @notice An event emitted when an account changes its delegate.\\n    event DelegateChanged(\\n        address indexed delegator,\\n        uint256 lockedUntil,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event emitted when a delegate account's stake balance changes.\\n    event DelegateStakeChanged(\\n        address indexed delegate,\\n        uint256 lockedUntil,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /// @notice An event emitted when tokens get staked.\\n    event TokensStaked(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 lockedUntil,\\n        uint256 totalStaked\\n    );\\n\\n    /// @notice An event emitted when staked tokens get withdrawn.\\n    event StakingWithdrawn(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 until,\\n        address indexed receiver,\\n        bool isGovernance\\n    );\\n\\n    /// @notice An event emitted when vesting tokens get withdrawn.\\n    event VestingTokensWithdrawn(address vesting, address receiver);\\n\\n    /// @notice An event emitted when the owner unlocks all tokens.\\n    event TokensUnlocked(uint256 amount);\\n\\n    /// @notice An event emitted when a staking period gets extended.\\n    event ExtendedStakingDuration(\\n        address indexed staker,\\n        uint256 previousDate,\\n        uint256 newDate,\\n        uint256 amountStaked\\n    );\\n\\n    event AdminAdded(address admin);\\n\\n    event AdminRemoved(address admin);\\n\\n    /// @param pauser address to grant power to pause the contract\\n    /// @param added true - added, false - removed\\n    event PauserAddedOrRemoved(address indexed pauser, bool indexed added);\\n\\n    /// @notice An event emitted when a staking is paused or unpaused\\n    /// @param setPaused true - pause, false - unpause\\n    event StakingPaused(bool indexed setPaused);\\n\\n    /// @notice An event emitted when a staking is frozen or unfrozen\\n    /// @param setFrozen true - freeze, false - unfreeze\\n    event StakingFrozen(bool indexed setFrozen);\\n\\n    event ContractCodeHashAdded(bytes32 hash);\\n\\n    event ContractCodeHashRemoved(bytes32 hash);\\n\\n    event VestingStakeSet(uint256 lockedTS, uint96 value);\\n\\n    event TeamVestingCancelled(address indexed caller, address receiver);\\n\\n    event TeamVestingPartiallyCancelled(\\n        address indexed caller,\\n        address receiver,\\n        uint256 nextStartFrom\\n    );\\n\\n    constructor() internal {\\n        // abstract\\n    }\\n\\n    /**\\n     * @notice Increases the user's vesting stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseVestingStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numVestingCheckpoints[lockedTS];\\n        uint96 vested = vestingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newVest = add96(vested, value, \\\"CP01\\\"); // vested overflow\\n        _writeVestingCheckpoint(lockedTS, nCheckpoints, newVest);\\n    }\\n\\n    /**\\n     * @notice Decreases the user's vesting stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseVestingStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numVestingCheckpoints[lockedTS];\\n        uint96 vested = vestingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newVest = sub96(vested, value, \\\"CP02\\\"); // vested underflow\\n        _writeVestingCheckpoint(lockedTS, nCheckpoints, newVest);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the user vested amount.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newVest The new vest balance.\\n     * */\\n    function _writeVestingCheckpoint(\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newVest\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP03\\\"); // block num > 32 bits\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            vestingCheckpoints[lockedTS][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            vestingCheckpoints[lockedTS][nCheckpoints - 1].stake = newVest;\\n        } else {\\n            vestingCheckpoints[lockedTS][nCheckpoints] = Checkpoint(blockNumber, newVest);\\n            numVestingCheckpoints[lockedTS] = nCheckpoints + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases the user's stake for a giving lock date and writes a checkpoint.\\n     * @param account The user address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseUserStake(address account, uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numUserStakingCheckpoints[account][lockedTS];\\n        uint96 staked = userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = add96(staked, value, \\\"CP04\\\"); // staked overflow\\n        _writeUserCheckpoint(account, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Decreases the user's stake for a giving lock date and writes a checkpoint.\\n     * @param account The user address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseUserStake(address account, uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numUserStakingCheckpoints[account][lockedTS];\\n        uint96 staked = userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = sub96(staked, value, \\\"CP05\\\"); // staked underflow\\n        _writeUserCheckpoint(account, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the user stake.\\n     * @param account The user address.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newStake The new staked balance.\\n     * */\\n    function _writeUserCheckpoint(\\n        address account,\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newStake\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP06\\\"); // block number > 32 bits\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            userStakingCheckpoints[account][lockedTS][nCheckpoints - 1].stake = newStake;\\n        } else {\\n            userStakingCheckpoints[account][lockedTS][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newStake\\n            );\\n            numUserStakingCheckpoints[account][lockedTS] = nCheckpoints + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases the delegatee's stake for a giving lock date and writes a checkpoint.\\n     * @param delegatee The delegatee address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseDelegateStake(address delegatee, uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numDelegateStakingCheckpoints[delegatee][lockedTS];\\n        uint96 staked = delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = add96(staked, value, \\\"CP07\\\"); // block number > 32 bits\\n        _writeDelegateCheckpoint(delegatee, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Decreases the delegatee's stake for a giving lock date and writes a checkpoint.\\n     * @param delegatee The delegatee address.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseDelegateStake(address delegatee, uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numDelegateStakingCheckpoints[delegatee][lockedTS];\\n        uint96 staked = delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = 0;\\n        // @dev We need to check delegate checkpoint value here,\\n        //\\t\\tbecause we had an issue in `stake` function:\\n        //\\t\\tdelegate checkpoint wasn't updating for the second and next stakes for the same date\\n        //\\t\\tif first stake was withdrawn completely and stake was delegated to the staker\\n        //\\t\\t(no delegation to another address).\\n        // @dev It can be greater than 0, but inconsistent after 3 transactions\\n        if (staked > value) {\\n            newStake = sub96(staked, value, \\\"CP08\\\"); // staked underflow\\n        }\\n        _writeDelegateCheckpoint(delegatee, lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the delegate stake.\\n     * @param delegatee The delegate address.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newStake The new staked balance.\\n     * */\\n    function _writeDelegateCheckpoint(\\n        address delegatee,\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newStake\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP09\\\"); // block numb > 32 bits\\n        uint96 oldStake = delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake;\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].fromBlock ==\\n            blockNumber\\n        ) {\\n            delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints - 1].stake = newStake;\\n        } else {\\n            delegateStakingCheckpoints[delegatee][lockedTS][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newStake\\n            );\\n            numDelegateStakingCheckpoints[delegatee][lockedTS] = nCheckpoints + 1;\\n        }\\n        emit DelegateStakeChanged(delegatee, lockedTS, oldStake, newStake);\\n    }\\n\\n    /**\\n     * @notice Increases the total stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to add to the staked balance.\\n     * */\\n    function _increaseDailyStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numTotalStakingCheckpoints[lockedTS];\\n        uint96 staked = totalStakingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = add96(staked, value, \\\"CP10\\\"); // staked overflow\\n        _writeStakingCheckpoint(lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Decreases the total stake for a giving lock date and writes a checkpoint.\\n     * @param lockedTS The lock date.\\n     * @param value The value to substract to the staked balance.\\n     * */\\n    function _decreaseDailyStake(uint256 lockedTS, uint96 value) internal {\\n        uint32 nCheckpoints = numTotalStakingCheckpoints[lockedTS];\\n        uint96 staked = totalStakingCheckpoints[lockedTS][nCheckpoints - 1].stake;\\n        uint96 newStake = sub96(staked, value, \\\"CP11\\\"); // staked underflow\\n        _writeStakingCheckpoint(lockedTS, nCheckpoints, newStake);\\n    }\\n\\n    /**\\n     * @notice Writes on storage the total stake.\\n     * @param lockedTS The lock date.\\n     * @param nCheckpoints The number of checkpoints, to find out the last one index.\\n     * @param newStake The new staked balance.\\n     * */\\n    function _writeStakingCheckpoint(\\n        uint256 lockedTS,\\n        uint32 nCheckpoints,\\n        uint96 newStake\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CP12\\\"); // block num > 32 bits\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            totalStakingCheckpoints[lockedTS][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            totalStakingCheckpoints[lockedTS][nCheckpoints - 1].stake = newStake;\\n        } else {\\n            totalStakingCheckpoints[lockedTS][nCheckpoints] = Checkpoint(blockNumber, newStake);\\n            numTotalStakingCheckpoints[lockedTS] = nCheckpoints + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the current balance of an account locked until a certain date.\\n     * @param account The user address.\\n     * @param lockDate The lock date.\\n     * @return The stake amount.\\n     * */\\n    function _currentBalance(address account, uint256 lockDate) internal view returns (uint96) {\\n        uint32 _numUnserStakingCheckpoints = numUserStakingCheckpoints[account][lockDate] - 1;\\n        return userStakingCheckpoints[account][lockDate][_numUnserStakingCheckpoints].stake;\\n    }\\n}\\n\",\"keccak256\":\"0x876a54c3cbcbc6e5a1eff589c87b0cf624151c71d1f3f42591ff0df1dd728c07\"},\"contracts/governance/Staking/modules/shared/StakingShared.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./StakingStorageShared.sol\\\";\\nimport \\\"../../SafeMath96.sol\\\";\\nimport \\\"../../../../openzeppelin/SafeMath.sol\\\";\\nimport \\\"../../../../openzeppelin/Ownable.sol\\\";\\n\\n/**\\n * @title Staking modules shared functionality\\n */\\ncontract StakingShared is StakingStorageShared, SafeMath96 {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant FOUR_WEEKS = 4 weeks;\\n\\n    /**\\n     * @dev Throws if paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"paused\\\"); // SS03\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner or admin.\\n     */\\n    modifier onlyAuthorized() {\\n        require(isOwner() || admins[msg.sender], \\\"unauthorized\\\"); // SS01\\n        _;\\n    }\\n\\n    /**\\n\\t * @dev Throws if called by any account other than the owner or admin or pauser.\\n\\t \\n\\tmodifier onlyAuthorizedOrPauser() {\\n\\t\\trequire(isOwner() || admins[msg.sender] || pausers[msg.sender], \\\"unauthorized\\\"); // WS02\\n\\t\\t_;\\n\\t}\\n\\t*/\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner or pauser.\\n     */\\n    modifier onlyPauserOrOwner() {\\n        require(isOwner() || pausers[msg.sender], \\\"unauthorized\\\"); // SS02\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than pauser.\\n     * @notice Uncomment when needed\\n     */\\n    /*\\n\\tmodifier onlyPauser() {\\n\\t\\trequire(pausers[msg.sender], \\\"Not pauser\\\");\\n\\t\\t_;\\n\\t}\\n\\t*/\\n\\n    /**\\n     * @dev Throws if frozen.\\n     */\\n    modifier whenNotFrozen() {\\n        require(!frozen, \\\"paused\\\"); // SS04\\n        _;\\n    }\\n\\n    constructor() internal {\\n        // abstract\\n    }\\n\\n    function _notSameBlockAsStakingCheckpoint(uint256 lockDate, address stakeFor) internal view {\\n        uint32 nCheckpoints = numUserStakingCheckpoints[stakeFor][lockDate];\\n        bool notSameBlock = userStakingCheckpoints[stakeFor][lockDate][nCheckpoints - 1]\\n            .fromBlock != block.number;\\n        require(notSameBlock, \\\"cannot be mined in the same block as last stake\\\"); // S20\\n    }\\n\\n    /**\\n     * @notice Unstaking is possible every 2 weeks only. This means, to\\n     * calculate the key value for the staking checkpoints, we need to\\n     * map the intended timestamp to the closest available date.\\n     * @param timestamp The unlocking timestamp.\\n     * @return The actual unlocking date (might be up to 2 weeks shorter than intended).\\n     * */\\n    function _timestampToLockDate(uint256 timestamp) internal view returns (uint256 lockDate) {\\n        // Optimize gas costs by reading kickoffTS from storage only once.\\n        uint256 start = kickoffTS;\\n        require(timestamp >= start, \\\"timestamp < contract creation\\\"); // WS23\\n        /**\\n         * @dev If staking timestamp does not match any of the unstaking dates\\n         * , set the lockDate to the closest one before the timestamp.\\n         * E.g. Passed timestamps lies 7 weeks after kickoff -> only stake for 6 weeks.\\n         * */\\n        uint256 periodFromKickoff = (timestamp - start) / TWO_WEEKS;\\n        lockDate = periodFromKickoff * TWO_WEEKS + start;\\n    }\\n\\n    /**\\n     * @notice Determine the current Block Number\\n     * @dev This is segregated from the _getPriorUserStakeByDate function to better test\\n     * advancing blocks functionality using Mock Contracts\\n     * */\\n    function _getCurrentBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account until a\\n     * \\t\\tcertain lock date as of a block number.\\n     * @dev All functions of Staking contract use this internal version,\\n     * \\t\\twe need to modify public function in order to workaround issue with Vesting.withdrawTokens:\\n     * return 1 instead of 0 if message sender is a contract.\\n     * @param account The address of the account to check.\\n     * @param date The lock date. Adjusted to the next valid lock date, if necessary.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function _getPriorUserStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) internal view returns (uint96) {\\n        require(blockNumber < _getCurrentBlockNumber(), \\\"not determined\\\"); // WS14\\n\\n        date = _adjustDateForOrigin(date);\\n        uint32 nCheckpoints = numUserStakingCheckpoints[account][date];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        /// @dev First check most recent balance.\\n        if (userStakingCheckpoints[account][date][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return userStakingCheckpoints[account][date][nCheckpoints - 1].stake;\\n        }\\n\\n        /// @dev Next check implicit zero balance.\\n        if (userStakingCheckpoints[account][date][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; /// @dev ceil, avoiding overflow.\\n            Checkpoint memory cp = userStakingCheckpoints[account][date][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.stake;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return userStakingCheckpoints[account][date][lower].stake;\\n    }\\n\\n    /**\\n     * @dev origin vesting contracts have different dates\\n     * we need to add 2 weeks to get end of period (by default, it's start)\\n     * @param date The staking date to compute the power for.\\n     * @return unlocking date.\\n     */\\n    function _adjustDateForOrigin(uint256 date) internal view returns (uint256) {\\n        uint256 adjustedDate = _timestampToLockDate(date);\\n        //origin vesting contracts have different dates\\n        //we need to add 2 weeks to get end of period (by default, it's start)\\n        if (adjustedDate != date) {\\n            date = adjustedDate + TWO_WEEKS;\\n        }\\n        return date;\\n    }\\n\\n    /**\\n     * @notice Compute the weight for a specific date.\\n     * @param date The unlocking date.\\n     * @param startDate We compute the weight for the tokens staked until 'date' on 'startDate'.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function _computeWeightByDate(\\n        uint256 date,\\n        uint256 startDate\\n    ) internal pure returns (uint96 weight) {\\n        require(date >= startDate, \\\"date < startDate\\\"); // WS18\\n        uint256 remainingTime = (date - startDate);\\n        require(MAX_DURATION >= remainingTime, \\\"remaining time > max duration\\\"); // WS19\\n        /// @dev x = max days - remaining days\\n        uint96 x = uint96(MAX_DURATION - remainingTime) / (1 days);\\n        /// @dev w = (m^2 - x^2)/m^2 +1 (multiplied by the weight factor)\\n        weight = add96(\\n            WEIGHT_FACTOR,\\n            mul96(\\n                MAX_VOTING_WEIGHT * WEIGHT_FACTOR,\\n                sub96(\\n                    MAX_DURATION_POW_2,\\n                    x * x,\\n                    \\\"weight underflow\\\" // WS20\\n                ),\\n                \\\"weight mul overflow\\\" // WS21\\n            ) / MAX_DURATION_POW_2,\\n            \\\"overflow on weight\\\" // WS22\\n        );\\n    }\\n\\n    /**\\n     * @notice Return flag whether the given address is a registered vesting contract.\\n     * @param stakerAddress the address to check\\n     */\\n    function _isVestingContract(address stakerAddress) internal view returns (bool) {\\n        bool isVesting;\\n        bytes32 codeHash;\\n\\n        assembly {\\n            codeHash := extcodehash(stakerAddress)\\n        }\\n        if (address(vestingRegistryLogic) != address(0)) {\\n            isVesting = vestingRegistryLogic.isVestingAddress(stakerAddress);\\n        }\\n\\n        if (isVesting) return true;\\n        if (vestingCodeHashes[codeHash]) return true;\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x4013d5203aae8bd8771fd659cdb987bdde975d38c176d8a4cc749b572646415b\"},\"contracts/governance/Staking/modules/shared/StakingStorageShared.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../../../interfaces/IERC20.sol\\\";\\nimport \\\"../../../IFeeSharingCollector.sol\\\";\\nimport \\\"../../../Vesting/IVestingRegistry.sol\\\";\\n\\n/**\\n * @title StakingStorageShared contract is inherited by Staking modules.\\n * @notice Just the storage part of stacking contract, no functions,\\n * only constant, variables and required structures (mappings).\\n * Used by StackingProxy and Checkpoints contracts.\\n *\\n * What is SOV staking?\\n * The purpose of the SOV token is to provide a pseudonymous,\\n * censorship-resistant mechanism for governing the parameters of the Sovryn\\n * protocol, while aligning the incentives of protocol governors with the\\n * long-term success of the protocol. Any SOV token holder can choose to\\n * stake (lock up) their tokens for a fixed period of time in return for\\n * voting rights in the Bitocracy. Stakers are further incentivised through\\n * fee and slashing rewards.\\n * */\\ncontract StakingStorageShared is Ownable {\\n    /// @notice 2 weeks in seconds.\\n    uint256 constant TWO_WEEKS = 1209600;\\n\\n    /// @notice The maximum possible voting weight before adding +1 (actually 10, but need 9 for computation).\\n    uint96 public constant MAX_VOTING_WEIGHT = 9;\\n\\n    /// @notice weight is multiplied with this factor (for allowing decimals, like 1.2x).\\n    /// @dev MAX_VOTING_WEIGHT * WEIGHT_FACTOR needs to be < 792, because there are 100,000,000 SOV with 18 decimals\\n    uint96 public constant WEIGHT_FACTOR = 10;\\n\\n    /// @notice The maximum duration to stake tokens for.\\n    uint256 public constant MAX_DURATION = 1092 days;\\n\\n    /// @notice The maximum duration ^2\\n    uint96 constant MAX_DURATION_POW_2 = 1092 * 1092;\\n\\n    /// @notice Default weight scaling.\\n    uint96 constant DEFAULT_WEIGHT_SCALING = 3;\\n\\n    /// @notice Range for weight scaling.\\n    uint96 constant MIN_WEIGHT_SCALING = 1;\\n    uint96 constant MAX_WEIGHT_SCALING = 9;\\n\\n    /// @notice The timestamp of contract creation. Base for the staking period calculation.\\n    uint256 public kickoffTS;\\n\\n    string name = \\\"SOVStaking\\\";\\n\\n    /// @notice The token to be staked.\\n    IERC20 public SOVToken;\\n\\n    /// @notice A record of each accounts delegate.\\n    mapping(address => mapping(uint256 => address)) public delegates;\\n\\n    /// @notice If this flag is set to true, all tokens are unlocked immediately.\\n    bool public allUnlocked = false;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain.\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 lockDate,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice Used for stake migrations to a new staking contract with a different storage structure.\\n    address public newStakingContract;\\n\\n    /*************************** Checkpoints *******************************/\\n\\n    /// @notice A checkpoint for marking the stakes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 stake;\\n    }\\n\\n    /// @notice A record of tokens to be unstaked at a given time in total.\\n    /// For total voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev totalStakingCheckpoints[date][index] is a checkpoint.\\n    mapping(uint256 => mapping(uint32 => Checkpoint)) public totalStakingCheckpoints;\\n\\n    /// @notice The number of total staking checkpoints for each date.\\n    /// @dev numTotalStakingCheckpoints[date] is a number.\\n    mapping(uint256 => uint32) public numTotalStakingCheckpoints;\\n\\n    /// @notice A record of tokens to be unstaked at a given time which were delegated to a certain address.\\n    /// For delegatee voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev delegateStakingCheckpoints[delegatee][date][index] is a checkpoint.\\n    mapping(address => mapping(uint256 => mapping(uint32 => Checkpoint)))\\n        public delegateStakingCheckpoints;\\n\\n    /// @notice The number of total staking checkpoints for each date per delegate.\\n    /// @dev numDelegateStakingCheckpoints[delegatee][date] is a number.\\n    mapping(address => mapping(uint256 => uint32)) public numDelegateStakingCheckpoints;\\n\\n    /// @notice A record of tokens to be unstaked at a given time which per user address (address -> lockDate -> stake checkpoint)\\n    /// @dev userStakingCheckpoints[user][date][index] is a checkpoint.\\n    mapping(address => mapping(uint256 => mapping(uint32 => Checkpoint)))\\n        public userStakingCheckpoints;\\n\\n    /// @notice The number of total staking checkpoints for each date per user.\\n    /// @dev numUserStakingCheckpoints[user][date] is a number.\\n    mapping(address => mapping(uint256 => uint32)) public numUserStakingCheckpoints;\\n\\n    /// @notice A record of states for signing / validating signatures\\n    /// @dev nonces[user] is a number.\\n    mapping(address => uint256) public nonces;\\n\\n    /*************************** Slashing *******************************/\\n\\n    /// @notice the address of FeeSharingCollectorProxy contract, we need it for unstaking with slashing.\\n    IFeeSharingCollector public feeSharing;\\n\\n    /// @notice used for weight scaling when unstaking with slashing.\\n    uint96 public weightScaling = DEFAULT_WEIGHT_SCALING;\\n\\n    /// @notice List of vesting contracts, tokens for these contracts won't be slashed if unstaked by governance.\\n    /// @dev vestingWhitelist[contract] is true/false.\\n    mapping(address => bool) public vestingWhitelist;\\n\\n    /// @dev user => flag whether user has admin role.\\n    /// @dev multisig should be an admin, admin can invoke only governanceWithdrawVesting function,\\n    /// \\tthis function works only with Team Vesting contracts\\n    mapping(address => bool) public admins;\\n\\n    /// @dev vesting contract code hash => flag whether it's registered code hash\\n    mapping(bytes32 => bool) public vestingCodeHashes;\\n\\n    /// @notice A record of tokens to be unstaked from vesting contract at a given time (lockDate -> vest checkpoint)\\n    /// @dev vestingCheckpoints[date][index] is a checkpoint.\\n    mapping(uint256 => mapping(uint32 => Checkpoint)) public vestingCheckpoints;\\n\\n    /// @notice The number of total vesting checkpoints for each date.\\n    /// @dev numVestingCheckpoints[date] is a number.\\n    mapping(uint256 => uint32) public numVestingCheckpoints;\\n\\n    ///@notice vesting registry contract\\n    IVestingRegistry public vestingRegistryLogic;\\n\\n    /// @dev user => flag whether user has pauser role.\\n    mapping(address => bool) public pausers;\\n\\n    /// @dev Staking contract is paused\\n    bool public paused;\\n\\n    /// @dev Staking contract is frozen\\n    bool public frozen;\\n\\n    /// @dev max iterations that can be supported in 1 tx for the withdrawal\\n    uint256 internal maxVestingWithdrawIterations;\\n\\n    constructor() internal {\\n        //abstract\\n    }\\n}\\n\",\"keccak256\":\"0xf83eb462825c77f9c0629d15a52c8248cd1e9ce1e947c6ea93102d952790dca4\"},\"contracts/governance/Vesting/ITeamVesting.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for TeamVesting contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * This interface is used by Staking contract to cancel the team vesting\\n * function having the vesting contract instance address.\\n */\\ninterface ITeamVesting {\\n    function startDate() external view returns (uint256);\\n\\n    function cliff() external view returns (uint256);\\n\\n    function endDate() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function tokenOwner() external view returns (address);\\n\\n    function governanceWithdrawTokens(address receiver) external;\\n}\\n\",\"keccak256\":\"0x70a60982358adffaa8294758f35234a70f5588273bf953f751a6e318ccb2d3c1\"},\"contracts/governance/Vesting/IVesting.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for Vesting contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * This interface is used by VestingLogic contract to implement stakeTokens function\\n * and on VestingRegistry contract to call IVesting(vesting).stakeTokens function\\n * at a vesting instance.\\n */\\ninterface IVesting {\\n    function duration() external returns (uint256);\\n\\n    function endDate() external returns (uint256);\\n\\n    function stakeTokens(uint256 amount) external;\\n\\n    function tokenOwner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3482a1e27402655f85f5ff2cb06e0876e9bb94e1a63446a09e33babd60274b4b\"},\"contracts/governance/Vesting/IVestingRegistry.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for upgradable Vesting Registry contract.\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n */\\ninterface IVestingRegistry {\\n    function getVesting(address _tokenOwner) external view returns (address);\\n\\n    function getTeamVesting(address _tokenOwner) external view returns (address);\\n\\n    function setVestingRegistry(address _vestingRegistryProxy) external;\\n\\n    function isVestingAddress(address _vestingAddress) external view returns (bool);\\n\\n    function isTeamVesting(address _vestingAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x08bf5badf1813b59f8b06d3bb9280f4b35d3d07947c728dad79e43fcc1d4130e\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _who) external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xac035e47e8a8f7e694cc6a90790bbfcaa8ae90d072d30832fc851ab6f1b19145\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"},\"contracts/proxy/modules/interfaces/IFunctionsList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.5.17;\\n\\ninterface IFunctionsList {\\n    function getFunctionsList() external pure returns (bytes4[] memory functionSignatures);\\n}\\n\",\"keccak256\":\"0x38fb0166042329bc9ffcab69742f215efd135cdcf2d48b2202cb7f1546709101\"},\"contracts/rsk/RSKAddrValidator.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.5.17;\\n\\nlibrary RSKAddrValidator {\\n    /*\\n     * @param addr it is an address to check that it does not originates from\\n     * signing with PK = ZERO. RSK has a small difference in which @ZERO_PK_ADDR is\\n     * also an address from PK = ZERO. So we check for both of them.\\n     * */\\n    function checkPKNotZero(address addr) internal pure returns (bool) {\\n        return (addr != 0xdcc703c0E500B653Ca82273B7BFAd8045D85a470 && addr != address(0));\\n    }\\n\\n    /*\\n     * Safely compares two addresses, checking they do not originate from\\n     * a zero private key.\\n     * */\\n    function safeEquals(address addr1, address addr2) internal pure returns (bool) {\\n        return (addr1 == addr2 &&\\n            addr1 != 0xdcc703c0E500B653Ca82273B7BFAd8045D85a470 &&\\n            addr1 != address(0));\\n    }\\n}\\n\",\"keccak256\":\"0xf25255f771a734eef130f68e899d00a71e2bcab4e6b109e06f61cff93ab58d74\"}},\"version\":1}",
  "bytecode": "0x60c0604052600a608081905269534f565374616b696e6760b01b60a09081526200002d9160029190620000ae565b506005805460ff19169055600d80546001600160a01b0316600360a01b179055600062000059620000a9565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000150565b335b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000f157805160ff191683800117855562000121565b8280016001018555821562000121579182015b828111156200012157825182559160200191906001019062000104565b506200012f92915062000133565b5090565b620000ab91905b808211156200012f57600081556001016200013a565b61341580620001606000396000f3fe608060405234801561001057600080fd5b506004361061023c5760003560e01c80638da5cb5b1161013b578063bb533cf2116100b8578063db27ec181161007c578063db27ec181461048e578063dfb267c2146104a1578063e7a324dc146104b4578063f2fde38b146104bc578063f3f19731146104cf5761023c565b8063bb533cf214610443578063bf626ec114610456578063d27569e71461045e578063d8ad326d14610466578063dab6ca441461047b5761023c565b80639929e886116100ff5780639929e88614610410578063a58848c514610418578063adae900214610420578063ae81dfe414610433578063b1724b461461043b5761023c565b80638da5cb5b146103ac5780638f32d59b146103b45780639436e7d4146103bc57806394c2ce58146103dc57806396a590c1146103ef5761023c565b8063429b62e5116101c95780636b6fde0e1161018d5780636b6fde0e1461034d578063765dade9146103605780637ecebe0014610373578063800b64ca1461038657806380f51c12146103995761023c565b8063429b62e5146102f65780635b66a324146103095780635c975abb1461031c5780635e0be6071461032457806368cefccc1461032c5761023c565b8063104932cf11610210578063104932cf1461029c57806317748adc146102a457806320606b70146102b957806327dd1b00146102c15780633827fca5146102e15761023c565b8062073f991461024157806303a18fa31461025f578063054f7d9c1461027457806307392cc014610289575b600080fd5b6102496104e2565b6040516102569190613137565b60405180910390f35b6102676104e8565b6040516102569190613145565b61027c6104f7565b6040516102569190613129565b61027c610297366004612a66565b610505565b61026761051a565b6102ac610529565b60405161025691906132b6565b61024961052e565b6102d46102cf3660046129d5565b610545565b604051610256919061309e565b6102f46102ef36600461294e565b61056b565b005b61027c61030436600461290a565b6107dc565b6102f4610317366004612a66565b6107f1565b61027c6108b7565b6102f46108c0565b61033f61033a366004612a05565b6109d0565b6040516102569291906132a8565b61033f61035b366004612a05565b610a0b565b6102f461036e366004612988565b610a46565b61024961038136600461290a565b610b5a565b6102f4610394366004612af1565b610b6c565b61027c6103a736600461290a565b610beb565b6102d4610c00565b61027c610c0f565b6103cf6103ca366004612a66565b610c33565b604051610256919061329a565b6103cf6103ea3660046129d5565b610c4b565b6104026103fd366004612ad2565b610c6e565b6040516102569291906132ec565b61027c610c9f565b610267610ca8565b61027c61042e36600461290a565b610cb7565b6102d4610ccc565b610249610ce0565b6103cf610451366004612a66565b610ce8565b6102ac610d00565b6102ac610d16565b61046e610d1b565b6040516102569190613118565b6102f4610489366004612af1565b610e9b565b6103cf61049c3660046129d5565b610ef1565b61033f6104af366004612aa2565b610f14565b610249610f49565b6102f46104ca36600461290a565b610f55565b61033f6104dd366004612aa2565b610f85565b60015481565b600d546001600160a01b031681565b601554610100900460ff1681565b60106020526000908152604090205460ff1681565b6013546001600160a01b031681565b600981565b60405161053a90613088565b604051809103902081565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b610573610c0f565b8061058d5750336000908152600f602052604090205460ff165b6105b25760405162461bcd60e51b81526004016105a9906131d4565b60405180910390fd5b601554610100900460ff16156105da5760405162461bcd60e51b81526004016105a990613244565b601354604051637a10f6bf60e11b81526001600160a01b039091169063f421ed7e9061060a90859060040161309e565b60206040518083038186803b15801561062257600080fd5b505afa158015610636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061065a9190810190612a48565b6106765760405162461bcd60e51b81526004016105a990613234565b60008290506000816001600160a01b0316630b97bc866040518163ffffffff1660e01b815260040160206040518083038186803b1580156106b657600080fd5b505afa1580156106ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106ee9190810190612a84565b90506000826001600160a01b03166313d033c06040518163ffffffff1660e01b815260040160206040518083038186803b15801561072b57600080fd5b505afa15801561073f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107639190810190612a84565b9050818101600160005b81156107995761077e888885610fba565b90935090508061078f576000610792565b60015b915061076d565b7f2366e0b6b1af17c0ceed50685c570d519cae11e7faaf007bbe667e94a5ee3cd588886040516107ca9291906130ac565b60405180910390a15050505050505050565b600f6020526000908152604090205460ff1681565b6107f9610c0f565b806108135750336000908152600f602052604090205460ff165b61082f5760405162461bcd60e51b81526004016105a9906131d4565b601554610100900460ff16156108575760405162461bcd60e51b81526004016105a990613244565b600081116108775760405162461bcd60e51b81526004016105a9906131a4565b7f22eba8caa37576c2c857166fc151e8b5bb22942eaef5638da0e96d6156333bee601654826040516108aa929190613264565b60405180910390a1601655565b60155460ff1681565b6108c8610c0f565b6108e45760405162461bcd60e51b81526004016105a9906131d4565b601554610100900460ff161561090c5760405162461bcd60e51b81526004016105a990613244565b6005805460ff191660011790556003546040516370a0823160e01b81527fd8cc4e8d808fe950b07bfffcd83eebf1190cd35ea77fe0c8a7d75a6e9b90e5c1916001600160a01b0316906370a082319061096990309060040161309e565b60206040518083038186803b15801561098157600080fd5b505afa158015610995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109b99190810190612a84565b6040516109c69190613137565b60405180910390a1565b600a60209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b600860209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b610a4e610c0f565b80610a685750336000908152600f602052604090205460ff165b610a845760405162461bcd60e51b81526004016105a9906131d4565b601554610100900460ff1615610aac5760405162461bcd60e51b81526004016105a990613244565b601354604051637a10f6bf60e11b81526001600160a01b039091169063f421ed7e90610adc90869060040161309e565b60206040518083038186803b158015610af457600080fd5b505afa158015610b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b2c9190810190612a48565b610b485760405162461bcd60e51b81526004016105a990613234565b610b53838383610fba565b5050505050565b600c6020526000908152604090205481565b601554610100900460ff1615610b945760405162461bcd60e51b81526004016105a990613244565b336000908152600e602052604090205460ff16610bc35760405162461bcd60e51b81526004016105a9906131d4565b610bcd82336113a0565b610bda8383836001611417565b610be682826001611710565b505050565b60146020526000908152604090205460ff1681565b6000546001600160a01b031690565b600080546001600160a01b0316610c24611773565b6001600160a01b031614905090565b60076020526000908152604090205463ffffffff1681565b600960209081526000928352604080842090915290825290205463ffffffff1681565b600080610c7a83611777565b9250610c8733858561179f565b6000610c93858561180c565b94859003959350505050565b60055460ff1681565b6003546001600160a01b031681565b600e6020526000908152604090205460ff1681565b60055461010090046001600160a01b031681565b63059fa60081565b60126020526000908152604090205463ffffffff1681565b600d54600160a01b90046001600160601b031681565b600a81565b60408051600780825261010082019092526060918291906020820160e08038833901905050905063dab6ca4460e01b81600081518110610d5757fe5b6001600160e01b031990921660209283029190910190910152805163765dade960e01b9082906001908110610d8857fe5b6001600160e01b03199092166020928302919091019091015280516396a590c160e01b9082906002908110610db957fe5b6001600160e01b0319909216602092830291909101909101528051635e0be60760e01b9082906003908110610dea57fe5b6001600160e01b03199092166020928302919091019091015280516316d9a8c960e21b9082906004908110610e1b57fe5b6001600160e01b0319909216602092830291909101909101528051634005b26560e11b9082906005908110610e4c57fe5b6001600160e01b0319909216602092830291909101909101528051633827fca560e01b9082906006908110610e7d57fe5b6001600160e01b031990921660209283029190910190910152905090565b601554610100900460ff1615610ec35760405162461bcd60e51b81526004016105a990613244565b610ecc82611777565b9150610ed882336113a0565b610ee58383836000611417565b610be682826000611710565b600b60209081526000928352604080842090915290825290205463ffffffff1681565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b60405161053a90613093565b610f5d610c0f565b610f795760405162461bcd60e51b81526004016105a9906131d4565b610f8281611858565b50565b601160209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6000806001600160a01b038416610fe35760405162461bcd60e51b81526004016105a990613224565b84610fec61285e565b6040518060c00160405280886001600160a01b03168152602001836001600160a01b0316630b97bc866040518163ffffffff1660e01b815260040160206040518083038186803b15801561103f57600080fd5b505afa158015611053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110779190810190612a84565b8152602001836001600160a01b031663c24a0f8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b557600080fd5b505afa1580156110c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110ed9190810190612a84565b8152602001836001600160a01b03166313d033c06040518163ffffffff1660e01b815260040160206040518083038186803b15801561112b57600080fd5b505afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111639190810190612a84565b8152602001836001600160a01b0316630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a157600080fd5b505afa1580156111b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111d99190810190612a84565b8152602001836001600160a01b031663a3e676106040518163ffffffff1660e01b815260040160206040518083038186803b15801561121757600080fd5b505afa15801561122b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061124f9190810190612930565b6001600160a01b031690526040810151606082015160208301519293509091018087101561127d578061127f565b865b9650600060016016540362127500028801905060008184106112a157816112a3565b835b9050885b8181116112e65760006112be8d83600143036118d9565b90506001600160601b038116156112db576112db81838e8a611b2f565b5062127500016112a7565b508381101561134a576212750081019750336001600160a01b03167ff1cfeb0937231950f2400ba429108263d3af23c90f72599bf13148e6332fe06d8b8a6040516113329291906130c7565b60405180910390a25060019550611398945050505050565b336001600160a01b03167f9436f4ed1fe17491f53c6d68a08b946bc9884039fccd83e8190203e15eff55bf8b604051611383919061309e565b60405180910390a25091955060009450505050505b935093915050565b6001600160a01b0381166000818152600b60209081526040808320868452825280832054938352600a8252808320868452825280832060001963ffffffff95861690810186168552925290912054909116431415806114115760405162461bcd60e51b81526004016105a990613214565b50505050565b836001600160601b03166001148015611434575061143433611c93565b1561143e57611411565b61144933858561179f565b6001600160a01b03821661145b573391505b6114658385611d6c565b611470338486611de6565b61147933611c93565b15611488576114888385611e85565b3360009081526004602090815260408083208684529091529020546114b7906001600160a01b03168486611eff565b82421080156114c9575060055460ff16155b80156114d3575080155b156116165760006114e4858561180c565b948590039490506001600160601b0381161561161457600d546001600160a01b03166115225760405162461bcd60e51b81526004016105a990613254565b600354600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926115589291169085906004016130e2565b602060405180830381600087803b15801561157257600080fd5b505af1158015611586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115aa9190810190612a48565b50600d5460035460405163abe979e160e01b81526001600160a01b039283169263abe979e1926115e19291169085906004016130fd565b600060405180830381600087803b1580156115fb57600080fd5b505af115801561160f573d6000803e3d6000fd5b505050505b505b60035460405163a9059cbb60e01b81526000916001600160a01b03169063a9059cbb9061164990869089906004016130e2565b602060405180830381600087803b15801561166357600080fd5b505af1158015611677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061169b9190810190612a48565b9050806116ba5760405162461bcd60e51b81526004016105a9906131b4565b826001600160a01b0316336001600160a01b03167f667b6c8ed8622dae7927a8b0837455098e32037a0181f9a2e21b9b72fead6cc7878786604051611701939291906132c4565b60405180910390a35050505050565b61171933611c93565b15610be6576000611733846212750063ffffffff611fa016565b905081806117415750804210155b156114115760006117563383600143036118d9565b90506001600160601b03811615610b5357610b5381838686611417565b3390565b60008061178383611fc5565b90508281146117955762127500810192505b829150505b919050565b6000826001600160601b0316116117c85760405162461bcd60e51b81526004016105a9906131c4565b60006117d88483600143036118d9565b9050806001600160601b0316836001600160601b031611156114115760405162461bcd60e51b81526004016105a990613184565b60008061181842611fc5565b905060006118268483612005565b600d546064600a6001600160601b03600160a01b90930483169390930288028216929092041604925050505b92915050565b6001600160a01b03811661187e5760405162461bcd60e51b81526004016105a990613174565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006118e361213b565b82106119015760405162461bcd60e51b81526004016105a9906131f4565b61190a83611777565b6001600160a01b0385166000908152600b6020908152604080832084845290915290205490935063ffffffff1680611946576000915050611b28565b6001600160a01b0385166000908152600a60209081526040808320878452825280832063ffffffff6000198601811685529252909120541683106119d2576001600160a01b0385166000908152600a6020908152604080832087845282528083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050611b28565b6001600160a01b0385166000908152600a60209081526040808320878452825280832083805290915290205463ffffffff16831015611a15576000915050611b28565b600060001982015b8163ffffffff168163ffffffff161115611ae057600282820363ffffffff16048103611a476128a6565b506001600160a01b0388166000908152600a602090815260408083208a8452825280832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b03169181019190915290871415611abb57602001519450611b289350505050565b805163ffffffff16871115611ad257819350611ad9565b6001820392505b5050611a1d565b506001600160a01b0386166000908152600a60209081526040808320888452825280832063ffffffff909416835292905220546001600160601b03600160201b909104169150505b9392505050565b8051611b3a84611fc5565b9350611b4781868661179f565b611b518486611d6c565b611b5c818587611de6565b611b668486611e85565b6001600160a01b038082166000908152600460209081526040808320888452909152902054611b9791168587611eff565b60035460405163a9059cbb60e01b81526000916001600160a01b03169063a9059cbb90611bca9087908a906004016130e2565b602060405180830381600087803b158015611be457600080fd5b505af1158015611bf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c1c9190810190612a48565b905080611c3b5760405162461bcd60e51b81526004016105a9906131b4565b836001600160a01b0316826001600160a01b03167f667b6c8ed8622dae7927a8b0837455098e32037a0181f9a2e21b9b72fead6cc788886001604051611c83939291906132c4565b60405180910390a3505050505050565b6013546000908190833f906001600160a01b031615611d2f57601354604051633288436360e21b81526001600160a01b039091169063ca210d8c90611cdc90879060040161309e565b60206040518083038186803b158015611cf457600080fd5b505afa158015611d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d2c9190810190612a48565b91505b8115611d405760019250505061179a565b60008181526010602052604090205460ff1615611d625760019250505061179a565b5060009392505050565b6000828152600760209081526040808320546006835281842063ffffffff91821660001981019092168552835281842054825180840190935260048352634350313160e01b9383019390935292600160201b9092046001600160601b03169190611dd9908390869061213f565b9050610b5385848361217e565b6001600160a01b0383166000818152600b60209081526040808320868452825280832054938352600a8252808320868452825280832063ffffffff94851660001981019095168452825280832054815180830190925260048252634350303560e01b92820192909252600160201b9091046001600160601b03169190611e6f908390869061213f565b9050611e7d868685846122be565b505050505050565b6000828152601260209081526040808320546011835281842063ffffffff918216600019810190921685528352818420548251808401909352600483526321a8181960e11b9383019390935292600160201b9092046001600160601b03169190611ef2908390869061213f565b9050610b53858483612440565b6001600160a01b038316600081815260096020908152604080832086845282528083205493835260088252808320868452825280832063ffffffff94851660001981019095168452909152812054600160201b90046001600160601b0390811691908416821115611f9457611f91828560405180604001604052806004815260200163086a060760e31b81525061213f565b90505b611e7d86868584612580565b600082820183811015611b285760405162461bcd60e51b81526004016105a990613194565b60015460009080831015611feb5760405162461bcd60e51b81526004016105a990613164565b600062127500828503046212750002919091019392505050565b6000818310156120275760405162461bcd60e51b81526004016105a9906131e4565b81830363059fa60081111561204e5760405162461bcd60e51b81526004016105a990613204565b6000620151808263059fa600036001600160601b03168161206b57fe5b049050612132600a621232106001600160601b03166120f1600a6009026120c0621232108788026040518060400160405280601081526020016f77656967687420756e646572666c6f7760801b81525061213f565b60405180604001604052806013815260200172776569676874206d756c206f766572666c6f7760681b815250612795565b6001600160601b03168161210157fe5b04604051806040016040528060128152602001711bdd995c999b1bddc81bdb881dd95a59da1d60721b8152506127fc565b95945050505050565b4390565b6000836001600160601b0316836001600160601b0316111582906121765760405162461bcd60e51b81526004016105a99190613153565b505050900390565b60006121a6436040518060400160405280600481526020016321a8189960e11b81525061282f565b905060008363ffffffff161180156121e55750600084815260066020908152604080832063ffffffff6000198801811685529252909120548282169116145b15612234576000848152600660209081526040808320600019870163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b03851602179055611411565b60408051808201825263ffffffff92831681526001600160601b0393841660208083019182526000888152600682528481208887168252825284812093518454935163ffffffff1994851691881691909117600160201b600160801b031916600160201b919098160296909617909255958452600790529091208054909316600190920116179055565b60006122e6436040518060400160405280600481526020016321a8181b60e11b81525061282f565b905060008363ffffffff1611801561233757506001600160a01b0385166000908152600a60209081526040808320878452825280832063ffffffff6000198801811685529252909120548282169116145b15612398576001600160a01b0385166000908152600a602090815260408083208784528252808320600019870163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b03851602179055610b53565b60408051808201825263ffffffff92831681526001600160601b0393841660208083019182526001600160a01b03989098166000818152600a8a528481208982528a5284812088871682528a52848120935184549351909716600160201b02600160201b600160801b031997871663ffffffff19948516179790971696909617909255908452600b875281842095845294909552939020805460019092019093169116179055565b600061246843604051806040016040528060048152602001634350303360e01b81525061282f565b905060008363ffffffff161180156124a75750600084815260116020908152604080832063ffffffff6000198801811685529252909120548282169116145b156124f6576000848152601160209081526040808320600019870163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b03851602179055611411565b60408051808201825263ffffffff92831681526001600160601b0393841660208083019182526000888152601182528481208887168252825284812093518454935163ffffffff1994851691881691909117600160201b600160801b031916600160201b919098160296909617909255958452601290529091208054909316600190920116179055565b60006125a843604051806040016040528060048152602001634350303960e01b81525061282f565b6001600160a01b03861660009081526008602090815260408083208884528252808320600019880163ffffffff9081168552925290912054919250600160201b9091046001600160601b03169084161580159061263e57506001600160a01b0386166000908152600860209081526040808320888452825280832063ffffffff6000198901811685529252909120548382169116145b1561269f576001600160a01b03861660009081526008602090815260408083208884528252808320600019880163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b03861602179055612748565b60408051808201825263ffffffff80851682526001600160601b0380871660208085019182526001600160a01b038c166000818152600883528781208d825283528781208c871682528352878120965187549451909516600160201b02600160201b600160801b031995871663ffffffff19958616179590951694909417909555938252600984528482208a835290935292909220805460018801909316929091169190911790555b856001600160a01b03167fc7b38fb25352e6f351f57e2c922f84db5c97e09a6246bbe1d2eedfcdb01c4c6286838660405161278593929190613272565b60405180910390a2505050505050565b60006001600160601b0384166127ad57506000611b28565b8383026001600160601b0380851690808716908316816127c957fe5b046001600160601b03161483906127f35760405162461bcd60e51b81526004016105a99190613153565b50949350505050565b6000838301826001600160601b0380871690831610156127f35760405162461bcd60e51b81526004016105a99190613153565b600081600160201b84106128565760405162461bcd60e51b81526004016105a99190613153565b509192915050565b6040518060c0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b604080518082019091526000808252602082015290565b80356118528161339a565b80516118528161339a565b8051611852816133ae565b8035611852816133b7565b8051611852816133b7565b8035611852816133c0565b8035611852816133c9565b60006020828403121561291c57600080fd5b600061292884846128bd565b949350505050565b60006020828403121561294257600080fd5b600061292884846128c8565b6000806040838503121561296157600080fd5b600061296d85856128bd565b925050602061297e858286016128bd565b9150509250929050565b60008060006060848603121561299d57600080fd5b60006129a986866128bd565b93505060206129ba868287016128bd565b92505060406129cb868287016128de565b9150509250925092565b600080604083850312156129e857600080fd5b60006129f485856128bd565b925050602061297e858286016128de565b600080600060608486031215612a1a57600080fd5b6000612a2686866128bd565b9350506020612a37868287016128de565b92505060406129cb868287016128f4565b600060208284031215612a5a57600080fd5b600061292884846128d3565b600060208284031215612a7857600080fd5b600061292884846128de565b600060208284031215612a9657600080fd5b600061292884846128e9565b60008060408385031215612ab557600080fd5b6000612ac185856128de565b925050602061297e858286016128f4565b60008060408385031215612ae557600080fd5b60006129f485856128ff565b600080600060608486031215612b0657600080fd5b6000612b1286866128ff565b9350506020612b23868287016128de565b92505060406129cb868287016128bd565b6000612b408383612bc2565b505060200190565b612b518161330d565b82525050565b6000612b6282613300565b612b6c8185613304565b9350612b77836132fa565b8060005b83811015612ba5578151612b8f8882612b34565b9750612b9a836132fa565b925050600101612b7b565b509495945050505050565b612b5181613318565b612b518161331d565b612b5181613320565b612b518161334e565b6000612bdf82613300565b612be98185613304565b9350612bf9818560208601613364565b612c0281613390565b9093019392505050565b6000612c19601d83613304565b7f74696d657374616d70203c20636f6e7472616374206372656174696f6e000000815260200192915050565b6000612c52602683613304565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000612c9a602583613304565b7f5374616b696e673a3a77697468647261773a206e6f7420656e6f7567682062618152646c616e636560d81b602082015260400192915050565b6000612ce1601b83613304565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b6000612d1a601683613304565b75496e76616c6964206d617820697465726174696f6e7360501b815260200192915050565b6000612d4c601583613304565b74151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b815260200192915050565b6000612d7d602883613304565b7f416d6f756e74206f6620746f6b656e7320746f207769746864726177206d7573815267074206265203e20360c41b602082015260400192915050565b6000612dc760438361179a565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000612e32600c83613304565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000612e5a601083613304565b6f64617465203c2073746172744461746560801b815260200192915050565b6000612e86600e83613304565b6d1b9bdd0819195d195c9b5a5b995960921b815260200192915050565b6000612eb0601d83613304565b7f72656d61696e696e672074696d65203e206d6178206475726174696f6e000000815260200192915050565b6000612ee9602f83613304565b7f63616e6e6f74206265206d696e656420696e207468652073616d6520626c6f6381526e6b206173206c617374207374616b6560881b602082015260400192915050565b6000612f3a601883613304565b7f7265636569766572206164647265737320696e76616c69640000000000000000815260200192915050565b6000612f73601983613304565b7f4f6e6c79207465616d2076657374696e6720616c6c6f77656400000000000000815260200192915050565b6000612fac604b8361179a565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206c6f636b446174652c75696e74323536206e6f6e63652c75696e7460208201526a323536206578706972792960a81b6040820152604b0192915050565b600061301f600683613304565b651c185d5cd95960d21b815260200192915050565b6000613041601d83613304565b7f46656553686172696e672061646472657373207761736e277420736574000000815260200192915050565b612b5181613339565b612b5181613359565b612b5181613342565b600061185282612dba565b600061185282612f9f565b602081016118528284612b48565b604081016130ba8285612b48565b611b286020830184612b48565b604081016130d58285612b48565b611b286020830184612bb9565b604081016130f08285612b48565b611b286020830184613076565b6040810161310b8285612b48565b611b28602083018461307f565b60208082528101611b288184612b57565b602081016118528284612bb0565b602081016118528284612bb9565b602081016118528284612bcb565b60208082528101611b288184612bd4565b6020808252810161185281612c0c565b6020808252810161185281612c45565b6020808252810161185281612c8d565b6020808252810161185281612cd4565b6020808252810161185281612d0d565b6020808252810161185281612d3f565b6020808252810161185281612d70565b6020808252810161185281612e25565b6020808252810161185281612e4d565b6020808252810161185281612e79565b6020808252810161185281612ea3565b6020808252810161185281612edc565b6020808252810161185281612f2d565b6020808252810161185281612f66565b6020808252810161185281613012565b6020808252810161185281613034565b604081016130d58285612bb9565b606081016132808286612bb9565b61328d6020830185613076565b6129286040830184613076565b60208101611852828461306d565b6040810161310b828561306d565b60208101611852828461307f565b606081016132d28286613076565b6132df6020830185612bb9565b6129286040830184612bb0565b6040810161310b828561307f565b60200190565b5190565b90815260200190565b60006118528261332d565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b63ffffffff1690565b6001600160601b031690565b60006118528261330d565b600061185282613342565b60005b8381101561337f578181015183820152602001613367565b838111156114115750506000910152565b601f01601f191690565b6133a38161330d565b8114610f8257600080fd5b6133a381613318565b6133a38161331d565b6133a381613339565b6133a38161334256fea365627a7a723158205106488d9a89be0ce22f64b9f9df8dcc827be17cfa97576ae53cc71f973f75756c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023c5760003560e01c80638da5cb5b1161013b578063bb533cf2116100b8578063db27ec181161007c578063db27ec181461048e578063dfb267c2146104a1578063e7a324dc146104b4578063f2fde38b146104bc578063f3f19731146104cf5761023c565b8063bb533cf214610443578063bf626ec114610456578063d27569e71461045e578063d8ad326d14610466578063dab6ca441461047b5761023c565b80639929e886116100ff5780639929e88614610410578063a58848c514610418578063adae900214610420578063ae81dfe414610433578063b1724b461461043b5761023c565b80638da5cb5b146103ac5780638f32d59b146103b45780639436e7d4146103bc57806394c2ce58146103dc57806396a590c1146103ef5761023c565b8063429b62e5116101c95780636b6fde0e1161018d5780636b6fde0e1461034d578063765dade9146103605780637ecebe0014610373578063800b64ca1461038657806380f51c12146103995761023c565b8063429b62e5146102f65780635b66a324146103095780635c975abb1461031c5780635e0be6071461032457806368cefccc1461032c5761023c565b8063104932cf11610210578063104932cf1461029c57806317748adc146102a457806320606b70146102b957806327dd1b00146102c15780633827fca5146102e15761023c565b8062073f991461024157806303a18fa31461025f578063054f7d9c1461027457806307392cc014610289575b600080fd5b6102496104e2565b6040516102569190613137565b60405180910390f35b6102676104e8565b6040516102569190613145565b61027c6104f7565b6040516102569190613129565b61027c610297366004612a66565b610505565b61026761051a565b6102ac610529565b60405161025691906132b6565b61024961052e565b6102d46102cf3660046129d5565b610545565b604051610256919061309e565b6102f46102ef36600461294e565b61056b565b005b61027c61030436600461290a565b6107dc565b6102f4610317366004612a66565b6107f1565b61027c6108b7565b6102f46108c0565b61033f61033a366004612a05565b6109d0565b6040516102569291906132a8565b61033f61035b366004612a05565b610a0b565b6102f461036e366004612988565b610a46565b61024961038136600461290a565b610b5a565b6102f4610394366004612af1565b610b6c565b61027c6103a736600461290a565b610beb565b6102d4610c00565b61027c610c0f565b6103cf6103ca366004612a66565b610c33565b604051610256919061329a565b6103cf6103ea3660046129d5565b610c4b565b6104026103fd366004612ad2565b610c6e565b6040516102569291906132ec565b61027c610c9f565b610267610ca8565b61027c61042e36600461290a565b610cb7565b6102d4610ccc565b610249610ce0565b6103cf610451366004612a66565b610ce8565b6102ac610d00565b6102ac610d16565b61046e610d1b565b6040516102569190613118565b6102f4610489366004612af1565b610e9b565b6103cf61049c3660046129d5565b610ef1565b61033f6104af366004612aa2565b610f14565b610249610f49565b6102f46104ca36600461290a565b610f55565b61033f6104dd366004612aa2565b610f85565b60015481565b600d546001600160a01b031681565b601554610100900460ff1681565b60106020526000908152604090205460ff1681565b6013546001600160a01b031681565b600981565b60405161053a90613088565b604051809103902081565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b610573610c0f565b8061058d5750336000908152600f602052604090205460ff165b6105b25760405162461bcd60e51b81526004016105a9906131d4565b60405180910390fd5b601554610100900460ff16156105da5760405162461bcd60e51b81526004016105a990613244565b601354604051637a10f6bf60e11b81526001600160a01b039091169063f421ed7e9061060a90859060040161309e565b60206040518083038186803b15801561062257600080fd5b505afa158015610636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061065a9190810190612a48565b6106765760405162461bcd60e51b81526004016105a990613234565b60008290506000816001600160a01b0316630b97bc866040518163ffffffff1660e01b815260040160206040518083038186803b1580156106b657600080fd5b505afa1580156106ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106ee9190810190612a84565b90506000826001600160a01b03166313d033c06040518163ffffffff1660e01b815260040160206040518083038186803b15801561072b57600080fd5b505afa15801561073f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107639190810190612a84565b9050818101600160005b81156107995761077e888885610fba565b90935090508061078f576000610792565b60015b915061076d565b7f2366e0b6b1af17c0ceed50685c570d519cae11e7faaf007bbe667e94a5ee3cd588886040516107ca9291906130ac565b60405180910390a15050505050505050565b600f6020526000908152604090205460ff1681565b6107f9610c0f565b806108135750336000908152600f602052604090205460ff165b61082f5760405162461bcd60e51b81526004016105a9906131d4565b601554610100900460ff16156108575760405162461bcd60e51b81526004016105a990613244565b600081116108775760405162461bcd60e51b81526004016105a9906131a4565b7f22eba8caa37576c2c857166fc151e8b5bb22942eaef5638da0e96d6156333bee601654826040516108aa929190613264565b60405180910390a1601655565b60155460ff1681565b6108c8610c0f565b6108e45760405162461bcd60e51b81526004016105a9906131d4565b601554610100900460ff161561090c5760405162461bcd60e51b81526004016105a990613244565b6005805460ff191660011790556003546040516370a0823160e01b81527fd8cc4e8d808fe950b07bfffcd83eebf1190cd35ea77fe0c8a7d75a6e9b90e5c1916001600160a01b0316906370a082319061096990309060040161309e565b60206040518083038186803b15801561098157600080fd5b505afa158015610995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109b99190810190612a84565b6040516109c69190613137565b60405180910390a1565b600a60209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b600860209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160601b031682565b610a4e610c0f565b80610a685750336000908152600f602052604090205460ff165b610a845760405162461bcd60e51b81526004016105a9906131d4565b601554610100900460ff1615610aac5760405162461bcd60e51b81526004016105a990613244565b601354604051637a10f6bf60e11b81526001600160a01b039091169063f421ed7e90610adc90869060040161309e565b60206040518083038186803b158015610af457600080fd5b505afa158015610b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b2c9190810190612a48565b610b485760405162461bcd60e51b81526004016105a990613234565b610b53838383610fba565b5050505050565b600c6020526000908152604090205481565b601554610100900460ff1615610b945760405162461bcd60e51b81526004016105a990613244565b336000908152600e602052604090205460ff16610bc35760405162461bcd60e51b81526004016105a9906131d4565b610bcd82336113a0565b610bda8383836001611417565b610be682826001611710565b505050565b60146020526000908152604090205460ff1681565b6000546001600160a01b031690565b600080546001600160a01b0316610c24611773565b6001600160a01b031614905090565b60076020526000908152604090205463ffffffff1681565b600960209081526000928352604080842090915290825290205463ffffffff1681565b600080610c7a83611777565b9250610c8733858561179f565b6000610c93858561180c565b94859003959350505050565b60055460ff1681565b6003546001600160a01b031681565b600e6020526000908152604090205460ff1681565b60055461010090046001600160a01b031681565b63059fa60081565b60126020526000908152604090205463ffffffff1681565b600d54600160a01b90046001600160601b031681565b600a81565b60408051600780825261010082019092526060918291906020820160e08038833901905050905063dab6ca4460e01b81600081518110610d5757fe5b6001600160e01b031990921660209283029190910190910152805163765dade960e01b9082906001908110610d8857fe5b6001600160e01b03199092166020928302919091019091015280516396a590c160e01b9082906002908110610db957fe5b6001600160e01b0319909216602092830291909101909101528051635e0be60760e01b9082906003908110610dea57fe5b6001600160e01b03199092166020928302919091019091015280516316d9a8c960e21b9082906004908110610e1b57fe5b6001600160e01b0319909216602092830291909101909101528051634005b26560e11b9082906005908110610e4c57fe5b6001600160e01b0319909216602092830291909101909101528051633827fca560e01b9082906006908110610e7d57fe5b6001600160e01b031990921660209283029190910190910152905090565b601554610100900460ff1615610ec35760405162461bcd60e51b81526004016105a990613244565b610ecc82611777565b9150610ed882336113a0565b610ee58383836000611417565b610be682826000611710565b600b60209081526000928352604080842090915290825290205463ffffffff1681565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b60405161053a90613093565b610f5d610c0f565b610f795760405162461bcd60e51b81526004016105a9906131d4565b610f8281611858565b50565b601160209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6000806001600160a01b038416610fe35760405162461bcd60e51b81526004016105a990613224565b84610fec61285e565b6040518060c00160405280886001600160a01b03168152602001836001600160a01b0316630b97bc866040518163ffffffff1660e01b815260040160206040518083038186803b15801561103f57600080fd5b505afa158015611053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110779190810190612a84565b8152602001836001600160a01b031663c24a0f8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b557600080fd5b505afa1580156110c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110ed9190810190612a84565b8152602001836001600160a01b03166313d033c06040518163ffffffff1660e01b815260040160206040518083038186803b15801561112b57600080fd5b505afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111639190810190612a84565b8152602001836001600160a01b0316630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a157600080fd5b505afa1580156111b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111d99190810190612a84565b8152602001836001600160a01b031663a3e676106040518163ffffffff1660e01b815260040160206040518083038186803b15801561121757600080fd5b505afa15801561122b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061124f9190810190612930565b6001600160a01b031690526040810151606082015160208301519293509091018087101561127d578061127f565b865b9650600060016016540362127500028801905060008184106112a157816112a3565b835b9050885b8181116112e65760006112be8d83600143036118d9565b90506001600160601b038116156112db576112db81838e8a611b2f565b5062127500016112a7565b508381101561134a576212750081019750336001600160a01b03167ff1cfeb0937231950f2400ba429108263d3af23c90f72599bf13148e6332fe06d8b8a6040516113329291906130c7565b60405180910390a25060019550611398945050505050565b336001600160a01b03167f9436f4ed1fe17491f53c6d68a08b946bc9884039fccd83e8190203e15eff55bf8b604051611383919061309e565b60405180910390a25091955060009450505050505b935093915050565b6001600160a01b0381166000818152600b60209081526040808320868452825280832054938352600a8252808320868452825280832060001963ffffffff95861690810186168552925290912054909116431415806114115760405162461bcd60e51b81526004016105a990613214565b50505050565b836001600160601b03166001148015611434575061143433611c93565b1561143e57611411565b61144933858561179f565b6001600160a01b03821661145b573391505b6114658385611d6c565b611470338486611de6565b61147933611c93565b15611488576114888385611e85565b3360009081526004602090815260408083208684529091529020546114b7906001600160a01b03168486611eff565b82421080156114c9575060055460ff16155b80156114d3575080155b156116165760006114e4858561180c565b948590039490506001600160601b0381161561161457600d546001600160a01b03166115225760405162461bcd60e51b81526004016105a990613254565b600354600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926115589291169085906004016130e2565b602060405180830381600087803b15801561157257600080fd5b505af1158015611586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115aa9190810190612a48565b50600d5460035460405163abe979e160e01b81526001600160a01b039283169263abe979e1926115e19291169085906004016130fd565b600060405180830381600087803b1580156115fb57600080fd5b505af115801561160f573d6000803e3d6000fd5b505050505b505b60035460405163a9059cbb60e01b81526000916001600160a01b03169063a9059cbb9061164990869089906004016130e2565b602060405180830381600087803b15801561166357600080fd5b505af1158015611677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061169b9190810190612a48565b9050806116ba5760405162461bcd60e51b81526004016105a9906131b4565b826001600160a01b0316336001600160a01b03167f667b6c8ed8622dae7927a8b0837455098e32037a0181f9a2e21b9b72fead6cc7878786604051611701939291906132c4565b60405180910390a35050505050565b61171933611c93565b15610be6576000611733846212750063ffffffff611fa016565b905081806117415750804210155b156114115760006117563383600143036118d9565b90506001600160601b03811615610b5357610b5381838686611417565b3390565b60008061178383611fc5565b90508281146117955762127500810192505b829150505b919050565b6000826001600160601b0316116117c85760405162461bcd60e51b81526004016105a9906131c4565b60006117d88483600143036118d9565b9050806001600160601b0316836001600160601b031611156114115760405162461bcd60e51b81526004016105a990613184565b60008061181842611fc5565b905060006118268483612005565b600d546064600a6001600160601b03600160a01b90930483169390930288028216929092041604925050505b92915050565b6001600160a01b03811661187e5760405162461bcd60e51b81526004016105a990613174565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006118e361213b565b82106119015760405162461bcd60e51b81526004016105a9906131f4565b61190a83611777565b6001600160a01b0385166000908152600b6020908152604080832084845290915290205490935063ffffffff1680611946576000915050611b28565b6001600160a01b0385166000908152600a60209081526040808320878452825280832063ffffffff6000198601811685529252909120541683106119d2576001600160a01b0385166000908152600a6020908152604080832087845282528083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050611b28565b6001600160a01b0385166000908152600a60209081526040808320878452825280832083805290915290205463ffffffff16831015611a15576000915050611b28565b600060001982015b8163ffffffff168163ffffffff161115611ae057600282820363ffffffff16048103611a476128a6565b506001600160a01b0388166000908152600a602090815260408083208a8452825280832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b03169181019190915290871415611abb57602001519450611b289350505050565b805163ffffffff16871115611ad257819350611ad9565b6001820392505b5050611a1d565b506001600160a01b0386166000908152600a60209081526040808320888452825280832063ffffffff909416835292905220546001600160601b03600160201b909104169150505b9392505050565b8051611b3a84611fc5565b9350611b4781868661179f565b611b518486611d6c565b611b5c818587611de6565b611b668486611e85565b6001600160a01b038082166000908152600460209081526040808320888452909152902054611b9791168587611eff565b60035460405163a9059cbb60e01b81526000916001600160a01b03169063a9059cbb90611bca9087908a906004016130e2565b602060405180830381600087803b158015611be457600080fd5b505af1158015611bf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c1c9190810190612a48565b905080611c3b5760405162461bcd60e51b81526004016105a9906131b4565b836001600160a01b0316826001600160a01b03167f667b6c8ed8622dae7927a8b0837455098e32037a0181f9a2e21b9b72fead6cc788886001604051611c83939291906132c4565b60405180910390a3505050505050565b6013546000908190833f906001600160a01b031615611d2f57601354604051633288436360e21b81526001600160a01b039091169063ca210d8c90611cdc90879060040161309e565b60206040518083038186803b158015611cf457600080fd5b505afa158015611d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d2c9190810190612a48565b91505b8115611d405760019250505061179a565b60008181526010602052604090205460ff1615611d625760019250505061179a565b5060009392505050565b6000828152600760209081526040808320546006835281842063ffffffff91821660001981019092168552835281842054825180840190935260048352634350313160e01b9383019390935292600160201b9092046001600160601b03169190611dd9908390869061213f565b9050610b5385848361217e565b6001600160a01b0383166000818152600b60209081526040808320868452825280832054938352600a8252808320868452825280832063ffffffff94851660001981019095168452825280832054815180830190925260048252634350303560e01b92820192909252600160201b9091046001600160601b03169190611e6f908390869061213f565b9050611e7d868685846122be565b505050505050565b6000828152601260209081526040808320546011835281842063ffffffff918216600019810190921685528352818420548251808401909352600483526321a8181960e11b9383019390935292600160201b9092046001600160601b03169190611ef2908390869061213f565b9050610b53858483612440565b6001600160a01b038316600081815260096020908152604080832086845282528083205493835260088252808320868452825280832063ffffffff94851660001981019095168452909152812054600160201b90046001600160601b0390811691908416821115611f9457611f91828560405180604001604052806004815260200163086a060760e31b81525061213f565b90505b611e7d86868584612580565b600082820183811015611b285760405162461bcd60e51b81526004016105a990613194565b60015460009080831015611feb5760405162461bcd60e51b81526004016105a990613164565b600062127500828503046212750002919091019392505050565b6000818310156120275760405162461bcd60e51b81526004016105a9906131e4565b81830363059fa60081111561204e5760405162461bcd60e51b81526004016105a990613204565b6000620151808263059fa600036001600160601b03168161206b57fe5b049050612132600a621232106001600160601b03166120f1600a6009026120c0621232108788026040518060400160405280601081526020016f77656967687420756e646572666c6f7760801b81525061213f565b60405180604001604052806013815260200172776569676874206d756c206f766572666c6f7760681b815250612795565b6001600160601b03168161210157fe5b04604051806040016040528060128152602001711bdd995c999b1bddc81bdb881dd95a59da1d60721b8152506127fc565b95945050505050565b4390565b6000836001600160601b0316836001600160601b0316111582906121765760405162461bcd60e51b81526004016105a99190613153565b505050900390565b60006121a6436040518060400160405280600481526020016321a8189960e11b81525061282f565b905060008363ffffffff161180156121e55750600084815260066020908152604080832063ffffffff6000198801811685529252909120548282169116145b15612234576000848152600660209081526040808320600019870163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b03851602179055611411565b60408051808201825263ffffffff92831681526001600160601b0393841660208083019182526000888152600682528481208887168252825284812093518454935163ffffffff1994851691881691909117600160201b600160801b031916600160201b919098160296909617909255958452600790529091208054909316600190920116179055565b60006122e6436040518060400160405280600481526020016321a8181b60e11b81525061282f565b905060008363ffffffff1611801561233757506001600160a01b0385166000908152600a60209081526040808320878452825280832063ffffffff6000198801811685529252909120548282169116145b15612398576001600160a01b0385166000908152600a602090815260408083208784528252808320600019870163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b03851602179055610b53565b60408051808201825263ffffffff92831681526001600160601b0393841660208083019182526001600160a01b03989098166000818152600a8a528481208982528a5284812088871682528a52848120935184549351909716600160201b02600160201b600160801b031997871663ffffffff19948516179790971696909617909255908452600b875281842095845294909552939020805460019092019093169116179055565b600061246843604051806040016040528060048152602001634350303360e01b81525061282f565b905060008363ffffffff161180156124a75750600084815260116020908152604080832063ffffffff6000198801811685529252909120548282169116145b156124f6576000848152601160209081526040808320600019870163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b03851602179055611411565b60408051808201825263ffffffff92831681526001600160601b0393841660208083019182526000888152601182528481208887168252825284812093518454935163ffffffff1994851691881691909117600160201b600160801b031916600160201b919098160296909617909255958452601290529091208054909316600190920116179055565b60006125a843604051806040016040528060048152602001634350303960e01b81525061282f565b6001600160a01b03861660009081526008602090815260408083208884528252808320600019880163ffffffff9081168552925290912054919250600160201b9091046001600160601b03169084161580159061263e57506001600160a01b0386166000908152600860209081526040808320888452825280832063ffffffff6000198901811685529252909120548382169116145b1561269f576001600160a01b03861660009081526008602090815260408083208884528252808320600019880163ffffffff16845290915290208054600160201b600160801b031916600160201b6001600160601b03861602179055612748565b60408051808201825263ffffffff80851682526001600160601b0380871660208085019182526001600160a01b038c166000818152600883528781208d825283528781208c871682528352878120965187549451909516600160201b02600160201b600160801b031995871663ffffffff19958616179590951694909417909555938252600984528482208a835290935292909220805460018801909316929091169190911790555b856001600160a01b03167fc7b38fb25352e6f351f57e2c922f84db5c97e09a6246bbe1d2eedfcdb01c4c6286838660405161278593929190613272565b60405180910390a2505050505050565b60006001600160601b0384166127ad57506000611b28565b8383026001600160601b0380851690808716908316816127c957fe5b046001600160601b03161483906127f35760405162461bcd60e51b81526004016105a99190613153565b50949350505050565b6000838301826001600160601b0380871690831610156127f35760405162461bcd60e51b81526004016105a99190613153565b600081600160201b84106128565760405162461bcd60e51b81526004016105a99190613153565b509192915050565b6040518060c0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b604080518082019091526000808252602082015290565b80356118528161339a565b80516118528161339a565b8051611852816133ae565b8035611852816133b7565b8051611852816133b7565b8035611852816133c0565b8035611852816133c9565b60006020828403121561291c57600080fd5b600061292884846128bd565b949350505050565b60006020828403121561294257600080fd5b600061292884846128c8565b6000806040838503121561296157600080fd5b600061296d85856128bd565b925050602061297e858286016128bd565b9150509250929050565b60008060006060848603121561299d57600080fd5b60006129a986866128bd565b93505060206129ba868287016128bd565b92505060406129cb868287016128de565b9150509250925092565b600080604083850312156129e857600080fd5b60006129f485856128bd565b925050602061297e858286016128de565b600080600060608486031215612a1a57600080fd5b6000612a2686866128bd565b9350506020612a37868287016128de565b92505060406129cb868287016128f4565b600060208284031215612a5a57600080fd5b600061292884846128d3565b600060208284031215612a7857600080fd5b600061292884846128de565b600060208284031215612a9657600080fd5b600061292884846128e9565b60008060408385031215612ab557600080fd5b6000612ac185856128de565b925050602061297e858286016128f4565b60008060408385031215612ae557600080fd5b60006129f485856128ff565b600080600060608486031215612b0657600080fd5b6000612b1286866128ff565b9350506020612b23868287016128de565b92505060406129cb868287016128bd565b6000612b408383612bc2565b505060200190565b612b518161330d565b82525050565b6000612b6282613300565b612b6c8185613304565b9350612b77836132fa565b8060005b83811015612ba5578151612b8f8882612b34565b9750612b9a836132fa565b925050600101612b7b565b509495945050505050565b612b5181613318565b612b518161331d565b612b5181613320565b612b518161334e565b6000612bdf82613300565b612be98185613304565b9350612bf9818560208601613364565b612c0281613390565b9093019392505050565b6000612c19601d83613304565b7f74696d657374616d70203c20636f6e7472616374206372656174696f6e000000815260200192915050565b6000612c52602683613304565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015260400192915050565b6000612c9a602583613304565b7f5374616b696e673a3a77697468647261773a206e6f7420656e6f7567682062618152646c616e636560d81b602082015260400192915050565b6000612ce1601b83613304565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b6000612d1a601683613304565b75496e76616c6964206d617820697465726174696f6e7360501b815260200192915050565b6000612d4c601583613304565b74151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b815260200192915050565b6000612d7d602883613304565b7f416d6f756e74206f6620746f6b656e7320746f207769746864726177206d7573815267074206265203e20360c41b602082015260400192915050565b6000612dc760438361179a565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000612e32600c83613304565b6b1d5b985d5d1a1bdc9a5e995960a21b815260200192915050565b6000612e5a601083613304565b6f64617465203c2073746172744461746560801b815260200192915050565b6000612e86600e83613304565b6d1b9bdd0819195d195c9b5a5b995960921b815260200192915050565b6000612eb0601d83613304565b7f72656d61696e696e672074696d65203e206d6178206475726174696f6e000000815260200192915050565b6000612ee9602f83613304565b7f63616e6e6f74206265206d696e656420696e207468652073616d6520626c6f6381526e6b206173206c617374207374616b6560881b602082015260400192915050565b6000612f3a601883613304565b7f7265636569766572206164647265737320696e76616c69640000000000000000815260200192915050565b6000612f73601983613304565b7f4f6e6c79207465616d2076657374696e6720616c6c6f77656400000000000000815260200192915050565b6000612fac604b8361179a565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206c6f636b446174652c75696e74323536206e6f6e63652c75696e7460208201526a323536206578706972792960a81b6040820152604b0192915050565b600061301f600683613304565b651c185d5cd95960d21b815260200192915050565b6000613041601d83613304565b7f46656553686172696e672061646472657373207761736e277420736574000000815260200192915050565b612b5181613339565b612b5181613359565b612b5181613342565b600061185282612dba565b600061185282612f9f565b602081016118528284612b48565b604081016130ba8285612b48565b611b286020830184612b48565b604081016130d58285612b48565b611b286020830184612bb9565b604081016130f08285612b48565b611b286020830184613076565b6040810161310b8285612b48565b611b28602083018461307f565b60208082528101611b288184612b57565b602081016118528284612bb0565b602081016118528284612bb9565b602081016118528284612bcb565b60208082528101611b288184612bd4565b6020808252810161185281612c0c565b6020808252810161185281612c45565b6020808252810161185281612c8d565b6020808252810161185281612cd4565b6020808252810161185281612d0d565b6020808252810161185281612d3f565b6020808252810161185281612d70565b6020808252810161185281612e25565b6020808252810161185281612e4d565b6020808252810161185281612e79565b6020808252810161185281612ea3565b6020808252810161185281612edc565b6020808252810161185281612f2d565b6020808252810161185281612f66565b6020808252810161185281613012565b6020808252810161185281613034565b604081016130d58285612bb9565b606081016132808286612bb9565b61328d6020830185613076565b6129286040830184613076565b60208101611852828461306d565b6040810161310b828561306d565b60208101611852828461307f565b606081016132d28286613076565b6132df6020830185612bb9565b6129286040830184612bb0565b6040810161310b828561307f565b60200190565b5190565b90815260200190565b60006118528261332d565b151590565b90565b6001600160e01b03191690565b6001600160a01b031690565b63ffffffff1690565b6001600160601b031690565b60006118528261330d565b600061185282613342565b60005b8381101561337f578181015183820152602001613367565b838111156114115750506000910152565b601f01601f191690565b6133a38161330d565b8114610f8257600080fd5b6133a381613318565b6133a38161331d565b6133a381613339565b6133a38161334256fea365627a7a723158205106488d9a89be0ce22f64b9f9df8dcc827be17cfa97576ae53cc71f973f75756c6578706572696d656e74616cf564736f6c63430005110040",
  "devdoc": {
    "methods": {
      "cancelTeamVesting(address,address,uint256)": {
        "params": {
          "receiver": "The receiving address.",
          "startFrom": "The start value for the iterations.",
          "vesting": "The vesting address."
        }
      },
      "getWithdrawAmounts(uint96,uint256)": {
        "params": {
          "amount": "The number of tokens to withdraw.",
          "until": "The date until which the tokens were staked. Adjusted to the next valid lock date, if necessary."
        },
        "return": "Amount to withraw and penalty amount"
      },
      "governanceWithdraw(uint96,uint256,address)": {
        "details": "Can be invoked only by whitelisted contract passed to governanceWithdrawVesting",
        "params": {
          "amount": "The number of tokens to withdraw.",
          "receiver": "The receiver of the tokens. If not specified, send to the msg.sender",
          "until": "The date until which the tokens were staked."
        }
      },
      "governanceWithdrawVesting(address,address)": {
        "details": "This function is dedicated only to support backward compatibility for sovryn ecosystem that has been implementing this staking contract.Sovryn protocol will use the cancelTeamVesting function for the withdrawal moving forward. https://github.com/DistributedCollective/Sovryn-smart-contracts/blob/4bbfe5bd0311ca71e4ef0e3af810d3791d8e4061/contracts/governance/Staking/modules/StakingWithdrawModule.sol#L78",
        "params": {
          "receiver": "The receiver of the tokens. If not specified, send to the msg.sender",
          "vesting": "The address of Vesting contract."
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "setMaxVestingWithdrawIterations(uint256)": {
        "details": "set max withdraw iterations.",
        "params": {
          "newMaxIterations": "new max iterations value."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlockAllTokens()": {
        "details": "Last resort."
      },
      "withdraw(uint96,uint256,address)": {
        "details": "If until is not a valid lock date, the next lock date after until is used.",
        "params": {
          "amount": "The number of tokens to withdraw.",
          "receiver": "The receiver of the tokens. If not specified, send to the msg.sender",
          "until": "The date until which the tokens were staked."
        }
      }
    },
    "title": "Staking withdrawal functionality module*"
  },
  "userdoc": {
    "methods": {
      "cancelTeamVesting(address,address,uint256)": {
        "notice": "Governance withdraw vesting directly through staking contract. This direct withdraw vesting solves the out of gas issue when there are too many iterations when withdrawing. This function only allows cancelling vesting contract of the TeamVesting type."
      },
      "getWithdrawAmounts(uint96,uint256)": {
        "notice": "Get available and punished amount for withdrawing."
      },
      "governanceWithdraw(uint96,uint256,address)": {
        "notice": "Withdraw the given amount of tokens."
      },
      "governanceWithdrawVesting(address,address)": {
        "notice": "Withdraw tokens for vesting contract."
      },
      "unlockAllTokens()": {
        "notice": "Allow the owner to unlock all tokens in case the staking contract is going to be replaced Note: Not reversible on purpose. once unlocked, everything is unlocked. The owner should not be able to just quickly unlock to withdraw his own tokens and lock again."
      },
      "withdraw(uint96,uint256,address)": {
        "notice": "Withdraw the given amount of tokens if they are unlocked."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54807,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23799,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "kickoffTS",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 23802,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 23804,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "SOVToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)33453"
      },
      {
        "astId": 23810,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "delegates",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 23813,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "allUnlocked",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 23825,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "newStakingContract",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 23836,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "totalStakingCheckpoints",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)23830_storage))"
      },
      {
        "astId": 23840,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "numTotalStakingCheckpoints",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 23848,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "delegateStakingCheckpoints",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)23830_storage)))"
      },
      {
        "astId": 23854,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "numDelegateStakingCheckpoints",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint32))"
      },
      {
        "astId": 23862,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "userStakingCheckpoints",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)23830_storage)))"
      },
      {
        "astId": 23868,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "numUserStakingCheckpoints",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint32))"
      },
      {
        "astId": 23872,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "nonces",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23874,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "feeSharing",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IFeeSharingCollector)17012"
      },
      {
        "astId": 23877,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "weightScaling",
        "offset": 20,
        "slot": "13",
        "type": "t_uint96"
      },
      {
        "astId": 23881,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "vestingWhitelist",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 23885,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "admins",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 23889,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "vestingCodeHashes",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 23895,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "vestingCheckpoints",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)23830_storage))"
      },
      {
        "astId": 23899,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "numVestingCheckpoints",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 23901,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "vestingRegistryLogic",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IVestingRegistry)26194"
      },
      {
        "astId": 23905,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "pausers",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 23907,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "paused",
        "offset": 0,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 23909,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "frozen",
        "offset": 1,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 23911,
        "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
        "label": "maxVestingWithdrawIterations",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)33453": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFeeSharingCollector)17012": {
        "encoding": "inplace",
        "label": "contract IFeeSharingCollector",
        "numberOfBytes": "20"
      },
      "t_contract(IVestingRegistry)26194": {
        "encoding": "inplace",
        "label": "contract IVestingRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)23830_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint32 => struct StakingStorageShared.Checkpoint)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)23830_storage))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint32))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint32)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Checkpoint)23830_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint32 => struct StakingStorageShared.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)23830_storage)"
      },
      "t_mapping(t_uint256,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)23830_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct StakingStorageShared.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)23830_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)23830_storage": {
        "encoding": "inplace",
        "label": "struct StakingStorageShared.Checkpoint",
        "members": [
          {
            "astId": 23827,
            "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 23829,
            "contract": "contracts/governance/Staking/modules/StakingWithdrawModule.sol:StakingWithdrawModule",
            "label": "stake",
            "offset": 4,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}