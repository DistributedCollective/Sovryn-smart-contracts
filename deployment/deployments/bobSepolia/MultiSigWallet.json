{
  "address": "0x010B1d4D75d840981906e04acDbbF51D47689DfA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Confirmation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Execution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "ExecutionFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerRemoval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "RequirementChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Revocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Submission",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAX_OWNER_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "name": "changeRequirement",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "confirmTransaction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "confirmations",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "executeTransaction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmationCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmations",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_confirmations",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_transactionIds",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "isConfirmed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "replaceOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "revokeConfirmation",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "submitTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "transactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf06f77d20484dbd0ca8ad1c935241e8e31c6f4e0799b2dd84ce059a051b45fea",
  "receipt": {
    "to": null,
    "from": "0xCF311E7375083b9513566a47B9f3e93F1FcdCfBF",
    "contractAddress": "0x010B1d4D75d840981906e04acDbbF51D47689DfA",
    "transactionIndex": 1,
    "gasUsed": "2009274",
    "logsBloom": "0x
    "blockHash": "0x7b180980ff80c963f45bc50bd617c01b8a23ea6ff8b569ca2422304bf0c29895",
    "transactionHash": "0xf06f77d20484dbd0ca8ad1c935241e8e31c6f4e0799b2dd84ce059a051b45fea",
    "logs": [],
    "blockNumber": 237356,
    "cumulativeGasUsed": "2059763",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x52e8f03e7c9c1Ef320ff7C31dB78EAead18E5F85",
      "0x9E0816a71B53ca67201a5088df960fE90910DE55",
      "0xEaBB83a1cEFc5f50C83BC4252C618d3294152A86",
      "0x27D55f5668ef4438635bdce0ADCA083507E77752",
      "0x2bD2201BFE156A71EB0D02837172ffc237218505",
      "0x4C3d3505d34213751c4b4d621cB6bDe7E664E222",
      "0x832E1bd30d037d0327F2A0447eD44FB952A9a043",
      "0xb3f24756322f730c484949C01B7Dd55502365287",
      "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
      "0x511893483DCc1A9A98f153ec8298b63BE010A99f",
      "0x1CEE82EEd89Bd5Be5bf2507a92a755dcF1D8e8dc",
      "0x97A56129A3E6b0c2ce256dbe3F70831661a4e1bc",
      "0x8C9143221F2b72Fcef391893c3a02Cf0fE84f50b",
      "0xFEe171A152C02F336021fb9E79b4fAc2304a9E7E",
      "0xeb771FF87FBd594c7647D593EfE9B9a10ed30361"
    ],
    2
  ],
  "numDeployments": 1,
  "solcInputHash": "e50aed18b0e95a35792f2a6b6ab868cc",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stefan George - <stefan.george@consensys.net>\",\"methods\":{\"addOwner(address)\":{\"params\":{\"owner\":\"Address of new owner.\"}},\"changeRequirement(uint256)\":{\"params\":{\"_required\":\"Number of required confirmations.\"}},\"confirmTransaction(uint256)\":{\"params\":{\"transactionId\":\"Transaction ID.\"}},\"constructor\":{\"params\":{\"_owners\":\"List of initial owners.\",\"_required\":\"Number of required confirmations.\"}},\"executeTransaction(uint256)\":{\"params\":{\"transactionId\":\"Transaction ID.\"}},\"getConfirmationCount(uint256)\":{\"params\":{\"transactionId\":\"Transaction ID.\"},\"return\":\"Number of confirmations.\"},\"getConfirmations(uint256)\":{\"params\":{\"transactionId\":\"Transaction ID.\"},\"return\":\"Returns array of owner addresses.\"},\"getOwners()\":{\"return\":\"List of owner addresses.\"},\"getTransactionCount(bool,bool)\":{\"params\":{\"executed\":\"Include executed transactions.\",\"pending\":\"Include pending transactions.\"},\"return\":\"Total number of transactions after filters are applied.\"},\"getTransactionIds(uint256,uint256,bool,bool)\":{\"params\":{\"executed\":\"Include executed transactions.\",\"from\":\"Index start position of transaction array.\",\"pending\":\"Include pending transactions.\",\"to\":\"Index end position of transaction array.\"},\"return\":\"Returns array of transaction IDs.\"},\"isConfirmed(uint256)\":{\"params\":{\"transactionId\":\"Transaction ID.\"},\"return\":\"Confirmation status.\"},\"removeOwner(address)\":{\"params\":{\"owner\":\"Address of owner.\"}},\"replaceOwner(address,address)\":{\"params\":{\"newOwner\":\"Address of new owner.\",\"owner\":\"Address of owner to be replaced.\"}},\"revokeConfirmation(uint256)\":{\"params\":{\"transactionId\":\"Transaction ID.\"}},\"submitTransaction(address,uint256,bytes)\":{\"params\":{\"data\":\"Transaction data payload.\",\"destination\":\"Transaction target address.\",\"value\":\"Transaction ether value.\"},\"return\":\"Returns transaction ID.\"}},\"title\":\"Multisignature wallet - Allows multiple parties to agree on  transactions before execution.\"},\"userdoc\":{\"methods\":{\"addOwner(address)\":{\"notice\":\"Allows to add a new owner. Transaction has to be sent by wallet.\"},\"changeRequirement(uint256)\":{\"notice\":\"Allows to change the number of required confirmations. Transaction has to be sent by wallet.\"},\"confirmTransaction(uint256)\":{\"notice\":\"Allows an owner to confirm a transaction.\"},\"constructor\":\"Contract constructor sets initial owners and required number  of confirmations.\",\"executeTransaction(uint256)\":{\"notice\":\"Allows anyone to execute a confirmed transaction.\"},\"getConfirmationCount(uint256)\":{\"notice\":\"Get the number of confirmations of a transaction.\"},\"getConfirmations(uint256)\":{\"notice\":\"Get the array with owner addresses, which confirmed transaction.\"},\"getOwners()\":{\"notice\":\"Get the list of owners.\"},\"getTransactionCount(bool,bool)\":{\"notice\":\"Get the total number of transactions after filers are applied.\"},\"getTransactionIds(uint256,uint256,bool,bool)\":{\"notice\":\"Get the list of transaction IDs in defined range.\"},\"isConfirmed(uint256)\":{\"notice\":\"Returns the confirmation status of a transaction.\"},\"removeOwner(address)\":{\"notice\":\"Allows to remove an owner. Transaction has to be sent by wallet.\"},\"replaceOwner(address,address)\":{\"notice\":\"Allows to replace an owner with a new owner. Transaction has  to be sent by wallet.\"},\"revokeConfirmation(uint256)\":{\"notice\":\"Allows an owner to revoke a confirmation for a transaction.\"},\"submitTransaction(address,uint256,bytes)\":{\"notice\":\"Allows an owner to submit and confirm a transaction.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/multisig/MultiSigWallet.sol\":\"MultiSigWallet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=foundry/lib/forge-std/lib/ds-test/src/\",\":forge-std/=foundry/lib/forge-std/src/\"]},\"sources\":{\"contracts/multisig/MultiSigWallet.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Multisignature wallet - Allows multiple parties to agree on\\n *   transactions before execution.\\n *\\n * @author Stefan George - <stefan.george@consensys.net>\\n * */\\ncontract MultiSigWallet {\\n    /*\\n     *  Events\\n     */\\n    event Confirmation(address indexed sender, uint256 indexed transactionId);\\n    event Revocation(address indexed sender, uint256 indexed transactionId);\\n    event Submission(uint256 indexed transactionId);\\n    event Execution(uint256 indexed transactionId);\\n    event ExecutionFailure(uint256 indexed transactionId);\\n    event Deposit(address indexed sender, uint256 value);\\n    event OwnerAddition(address indexed owner);\\n    event OwnerRemoval(address indexed owner);\\n    event RequirementChange(uint256 required);\\n\\n    /*\\n     *  Constants\\n     */\\n    uint256 public constant MAX_OWNER_COUNT = 50;\\n\\n    /*\\n     *  Storage\\n     */\\n    mapping(uint256 => Transaction) public transactions;\\n    mapping(uint256 => mapping(address => bool)) public confirmations;\\n    mapping(address => bool) public isOwner;\\n    address[] public owners;\\n    uint256 public required;\\n    uint256 public transactionCount;\\n\\n    struct Transaction {\\n        address destination;\\n        uint256 value;\\n        bytes data;\\n        bool executed;\\n    }\\n\\n    /*\\n     *  Modifiers\\n     */\\n    modifier onlyWallet() {\\n        require(msg.sender == address(this));\\n        _;\\n    }\\n\\n    modifier ownerDoesNotExist(address owner) {\\n        require(!isOwner[owner]);\\n        _;\\n    }\\n\\n    modifier ownerExists(address owner) {\\n        require(isOwner[owner]);\\n        _;\\n    }\\n\\n    modifier transactionExists(uint256 transactionId) {\\n        require(transactions[transactionId].destination != address(0));\\n        _;\\n    }\\n\\n    modifier confirmed(uint256 transactionId, address owner) {\\n        require(confirmations[transactionId][owner]);\\n        _;\\n    }\\n\\n    modifier notConfirmed(uint256 transactionId, address owner) {\\n        require(!confirmations[transactionId][owner]);\\n        _;\\n    }\\n\\n    modifier notExecuted(uint256 transactionId) {\\n        require(!transactions[transactionId].executed);\\n        _;\\n    }\\n\\n    modifier notNull(address _address) {\\n        require(_address != address(0));\\n        _;\\n    }\\n\\n    modifier validRequirement(uint256 ownerCount, uint256 _required) {\\n        require(\\n            ownerCount <= MAX_OWNER_COUNT &&\\n                _required <= ownerCount &&\\n                _required != 0 &&\\n                ownerCount != 0\\n        );\\n        _;\\n    }\\n\\n    /// @notice Fallback function allows to deposit ether.\\n    function() external payable {\\n        if (msg.value > 0) emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    /*\\n     * Public functions\\n     */\\n\\n    /**\\n     * @notice Contract constructor sets initial owners and required number\\n     *   of confirmations.\\n     *\\n     * @param _owners List of initial owners.\\n     * @param _required Number of required confirmations.\\n     * */\\n    constructor(\\n        address[] memory _owners,\\n        uint256 _required\\n    ) public validRequirement(_owners.length, _required) {\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            require(!isOwner[_owners[i]] && _owners[i] != address(0));\\n            isOwner[_owners[i]] = true;\\n        }\\n        owners = _owners;\\n        required = _required;\\n    }\\n\\n    /**\\n     * @notice Allows to add a new owner. Transaction has to be sent by wallet.\\n     * @param owner Address of new owner.\\n     * */\\n    function addOwner(\\n        address owner\\n    )\\n        public\\n        onlyWallet\\n        ownerDoesNotExist(owner)\\n        notNull(owner)\\n        validRequirement(owners.length + 1, required)\\n    {\\n        isOwner[owner] = true;\\n        owners.push(owner);\\n        emit OwnerAddition(owner);\\n    }\\n\\n    /**\\n     * @notice Allows to remove an owner. Transaction has to be sent by wallet.\\n     * @param owner Address of owner.\\n     * */\\n    function removeOwner(address owner) public onlyWallet ownerExists(owner) {\\n        isOwner[owner] = false;\\n        for (uint256 i = 0; i < owners.length - 1; i++)\\n            if (owners[i] == owner) {\\n                owners[i] = owners[owners.length - 1];\\n                break;\\n            }\\n        owners.length -= 1;\\n        if (required > owners.length) changeRequirement(owners.length);\\n        emit OwnerRemoval(owner);\\n    }\\n\\n    /**\\n     * @notice Allows to replace an owner with a new owner. Transaction has\\n     *   to be sent by wallet.\\n     *\\n     * @param owner Address of owner to be replaced.\\n     * @param newOwner Address of new owner.\\n     * */\\n    function replaceOwner(\\n        address owner,\\n        address newOwner\\n    ) public onlyWallet ownerExists(owner) ownerDoesNotExist(newOwner) {\\n        for (uint256 i = 0; i < owners.length; i++)\\n            if (owners[i] == owner) {\\n                owners[i] = newOwner;\\n                break;\\n            }\\n        isOwner[owner] = false;\\n        isOwner[newOwner] = true;\\n        emit OwnerRemoval(owner);\\n        emit OwnerAddition(newOwner);\\n    }\\n\\n    /**\\n     * @notice Allows to change the number of required confirmations.\\n     * Transaction has to be sent by wallet.\\n     *\\n     * @param _required Number of required confirmations.\\n     * */\\n    function changeRequirement(\\n        uint256 _required\\n    ) public onlyWallet validRequirement(owners.length, _required) {\\n        required = _required;\\n        emit RequirementChange(_required);\\n    }\\n\\n    /**\\n     * @notice Allows an owner to submit and confirm a transaction.\\n     *\\n     * @param destination Transaction target address.\\n     * @param value Transaction ether value.\\n     * @param data Transaction data payload.\\n     *\\n     * @return Returns transaction ID.\\n     * */\\n    function submitTransaction(\\n        address destination,\\n        uint256 value,\\n        bytes memory data\\n    ) public returns (uint256 transactionId) {\\n        transactionId = addTransaction(destination, value, data);\\n        confirmTransaction(transactionId);\\n    }\\n\\n    /**\\n     * @notice Allows an owner to confirm a transaction.\\n     * @param transactionId Transaction ID.\\n     * */\\n    function confirmTransaction(\\n        uint256 transactionId\\n    )\\n        public\\n        ownerExists(msg.sender)\\n        transactionExists(transactionId)\\n        notConfirmed(transactionId, msg.sender)\\n    {\\n        confirmations[transactionId][msg.sender] = true;\\n        emit Confirmation(msg.sender, transactionId);\\n        executeTransaction(transactionId);\\n    }\\n\\n    /**\\n     * @notice Allows an owner to revoke a confirmation for a transaction.\\n     * @param transactionId Transaction ID.\\n     * */\\n    function revokeConfirmation(\\n        uint256 transactionId\\n    )\\n        public\\n        ownerExists(msg.sender)\\n        confirmed(transactionId, msg.sender)\\n        notExecuted(transactionId)\\n    {\\n        confirmations[transactionId][msg.sender] = false;\\n        emit Revocation(msg.sender, transactionId);\\n    }\\n\\n    /**\\n     * @notice Allows anyone to execute a confirmed transaction.\\n     * @param transactionId Transaction ID.\\n     * */\\n    function executeTransaction(\\n        uint256 transactionId\\n    )\\n        public\\n        ownerExists(msg.sender)\\n        confirmed(transactionId, msg.sender)\\n        notExecuted(transactionId)\\n    {\\n        if (isConfirmed(transactionId)) {\\n            Transaction storage txn = transactions[transactionId];\\n            txn.executed = true;\\n            if (external_call(txn.destination, txn.value, txn.data.length, txn.data))\\n                emit Execution(transactionId);\\n            else {\\n                emit ExecutionFailure(transactionId);\\n                txn.executed = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Low level transaction execution.\\n     *\\n     * @dev Call has been separated into its own function in order to\\n     *   take advantage of the Solidity's code generator to produce a\\n     *   loop that copies tx.data into memory.\\n     *\\n     * @param destination The address of the Smart Contract to call.\\n     * @param value The amout of rBTC to send w/ the transaction.\\n     * @param dataLength The size of the payload.\\n     * @param data The payload.\\n     *\\n     * @return Success or failure.\\n     * */\\n    function external_call(\\n        address destination,\\n        uint256 value,\\n        uint256 dataLength,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        bool result;\\n        assembly {\\n            let x := mload(0x40) /// \\\"Allocate\\\" memory for output (0x40 is where \\\"free memory\\\" pointer is stored by convention)\\n            let d := add(data, 32) /// First 32 bytes are the padded length of data, so exclude that\\n            result := call(\\n                sub(gas, 34710), /// 34710 is the value that solidity is currently emitting\\n                /// It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\\n                /// callNewAccountGas (25000, in case the destination address does not exist and needs creating)\\n                destination,\\n                value,\\n                d,\\n                dataLength, /// Size of the input (in bytes) - this is what fixes the padding problem\\n                x,\\n                0 /// Output is ignored, therefore the output size is zero\\n            )\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Returns the confirmation status of a transaction.\\n     * @param transactionId Transaction ID.\\n     * @return Confirmation status.\\n     * */\\n    function isConfirmed(uint256 transactionId) public view returns (bool) {\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (confirmations[transactionId][owners[i]]) count += 1;\\n            if (count == required) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /*\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @notice Adds a new transaction to the transaction mapping,\\n     *   if transaction does not exist yet.\\n     *\\n     * @param destination Transaction target address.\\n     * @param value Transaction ether value.\\n     * @param data Transaction data payload.\\n     *\\n     * @return Returns transaction ID.\\n     * */\\n    function addTransaction(\\n        address destination,\\n        uint256 value,\\n        bytes memory data\\n    ) internal notNull(destination) returns (uint256 transactionId) {\\n        transactionId = transactionCount;\\n        transactions[transactionId] = Transaction({\\n            destination: destination,\\n            value: value,\\n            data: data,\\n            executed: false\\n        });\\n        transactionCount += 1;\\n        emit Submission(transactionId);\\n    }\\n\\n    /*\\n     * Web3 call functions\\n     */\\n\\n    /**\\n     * @notice Get the number of confirmations of a transaction.\\n     * @param transactionId Transaction ID.\\n     * @return Number of confirmations.\\n     * */\\n    function getConfirmationCount(uint256 transactionId) public view returns (uint256 count) {\\n        for (uint256 i = 0; i < owners.length; i++)\\n            if (confirmations[transactionId][owners[i]]) count += 1;\\n    }\\n\\n    /**\\n     * @notice Get the total number of transactions after filers are applied.\\n     * @param pending Include pending transactions.\\n     * @param executed Include executed transactions.\\n     * @return Total number of transactions after filters are applied.\\n     * */\\n    function getTransactionCount(bool pending, bool executed) public view returns (uint256 count) {\\n        for (uint256 i = 0; i < transactionCount; i++)\\n            if ((pending && !transactions[i].executed) || (executed && transactions[i].executed))\\n                count += 1;\\n    }\\n\\n    /**\\n     * @notice Get the list of owners.\\n     * @return List of owner addresses.\\n     * */\\n    function getOwners() public view returns (address[] memory) {\\n        return owners;\\n    }\\n\\n    /**\\n     * @notice Get the array with owner addresses, which confirmed transaction.\\n     * @param transactionId Transaction ID.\\n     * @return Returns array of owner addresses.\\n     * */\\n    function getConfirmations(\\n        uint256 transactionId\\n    ) public view returns (address[] memory _confirmations) {\\n        address[] memory confirmationsTemp = new address[](owners.length);\\n        uint256 count = 0;\\n        uint256 i;\\n        for (i = 0; i < owners.length; i++)\\n            if (confirmations[transactionId][owners[i]]) {\\n                confirmationsTemp[count] = owners[i];\\n                count += 1;\\n            }\\n        _confirmations = new address[](count);\\n        for (i = 0; i < count; i++) _confirmations[i] = confirmationsTemp[i];\\n    }\\n\\n    /**\\n     * @notice Get the list of transaction IDs in defined range.\\n     *\\n     * @param from Index start position of transaction array.\\n     * @param to Index end position of transaction array.\\n     * @param pending Include pending transactions.\\n     * @param executed Include executed transactions.\\n     *\\n     * @return Returns array of transaction IDs.\\n     * */\\n    function getTransactionIds(\\n        uint256 from,\\n        uint256 to,\\n        bool pending,\\n        bool executed\\n    ) public view returns (uint256[] memory _transactionIds) {\\n        uint256[] memory transactionIdsTemp = new uint256[](transactionCount);\\n        uint256 count = 0;\\n        uint256 i;\\n        for (i = 0; i < transactionCount; i++)\\n            if ((pending && !transactions[i].executed) || (executed && transactions[i].executed)) {\\n                transactionIdsTemp[count] = i;\\n                count += 1;\\n            }\\n        _transactionIds = new uint256[](to - from);\\n        for (i = from; i < to; i++) _transactionIds[i - from] = transactionIdsTemp[i];\\n    }\\n}\\n\",\"keccak256\":\"0xffc3b82e6081a023c475eefd0a0e41d3a8ce58654d09f3c45df3ea6a1f7b8c86\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620018b2380380620018b2833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82518660208202830111640100000000821117156200008c57600080fd5b82525081516020918201928201910280838360005b83811015620000bb578181015183820152602001620000a1565b50505050919091016040525060200151835190925090508160328211801590620000e55750818111155b8015620000f157508015155b8015620000fd57508115155b6200010757600080fd5b60005b8451811015620001d957600260008683815181106200012557fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615801562000181575060006001600160a01b03168582815181106200016d57fe5b60200260200101516001600160a01b031614155b6200018b57600080fd5b6001600260008784815181106200019e57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016200010a565b508351620001ef906003906020870190620001fc565b5050506004555062000290565b82805482825590600052602060002090810192821562000254579160200282015b828111156200025457825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200021d565b506200026292915062000266565b5090565b6200028d91905b80821115620002625780546001600160a01b03191681556001016200026d565b90565b61161280620002a06000396000f3fe60806040526004361061012a5760003560e01c8063a0e67e2b116100ab578063c01a8c841161006f578063c01a8c8414610534578063c64274741461055e578063d74f8edd14610626578063dc8452cd1461063b578063e20056e614610650578063ee22610b1461068b5761012a565b8063a0e67e2b14610426578063a8abe69a1461048b578063b5dc40c3146104cb578063b77bf600146104f5578063ba51a6df1461050a5761012a565b806354741525116100f2578063547415251461028c5780637065cb48146102d2578063784547a7146103055780638b51d13f1461032f5780639ace38c2146103595761012a565b8063025e7c2714610169578063173825d9146101af57806320ea8d86146101e25780632f54bf6e1461020c5780633411c81c14610253575b34156101675760408051348152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25b005b34801561017557600080fd5b506101936004803603602081101561018c57600080fd5b50356106b5565b604080516001600160a01b039092168252519081900360200190f35b3480156101bb57600080fd5b50610167600480360360208110156101d257600080fd5b50356001600160a01b03166106dc565b3480156101ee57600080fd5b506101676004803603602081101561020557600080fd5b5035610848565b34801561021857600080fd5b5061023f6004803603602081101561022f57600080fd5b50356001600160a01b03166108fe565b604080519115158252519081900360200190f35b34801561025f57600080fd5b5061023f6004803603604081101561027657600080fd5b50803590602001356001600160a01b0316610913565b34801561029857600080fd5b506102c0600480360360408110156102af57600080fd5b508035151590602001351515610933565b60408051918252519081900360200190f35b3480156102de57600080fd5b50610167600480360360208110156102f557600080fd5b50356001600160a01b031661099f565b34801561031157600080fd5b5061023f6004803603602081101561032857600080fd5b5035610ab3565b34801561033b57600080fd5b506102c06004803603602081101561035257600080fd5b5035610b3e565b34801561036557600080fd5b506103836004803603602081101561037c57600080fd5b5035610bad565b60405180856001600160a01b03166001600160a01b031681526020018481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b838110156103e85781810151838201526020016103d0565b50505050905090810190601f1680156104155780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561043257600080fd5b5061043b610c6b565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561047757818101518382015260200161045f565b505050509050019250505060405180910390f35b34801561049757600080fd5b5061043b600480360360808110156104ae57600080fd5b508035906020810135906040810135151590606001351515610cce565b3480156104d757600080fd5b5061043b600480360360208110156104ee57600080fd5b5035610df9565b34801561050157600080fd5b506102c0610f70565b34801561051657600080fd5b506101676004803603602081101561052d57600080fd5b5035610f76565b34801561054057600080fd5b506101676004803603602081101561055757600080fd5b5035610ff3565b34801561056a57600080fd5b506102c06004803603606081101561058157600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156105b157600080fd5b8201836020820111156105c357600080fd5b803590602001918460018302840111640100000000831117156105e557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506110ba945050505050565b34801561063257600080fd5b506102c06110d9565b34801561064757600080fd5b506102c06110de565b34801561065c57600080fd5b506101676004803603604081101561067357600080fd5b506001600160a01b03813581169160200135166110e4565b34801561069757600080fd5b50610167600480360360208110156106ae57600080fd5b5035611261565b600381815481106106c257fe5b6000918252602090912001546001600160a01b0316905081565b3330146106e857600080fd5b6001600160a01b038116600090815260026020526040902054819060ff1661070f57600080fd5b6001600160a01b0382166000908152600260205260408120805460ff191690555b600354600019018110156107e357826001600160a01b03166003828154811061075557fe5b6000918252602090912001546001600160a01b031614156107db5760038054600019810190811061078257fe5b600091825260209091200154600380546001600160a01b0390921691839081106107a857fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506107e3565b600101610730565b506003805460001901906107f7908261151c565b5060035460045411156108105760035461081090610f76565b6040516001600160a01b038316907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a25050565b3360008181526002602052604090205460ff1661086457600080fd5b60008281526001602090815260408083203380855292529091205483919060ff1661088e57600080fd5b600084815260208190526040902060030154849060ff16156108af57600080fd5b6000858152600160209081526040808320338085529252808320805460ff191690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b60026020526000908152604090205460ff1681565b600160209081526000928352604080842090915290825290205460ff1681565b6000805b60055481101561099857838015610960575060008181526020819052604090206003015460ff16155b806109845750828015610984575060008181526020819052604090206003015460ff165b15610990576001820191505b600101610937565b5092915050565b3330146109ab57600080fd5b6001600160a01b038116600090815260026020526040902054819060ff16156109d357600080fd5b816001600160a01b0381166109e757600080fd5b60038054905060010160045460328211158015610a045750818111155b8015610a0f57508015155b8015610a1a57508115155b610a2357600080fd5b6001600160a01b038516600081815260026020526040808220805460ff1916600190811790915560038054918201815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b03191684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a25050505050565b600080805b600354811015610b325760008481526001602052604081206003805491929184908110610ae157fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610b15576001820191505b600454821415610b2a57600192505050610b39565b600101610ab8565b5060009150505b919050565b6000805b600354811015610ba75760008381526001602052604081206003805491929184908110610b6b57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610b9f576001820191505b600101610b42565b50919050565b6000602081815291815260409081902080546001808301546002808501805487516101009582161595909502600019011691909104601f81018890048802840188019096528583526001600160a01b0390931695909491929190830182828015610c585780601f10610c2d57610100808354040283529160200191610c58565b820191906000526020600020905b815481529060010190602001808311610c3b57829003601f168201915b5050506003909301549192505060ff1684565b60606003805480602002602001604051908101604052809291908181526020018280548015610cc357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ca5575b505050505090505b90565b606080600554604051908082528060200260200182016040528015610cfd578160200160208202803883390190505b5090506000805b600554811015610d7e57858015610d2d575060008181526020819052604090206003015460ff16155b80610d515750848015610d51575060008181526020819052604090206003015460ff165b15610d765780838381518110610d6357fe5b6020026020010181815250506001820191505b600101610d04565b878703604051908082528060200260200182016040528015610daa578160200160208202803883390190505b5093508790505b86811015610dee57828181518110610dc557fe5b60200260200101518489830381518110610ddb57fe5b6020908102919091010152600101610db1565b505050949350505050565b606080600380549050604051908082528060200260200182016040528015610e2b578160200160208202803883390190505b5090506000805b600354811015610eee5760008581526001602052604081206003805491929184908110610e5b57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610ee65760038181548110610e9557fe5b9060005260206000200160009054906101000a90046001600160a01b0316838381518110610ebf57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506001820191505b600101610e32565b81604051908082528060200260200182016040528015610f18578160200160208202803883390190505b509350600090505b81811015610f6857828181518110610f3457fe5b6020026020010151848281518110610f4857fe5b6001600160a01b0390921660209283029190910190910152600101610f20565b505050919050565b60055481565b333014610f8257600080fd5b6003548160328211801590610f975750818111155b8015610fa257508015155b8015610fad57508115155b610fb657600080fd5b60048390556040805184815290517fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9181900360200190a1505050565b3360008181526002602052604090205460ff1661100f57600080fd5b60008281526020819052604090205482906001600160a01b031661103257600080fd5b60008381526001602090815260408083203380855292529091205484919060ff161561105d57600080fd5b6000858152600160208181526040808420338086529252808420805460ff1916909317909255905187927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a36110b385611261565b5050505050565b60006110c7848484611418565b90506110d281610ff3565b9392505050565b603281565b60045481565b3330146110f057600080fd5b6001600160a01b038216600090815260026020526040902054829060ff1661111757600080fd5b6001600160a01b038216600090815260026020526040902054829060ff161561113f57600080fd5b60005b6003548110156111c757846001600160a01b03166003828154811061116357fe5b6000918252602090912001546001600160a01b031614156111bf57836003828154811061118c57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506111c7565b600101611142565b506001600160a01b03808516600081815260026020526040808220805460ff1990811690915593871682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a26040516001600160a01b038416907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a250505050565b3360008181526002602052604090205460ff1661127d57600080fd5b60008281526001602090815260408083203380855292529091205483919060ff166112a757600080fd5b600084815260208190526040902060030154849060ff16156112c857600080fd5b6112d185610ab3565b156110b3576000858152602081815260409182902060038101805460ff19166001908117909155815481830154600280850180548851601f6000199783161561010002979097019091169290920494850187900487028201870190975283815293956113a3956001600160a01b039093169491939283908301828280156113995780601f1061136e57610100808354040283529160200191611399565b820191906000526020600020905b81548152906001019060200180831161137c57829003601f168201915b50505050506114f9565b156113d85760405186907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a2611410565b60405186907f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923690600090a260038101805460ff191690555b505050505050565b6000836001600160a01b03811661142e57600080fd5b600554604080516080810182526001600160a01b038881168252602080830189815283850189815260006060860181905287815280845295909520845181546001600160a01b031916941693909317835551600183015592518051949650919390926114a1926002850192910190611545565b50606091909101516003909101805460ff191691151591909117905560058054600101905560405182907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a2509392505050565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b815481835581811115611540576000838152602090206115409181019083016115c3565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061158657805160ff19168380011785556115b3565b828001600101855582156115b3579182015b828111156115b3578251825591602001919060010190611598565b506115bf9291506115c3565b5090565b610ccb91905b808211156115bf57600081556001016115c956fea265627a7a72315820f700f11b018bdda9b9078a29fa2c0efdd3b6994a1c3da9c96cb99f68afeb36ce64736f6c63430005110032",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Stefan George - <stefan.george@consensys.net>",
    "methods": {
      "addOwner(address)": {
        "params": {
          "owner": "Address of new owner."
        }
      },
      "changeRequirement(uint256)": {
        "params": {
          "_required": "Number of required confirmations."
        }
      },
      "confirmTransaction(uint256)": {
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "constructor": {
        "params": {
          "_owners": "List of initial owners.",
          "_required": "Number of required confirmations."
        }
      },
      "executeTransaction(uint256)": {
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "getConfirmationCount(uint256)": {
        "params": {
          "transactionId": "Transaction ID."
        },
        "return": "Number of confirmations."
      },
      "getConfirmations(uint256)": {
        "params": {
          "transactionId": "Transaction ID."
        },
        "return": "Returns array of owner addresses."
      },
      "getOwners()": {
        "return": "List of owner addresses."
      },
      "getTransactionCount(bool,bool)": {
        "params": {
          "executed": "Include executed transactions.",
          "pending": "Include pending transactions."
        },
        "return": "Total number of transactions after filters are applied."
      },
      "getTransactionIds(uint256,uint256,bool,bool)": {
        "params": {
          "executed": "Include executed transactions.",
          "from": "Index start position of transaction array.",
          "pending": "Include pending transactions.",
          "to": "Index end position of transaction array."
        },
        "return": "Returns array of transaction IDs."
      },
      "isConfirmed(uint256)": {
        "params": {
          "transactionId": "Transaction ID."
        },
        "return": "Confirmation status."
      },
      "removeOwner(address)": {
        "params": {
          "owner": "Address of owner."
        }
      },
      "replaceOwner(address,address)": {
        "params": {
          "newOwner": "Address of new owner.",
          "owner": "Address of owner to be replaced."
        }
      },
      "revokeConfirmation(uint256)": {
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "submitTransaction(address,uint256,bytes)": {
        "params": {
          "data": "Transaction data payload.",
          "destination": "Transaction target address.",
          "value": "Transaction ether value."
        },
        "return": "Returns transaction ID."
      }
    },
    "title": "Multisignature wallet - Allows multiple parties to agree on  transactions before execution."
  },
  "userdoc": {
    "methods": {
      "addOwner(address)": {
        "notice": "Allows to add a new owner. Transaction has to be sent by wallet."
      },
      "changeRequirement(uint256)": {
        "notice": "Allows to change the number of required confirmations. Transaction has to be sent by wallet."
      },
      "confirmTransaction(uint256)": {
        "notice": "Allows an owner to confirm a transaction."
      },
      "constructor": "Contract constructor sets initial owners and required number  of confirmations.",
      "executeTransaction(uint256)": {
        "notice": "Allows anyone to execute a confirmed transaction."
      },
      "getConfirmationCount(uint256)": {
        "notice": "Get the number of confirmations of a transaction."
      },
      "getConfirmations(uint256)": {
        "notice": "Get the array with owner addresses, which confirmed transaction."
      },
      "getOwners()": {
        "notice": "Get the list of owners."
      },
      "getTransactionCount(bool,bool)": {
        "notice": "Get the total number of transactions after filers are applied."
      },
      "getTransactionIds(uint256,uint256,bool,bool)": {
        "notice": "Get the list of transaction IDs in defined range."
      },
      "isConfirmed(uint256)": {
        "notice": "Returns the confirmation status of a transaction."
      },
      "removeOwner(address)": {
        "notice": "Allows to remove an owner. Transaction has to be sent by wallet."
      },
      "replaceOwner(address,address)": {
        "notice": "Allows to replace an owner with a new owner. Transaction has  to be sent by wallet."
      },
      "revokeConfirmation(uint256)": {
        "notice": "Allows an owner to revoke a confirmation for a transaction."
      },
      "submitTransaction(address,uint256,bytes)": {
        "notice": "Allows an owner to submit and confirm a transaction."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 50,
        "contract": "contracts/multisig/MultiSigWallet.sol:MultiSigWallet",
        "label": "transactions",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Transaction)76_storage)"
      },
      {
        "astId": 56,
        "contract": "contracts/multisig/MultiSigWallet.sol:MultiSigWallet",
        "label": "confirmations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 60,
        "contract": "contracts/multisig/MultiSigWallet.sol:MultiSigWallet",
        "label": "isOwner",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 63,
        "contract": "contracts/multisig/MultiSigWallet.sol:MultiSigWallet",
        "label": "owners",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/multisig/MultiSigWallet.sol:MultiSigWallet",
        "label": "required",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 67,
        "contract": "contracts/multisig/MultiSigWallet.sol:MultiSigWallet",
        "label": "transactionCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Transaction)76_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MultiSigWallet.Transaction)",
        "numberOfBytes": "32",
        "value": "t_struct(Transaction)76_storage"
      },
      "t_struct(Transaction)76_storage": {
        "encoding": "inplace",
        "label": "struct MultiSigWallet.Transaction",
        "members": [
          {
            "astId": 69,
            "contract": "contracts/multisig/MultiSigWallet.sol:MultiSigWallet",
            "label": "destination",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 71,
            "contract": "contracts/multisig/MultiSigWallet.sol:MultiSigWallet",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 73,
            "contract": "contracts/multisig/MultiSigWallet.sol:MultiSigWallet",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 75,
            "contract": "contracts/multisig/MultiSigWallet.sol:MultiSigWallet",
            "label": "executed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}