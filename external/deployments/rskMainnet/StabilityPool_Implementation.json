{
    "address": "",
    "abi": [
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_newActivePoolAddress",
                    "type": "address"
                }
            ],
            "name": "ActivePoolAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_newBorrowerOperationsAddress",
                    "type": "address"
                }
            ],
            "name": "BorrowerOperationsAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_newCommunityIssuanceAddress",
                    "type": "address"
                }
            ],
            "name": "CommunityIssuanceAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_newDefaultPoolAddress",
                    "type": "address"
                }
            ],
            "name": "DefaultPoolAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_depositor",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_P",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_S",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_G",
                    "type": "uint256"
                }
            ],
            "name": "DepositSnapshotUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_depositor",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_ETH",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_ZUSDLoss",
                    "type": "uint256"
                }
            ],
            "name": "ETHGainWithdrawn",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint128",
                    "name": "_currentEpoch",
                    "type": "uint128"
                }
            ],
            "name": "EpochUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                }
            ],
            "name": "EtherSent",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_frontEnd",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_kickbackRate",
                    "type": "uint256"
                }
            ],
            "name": "FrontEndRegistered",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_frontEnd",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_P",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_G",
                    "type": "uint256"
                }
            ],
            "name": "FrontEndSnapshotUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_frontEnd",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_newFrontEndStake",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_depositor",
                    "type": "address"
                }
            ],
            "name": "FrontEndStakeChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_depositor",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_frontEnd",
                    "type": "address"
                }
            ],
            "name": "FrontEndTagSet",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_G",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint128",
                    "name": "_epoch",
                    "type": "uint128"
                },
                {
                    "indexed": false,
                    "internalType": "uint128",
                    "name": "_scale",
                    "type": "uint128"
                }
            ],
            "name": "G_Updated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_P",
                    "type": "uint256"
                }
            ],
            "name": "P_Updated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_newPriceFeedAddress",
                    "type": "address"
                }
            ],
            "name": "PriceFeedAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_depositor",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_SOV",
                    "type": "uint256"
                }
            ],
            "name": "SOVPaidToDepositor",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_frontEnd",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_SOV",
                    "type": "uint256"
                }
            ],
            "name": "SOVPaidToFrontEnd",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_S",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint128",
                    "name": "_epoch",
                    "type": "uint128"
                },
                {
                    "indexed": false,
                    "internalType": "uint128",
                    "name": "_scale",
                    "type": "uint128"
                }
            ],
            "name": "S_Updated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint128",
                    "name": "_currentScale",
                    "type": "uint128"
                }
            ],
            "name": "ScaleUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_newSortedTrovesAddress",
                    "type": "address"
                }
            ],
            "name": "SortedTrovesAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_newBalance",
                    "type": "uint256"
                }
            ],
            "name": "StabilityPoolETHBalanceUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_newBalance",
                    "type": "uint256"
                }
            ],
            "name": "StabilityPoolZUSDBalanceUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_newTroveManagerAddress",
                    "type": "address"
                }
            ],
            "name": "TroveManagerAddressChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "_depositor",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_newDeposit",
                    "type": "uint256"
                }
            ],
            "name": "UserDepositChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_depositor",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_zusdAmountRequested",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "_dllrAmountReceived",
                    "type": "uint256"
                }
            ],
            "name": "WithdrawFromSpAndConvertToDLLR",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_newZUSDTokenAddress",
                    "type": "address"
                }
            ],
            "name": "ZUSDTokenAddressChanged",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "DECIMAL_PRECISION",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "MIN_NET_DEBT",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "NAME",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "P",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "SCALE_FACTOR",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "ZUSD_GAS_COMPENSATION",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "_100pct",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "activePool",
            "outputs": [
                {
                    "internalType": "contract IActivePool",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "borrowerOperations",
            "outputs": [
                {
                    "internalType": "contract IBorrowerOperations",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "communityIssuance",
            "outputs": [
                {
                    "internalType": "contract ICommunityIssuance",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "currentEpoch",
            "outputs": [
                {
                    "internalType": "uint128",
                    "name": "",
                    "type": "uint128"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "currentScale",
            "outputs": [
                {
                    "internalType": "uint128",
                    "name": "",
                    "type": "uint128"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "defaultPool",
            "outputs": [
                {
                    "internalType": "contract IDefaultPool",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "depositSnapshots",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "S",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "P",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "G",
                    "type": "uint256"
                },
                {
                    "internalType": "uint128",
                    "name": "scale",
                    "type": "uint128"
                },
                {
                    "internalType": "uint128",
                    "name": "epoch",
                    "type": "uint128"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "deposits",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "initialValue",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "frontEndTag",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint128",
                    "name": "",
                    "type": "uint128"
                },
                {
                    "internalType": "uint128",
                    "name": "",
                    "type": "uint128"
                }
            ],
            "name": "epochToScaleToG",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint128",
                    "name": "",
                    "type": "uint128"
                },
                {
                    "internalType": "uint128",
                    "name": "",
                    "type": "uint128"
                }
            ],
            "name": "epochToScaleToSum",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "frontEndSnapshots",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "S",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "P",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "G",
                    "type": "uint256"
                },
                {
                    "internalType": "uint128",
                    "name": "scale",
                    "type": "uint128"
                },
                {
                    "internalType": "uint128",
                    "name": "epoch",
                    "type": "uint128"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "frontEndStakes",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "frontEnds",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "kickbackRate",
                    "type": "uint256"
                },
                {
                    "internalType": "bool",
                    "name": "registered",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_frontEnd",
                    "type": "address"
                }
            ],
            "name": "getCompoundedFrontEndStake",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_depositor",
                    "type": "address"
                }
            ],
            "name": "getCompoundedZUSDDeposit",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_depositor",
                    "type": "address"
                }
            ],
            "name": "getDepositorETHGain",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_depositor",
                    "type": "address"
                }
            ],
            "name": "getDepositorSOVGain",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getETH",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getEntireSystemColl",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "entireSystemColl",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getEntireSystemDebt",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "entireSystemDebt",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_frontEnd",
                    "type": "address"
                }
            ],
            "name": "getFrontEndSOVGain",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getTotalZUSDDeposits",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "lastETHError_Offset",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "lastSOVError",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "lastZUSDLossError_Offset",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "liquityBaseParams",
            "outputs": [
                {
                    "internalType": "contract ILiquityBaseParams",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_debtToOffset",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_collToAdd",
                    "type": "uint256"
                }
            ],
            "name": "offset",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "priceFeed",
            "outputs": [
                {
                    "internalType": "contract IPriceFeed",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_frontEndTag",
                    "type": "address"
                }
            ],
            "name": "provideToSP",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_dllrAmount",
                    "type": "uint256"
                },
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "deadline",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint8",
                            "name": "v",
                            "type": "uint8"
                        },
                        {
                            "internalType": "bytes32",
                            "name": "r",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "bytes32",
                            "name": "s",
                            "type": "bytes32"
                        }
                    ],
                    "internalType": "struct IMassetManager.PermitParams",
                    "name": "_permitParams",
                    "type": "tuple"
                }
            ],
            "name": "provideToSpFromDLLR",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_kickbackRate",
                    "type": "uint256"
                }
            ],
            "name": "registerFrontEnd",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_liquityBaseParamsAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_borrowerOperationsAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_troveManagerAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_activePoolAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_zusdTokenAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_sortedTrovesAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_priceFeedAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_communityIssuanceAddress",
                    "type": "address"
                }
            ],
            "name": "setAddresses",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_communityIssuanceAddress",
                    "type": "address"
                }
            ],
            "name": "setCommunityIssuanceAddress",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "setOwner",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "sortedTroves",
            "outputs": [
                {
                    "internalType": "contract ISortedTroves",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "troveManager",
            "outputs": [
                {
                    "internalType": "contract ITroveManager",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_upperHint",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_lowerHint",
                    "type": "address"
                }
            ],
            "name": "withdrawETHGainToTrove",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                }
            ],
            "name": "withdrawFromSP",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_zusdAmountRequested",
                    "type": "uint256"
                }
            ],
            "name": "withdrawFromSpAndConvertToDLLR",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "zusdToken",
            "outputs": [
                {
                    "internalType": "contract IZUSDToken",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x3163b4ec9a4f284bb3bf8d6dfd4bd5305e5033cc8092a349055e060202f11d7c",
    "receipt": {
        "to": null,
        "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
        "contractAddress": "0xe72a4A1Fe8eA7B33363aA9D8785b37EF8841B262",
        "transactionIndex": 1,
        "gasUsed": "4757882",
        "logsBloom": "0x
        "blockHash": "0x57ca85a5a794f40a8bb6ee9cc50478d5b3cf54511fbf5c368e8951f9dd31008b",
        "transactionHash": "0x3163b4ec9a4f284bb3bf8d6dfd4bd5305e5033cc8092a349055e060202f11d7c",
        "logs": [
            {
                "transactionIndex": 1,
                "blockNumber": 4692954,
                "transactionHash": "0x3163b4ec9a4f284bb3bf8d6dfd4bd5305e5033cc8092a349055e060202f11d7c",
                "address": "0xe72a4A1Fe8eA7B33363aA9D8785b37EF8841B262",
                "topics": [
                    "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x00000000000000000000000013be55487d37fe3c66ee7305e1e9c1ac85de75ae"
                ],
                "data": "0x",
                "logIndex": 0,
                "blockHash": "0x57ca85a5a794f40a8bb6ee9cc50478d5b3cf54511fbf5c368e8951f9dd31008b"
            }
        ],
        "blockNumber": 4692954,
        "cumulativeGasUsed": "4819631",
        "status": 1,
        "byzantium": true
    },
    "args": [],
    "numDeployments": 1,
    "solcInputHash": "0fec888a5a632cda18ca2432f18ab5f4",
    "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newActivePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBorrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newCommunityIssuanceAddress\",\"type\":\"address\"}],\"name\":\"CommunityIssuanceAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newDefaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_P\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_S\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_G\",\"type\":\"uint256\"}],\"name\":\"DepositSnapshotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ZUSDLoss\",\"type\":\"uint256\"}],\"name\":\"ETHGainWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_currentEpoch\",\"type\":\"uint128\"}],\"name\":\"EpochUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EtherSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_frontEnd\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_kickbackRate\",\"type\":\"uint256\"}],\"name\":\"FrontEndRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_frontEnd\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_P\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_G\",\"type\":\"uint256\"}],\"name\":\"FrontEndSnapshotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_frontEnd\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFrontEndStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"FrontEndStakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_frontEnd\",\"type\":\"address\"}],\"name\":\"FrontEndTagSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_G\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_epoch\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_scale\",\"type\":\"uint128\"}],\"name\":\"G_Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_P\",\"type\":\"uint256\"}],\"name\":\"P_Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"PriceFeedAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_SOV\",\"type\":\"uint256\"}],\"name\":\"SOVPaidToDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_frontEnd\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_SOV\",\"type\":\"uint256\"}],\"name\":\"SOVPaidToFrontEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_S\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_epoch\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_scale\",\"type\":\"uint128\"}],\"name\":\"S_Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_currentScale\",\"type\":\"uint128\"}],\"name\":\"ScaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newSortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"StabilityPoolETHBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"StabilityPoolZUSDBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTroveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDeposit\",\"type\":\"uint256\"}],\"name\":\"UserDepositChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_zusdAmountRequested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dllrAmountReceived\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromSpAndConvertToDLLR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newZUSDTokenAddress\",\"type\":\"address\"}],\"name\":\"ZUSDTokenAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZUSD_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperations\",\"outputs\":[{\"internalType\":\"contract IBorrowerOperations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityIssuance\",\"outputs\":[{\"internalType\":\"contract ICommunityIssuance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentScale\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"S\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"G\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"scale\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"epoch\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"frontEndTag\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"epochToScaleToG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"epochToScaleToSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frontEndSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"S\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"G\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"scale\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"epoch\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frontEndStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frontEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"kickbackRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_frontEnd\",\"type\":\"address\"}],\"name\":\"getCompoundedFrontEndStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getCompoundedZUSDDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getDepositorETHGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getDepositorSOVGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_frontEnd\",\"type\":\"address\"}],\"name\":\"getFrontEndSOVGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalZUSDDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastETHError_Offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSOVError\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastZUSDLossError_Offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquityBaseParams\",\"outputs\":[{\"internalType\":\"contract ILiquityBaseParams\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtToOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collToAdd\",\"type\":\"uint256\"}],\"name\":\"offset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_frontEndTag\",\"type\":\"address\"}],\"name\":\"provideToSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dllrAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMassetManager.PermitParams\",\"name\":\"_permitParams\",\"type\":\"tuple\"}],\"name\":\"provideToSpFromDLLR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kickbackRate\",\"type\":\"uint256\"}],\"name\":\"registerFrontEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquityBaseParamsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zusdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_communityIssuanceAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityIssuanceAddress\",\"type\":\"address\"}],\"name\":\"setCommunityIssuanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawETHGainToTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_zusdAmountRequested\",\"type\":\"uint256\"}],\"name\":\"withdrawFromSpAndConvertToDLLR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zusdToken\",\"outputs\":[{\"internalType\":\"contract IZUSDToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getETH()\":{\"returns\":{\"_0\":\"the total amount of ETH held by the pool, accounted in an internal variable instead of `balance`, to exclude edge cases like ETH received from a self-destruct.\"}},\"getOwner()\":{\"returns\":{\"_owner\":\"Address of the owner. \"}},\"getTotalZUSDDeposits()\":{\"returns\":{\"_0\":\"ZUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\"}},\"setAddresses(address,address,address,address,address,address,address,address)\":{\"details\":\"initializer function, checks addresses are contracts\",\"params\":{\"_activePoolAddress\":\"ActivePool contract address\",\"_borrowerOperationsAddress\":\"BorrowerOperations contract address\",\"_communityIssuanceAddress\":\"CommunityIssuanceAddress\",\"_liquityBaseParamsAddress\":\"LiquidityBaseParams contract address\",\"_priceFeedAddress\":\"PriceFeed contract address\",\"_sortedTrovesAddress\":\"SortedTroves contract address\",\"_troveManagerAddress\":\"TroveManager contract address\",\"_zusdTokenAddress\":\"ZUSDToken contract address\"}},\"setCommunityIssuanceAddress(address)\":{\"details\":\"setter function specific for community issuance contract.\",\"params\":{\"_communityIssuanceAddress\":\"address of new community issuance contract.\"}},\"setOwner(address)\":{\"params\":{\"_owner\":\"Address of the owner. \"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MIN_NET_DEBT()\":{\"notice\":\"Minimum amount of net ZUSD debt a trove must have\"},\"ZUSD_GAS_COMPENSATION()\":{\"notice\":\"Amount of ZUSD to be locked in gas pool on opening troves\"},\"getCompoundedFrontEndStake(address)\":{\"notice\":\"Return the front end's compounded stake. Given by the formula:  D = D0 * P/P(0) where P(0) is the depositor's snapshot of the product P, taken at the last time when one of the front end's tagged deposits updated their deposit. The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\"},\"getCompoundedZUSDDeposit(address)\":{\"notice\":\"Return the user's compounded deposit. Given by the formula:  d = d0 * P/P(0) where P(0) is the depositor's snapshot of the product P, taken when they last updated their deposit.\"},\"getDepositorETHGain(address)\":{\"notice\":\"Calculates the ETH gain earned by the deposit since its last snapshots were taken. Given by the formula:  E = d0 * (S - S(0))/P(0) where S(0) and P(0) are the depositor's snapshots of the sum S and product P, respectively. d0 is the last recorded deposit value.\"},\"getDepositorSOVGain(address)\":{\"notice\":\"Calculate the SOV gain earned by a deposit since its last snapshots were taken. Given by the formula:  SOV = d0 * (G - G(0))/P(0) where G(0) and P(0) are the depositor's snapshots of the sum G and product P, respectively. d0 is the last recorded deposit value.\"},\"getFrontEndSOVGain(address)\":{\"notice\":\"Return the SOV gain earned by the front end. Given by the formula:  E = D0 * (G - G(0))/P(0) where G(0) and P(0) are the depositor's snapshots of the sum G and product P, respectively. D0 is the last recorded value of the front end's total tagged deposits.\"},\"getOwner()\":{\"notice\":\"Return address of the owner.\"},\"offset(uint256,uint256)\":{\"notice\":\"Cancels out the specified debt against the ZUSD contained in the Stability Pool (as far as possible) and transfers the Trove's ETH collateral from ActivePool to StabilityPool. Only called by liquidation functions in the TroveManager.\"},\"provideToSP(uint256,address)\":{\"notice\":\"provideToSP(): - Triggers a SOV issuance, based on time passed since the last issuance and total amount of deposited ZUSD. The SOV issuance is shared between *all* depositors and front ends - Tags the deposit with the provided front end tag param, if it's a new deposit - Sends depositor's accumulated gains (SOV, ETH) to depositor - Sends the tagged front end's accumulated SOV gains to the tagged front end - Increases deposit and tagged front end's stake, and takes new snapshots for each.\"},\"provideToSpFromDLLR(uint256,(uint256,uint8,bytes32,bytes32))\":{\"notice\":\"DLLR _owner or _spender can convert a specified amount of DLLR into ZUSD via Sovryn Mynt and deposit the ZUSD into the Zero Stability Pool, all in a single transaction\"},\"registerFrontEnd(uint256)\":{\"notice\":\"Front end makes a one-time selection of kickback rate upon registering\"},\"setAddresses(address,address,address,address,address,address,address,address)\":{\"notice\":\"Called only once on init, to set addresses of other Liquity contracts. Callable only by owner\"},\"setOwner(address)\":{\"notice\":\"Set address of the owner (only owner can call this function)\"},\"withdrawETHGainToTrove(address,address)\":{\"notice\":\"withdrawETHGainToTrove: - Triggers a SOV issuance, based on time passed since the last issuance. The SOV issuance is shared between *all* depositors and front ends - Sends all depositor's SOV gain to  depositor - Sends all tagged front end's SOV gain to the tagged front end - Transfers the depositor's entire ETH gain from the Stability Pool to the caller's trove - Leaves their compounded deposit in the Stability Pool - Updates snapshots for deposit and tagged front end stake \"},\"withdrawFromSP(uint256)\":{\"notice\":\"withdrawFromSP(): - Triggers a SOV issuance, based on time passed since the last issuance and total amount of ZUSD is deposited. The SOV issuance is shared between *all* depositors and front ends - Removes the deposit's front end tag if it is a full withdrawal - Sends all depositor's accumulated gains (SOV, ETH) to depositor - Sends the tagged front end's accumulated SOV gains to the tagged front end - Decreases deposit and tagged front end's stake, and takes new snapshots for each. If _amount > userDeposit, the user withdraws all of their compounded deposit.\"},\"withdrawFromSpAndConvertToDLLR(uint256)\":{\"notice\":\"Stability Pool depositor can withdraw a specified amount of ZUSD from the Zero Stability Pool and convert the ZUSD to DLLR via Sovryn Mynt, all in a single transaction\"}},\"notice\":\"The Stability Pool holds ZUSD tokens deposited by Stability Pool depositors. When a trove is liquidated, then depending on system conditions, some of its ZUSD debt gets offset with ZUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of ZUSD tokens in the Stability Pool is burned. Thus, a liquidation causes each depositor to receive a ZUSD loss, in proportion to their deposit as a share of total deposits. They also receive an ETH gain, as the ETH collateral of the liquidated trove is distributed among Stability depositors, in the same proportion. When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40% of the total ZUSD in the Stability Pool, depletes 40% of each deposit. A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit, multiplying it by some factor in range ]0,1[ --- IMPLEMENTATION --- We use a highly scalable method of tracking deposits and ETH gains that has O(1) complexity. When a liquidation occurs, rather than updating each depositor's deposit and ETH gain, we simply update two state variables: a product P, and a sum S. A mathematical manipulation allows us to factor out the initial deposit, and accurately track all depositors' compounded deposits and accumulated ETH gains over time, as liquidations occur, using just these two variables P and S. When depositors join the Stability Pool, they get a snapshot of the latest P and S: P_t and S_t, respectively. The formula for a depositor's accumulated ETH gain is derived here: https://github.com/liquity/dev/blob/main/packages/contracts/mathProofs/Scalable%20Compounding%20Stability%20Pool%20Deposits.pdf For a given deposit d_t, the ratio P/P_t tells us the factor by which a deposit has decreased since it joined the Stability Pool, and the term d_t * (S - S_t)/P_t gives us the deposit's total accumulated ETH gain. Each liquidation updates the product P and sum S. After a series of liquidations, a compounded deposit and corresponding ETH gain can be calculated using the initial deposit, the depositor\\u2019s snapshots of P and S, and the latest values of P and S. Any time a depositor updates their deposit (withdrawal, top-up) their accumulated ETH gain is paid out, their new deposit is recorded (based on their latest compounded deposit and modified by the withdrawal/top-up), and they receive new snapshots of the latest P and S. Essentially, they make a fresh deposit that overwrites the old one. --- SCALE FACTOR --- Since P is a running product in range ]0,1] that is always-decreasing, it should never reach 0 when multiplied by a number in range ]0,1[. Unfortunately, Solidity floor division always reaches 0, sooner or later. A series of liquidations that nearly empty the Pool (and thus each multiply P by a very small number in range ]0,1[ ) may push P to its 18 digit decimal limit, and round it to 0, when in fact the Pool hasn't been emptied: this would break deposit tracking. So, to track P accurately, we use a scale factor: if a liquidation would cause P to decrease to <1e-9 (and be rounded to 0 by Solidity), we first multiply P by 1e9, and increment a currentScale factor by 1. The added benefit of using 1e9 for the scale factor (rather than 1e18) is that it ensures negligible precision loss close to the scale boundary: when P is at its minimum value of 1e9, the relative precision loss in P due to floor division is only on the order of 1e-9. --- EPOCHS --- Whenever a liquidation fully empties the Stability Pool, all deposits should become 0. However, setting P to 0 would make P be 0 forever, and break all future reward calculations. So, every time the Stability Pool is emptied by a liquidation, we reset P = 1 and currentScale = 0, and increment the currentEpoch by 1. --- TRACKING DEPOSIT OVER SCALE CHANGES AND EPOCHS --- When a deposit is made, it gets snapshots of the currentEpoch and the currentScale. When calculating a compounded deposit, we compare the current epoch to the deposit's epoch snapshot. If the current epoch is newer, then the deposit was present during a pool-emptying liquidation, and necessarily has been depleted to 0. Otherwise, we then compare the current scale to the deposit's scale snapshot. If they're equal, the compounded deposit is given by d_t * P/P_t. If it spans one scale change, it is given by d_t * P/(P_t * 1e9). If it spans more than one scale change, we define the compounded deposit as 0, since it is now less than 1e-9'th of its initial value (e.g. a deposit of 1 billion ZUSD has depleted to < 1 ZUSD).  --- TRACKING DEPOSITOR'S ETH GAIN OVER SCALE CHANGES AND EPOCHS --- In the current epoch, the latest value of S is stored upon each scale change, and the mapping (scale -> S) is stored for each epoch. This allows us to calculate a deposit's accumulated ETH gain, during the epoch in which the deposit was non-zero and earned ETH. We calculate the depositor's accumulated ETH gain for the scale at which they made the deposit, using the ETH gain formula: e_1 = d_t * (S - S_t) / P_t and also for scale after, taking care to divide the latter by a factor of 1e9: e_2 = d_t * S / (P_t * 1e9) The gain in the second scale will be full, as the starting point was in the previous scale, thus no need to subtract anything. The deposit therefore was present for reward events from the beginning of that second scale.        S_i-S_t + S_{i+1}      .<--------.------------>      .         .      . S_i     .   S_{i+1}   <--.-------->.<----------->   S_t.         .   <->.         .      t         .  |---+---------|-------------|-----...         i            i+1 The sum of (e_1 + e_2) captures the depositor's total accumulated ETH gain, handling the case where their deposit spanned one scale change. We only care about gains across one scale change, since the compounded deposit is defined as being 0 once it has spanned more than one scale change. --- UPDATING P WHEN A LIQUIDATION OCCURS --- Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / ETH gain derivations: https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf --- SOV ISSUANCE TO STABILITY POOL DEPOSITORS --- An SOV issuance event occurs at every deposit operation, and every liquidation. Each deposit is tagged with the address of the front end through which it was made. All deposits earn a share of the issued SOV in proportion to the deposit as a share of total deposits. The SOV earned by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate. Please see the system Readme for an overview: https://github.com/liquity/dev/blob/main/README.md#zero-issuance-to-stability-providers We use the same mathematical product-sum approach to track SOV gains for depositors, where 'G' is the sum corresponding to SOV gains. The product P (and snapshot P_t) is re-used, as the ratio P/P_t tracks a deposit's depletion due to liquidations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StabilityPool.sol\":\"StabilityPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/Dependencies/BaseMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n\\ncontract BaseMath {\\n    uint constant public DECIMAL_PRECISION = 1e18;\\n}\\n\",\"keccak256\":\"0x7e1369ca5cb09e818e345a2def19a261401f79c985a6030b55b7311dd6f53be4\",\"license\":\"MIT\"},\"contracts/Dependencies/CheckContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n\\ncontract CheckContract {\\n    /**\\n     * @dev Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(_account) }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4c7dc4d0197c27ebc7de671b00458a9ff45f57223aeb520e6ddd2eb6d2d89e5c\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on the OpenZeppelin IER20 interface:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\n *\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    \\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xe0b2473eba89df8d27d7cea2a99fce788c212f3fd393c9508e449e51a3f220fa\",\"license\":\"MIT\"},\"contracts/Dependencies/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n * \\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 amount, \\n                    uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    \\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to \\n     * a value in the near future. The deadline argument can be set to uint(-1) to \\n     * create Permits that effectively never expire.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n    \\n    function version() external view returns (string memory);\\n    function permitTypeHash() external view returns (bytes32);\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd376458452f8b480bfea549637bd71d3f9eb1f12e9d59d1beff373417462d67f\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"../Interfaces/IActivePool.sol\\\";\\nimport \\\"../Interfaces/IDefaultPool.sol\\\";\\nimport \\\"../Interfaces/IPriceFeed.sol\\\";\\nimport \\\"../Interfaces/ILiquityBase.sol\\\";\\nimport \\\"../Interfaces/ILiquityBaseParams.sol\\\";\\n\\n/**\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is BaseMath, ILiquityBase {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n    /// Amount of ZUSD to be locked in gas pool on opening troves\\n    uint256 public constant ZUSD_GAS_COMPENSATION = 20e18;\\n\\n    /// Minimum amount of net ZUSD debt a trove must have\\n    uint256 public constant MIN_NET_DEBT = 180e18;\\n\\n    IActivePool public activePool;\\n\\n    IDefaultPool public defaultPool;\\n\\n    IPriceFeed public override priceFeed;\\n\\n    ILiquityBaseParams public override liquityBaseParams;\\n\\n    // --- Gas compensation functions ---\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    function _getCompositeDebt(uint256 _debt) internal pure returns (uint256) {\\n        return _debt.add(ZUSD_GAS_COMPENSATION);\\n    }\\n\\n    function _getNetDebt(uint256 _debt) internal pure returns (uint256) {\\n        return _debt.sub(ZUSD_GAS_COMPENSATION);\\n    }\\n\\n    /// Return the amount of ETH to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(uint256 _entireColl) internal view returns (uint256) {\\n        return _entireColl / liquityBaseParams.PERCENT_DIVISOR();\\n    }\\n\\n    function getEntireSystemColl() public view returns (uint256 entireSystemColl) {\\n        uint256 activeColl = activePool.getETH();\\n        uint256 liquidatedColl = defaultPool.getETH();\\n\\n        return activeColl.add(liquidatedColl);\\n    }\\n\\n    function getEntireSystemDebt() public view returns (uint256 entireSystemDebt) {\\n        uint256 activeDebt = activePool.getZUSDDebt();\\n        uint256 closedDebt = defaultPool.getZUSDDebt();\\n\\n        return activeDebt.add(closedDebt);\\n    }\\n\\n    function _getTCR(uint256 _price) internal view returns (uint256 TCR) {\\n        uint256 entireSystemColl = getEntireSystemColl();\\n        uint256 entireSystemDebt = getEntireSystemDebt();\\n\\n        TCR = LiquityMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\n\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint256 _price) internal view returns (bool) {\\n        uint256 TCR = _getTCR(_price);\\n\\n        return TCR < liquityBaseParams.CCR();\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint256 _fee,\\n        uint256 _amount,\\n        uint256 _maxFeePercentage\\n    ) internal pure {\\n        uint256 feePercentage = _fee.mul(DECIMAL_PRECISION).div(_amount);\\n        require(feePercentage <= _maxFeePercentage, \\\"Fee exceeded provided maximum\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x100b8a1c17caa95f5c9977e88f9263847a1977a365ca0a795753dd74aa1d6d7c\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./console.sol\\\";\\n\\nlibrary LiquityMath {\\n    using SafeMath for uint;\\n\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \\u201ctoo high\\u201d could lead to overflows.\\n     * - Making it \\u201ctoo low\\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division. \\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /* \\n    * Multiply two decimal numbers and use normal rounding rules:\\n    * -round product up if 19'th mantissa digit >= 5\\n    * -round product down if 19'th mantissa digit < 5\\n    *\\n    * Used only inside the exponentiation, _decPow().\\n    */\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n        uint prod_xy = x.mul(y);\\n\\n        decProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\n    }\\n\\n    /* \\n    * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n    * \\n    * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity. \\n    * \\n    * Called by two functions that represent time in units of minutes:\\n    * 1) TroveManager._calcDecayedBaseRate\\n    * 2) CommunityIssuance._getCumulativeIssuanceFraction \\n    * \\n    * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n    * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n    * \\n    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n    * negligibly different from just passing the cap, since: \\n    *\\n    * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n    */\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n       \\n        if (_minutes > 525600000) {_minutes = 525600000;}  // cap to avoid overflow\\n    \\n        if (_minutes == 0) {return DECIMAL_PRECISION;}\\n\\n        uint y = DECIMAL_PRECISION;\\n        uint x = _base;\\n        uint n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n.div(2);\\n            } else { // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n.sub(1)).div(2);\\n            }\\n        }\\n\\n        return decMul(x, y);\\n  }\\n\\n    function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\n    }\\n\\n    function _computeNominalCR(uint _coll, uint _debt) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return _coll.mul(NICR_PRECISION).div(_debt);\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else { // if (_debt == 0)\\n            return 2**256 - 1;\\n        }\\n    }\\n\\n    function _computeCR(uint _coll, uint _debt, uint _price) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint newCollRatio = _coll.mul(_price).div(_debt);\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else { // if (_debt == 0)\\n            return 2**256 - 1; \\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a95ed70d8937e0896c054b433ad0dfc87a9cfd028cae1694098e9d5d68127cd\",\"license\":\"MIT\"},\"contracts/Dependencies/LiquitySafeMath128.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n// uint128 addition and subtraction, with overflow protection.\\n\\nlibrary LiquitySafeMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c = a + b;\\n        require(c >= a, \\\"LiquitySafeMath128: addition overflow\\\");\\n\\n        return c;\\n    }\\n   \\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\\n        require(b <= a, \\\"LiquitySafeMath128: subtraction overflow\\\");\\n        uint128 c = a - b;\\n\\n        return c;\\n    }\\n}\",\"keccak256\":\"0x6e51d34d6fe3a2afbf5b64d1e14984a170f30247b318f62e04b9f4afdb660fc5\",\"license\":\"MIT\"},\"contracts/Dependencies/Mynt/IMassetManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface IMassetManager {\\n    struct PermitParams {\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function mintTo(\\n        address _bAsset,\\n        uint256 _bAssetQuantity,\\n        address _recipient\\n    ) external returns (uint256);\\n\\n    function getToken() external view returns (address);\\n\\n    /**\\n     * @dev Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the\\n     *      relative mAsset quantity from the sender. Sender also incurs a small fee, if any.\\n     * @param _bAsset           Address of the bAsset to redeem.\\n     * @param _massetQuantity   Units of the masset to redeem.\\n     * @param _recipient        Address to credit with withdrawn bAssets.\\n     * @return massetRedeemed   Relative number of mAsset units burned to pay for the bAssets.\\n     */\\n    function redeemTo(\\n        address _bAsset,\\n        uint256 _massetQuantity,\\n        address _recipient\\n    ) external returns (uint256 massetRedeemed);\\n\\n    function getMAssetTokenTransferWithPermitAddress() external view returns(address);\\n}\\n\",\"keccak256\":\"0xea06cb4c14ea4d762d0802f44ff5968018e975d787195d4168cc18b66881d5ac\",\"license\":\"MIT\"},\"contracts/Dependencies/Mynt/IMyntTokenTransferWithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.11;\\n\\n\\n/**\\n * @title MyntTokenTransferWithPermit interface\\n */\\ninterface IMyntTokenTransferWithPermit {\\n    /** EVENT */\\n\\n    /**\\n     * @dev Emitted when transferWithPermit is executed.\\n     */\\n    event TransferWithPermit(address _from, address _to, uint256 _amount);\\n\\n    /**\\n     *\\n     * @dev This is the intermediary function of transferWithPermit (permit + transferFro) to the actual DLLR token contract address.\\n     *\\n     * @notice destination cannot be:\\n     * - zero (0x0) address.\\n     * - actual dllr contract address.\\n     *\\n     * @param _from Owner of the token.\\n     * @param _to Recipient of the token.\\n     * @param _amount The amount of the token that will be transferred.\\n     * @param _deadline Expiration time of the signature.\\n     * @param _v Last 1 byte of ECDSA signature.\\n     * @param _r First 32 bytes of ECDSA signature.\\n     * @param _s 32 bytes after _r in ECDSA signature.\\n     */\\n    function transferWithPermit(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n\\n    /**\\n     * @dev to support EIP712, will need the token contract to return the chain id.\\n     *\\n     * @return chain id.\\n     *\\n     */\\n    function getChainId() external view returns (uint256);\\n\\n    /**\\n     * @dev Proxy function to get the actual Dllr balance\\n     *\\n     * @param account account address\\n     *\\n     * @return balance amount of the account\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf12a8cda4a7458e9fc107a1131bd6ab05509214404103c5dfdf6a5827c220256\",\"license\":\"MIT\"},\"contracts/Dependencies/Mynt/MyntLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./IMassetManager.sol\\\";\\nimport \\\"./IMyntTokenTransferWithPermit.sol\\\";\\nimport \\\"../SafeMath.sol\\\";\\n\\nlibrary MyntLib {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Convert DLLR _dllrAmount to _toToken utilizing EIP-2612 permit\\n     * to reduce the additional sending transaction for doing the approval to the spender.\\n     *\\n     * @param _myntMassetManager Mynt protocol MassetManager contract address - needed for integration\\n     * @param _dllrAmount The amount of the DLLR (mAsset) token that will be burned in exchange for _toToken\\n     * @param _toToken bAsset token address to withdraw from DLLR\\n     * @param _permitParams EIP-2612 permit params:\\n     *        _deadline Expiration time of the signature.\\n     *        _v Last 1 byte of ECDSA signature.\\n     *        _r First 32 bytes of ECDSA signature.\\n     *        _s 32 bytes after _r in ECDSA signature.\\n     * @return redeemed ZUSD amount\\n     */\\n    function redeemZusdFromDllrWithPermit(\\n        IMassetManager _myntMassetManager,\\n        uint256 _dllrAmount,\\n        address _toToken,\\n        IMassetManager.PermitParams calldata _permitParams\\n    ) internal returns (uint256) {\\n        IMyntTokenTransferWithPermit dllrTransferWithPermit = IMyntTokenTransferWithPermit(_myntMassetManager.getMAssetTokenTransferWithPermitAddress());\\n\\n        uint256 thisBalanceBefore = dllrTransferWithPermit.balanceOf(address(this));\\n        address thisAddress = address(this);\\n\\n        dllrTransferWithPermit.transferWithPermit(\\n            msg.sender,\\n            thisAddress,\\n            _dllrAmount,\\n            _permitParams.deadline,\\n            _permitParams.v,\\n            _permitParams.r,\\n            _permitParams.s\\n        );\\n        require(\\n            dllrTransferWithPermit.balanceOf(thisAddress).sub(thisBalanceBefore) == _dllrAmount,\\n            \\\"DLLR transferred amount validation failed\\\"\\n        );\\n        return _myntMassetManager.redeemTo(_toToken, _dllrAmount, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x50ab77f832280dc14e6808da11f68772d1bb2b9c224a41764b552a945ff83190\",\"license\":\"MIT\"},\"contracts/Dependencies/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on OpenZeppelin's Ownable contract:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n *\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    bytes32 private constant KEY_OWNER = keccak256(\\\"key.ownable.owner\\\");\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == getOwner(), \\\"Ownable:: access denied\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set address of the owner.\\n     * @param _owner Address of the owner.\\n     * */\\n    function _setOwner(address _owner) internal {\\n        require(_owner != address(0), \\\"Ownable::setOwner: invalid address\\\");\\n        emit OwnershipTransferred(getOwner(), _owner);\\n\\n        bytes32 key = KEY_OWNER;\\n        assembly {\\n            sstore(key, _owner)\\n        }\\n    }\\n\\n    /**\\n     * @notice Set address of the owner (only owner can call this function)\\n     * @param _owner Address of the owner.\\n     * */\\n    function setOwner(address _owner) public onlyOwner {\\n        _setOwner(_owner);\\n    }\\n\\n    /**\\n     * @notice Return address of the owner.\\n     * @return _owner Address of the owner.\\n     * */\\n    function getOwner() public view returns (address _owner) {\\n        bytes32 key = KEY_OWNER;\\n        assembly {\\n            _owner := sload(key)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb5fc626e0b227fc0feb1d84440585015a0a5f586547d298534a604dd113efec6\",\"license\":\"MIT\"},\"contracts/Dependencies/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * Based on OpenZeppelin's SafeMath:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\n *\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x666b890992a066cc791f36c2975cd595d9761a014c654c385ed36ffaf658f3fd\",\"license\":\"MIT\"},\"contracts/Dependencies/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n// Buidler's helper contract for console logging\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction log() internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t\\tignored;\\n\\t}\\tfunction logInt(int p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logByte(byte p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(byte)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t(bool ignored, ) = CONSOLE_ADDRESS.staticcall(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t\\tignored;\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x6fa1de4ffe22b8f58b0b64d65db11dd5037be9b9db47b365a72adb489e217000\",\"license\":\"MIT\"},\"contracts/Interfaces/IActivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * The Active Pool holds the ETH collateral and ZUSD debt (but not ZUSD tokens) for all active troves.\\n *\\n * When a trove is liquidated, it's ETH and ZUSD debt are transferred from the Active Pool, to either the\\n * Stability Pool, the Default Pool, or both, depending on the liquidation conditions.\\n *\\n */\\ninterface IActivePool is IPool {\\n    // --- Events ---\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolZUSDDebtUpdated(uint _ZUSDDebt);\\n    event ActivePoolETHBalanceUpdated(uint _ETH);\\n\\n    // --- Functions ---\\n\\n    /// @notice Send ETH amount to given account. Updates ActivePool balance. Only callable by BorrowerOperations, TroveManager or StabilityPool.\\n    /// @param _account account to receive the ETH amount\\n    /// @param _amount ETH amount to send\\n    function sendETH(address _account, uint _amount) external;\\n}\\n\",\"keccak256\":\"0xdd5f1b6fae4050b4c885a85a10c2d0e73b82187a51736d009065aaeea33bf0d0\",\"license\":\"MIT\"},\"contracts/Interfaces/IBorrowerOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Dependencies/Mynt/IMassetManager.sol\\\";\\n\\n/// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n    // --- Events ---\\n\\n    event FeeDistributorAddressChanged(address _feeDistributorAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event ZUSDTokenAddressChanged(address _zusdTokenAddress);\\n    event ZEROStakingAddressChanged(address _zeroStakingAddress);\\n\\n    event TroveCreated(address indexed _borrower, uint256 arrayIndex);\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 stake,\\n        uint8 operation\\n    );\\n    event ZUSDBorrowingFeePaid(address indexed _borrower, uint256 _ZUSDFee);\\n\\n    // --- Functions ---\\n\\n    /**\\n     * @notice Called only once on init, to set addresses of other Zero contracts. Callable only by owner\\n     * @dev initializer function, checks addresses are contracts\\n     * @param _feeDistributorAddress feeDistributor contract address\\n     * @param _liquityBaseParamsAddress LiquidityBaseParams contract address\\n     * @param _troveManagerAddress TroveManager contract address\\n     * @param _activePoolAddress ActivePool contract address\\n     * @param _defaultPoolAddress DefaultPool contract address\\n     * @param _stabilityPoolAddress StabilityPool contract address\\n     * @param _gasPoolAddress GasPool contract address\\n     * @param _collSurplusPoolAddress CollSurplusPool contract address\\n     * @param _priceFeedAddress PrideFeed contract address\\n     * @param _sortedTrovesAddress SortedTroves contract address\\n     * @param _zusdTokenAddress ZUSDToken contract address\\n     * @param _zeroStakingAddress ZEROStaking contract address\\n     */\\n    function setAddresses(\\n        address _feeDistributorAddress,\\n        address _liquityBaseParamsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _priceFeedAddress,\\n        address _sortedTrovesAddress,\\n        address _zusdTokenAddress,\\n        address _zeroStakingAddress\\n    ) external;\\n\\n    /**\\n     * @notice payable function that creates a Trove for the caller with the requested debt, and the Ether received as collateral.\\n     * Successful execution is conditional mainly on the resulting collateralization ratio which must exceed the minimum (110% in Normal Mode, 150% in Recovery Mode).\\n     * In addition to the requested debt, extra debt is issued to pay the issuance fee, and cover the gas compensation.\\n     * The borrower has to provide a `_maxFeePercentage` that he/she is willing to accept in case of a fee slippage, i.e. when a redemption transaction is processed first, driving up the issuance fee.\\n     * @param _maxFee max fee percentage to acept in case of a fee slippage\\n     * @param _ZUSDAmount ZUSD requested debt\\n     * @param _upperHint upper trove id hint\\n     * @param _lowerHint lower trove id hint\\n     */\\n    function openTrove(\\n        uint256 _maxFee,\\n        uint256 _ZUSDAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    /**\\n     * @notice payable function that creates a Trove for the caller with the requested debt, and the Ether received as collateral.\\n     * Successful execution is conditional mainly on the resulting collateralization ratio which must exceed the minimum (110% in Normal Mode, 150% in Recovery Mode).\\n     * In addition to the requested debt, extra debt is issued to pay the issuance fee, and cover the gas compensation.\\n     * The borrower has to provide a `_maxFeePercentage` that he/she is willing to accept in case of a fee slippage, i.e. when a redemption transaction is processed first, driving up the issuance fee.\\n     * This method is identical to `openTrove()`, but operates on NUE tokens instead of ZUSD.\\n     * @param _maxFee max fee percentage to acept in case of a fee slippage\\n     * @param _ZUSDAmount ZUSD requested debt\\n     * @param _upperHint upper trove id hint\\n     * @param _lowerHint lower trove id hint\\n     */\\n    function openNueTrove(\\n        uint256 _maxFee,\\n        uint256 _ZUSDAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    /// @notice payable function that adds the received Ether to the caller's active Trove.\\n    /// @param _upperHint upper trove id hint\\n    /// @param _lowerHint lower trove id hint\\n    function addColl(address _upperHint, address _lowerHint) external payable;\\n\\n    /// @notice send ETH as collateral to a trove. Called by only the Stability Pool.\\n    /// @param _user user trove address\\n    /// @param _upperHint upper trove id hint\\n    /// @param _lowerHint lower trove id hint\\n    function moveETHGainToTrove(\\n        address _user,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    /**\\n     * @notice withdraws `_amount` of collateral from the caller\\u2019s Trove.\\n     * Executes only if the user has an active Trove, the withdrawal would not pull the user\\u2019s Trove below the minimum collateralization ratio,\\n     * and the resulting total collateralization ratio of the system is above 150%.\\n     * @param _amount collateral amount to withdraw\\n     * @param _upperHint upper trove id hint\\n     * @param _lowerHint lower trove id hint\\n     */\\n    function withdrawColl(uint256 _amount, address _upperHint, address _lowerHint) external;\\n\\n    /**\\n     * @notice issues `_amount` of ZUSD from the caller\\u2019s Trove to the caller.\\n     * Executes only if the Trove's collateralization ratio would remain above the minimum, and the resulting total collateralization ratio is above 150%.\\n     * The borrower has to provide a `_maxFeePercentage` that he/she is willing to accept in case of a fee slippage, i.e. when a redemption transaction is processed first, driving up the issuance fee.\\n     * @param _maxFee max fee percentage to acept in case of a fee slippage\\n     * @param _amount ZUSD amount to withdraw\\n     * @param _upperHint upper trove id hint\\n     * @param _lowerHint lower trove id hint\\n     */\\n    function withdrawZUSD(\\n        uint256 _maxFee,\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    /// Borrow (withdraw) ZUSD tokens from a trove: mint new ZUSD tokens to the owner and convert it to DLLR in one transaction\\n    function withdrawZusdAndConvertToDLLR(\\n        uint256 _maxFeePercentage,\\n        uint256 _ZUSDAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external returns (uint256);\\n\\n    /// @notice repay `_amount` of ZUSD to the caller\\u2019s Trove, subject to leaving 50 debt in the Trove (which corresponds to the 50 ZUSD gas compensation).\\n    /// @param _amount ZUSD amount to repay\\n    /// @param _upperHint upper trove id hint\\n    /// @param _lowerHint lower trove id hint\\n    function repayZUSD(uint256 _amount, address _upperHint, address _lowerHint) external;\\n\\n    /// Repay ZUSD tokens to a Trove: Burn the repaid ZUSD tokens, and reduce the trove's debt accordingly\\n    function repayZusdFromDLLR(\\n        uint256 _dllrAmount,\\n        address _upperHint,\\n        address _lowerHint,\\n        IMassetManager.PermitParams calldata _permitParams\\n    ) external;\\n\\n    /**\\n     * @notice allows a borrower to repay all debt, withdraw all their collateral, and close their Trove.\\n     * Requires the borrower have a ZUSD balance sufficient to repay their trove's debt, excluding gas compensation - i.e. `(debt - 50)` ZUSD.\\n     */\\n    function closeTrove() external;\\n\\n    /**\\n     * @notice allows a borrower to repay all debt, withdraw all their collateral, and close their Trove.\\n     * Requires the borrower have a NUE balance sufficient to repay their trove's debt, excluding gas compensation - i.e. `(debt - 50)` NUE.\\n     * This method is identical to `closeTrove()`, but operates on NUE tokens instead of ZUSD.\\n     */\\n    function closeNueTrove(IMassetManager.PermitParams calldata _permitParams) external;\\n\\n    /**\\n     * @notice enables a borrower to simultaneously change both their collateral and debt, subject to all the restrictions that apply to individual increases/decreases of each quantity with the following particularity:\\n     * if the adjustment reduces the collateralization ratio of the Trove, the function only executes if the resulting total collateralization ratio is above 150%.\\n     * The borrower has to provide a `_maxFeePercentage` that he/she is willing to accept in case of a fee slippage, i.e. when a redemption transaction is processed first, driving up the issuance fee.\\n     * The parameter is ignored if the debt is not increased with the transaction.\\n     * @param _maxFee max fee percentage to acept in case of a fee slippage\\n     * @param _collWithdrawal collateral amount to withdraw\\n     * @param _debtChange ZUSD amount to change\\n     * @param isDebtIncrease indicates if increases debt\\n     * @param _upperHint upper trove id hint\\n     * @param _lowerHint lower trove id hint\\n     */\\n    function adjustTrove(\\n        uint256 _maxFee,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        bool isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external payable;\\n\\n    /**\\n     * @notice enables a borrower to simultaneously change both their collateral and debt, subject to all the restrictions that apply to individual increases/decreases of each quantity with the following particularity:\\n     * if the adjustment reduces the collateralization ratio of the Trove, the function only executes if the resulting total collateralization ratio is above 150%.\\n     * The borrower has to provide a `_maxFeePercentage` that he/she is willing to accept in case of a fee slippage, i.e. when a redemption transaction is processed first, driving up the issuance fee.\\n     * The parameter is ignored if the debt is not increased with the transaction.\\n     * This method is identical to `adjustTrove()`, but operates on NUE tokens instead of ZUSD.\\n     * @param _maxFee max fee percentage to acept in case of a fee slippage\\n     * @param _collWithdrawal collateral amount to withdraw\\n     * @param _debtChange ZUSD amount to change\\n     * @param isDebtIncrease indicates if increases debt\\n     * @param _upperHint upper trove id hint\\n     * @param _lowerHint lower trove id hint\\n     */\\n    function adjustNueTrove(\\n        uint256 _maxFee,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        bool isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint,\\n        IMassetManager.PermitParams calldata _permitParams\\n    ) external payable;\\n\\n    /**\\n     * @notice when a borrower\\u2019s Trove has been fully redeemed from and closed, or liquidated in Recovery Mode with a collateralization ratio above 110%,\\n     * this function allows the borrower to claim their ETH collateral surplus that remains in the system (collateral - debt upon redemption; collateral - 110% of the debt upon liquidation).\\n     */\\n    function claimCollateral() external;\\n\\n    function getCompositeDebt(uint256 _debt) external view returns (uint256);\\n\\n    function BORROWING_FEE_FLOOR() external view returns (uint256);\\n\\n    function getMassetManager() external view returns (IMassetManager);\\n}\\n\",\"keccak256\":\"0x71fbc651d7604641fd841bf039c659cd8dfa6ffc7262a3426bf12c5e73a82554\",\"license\":\"MIT\"},\"contracts/Interfaces/ICommunityIssuance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface ICommunityIssuance { \\n    \\n    // --- Events ---\\n    \\n    event SOVTokenAddressSet(address _zeroTokenAddress);\\n    event ZUSDTokenAddressSet(address _zusdTokenAddress);\\n    event StabilityPoolAddressSet(address _stabilityPoolAddress);\\n    event PriceFeedAddressSet(address _priceFeed);\\n    event RewardManagerAddressSet(address _rewardManagerAddress);\\n    event APRSet(uint256 _APR);\\n\\n    // --- Functions ---\\n\\n    /**\\n     * @notice Called only once on init, to set addresses of other contracts. Callable only by owner.\\n     * @dev initializer function, checks addresses are contracts\\n     * @param _sovTokenAddress sov token address.\\n     * @param _zusdTokenAddress zero token address.\\n     * @param _stabilityPoolAddress stability pool address.\\n     * @param _priceFeed price feed address.\\n     * @param _APR apr in basis points.\\n     */\\n    function initialize(\\n        address _sovTokenAddress,\\n        address _zusdTokenAddress,\\n        address _stabilityPoolAddress,\\n        address _priceFeed,\\n        uint256 _APR\\n    ) external;\\n\\n    /**\\n     * @dev setter function to set the APR value in basis points.\\n     * can only be called by reward manager.\\n     * @param _APR apr value in basis points.\\n     */\\n    function setAPR(uint256 _APR) external;\\n\\n    /**\\n     * @dev setter function to set the price feed.\\n     * can only be called by the owner.\\n     * @param _priceFeedAddress price feed address.\\n     */\\n    function setPriceFeed(address _priceFeedAddress) external;\\n\\n    /**\\n     * @dev setter function to set reward manager.\\n     * can only be called by the owner.\\n     * @param _rewardManagerAddress reward manager address.\\n     */\\n    function setRewardManager(address _rewardManagerAddress) external;\\n\\n    /// @notice issues SOV tokens based on total zusd is deposited.\\n    /// @return SOV tokens issuance \\n    function issueSOV(uint256 _totalZUSDDeposits) external returns (uint256);\\n\\n    /// @notice sends ZERO tokens to given account\\n    /// @param _account account to receive the tokens\\n    /// @param _ZEROamount amount of tokens to transfer\\n    function sendSOV(address _account, uint _ZEROamount) external;\\n}\\n\",\"keccak256\":\"0x39b482323f5bfa1983ab020b5a8dc805116ffceb03f2729ffbe91b164403a96a\",\"license\":\"MIT\"},\"contracts/Interfaces/IDefaultPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolZUSDDebtUpdated(uint256 _ZUSDDebt);\\n    event DefaultPoolETHBalanceUpdated(uint256 _ETH);\\n\\n    // --- Functions ---\\n\\n    /// @notice Send ETH to Active Pool\\n    /// @param _amount ETH to send\\n    function sendETHToActivePool(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xfb2607676b2eb0f2defd248b4dd32895820048317f29aa6bdb572403a3e3d44e\",\"license\":\"MIT\"},\"contracts/Interfaces/ILiquityBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\nimport \\\"./ILiquityBaseParams.sol\\\";\\n\\ninterface ILiquityBase {\\n    /// @return PriceFeed contract\\n    function priceFeed() external view returns (IPriceFeed);\\n\\n    /// @return LiquityBaseParams contract\\n    function liquityBaseParams() external view returns (ILiquityBaseParams);\\n}\\n\",\"keccak256\":\"0xa4a57bd79e64d56a687c28d2a35c55b733fde8dda2a7ba861606eed3211724e1\",\"license\":\"MIT\"},\"contracts/Interfaces/ILiquityBaseParams.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface ILiquityBaseParams {\\n\\n    /// Minimum collateral ratio for individual troves\\n    function MCR() external view returns (uint);\\n\\n    /// Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    function CCR() external view returns (uint);\\n\\n    function PERCENT_DIVISOR() external view returns (uint);\\n\\n    function BORROWING_FEE_FLOOR() external view returns (uint);\\n\\n    /**\\n     * Half-life of 12h. 12h = 720 min\\n     * (1/2) = d^720 => d = (1/2)^(1/720)\\n     */\\n    function REDEMPTION_FEE_FLOOR() external view returns (uint);\\n\\n    function MAX_BORROWING_FEE() external view returns (uint);\\n\\n}\",\"keccak256\":\"0xef8c0e8ad5d13d604c11b04983ff5bdd41768b646f2b33f45ddd988adec204e0\",\"license\":\"MIT\"},\"contracts/Interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event ETHBalanceUpdated(uint _newBalance);\\n    event ZUSDBalanceUpdated(uint _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event EtherSent(address _to, uint _amount);\\n\\n    // --- Functions ---\\n\\n    /// @notice Not necessarily equal to the raw ether balance - ether can be forcibly sent to contracts.\\n    /// @return ETH pool balance\\n    function getETH() external view returns (uint);\\n\\n    /// @return ZUSD debt pool balance\\n    function getZUSDDebt() external view returns (uint);\\n\\n    /// @notice Increases ZUSD debt of the pool.\\n    /// @param _amount ZUSD amount to add to the pool debt\\n    function increaseZUSDDebt(uint _amount) external;\\n\\n    /// @notice Decreases ZUSD debt of the pool.\\n    /// @param _amount ZUSD amount to subtract to the pool debt\\n    function decreaseZUSDDebt(uint _amount) external;\\n}\\n\",\"keccak256\":\"0x148e87ab38c6176d74f36c9e8989b99e768a7b18d8a045f1f01d6583b986806d\",\"license\":\"MIT\"},\"contracts/Interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint256 _lastGoodPrice);\\n\\n    // --- Function ---\\n\\n    /// @notice Returns the latest price obtained from the Oracle. Called by Zero functions that require a current price.\\n    ///         It uses the main price feed and fallback to the backup one in case of an error. If both fail return the last\\n    ///         good price seen.\\n    /// @dev It's also callable by anyone externally\\n    /// @return The price\\n    function fetchPrice() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x85fd97219a8156209d2cb5c6ae7c5ead01d893db000bf575023fcef0e62f9591\",\"license\":\"MIT\"},\"contracts/Interfaces/ISortedTroves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint256 _NICR);\\n    event NodeRemoved(address _id);\\n\\n    // --- Functions ---\\n\\n    /**\\n     * @notice Called only once on init, to set addresses of other Zero contracts and size. Callable only by owner\\n     * @dev initializer function, checks addresses are contracts\\n     * @param _size max size of troves list\\n     * @param _TroveManagerAddress TroveManager contract address\\n     * @param _borrowerOperationsAddress BorrowerOperations contract address\\n     */\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    /**\\n     * @dev Add a node to the list\\n     * @param _id Node's id\\n     * @param _ICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n    function insert(\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    /**\\n     * @dev Remove a node from the list\\n     * @param _id Node's id\\n     */\\n    function remove(address _id) external;\\n\\n    /**\\n     * @dev Re-insert the node at a new position, based on its new NICR\\n     * @param _id Node's id\\n     * @param _newICR Node's new NICR\\n     * @param _prevId Id of previous node for the new insert position\\n     * @param _nextId Id of next node for the new insert position\\n     */\\n    function reInsert(\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    /**\\n     * @dev Checks if the list contains a node\\n     * @param _id Node's id\\n     * @return true if list contains a node with given id\\n     */\\n    function contains(address _id) external view returns (bool);\\n\\n    /**\\n     * @dev Checks if the list is full\\n     * @return true if list is full\\n     */\\n    function isFull() external view returns (bool);\\n\\n    /**\\n     * @dev Checks if the list is empty\\n     * @return true if list is empty\\n     */\\n    function isEmpty() external view returns (bool);\\n\\n    /**\\n     * @return list current size\\n     */\\n    function getSize() external view returns (uint256);\\n\\n    /**\\n     * @return list max size\\n     */\\n    function getMaxSize() external view returns (uint256);\\n\\n    /**\\n     * @return the first node in the list (node with the largest NICR)\\n     */\\n    function getFirst() external view returns (address);\\n\\n    /**\\n     * @return the last node in the list (node with the smallest NICR)\\n     */\\n    function getLast() external view returns (address);\\n\\n    /**\\n     * @param _id Node's id\\n     * @return the next node (with a smaller NICR) in the list for a given node\\n     */\\n    function getNext(address _id) external view returns (address);\\n\\n    /**\\n     * @param _id Node's id\\n     * @return the previous node (with a larger NICR) in the list for a given node\\n     */\\n    function getPrev(address _id) external view returns (address);\\n\\n    /**\\n     * @notice Check if a pair of nodes is a valid insertion point for a new node with the given NICR\\n     * @param _ICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n    function validInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Find the insert position for a new node with the given NICR\\n     * @param _ICR Node's NICR\\n     * @param _prevId Id of previous node for the insert position\\n     * @param _nextId Id of next node for the insert position\\n     */\\n    function findInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\",\"keccak256\":\"0x7328ad009da6230ddea1559564428464a5c3ace2258fb534dfbba5b5a8c7c60d\",\"license\":\"MIT\"},\"contracts/Interfaces/IStabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Dependencies/Mynt/IMassetManager.sol\\\";\\n\\n/*\\n * The Stability Pool holds ZUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its ZUSD debt gets offset with\\n * ZUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of ZUSD tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a ZUSD loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an ETH gain, as the ETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total ZUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / ETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- SOV ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * An SOV issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued SOV in proportion to the deposit as a share of total deposits. The SOV earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#zero-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolETHBalanceUpdated(uint _newBalance);\\n    event StabilityPoolZUSDBalanceUpdated(uint _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event ZUSDTokenAddressChanged(address _newZUSDTokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint _P);\\n    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event FrontEndRegistered(address indexed _frontEnd, uint _kickbackRate);\\n    event FrontEndTagSet(address indexed _depositor, address indexed _frontEnd);\\n\\n    event DepositSnapshotUpdated(address indexed _depositor, uint _P, uint _S, uint _G);\\n    event FrontEndSnapshotUpdated(address indexed _frontEnd, uint _P, uint _G);\\n    event UserDepositChanged(address indexed _depositor, uint _newDeposit);\\n    event FrontEndStakeChanged(\\n        address indexed _frontEnd,\\n        uint _newFrontEndStake,\\n        address _depositor\\n    );\\n\\n    event ETHGainWithdrawn(address indexed _depositor, uint _ETH, uint _ZUSDLoss);\\n    event SOVPaidToDepositor(address indexed _depositor, uint _SOV);\\n    event SOVPaidToFrontEnd(address indexed _frontEnd, uint _SOV);\\n    event EtherSent(address _to, uint _amount);\\n\\n    event WithdrawFromSpAndConvertToDLLR(\\n        address _depositor,\\n        uint256 _zusdAmountRequested,\\n        uint256 _dllrAmountReceived\\n    );\\n\\n    // --- Functions ---\\n\\n    /**\\n     * @notice Called only once on init, to set addresses of other Liquity contracts. Callable only by owner\\n     * @dev initializer function, checks addresses are contracts\\n     * @param _liquityBaseParamsAddress LiquidityBaseParams contract address\\n     * @param _borrowerOperationsAddress BorrowerOperations contract address\\n     * @param _troveManagerAddress TroveManager contract address\\n     * @param _activePoolAddress ActivePool contract address\\n     * @param _zusdTokenAddress ZUSDToken contract address\\n     * @param _sortedTrovesAddress SortedTroves contract address\\n     * @param _priceFeedAddress PriceFeed contract address\\n     * @param _communityIssuanceAddress CommunityIssuanceAddress\\n     */\\n    function setAddresses(\\n        address _liquityBaseParamsAddress,\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _zusdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _communityIssuanceAddress\\n    ) external;\\n\\n    /**\\n     * @notice Initial checks:\\n     *  - Frontend is registered or zero address\\n     *  - Sender is not a registered frontend\\n     *  - _amount is not zero\\n     *  ---\\n     *  - Triggers a SOV issuance, based on time passed since the last issuance. The SOV issuance is shared between *all* depositors and front ends\\n     *  - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     *  - Sends depositor's accumulated gains (SOV, ETH) to depositor\\n     *  - Sends the tagged front end's accumulated SOV gains to the tagged front end\\n     *  - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     * @param _amount amount to provide\\n     * @param _frontEndTag frontend address to receive accumulated SOV gains\\n     */\\n    function provideToSP(uint _amount, address _frontEndTag) external;\\n\\n    /**\\n     * @notice Initial checks:\\n     *    - _amount is zero or there are no under collateralized troves left in the system\\n     *    - User has a non zero deposit\\n     *    ---\\n     *    - Triggers a SOV issuance, based on time passed since the last issuance. The SOV issuance is shared between *all* depositors and front ends\\n     *    - Removes the deposit's front end tag if it is a full withdrawal\\n     *    - Sends all depositor's accumulated gains (SOV, ETH) to depositor\\n     *    - Sends the tagged front end's accumulated SOV gains to the tagged front end\\n     *    - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     *    If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     * @param _amount amount to withdraw\\n     */\\n    function withdrawFromSP(uint _amount) external;\\n\\n    /**\\n     * @notice Initial checks:\\n     *    - User has a non zero deposit\\n     *    - User has an open trove\\n     *    - User has some ETH gain\\n     *    ---\\n     *    - Triggers a SOV issuance, based on time passed since the last issuance. The SOV issuance is shared between *all* depositors and front ends\\n     *    - Sends all depositor's SOV gain to  depositor\\n     *    - Sends all tagged front end's SOV gain to the tagged front end\\n     *    - Transfers the depositor's entire ETH gain from the Stability Pool to the caller's trove\\n     *    - Leaves their compounded deposit in the Stability Pool\\n     *    - Updates snapshots for deposit and tagged front end stake\\n     * @param _upperHint upper trove id hint\\n     * @param _lowerHint lower trove id hint\\n     */\\n    function withdrawETHGainToTrove(address _upperHint, address _lowerHint) external;\\n\\n    /**\\n     * @notice Initial checks:\\n     *    - Frontend (sender) not already registered\\n     *    - User (sender) has no deposit\\n     *    - _kickbackRate is in the range [0, 100%]\\n     *    ---\\n     *    Front end makes a one-time selection of kickback rate upon registering\\n     * @param _kickbackRate kickback rate selected by frontend\\n     */\\n    function registerFrontEnd(uint _kickbackRate) external;\\n\\n    /**\\n     * @notice Initial checks:\\n     *    - Caller is TroveManager\\n     *    ---\\n     *    Cancels out the specified debt against the ZUSD contained in the Stability Pool (as far as possible)\\n     *    and transfers the Trove's ETH collateral from ActivePool to StabilityPool.\\n     *    Only called by liquidation functions in the TroveManager.\\n     * @param _debt debt to cancel\\n     * @param _coll collateral to transfer\\n     */\\n    function offset(uint _debt, uint _coll) external;\\n\\n    /**\\n     * @return the total amount of ETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like ETH received from a self-destruct.\\n     */\\n    function getETH() external view returns (uint);\\n\\n    /**\\n     * @return ZUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalZUSDDeposits() external view returns (uint);\\n\\n    /**\\n     * @notice Calculates the ETH gain earned by the deposit since its last snapshots were taken.\\n     * @param _depositor address to calculate ETH gain\\n     * @return ETH gain from given depositor\\n     */\\n    function getDepositorETHGain(address _depositor) external view returns (uint);\\n\\n    /**\\n     * @notice Calculate the SOV gain earned by a deposit since its last snapshots were taken.\\n     *    If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     *    Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     *    which they made their deposit.\\n     * @param _depositor address to calculate ETH gain\\n     * @return SOV gain from given depositor\\n     */\\n    function getDepositorSOVGain(address _depositor) external view returns (uint);\\n\\n    /**\\n     * @param _frontEnd front end address\\n     * @return the SOV gain earned by the front end.\\n     */\\n    function getFrontEndSOVGain(address _frontEnd) external view returns (uint);\\n\\n    /**\\n     * @param _depositor depositor address\\n     * @return the user's compounded deposit.\\n     */\\n    function getCompoundedZUSDDeposit(address _depositor) external view returns (uint);\\n\\n    /**\\n     * @notice The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\n     * @param _frontEnd front end address\\n     * @return the front end's compounded stake.\\n     */\\n    function getCompoundedFrontEndStake(address _frontEnd) external view returns (uint);\\n\\n    //DLLR _owner or _spender can convert a specified amount of DLLR into ZUSD via Sovryn Mynt and deposit the ZUSD into the Zero Stability Pool, all in a single transaction\\n    function provideToSpFromDLLR(\\n        uint _dllrAmount,\\n        IMassetManager.PermitParams calldata _permitParams\\n    ) external;\\n\\n    /// Stability Pool depositor can withdraw a specified amount of ZUSD from the Zero Stability Pool and optionally convert the ZUSD to DLLR via Sovryn Mynt, all in a single transaction\\n    function withdrawFromSpAndConvertToDLLR(uint256 _zusdAmount) external;\\n\\n    /**\\n     * Fallback function\\n     * Only callable by Active Pool, it just accounts for ETH received\\n     * receive() external payable;\\n     */\\n}\\n\",\"keccak256\":\"0xe39e6323197a04f5ec836a54eafcee840d2ae089f1bbad3e6b4543b61be033bc\",\"license\":\"MIT\"},\"contracts/Interfaces/ITroveManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ILiquityBase.sol\\\";\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./IZUSDToken.sol\\\";\\nimport \\\"./IZEROToken.sol\\\";\\nimport \\\"./IZEROStaking.sol\\\";\\nimport \\\"../Dependencies/Mynt/IMassetManager.sol\\\";\\n\\n/// Common interface for the Trove Manager.\\ninterface ITroveManager is ILiquityBase {\\n    // --- Events ---\\n\\n    event FeeDistributorAddressChanged(address _feeDistributorAddress);\\n    event TroveManagerRedeemOpsAddressChanged(address _troveManagerRedeemOps);\\n    event LiquityBaseParamsAddressChanges(address _borrowerOperationsAddress);\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event ZUSDTokenAddressChanged(address _newZUSDTokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event ZEROTokenAddressChanged(address _zeroTokenAddress);\\n    event ZEROStakingAddressChanged(address _zeroStakingAddress);\\n\\n    event Liquidation(\\n        uint256 _liquidatedDebt,\\n        uint256 _liquidatedColl,\\n        uint256 _collGasCompensation,\\n        uint256 _ZUSDGasCompensation\\n    );\\n    event Redemption(\\n        uint256 _attemptedZUSDAmount,\\n        uint256 _actualZUSDAmount,\\n        uint256 _ETHSent,\\n        uint256 _ETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 stake,\\n        uint8 operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint8 operation\\n    );\\n    event BaseRateUpdated(uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\\n    event LTermsUpdated(uint256 _L_ETH, uint256 _L_ZUSDDebt);\\n    event TroveSnapshotsUpdated(uint256 _L_ETH, uint256 _L_ZUSDDebt);\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n    struct TroveManagerInitAddressesParams {\\n        address _feeDistributorAddress;\\n        address _troveManagerRedeemOps;\\n        address _liquityBaseParamsAddress;\\n        address _borrowerOperationsAddress;\\n        address _activePoolAddress;\\n        address _defaultPoolAddress;\\n        address _stabilityPoolAddress;\\n        address _gasPoolAddress;\\n        address _collSurplusPoolAddress;\\n        address _priceFeedAddress;\\n        address _zusdTokenAddress;\\n        address _sortedTrovesAddress;\\n        address _zeroTokenAddress;\\n        address _zeroStakingAddress;\\n    }\\n\\n    // --- Functions ---\\n    /**\\n     * @notice Called only once on init, to set addresses of other Zero contracts. Callable only by owner\\n     * @dev initializer function, checks addresses are contracts\\n     * @param _troveManagerInitAddresses addresses list to intialize TroveManager with _\\n     *        _feeDistributorAddress feeDistributor contract address\\n     *        _troveManagerRedeemOps TroveManagerRedeemOps contract address\\n     *        _liquityBaseParamsAddress LiquityBaseParams contract address\\n     *        _borrowerOperationsAddress BorrowerOperations contract address\\n     *        _activePoolAddress ActivePool contract address\\n     *        _defaultPoolAddress DefaultPool contract address\\n     *        _stabilityPoolAddress StabilityPool contract address\\n     *        _gasPoolAddress GasPool contract address\\n     *        _collSurplusPoolAddress CollSurplusPool contract address\\n     *        _priceFeedAddress PriceFeed contract address\\n     *        _zusdTokenAddress ZUSDToken contract address\\n     *        _sortedTrovesAddress SortedTroves contract address\\n     *        _zeroTokenAddress ZEROToken contract address\\n     *        _zeroStakingAddress ZEROStaking contract address\\n     */\\n    function setAddresses(\\n        TroveManagerInitAddressesParams memory _troveManagerInitAddresses\\n    ) external;\\n\\n    function setTroveManagerRedeemOps(address _troveManagerRedeemOps) external;\\n\\n    /// @return Trove owners count\\n    function getTroveOwnersCount() external view returns (uint256);\\n\\n    /// @param _index Trove owner index\\n    /// @return Trove from TroveOwners array in given index\\n    function getTroveFromTroveOwnersArray(uint256 _index) external view returns (address);\\n\\n    /// @param _borrower borrower address\\n    /// @return the nominal collateral ratio (ICR) of a given Trove, without the price. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getNominalICR(address _borrower) external view returns (uint256);\\n\\n    /// @notice computes the user\\u2019s individual collateralization ratio (ICR) based on their total collateral and total ZUSD debt. Returns 2^256 -1 if they have 0 debt.\\n    /// @param _borrower borrower address\\n    /// @param _price ETH price\\n    /// @return the current collateral ratio (ICR) of a given Trove. Takes a trove's pending coll and debt rewards from redistributions into account.\\n    function getCurrentICR(address _borrower, uint256 _price) external view returns (uint256);\\n\\n    /// @notice Closes the trove if its ICR is lower than the minimum collateral ratio.\\n    /// @param _borrower borrower address\\n    function liquidate(address _borrower) external;\\n\\n    /**\\n     * @notice Liquidate a sequence of troves. Closes a maximum number of n under-collateralized Troves,\\n     * starting from the one with the lowest collateral ratio in the system, and moving upwards\\n     * @param _n max number of under-collateralized Troves to liquidate\\n     */\\n    function liquidateTroves(uint256 _n) external;\\n\\n    /**\\n     * @notice Attempt to liquidate a custom list of troves provided by the caller.\\n     * @param _troveArray list of trove addresses\\n     */\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    /**\\n     * @notice Send _ZUSDamount ZUSD to the system and redeem the corresponding amount of collateral from as many Troves as are needed to fill the redemption\\n     * request.  Applies pending rewards to a Trove before reducing its debt and coll.\\n     *\\n     * Note that if _amount is very large, this function can run out of gas, specially if traversed troves are small. This can be easily avoided by\\n     * splitting the total _amount in appropriate chunks and calling the function multiple times.\\n     *\\n     * Param `_maxIterations` can also be provided, so the loop through Troves is capped (if it\\u2019s zero, it will be ignored).This makes it easier to\\n     * avoid OOG for the frontend, as only knowing approximately the average cost of an iteration is enough, without needing to know the \\u201ctopology\\u201d\\n     * of the trove list. It also avoids the need to set the cap in stone in the contract, nor doing gas calculations, as both gas price and opcode\\n     * costs can vary.\\n     *\\n     * All Troves that are redeemed from -- with the likely exception of the last one -- will end up with no debt left, therefore they will be closed.\\n     * If the last Trove does have some remaining debt, it has a finite ICR, and the reinsertion could be anywhere in the list, therefore it requires a hint.\\n     * A frontend should use getRedemptionHints() to calculate what the ICR of this Trove will be after redemption, and pass a hint for its position\\n     * in the sortedTroves list along with the ICR value that the hint was found for.\\n     *\\n     * If another transaction modifies the list between calling getRedemptionHints() and passing the hints to redeemCollateral(), it\\n     * is very likely that the last (partially) redeemed Trove would end up with a different ICR than what the hint is for. In this case the\\n     * redemption will stop after the last completely redeemed Trove and the sender will keep the remaining ZUSD amount, which they can attempt\\n     * to redeem later.\\n     *\\n     * @param _ZUSDAmount ZUSD amount to send to the system\\n     * @param _firstRedemptionHint calculated ICR hint of first trove after redemption\\n     * @param _maxIterations max Troves iterations (can be 0)\\n     * @param _maxFee max fee percentage to accept\\n     */\\n    function redeemCollateral(\\n        uint256 _ZUSDAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFee\\n    ) external;\\n\\n    function redeemCollateralViaDLLR(\\n        uint256 _dllrAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFeePercentage,\\n        IMassetManager.PermitParams calldata _permitParams\\n    ) external;\\n\\n    /// @notice Update borrower's stake based on their latest collateral value\\n    /// @param _borrower borrower address\\n    function updateStakeAndTotalStakes(address _borrower) external returns (uint256);\\n\\n    /// @notice Update borrower's snapshots of L_ETH and L_ZUSDDebt to reflect the current values\\n    /// @param _borrower borrower address\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    /// @notice Push the owner's address to the Trove owners list, and record the corresponding array index on the Trove struct\\n    /// @param _borrower borrower address\\n    /// @return index where Trove was inserted\\n    function addTroveOwnerToArray(address _borrower) external returns (uint256 index);\\n\\n    /// @notice Add the borrowers's coll and debt rewards earned from redistributions, to their Trove\\n    /// @param _borrower borrower address\\n    function applyPendingRewards(address _borrower) external;\\n\\n    /// @param _borrower borrower address\\n    /// @return the borrower's pending accumulated ETH reward, earned by their stake\\n    function getPendingETHReward(address _borrower) external view returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @return the borrower's pending accumulated ZUSD reward, earned by their stake\\n    function getPendingZUSDDebtReward(address _borrower) external view returns (uint256);\\n\\n    /*\\n     * @notice A Trove has pending rewards if its snapshot is less than the current rewards per-unit-staked sum:\\n     * this indicates that rewards have occured since the snapshot was made, and the user therefore has\\n     * pending rewards\\n     *\\n     * @param _borrower borrower address\\n     * @return true if has pending rewards\\n     */\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    /// @notice returns the Troves entire debt and coll, including pending rewards from redistributions.\\n    /// @param _borrower borrower address\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 debt,\\n            uint256 coll,\\n            uint256 pendingZUSDDebtReward,\\n            uint256 pendingETHReward\\n        );\\n\\n    /// @notice Close given trove. Called by BorrowerOperations.\\n    /// @param _borrower borrower address\\n    function closeTrove(address _borrower) external;\\n\\n    /// @notice Remove borrower's stake from the totalStakes sum, and set their stake to 0\\n    /// @param _borrower borrower address\\n    function removeStake(address _borrower) external;\\n\\n    /// @return calculated redemption rate using baseRate\\n    function getRedemptionRate() external view returns (uint256);\\n\\n    /// @return calculated redemption rate using calculated decayed as base rate\\n    function getRedemptionRateWithDecay() external view returns (uint256);\\n\\n    /// @notice The redemption fee is taken as a cut of the total ETH drawn from the system in a redemption. It is based on the current redemption rate.\\n    /// @param _ETHDrawn ETH drawn\\n    function getRedemptionFeeWithDecay(uint256 _ETHDrawn) external view returns (uint256);\\n\\n    /// @return borrowing rate\\n    function getBorrowingRate() external view returns (uint256);\\n\\n    /// @return borrowing rate calculated using decayed as base rate\\n    function getBorrowingRateWithDecay() external view returns (uint256);\\n\\n    /// @param ZUSDDebt ZUSD debt amount to calculate fee\\n    /// @return borrowing fee using borrowing rate\\n    function getBorrowingFee(uint256 ZUSDDebt) external view returns (uint256);\\n\\n    /// @param _ZUSDDebt ZUSD debt amount to calculate fee\\n    /// @return borrowing fee using borrowing rate with decay\\n    function getBorrowingFeeWithDecay(uint256 _ZUSDDebt) external view returns (uint256);\\n\\n    /// @notice Updates the baseRate state variable based on time elapsed since the last redemption or ZUSD borrowing operation.\\n    function decayBaseRateFromBorrowing() external;\\n\\n    /// @param _borrower borrower address\\n    /// @return Trove status from given trove\\n    function getTroveStatus(address _borrower) external view returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @return Trove stake from given trove\\n    function getTroveStake(address _borrower) external view returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @return Trove debt from given trove\\n    function getTroveDebt(address _borrower) external view returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @return Trove collateral from given trove\\n    function getTroveColl(address _borrower) external view returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @param num status to set\\n    function setTroveStatus(address _borrower, uint256 num) external;\\n\\n    /// @param _borrower borrower address\\n    /// @param _collIncrease amount of collateral to increase\\n    /// @return new trove collateral\\n    function increaseTroveColl(\\n        address _borrower,\\n        uint256 _collIncrease\\n    ) external returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @param _collDecrease amount of collateral to decrease\\n    /// @return new trove collateral\\n    function decreaseTroveColl(\\n        address _borrower,\\n        uint256 _collDecrease\\n    ) external returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @param _debtIncrease amount of debt to increase\\n    /// @return new trove debt\\n    function increaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtIncrease\\n    ) external returns (uint256);\\n\\n    /// @param _borrower borrower address\\n    /// @param _debtDecrease amount of debt to decrease\\n    /// @return new trove debt\\n    function decreaseTroveDebt(\\n        address _borrower,\\n        uint256 _debtDecrease\\n    ) external returns (uint256);\\n\\n    /**\\n     * @param _price ETH price\\n     * @return the total collateralization ratio (TCR) of the system.\\n     * The TCR is based on the the entire system debt and collateral (including pending rewards).\\n     */\\n    function getTCR(uint256 _price) external view returns (uint256);\\n\\n    function MCR() external view returns (uint256);\\n\\n    function CCR() external view returns (uint256);\\n\\n    /// @notice reveals whether or not the system is in Recovery Mode (i.e. whether the Total Collateralization Ratio (TCR) is below the Critical Collateralization Ratio (CCR)).\\n    function checkRecoveryMode(uint256 _price) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1445e257dac83d4a0f1181178591f03df2846f7273914ff620ce616e30578231\",\"license\":\"MIT\"},\"contracts/Interfaces/IZEROStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\ninterface IZEROStaking {\\n    // --- Events --\\n\\n    event ZEROTokenAddressSet(address _zeroTokenAddress);\\n    event ZUSDTokenAddressSet(address _zusdTokenAddress);\\n    event FeeDistributorAddressAddressSet(address _feeDistributorAddress);\\n    event ActivePoolAddressSet(address _activePoolAddress);\\n\\n    event StakeChanged(address indexed staker, uint256 newStake);\\n    event StakingGainsWithdrawn(address indexed staker, uint256 ZUSDGain, uint256 ETHGain);\\n    event F_ETHUpdated(uint256 _F_ETH);\\n    event F_ZUSDUpdated(uint256 _F_ZUSD);\\n    event TotalZEROStakedUpdated(uint256 _totalZEROStaked);\\n    event EtherSent(address _account, uint256 _amount);\\n    event StakerSnapshotsUpdated(address _staker, uint256 _F_ETH, uint256 _F_ZUSD);\\n\\n    // --- Functions ---\\n\\n    /**\\n     * @notice Called only once on init, to set addresses of other Zero contracts. Callable only by owner\\n     * @dev initializer function, checks addresses are contracts\\n     * @param _zeroTokenAddress ZEROToken contract address\\n     * @param _zusdTokenAddress ZUSDToken contract address\\n     * @param _feeDistributorAddress FeeDistributorAddress contract address\\n     * @param _activePoolAddress ActivePool contract address\\n     */\\n    function setAddresses(\\n        address _zeroTokenAddress,\\n        address _zusdTokenAddress,\\n        address _feeDistributorAddress,\\n        address _activePoolAddress\\n    ) external;\\n\\n    /// @notice If caller has a pre-existing stake, send any accumulated ETH and ZUSD gains to them.\\n    /// @param _ZEROamount ZERO tokens to stake\\n    function stake(uint256 _ZEROamount) external;\\n\\n    /**\\n     * @notice Unstake the ZERO and send the it back to the caller, along with their accumulated ZUSD & ETH gains.\\n     * If requested amount > stake, send their entire stake.\\n     * @param _ZEROamount ZERO tokens to unstake\\n     */\\n    function unstake(uint256 _ZEROamount) external;\\n\\n    /// @param _ETHFee ETH fee\\n    /// @notice increase ETH fee\\n    function increaseF_ETH(uint256 _ETHFee) external;\\n\\n    /// @param _ZEROFee ZUSD fee\\n    /// @notice increase ZUSD fee\\n    function increaseF_ZUSD(uint256 _ZEROFee) external;\\n\\n    /// @param _user user address\\n    /// @return pending ETH gain of given user\\n    function getPendingETHGain(address _user) external view returns (uint256);\\n\\n    /// @param _user user address\\n    /// @return pending ZUSD gain of given user\\n    function getPendingZUSDGain(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4c7948ce7dff9ea9b8495054e511eabcf44a91c7db8520ec58ff2a002327e0c5\",\"license\":\"MIT\"},\"contracts/Interfaces/IZEROToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"../Dependencies/IERC20.sol\\\";\\nimport \\\"../Dependencies/IERC2612.sol\\\";\\n\\ninterface IZEROToken is IERC20, IERC2612 { \\n\\n    // --- Functions ---\\n\\n    /// @notice send zero tokens to ZEROStaking contract\\n    /// @param _sender sender address\\n    /// @param _amount amount to send\\n    function sendToZEROStaking(address _sender, uint256 _amount) external;\\n\\n    /// @return deployment start time\\n    function getDeploymentStartTime() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xbcc0baabe4c4686563a09cf1486f2d152b70404996676a89d525691f69637f66\",\"license\":\"MIT\"},\"contracts/Interfaces/IZUSDToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"../Dependencies/IERC20.sol\\\";\\nimport \\\"../Dependencies/IERC2612.sol\\\";\\n\\ninterface IZUSDToken is IERC20, IERC2612 { \\n    \\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n\\n    event ZUSDTokenBalanceUpdated(address _user, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(address _sender,  address poolAddress, uint256 _amount) external;\\n\\n    function returnFromPool(address poolAddress, address user, uint256 _amount ) external;\\n}\\n\",\"keccak256\":\"0xe52df063aa08f709640c28888edd27310c820f6d08564855538ae245eb2f5a8c\",\"license\":\"MIT\"},\"contracts/StabilityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"./Interfaces/IStabilityPool.sol\\\";\\nimport \\\"./Interfaces/ITroveManager.sol\\\";\\nimport \\\"./Interfaces/IZUSDToken.sol\\\";\\nimport \\\"./Interfaces/ISortedTroves.sol\\\";\\nimport \\\"./Interfaces/ICommunityIssuance.sol\\\";\\nimport \\\"./Dependencies/LiquityBase.sol\\\";\\nimport \\\"./Dependencies/LiquitySafeMath128.sol\\\";\\nimport \\\"./Dependencies/CheckContract.sol\\\";\\nimport \\\"./Dependencies/Mynt/MyntLib.sol\\\";\\nimport \\\"./StabilityPoolStorage.sol\\\";\\n\\n/**\\n * The Stability Pool holds ZUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its ZUSD debt gets offset with\\n * ZUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of ZUSD tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a ZUSD loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an ETH gain, as the ETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total ZUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n *\\n * --- IMPLEMENTATION ---\\n *\\n * We use a highly scalable method of tracking deposits and ETH gains that has O(1) complexity.\\n *\\n * When a liquidation occurs, rather than updating each depositor's deposit and ETH gain, we simply update two state variables:\\n * a product P, and a sum S.\\n *\\n * A mathematical manipulation allows us to factor out the initial deposit, and accurately track all depositors' compounded deposits\\n * and accumulated ETH gains over time, as liquidations occur, using just these two variables P and S. When depositors join the\\n * Stability Pool, they get a snapshot of the latest P and S: P_t and S_t, respectively.\\n *\\n * The formula for a depositor's accumulated ETH gain is derived here:\\n * https://github.com/liquity/dev/blob/main/packages/contracts/mathProofs/Scalable%20Compounding%20Stability%20Pool%20Deposits.pdf\\n *\\n * For a given deposit d_t, the ratio P/P_t tells us the factor by which a deposit has decreased since it joined the Stability Pool,\\n * and the term d_t * (S - S_t)/P_t gives us the deposit's total accumulated ETH gain.\\n *\\n * Each liquidation updates the product P and sum S. After a series of liquidations, a compounded deposit and corresponding ETH gain\\n * can be calculated using the initial deposit, the depositor\\u2019s snapshots of P and S, and the latest values of P and S.\\n *\\n * Any time a depositor updates their deposit (withdrawal, top-up) their accumulated ETH gain is paid out, their new deposit is recorded\\n * (based on their latest compounded deposit and modified by the withdrawal/top-up), and they receive new snapshots of the latest P and S.\\n * Essentially, they make a fresh deposit that overwrites the old one.\\n *\\n *\\n * --- SCALE FACTOR ---\\n *\\n * Since P is a running product in range ]0,1] that is always-decreasing, it should never reach 0 when multiplied by a number in range ]0,1[.\\n * Unfortunately, Solidity floor division always reaches 0, sooner or later.\\n *\\n * A series of liquidations that nearly empty the Pool (and thus each multiply P by a very small number in range ]0,1[ ) may push P\\n * to its 18 digit decimal limit, and round it to 0, when in fact the Pool hasn't been emptied: this would break deposit tracking.\\n *\\n * So, to track P accurately, we use a scale factor: if a liquidation would cause P to decrease to <1e-9 (and be rounded to 0 by Solidity),\\n * we first multiply P by 1e9, and increment a currentScale factor by 1.\\n *\\n * The added benefit of using 1e9 for the scale factor (rather than 1e18) is that it ensures negligible precision loss close to the\\n * scale boundary: when P is at its minimum value of 1e9, the relative precision loss in P due to floor division is only on the\\n * order of 1e-9.\\n *\\n * --- EPOCHS ---\\n *\\n * Whenever a liquidation fully empties the Stability Pool, all deposits should become 0. However, setting P to 0 would make P be 0\\n * forever, and break all future reward calculations.\\n *\\n * So, every time the Stability Pool is emptied by a liquidation, we reset P = 1 and currentScale = 0, and increment the currentEpoch by 1.\\n *\\n * --- TRACKING DEPOSIT OVER SCALE CHANGES AND EPOCHS ---\\n *\\n * When a deposit is made, it gets snapshots of the currentEpoch and the currentScale.\\n *\\n * When calculating a compounded deposit, we compare the current epoch to the deposit's epoch snapshot. If the current epoch is newer,\\n * then the deposit was present during a pool-emptying liquidation, and necessarily has been depleted to 0.\\n *\\n * Otherwise, we then compare the current scale to the deposit's scale snapshot. If they're equal, the compounded deposit is given by d_t * P/P_t.\\n * If it spans one scale change, it is given by d_t * P/(P_t * 1e9). If it spans more than one scale change, we define the compounded deposit\\n * as 0, since it is now less than 1e-9'th of its initial value (e.g. a deposit of 1 billion ZUSD has depleted to < 1 ZUSD).\\n *\\n *\\n *  --- TRACKING DEPOSITOR'S ETH GAIN OVER SCALE CHANGES AND EPOCHS ---\\n *\\n * In the current epoch, the latest value of S is stored upon each scale change, and the mapping (scale -> S) is stored for each epoch.\\n *\\n * This allows us to calculate a deposit's accumulated ETH gain, during the epoch in which the deposit was non-zero and earned ETH.\\n *\\n * We calculate the depositor's accumulated ETH gain for the scale at which they made the deposit, using the ETH gain formula:\\n * e_1 = d_t * (S - S_t) / P_t\\n *\\n * and also for scale after, taking care to divide the latter by a factor of 1e9:\\n * e_2 = d_t * S / (P_t * 1e9)\\n *\\n * The gain in the second scale will be full, as the starting point was in the previous scale, thus no need to subtract anything.\\n * The deposit therefore was present for reward events from the beginning of that second scale.\\n *\\n *        S_i-S_t + S_{i+1}\\n *      .<--------.------------>\\n *      .         .\\n *      . S_i     .   S_{i+1}\\n *   <--.-------->.<----------->\\n *   S_t.         .\\n *   <->.         .\\n *      t         .\\n *  |---+---------|-------------|-----...\\n *         i            i+1\\n *\\n * The sum of (e_1 + e_2) captures the depositor's total accumulated ETH gain, handling the case where their\\n * deposit spanned one scale change. We only care about gains across one scale change, since the compounded\\n * deposit is defined as being 0 once it has spanned more than one scale change.\\n *\\n *\\n * --- UPDATING P WHEN A LIQUIDATION OCCURS ---\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / ETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n *\\n * --- SOV ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * An SOV issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued SOV in proportion to the deposit as a share of total deposits. The SOV earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#zero-issuance-to-stability-providers\\n *\\n * We use the same mathematical product-sum approach to track SOV gains for depositors, where 'G' is the sum corresponding to SOV gains.\\n * The product P (and snapshot P_t) is re-used, as the ratio P/P_t tracks a deposit's depletion due to liquidations.\\n *\\n */\\ncontract StabilityPool is LiquityBase, StabilityPoolStorage, CheckContract, IStabilityPool {\\n    using LiquitySafeMath128 for uint128;\\n    address private constant ADDRESS_ZERO = address(0);\\n\\n    // --- Events ---\\n\\n    event StabilityPoolETHBalanceUpdated(uint256 _newBalance);\\n    event StabilityPoolZUSDBalanceUpdated(uint256 _newBalance);\\n\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event ZUSDTokenAddressChanged(address _newZUSDTokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint256 _P);\\n    event S_Updated(uint256 _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint256 _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event FrontEndRegistered(address indexed _frontEnd, uint256 _kickbackRate);\\n    event FrontEndTagSet(address indexed _depositor, address indexed _frontEnd);\\n\\n    event DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _S, uint256 _G);\\n    event FrontEndSnapshotUpdated(address indexed _frontEnd, uint256 _P, uint256 _G);\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n    event FrontEndStakeChanged(\\n        address indexed _frontEnd,\\n        uint256 _newFrontEndStake,\\n        address _depositor\\n    );\\n\\n    event ETHGainWithdrawn(address indexed _depositor, uint256 _ETH, uint256 _ZUSDLoss);\\n    event SOVPaidToDepositor(address indexed _depositor, uint256 _SOV);\\n    event SOVPaidToFrontEnd(address indexed _frontEnd, uint256 _SOV);\\n    event EtherSent(address _to, uint256 _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _liquityBaseParamsAddress,\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _zusdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _priceFeedAddress,\\n        address _communityIssuanceAddress\\n    ) external override onlyOwner {\\n        checkContract(_liquityBaseParamsAddress);\\n        checkContract(_borrowerOperationsAddress);\\n        checkContract(_troveManagerAddress);\\n        checkContract(_activePoolAddress);\\n        checkContract(_zusdTokenAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_priceFeedAddress);\\n        checkContract(_communityIssuanceAddress);\\n\\n        P = DECIMAL_PRECISION;\\n\\n        liquityBaseParams = ILiquityBaseParams(_liquityBaseParamsAddress);\\n        borrowerOperations = IBorrowerOperations(_borrowerOperationsAddress);\\n        troveManager = ITroveManager(_troveManagerAddress);\\n        activePool = IActivePool(_activePoolAddress);\\n        zusdToken = IZUSDToken(_zusdTokenAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        priceFeed = IPriceFeed(_priceFeedAddress);\\n        communityIssuance = ICommunityIssuance(_communityIssuanceAddress);\\n\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit ZUSDTokenAddressChanged(_zusdTokenAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit PriceFeedAddressChanged(_priceFeedAddress);\\n        emit CommunityIssuanceAddressChanged(_communityIssuanceAddress);\\n    }\\n\\n    /**\\n     * @dev setter function specific for community issuance contract.\\n     * @param _communityIssuanceAddress address of new community issuance contract.\\n     */\\n    function setCommunityIssuanceAddress(address _communityIssuanceAddress) external onlyOwner {\\n        checkContract(_communityIssuanceAddress);\\n        communityIssuance = ICommunityIssuance(_communityIssuanceAddress);\\n        emit CommunityIssuanceAddressChanged(_communityIssuanceAddress);\\n    }\\n\\n    // --- Getters for public variables. Required by IPool interface ---\\n\\n    function getETH() external view override returns (uint256) {\\n        return ETH;\\n    }\\n\\n    function getTotalZUSDDeposits() external view override returns (uint256) {\\n        return totalZUSDDeposits;\\n    }\\n\\n    // --- External Depositor Functions ---\\n\\n    /**  provideToSP():\\n     *\\n     * - Triggers a SOV issuance, based on time passed since the last issuance and total amount of deposited ZUSD. The SOV issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (SOV, ETH) to depositor\\n     * - Sends the tagged front end's accumulated SOV gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint256 _amount, address _frontEndTag) external override {\\n        _provideToSP(_amount, _frontEndTag);\\n    }\\n\\n    function _provideToSP(uint256 _amount, address _frontEndTag) internal {\\n        _requireFrontEndIsRegisteredOrZero(_frontEndTag);\\n        _requireFrontEndNotRegistered(msg.sender);\\n        _requireNonZeroAmount(_amount);\\n\\n        uint256 initialDeposit = deposits[msg.sender].initialValue;\\n\\n        ICommunityIssuance communityIssuanceCached = communityIssuance;\\n\\n        _triggerSOVIssuance(communityIssuanceCached);\\n\\n        if (initialDeposit == 0) {\\n            _setFrontEndTag(msg.sender, _frontEndTag);\\n        }\\n        uint256 depositorETHGain = getDepositorETHGain(msg.sender);\\n        uint256 compoundedZUSDDeposit = getCompoundedZUSDDeposit(msg.sender);\\n        uint256 ZUSDLoss = initialDeposit.sub(compoundedZUSDDeposit); // Needed only for event log\\n\\n        // First pay out any SOV gains\\n        address frontEnd = deposits[msg.sender].frontEndTag;\\n        _payOutSOVGains(communityIssuanceCached, msg.sender, frontEnd);\\n\\n        // Update front end stake\\n        uint256 compoundedFrontEndStake = getCompoundedFrontEndStake(frontEnd);\\n        uint256 newFrontEndStake = compoundedFrontEndStake.add(_amount);\\n        _updateFrontEndStakeAndSnapshots(frontEnd, newFrontEndStake);\\n        emit FrontEndStakeChanged(frontEnd, newFrontEndStake, msg.sender);\\n\\n        _sendZUSDtoStabilityPool(msg.sender, _amount);\\n\\n        uint256 newDeposit = compoundedZUSDDeposit.add(_amount);\\n        _updateDepositAndSnapshots(msg.sender, newDeposit);\\n        emit UserDepositChanged(msg.sender, newDeposit);\\n\\n        emit ETHGainWithdrawn(msg.sender, depositorETHGain, ZUSDLoss); // ZUSD Loss required for event log\\n\\n        _sendETHGainToDepositor(depositorETHGain);\\n    }\\n\\n    ///DLLR _owner or _spender can convert a specified amount of DLLR into ZUSD via Sovryn Mynt and deposit the ZUSD into the Zero Stability Pool, all in a single transaction\\n    function provideToSpFromDLLR(\\n        uint256 _dllrAmount,\\n        IMassetManager.PermitParams calldata _permitParams\\n    ) external override {\\n        uint256 _ZUSDAmount = MyntLib.redeemZusdFromDllrWithPermit(\\n            borrowerOperations.getMassetManager(),\\n            _dllrAmount,\\n            address(zusdToken),\\n            _permitParams\\n        );\\n\\n        _provideToSP(_ZUSDAmount, ADDRESS_ZERO);\\n    }\\n\\n    /**  withdrawFromSP():\\n     *\\n     * - Triggers a SOV issuance, based on time passed since the last issuance and total amount of ZUSD is deposited. The SOV issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (SOV, ETH) to depositor\\n     * - Sends the tagged front end's accumulated SOV gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount) external override {\\n        _withdrawFromSpTo(_amount, msg.sender);\\n    }\\n\\n    ///@return actual ZUSD amount withdrawn\\n    function _withdrawFromSpTo(uint256 _amount, address _receiver) internal returns (uint256) {\\n        require(_receiver != address(0), \\\"SP::_withdrawFromSpTo: _receiver is zero address\\\");\\n        if (_amount != 0) {\\n            _requireNoUnderCollateralizedTroves();\\n        }\\n        uint256 initialDeposit = deposits[msg.sender].initialValue;\\n        _requireUserHasDeposit(initialDeposit);\\n\\n        ICommunityIssuance communityIssuanceCached = communityIssuance;\\n\\n        _triggerSOVIssuance(communityIssuanceCached);\\n\\n        uint256 depositorETHGain = getDepositorETHGain(msg.sender);\\n\\n        uint256 compoundedZUSDDeposit = getCompoundedZUSDDeposit(msg.sender);\\n        uint256 ZUSDtoWithdraw = LiquityMath._min(_amount, compoundedZUSDDeposit);\\n        uint256 ZUSDLoss = initialDeposit.sub(compoundedZUSDDeposit); // Needed only for event log\\n\\n        // First pay out any SOV gains\\n        address frontEnd = deposits[msg.sender].frontEndTag;\\n        _payOutSOVGains(communityIssuanceCached, msg.sender, frontEnd);\\n\\n        // Update front end stake\\n        uint256 compoundedFrontEndStake = getCompoundedFrontEndStake(frontEnd);\\n        uint256 newFrontEndStake = compoundedFrontEndStake.sub(ZUSDtoWithdraw);\\n        _updateFrontEndStakeAndSnapshots(frontEnd, newFrontEndStake);\\n        emit FrontEndStakeChanged(frontEnd, newFrontEndStake, msg.sender);\\n\\n        _sendZUSDToDepositor(_receiver, ZUSDtoWithdraw);\\n\\n        // Update deposit\\n        uint256 newDeposit = compoundedZUSDDeposit.sub(ZUSDtoWithdraw);\\n        _updateDepositAndSnapshots(msg.sender, newDeposit);\\n        emit UserDepositChanged(msg.sender, newDeposit);\\n\\n        emit ETHGainWithdrawn(msg.sender, depositorETHGain, ZUSDLoss); // ZUSD Loss required for event log\\n\\n        _sendETHGainTo(depositorETHGain, msg.sender);\\n\\n        return ZUSDtoWithdraw;\\n    }\\n\\n    ///Stability Pool depositor can withdraw a specified amount of ZUSD from the Zero Stability Pool and convert the ZUSD to DLLR via Sovryn Mynt, all in a single transaction\\n    function withdrawFromSpAndConvertToDLLR(uint256 _zusdAmountRequested) external override {\\n        IMassetManager massetManager = borrowerOperations.getMassetManager();\\n        uint256 amountWithdrawn = _withdrawFromSpTo(_zusdAmountRequested, address(this));\\n        require(\\n            zusdToken.approve(address(massetManager), amountWithdrawn),\\n            \\\"Failed to approve ZUSD amount for Mynt mAsset to redeem\\\"\\n        );\\n        massetManager.mintTo(address(zusdToken), amountWithdrawn, msg.sender);\\n        emit WithdrawFromSpAndConvertToDLLR(msg.sender, _zusdAmountRequested, amountWithdrawn);\\n    }\\n\\n    /** withdrawETHGainToTrove:\\n     * - Triggers a SOV issuance, based on time passed since the last issuance. The SOV issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's SOV gain to  depositor\\n     * - Sends all tagged front end's SOV gain to the tagged front end\\n     * - Transfers the depositor's entire ETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake */\\n    function withdrawETHGainToTrove(address _upperHint, address _lowerHint) external override {\\n        uint256 initialDeposit = deposits[msg.sender].initialValue;\\n        _requireUserHasDeposit(initialDeposit);\\n        _requireUserHasTrove(msg.sender);\\n        _requireUserHasETHGain(msg.sender);\\n\\n        ICommunityIssuance communityIssuanceCached = communityIssuance;\\n\\n        _triggerSOVIssuance(communityIssuanceCached);\\n\\n        uint256 depositorETHGain = getDepositorETHGain(msg.sender);\\n\\n        uint256 compoundedZUSDDeposit = getCompoundedZUSDDeposit(msg.sender);\\n        uint256 ZUSDLoss = initialDeposit.sub(compoundedZUSDDeposit); // Needed only for event log\\n\\n        // First pay out any SOV gains\\n        address frontEnd = deposits[msg.sender].frontEndTag;\\n        _payOutSOVGains(communityIssuanceCached, msg.sender, frontEnd);\\n\\n        // Update front end stake\\n        uint256 compoundedFrontEndStake = getCompoundedFrontEndStake(frontEnd);\\n        uint256 newFrontEndStake = compoundedFrontEndStake;\\n        _updateFrontEndStakeAndSnapshots(frontEnd, newFrontEndStake);\\n        emit FrontEndStakeChanged(frontEnd, newFrontEndStake, msg.sender);\\n\\n        _updateDepositAndSnapshots(msg.sender, compoundedZUSDDeposit);\\n\\n        /* Emit events before transferring ETH gain to Trove.\\n         This lets the event log make more sense (i.e. so it appears that first the ETH gain is withdrawn\\n        and then it is deposited into the Trove, not the other way around). */\\n        emit ETHGainWithdrawn(msg.sender, depositorETHGain, ZUSDLoss);\\n        emit UserDepositChanged(msg.sender, compoundedZUSDDeposit);\\n\\n        ETH = ETH.sub(depositorETHGain);\\n        emit StabilityPoolETHBalanceUpdated(ETH);\\n        emit EtherSent(msg.sender, depositorETHGain);\\n\\n        borrowerOperations.moveETHGainToTrove{ value: depositorETHGain }(\\n            msg.sender,\\n            _upperHint,\\n            _lowerHint\\n        );\\n    }\\n\\n    // --- SOV issuance functions ---\\n\\n    function _triggerSOVIssuance(ICommunityIssuance _communityIssuance) internal {\\n        uint256 SOVIssuance = _communityIssuance.issueSOV(totalZUSDDeposits);\\n        _updateG(SOVIssuance);\\n    }\\n\\n    function _updateG(uint256 _SOVIssuance) internal {\\n        uint256 totalZUSD = totalZUSDDeposits; // cached to save an SLOAD\\n        /*\\n         * When total deposits is 0, G is not updated. In this case, the SOV issued can not be obtained by later\\n         * depositors - it is missed out on, and remains in the balanceof the CommunityIssuance contract.\\n         *\\n         */\\n        if (totalZUSD == 0 || _SOVIssuance == 0) {\\n            return;\\n        }\\n\\n        uint256 SOVPerUnitStaked;\\n        SOVPerUnitStaked = _computeSOVPerUnitStaked(_SOVIssuance, totalZUSD);\\n\\n        uint256 marginalSOVGain = SOVPerUnitStaked.mul(P);\\n        epochToScaleToG[currentEpoch][currentScale] = epochToScaleToG[currentEpoch][currentScale]\\n            .add(marginalSOVGain);\\n\\n        emit G_Updated(epochToScaleToG[currentEpoch][currentScale], currentEpoch, currentScale);\\n    }\\n\\n    function _computeSOVPerUnitStaked(uint256 _SOVIssuance, uint256 _totalZUSDDeposits)\\n        internal\\n        returns (uint256)\\n    {\\n        /*\\n         * Calculate the SOV-per-unit staked.  Division uses a \\\"feedback\\\" error correction, to keep the\\n         * cumulative error low in the running total G:\\n         *\\n         * 1) Form a numerator which compensates for the floor division error that occurred the last time this\\n         * function was called.\\n         * 2) Calculate \\\"per-unit-staked\\\" ratio.\\n         * 3) Multiply the ratio back by its denominator, to reveal the current floor division error.\\n         * 4) Store this error for use in the next correction when this function is called.\\n         * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n         */\\n        uint256 SOVNumerator = _SOVIssuance.mul(DECIMAL_PRECISION).add(lastSOVError);\\n\\n        uint256 SOVPerUnitStaked = SOVNumerator.div(_totalZUSDDeposits);\\n        lastSOVError = SOVNumerator.sub(SOVPerUnitStaked.mul(_totalZUSDDeposits));\\n\\n        return SOVPerUnitStaked;\\n    }\\n\\n    // --- Liquidation functions ---\\n\\n    /**\\n     * Cancels out the specified debt against the ZUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's ETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint256 _debtToOffset, uint256 _collToAdd) external override {\\n        _requireCallerIsTroveManager();\\n        uint256 totalZUSD = totalZUSDDeposits; // cached to save an SLOAD\\n        if (totalZUSD == 0 || _debtToOffset == 0) {\\n            return;\\n        }\\n\\n        _triggerSOVIssuance(communityIssuance);\\n\\n        (\\n            uint256 ETHGainPerUnitStaked,\\n            uint256 ZUSDLossPerUnitStaked\\n        ) = _computeRewardsPerUnitStaked(_collToAdd, _debtToOffset, totalZUSD);\\n\\n        _updateRewardSumAndProduct(ETHGainPerUnitStaked, ZUSDLossPerUnitStaked); // updates S and P\\n\\n        _moveOffsetCollAndDebt(_collToAdd, _debtToOffset);\\n    }\\n\\n    // --- Offset helper functions ---\\n\\n    function _computeRewardsPerUnitStaked(\\n        uint256 _collToAdd,\\n        uint256 _debtToOffset,\\n        uint256 _totalZUSDDeposits\\n    ) internal returns (uint256 ETHGainPerUnitStaked, uint256 ZUSDLossPerUnitStaked) {\\n        /*\\n         * Compute the ZUSD and ETH rewards. Uses a \\\"feedback\\\" error correction, to keep\\n         * the cumulative error in the P and S state variables low:\\n         *\\n         * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\n         * function was called.\\n         * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n         * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n         * 4) Store these errors for use in the next correction when this function is called.\\n         * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n         */\\n        uint256 ETHNumerator = _collToAdd.mul(DECIMAL_PRECISION).add(lastETHError_Offset);\\n\\n        assert(_debtToOffset <= _totalZUSDDeposits);\\n        if (_debtToOffset == _totalZUSDDeposits) {\\n            ZUSDLossPerUnitStaked = DECIMAL_PRECISION; // When the Pool depletes to 0, so does each deposit\\n            lastZUSDLossError_Offset = 0;\\n        } else {\\n            uint256 ZUSDLossNumerator = _debtToOffset.mul(DECIMAL_PRECISION).sub(\\n                lastZUSDLossError_Offset\\n            );\\n            /*\\n             * Add 1 to make error in quotient positive. We want \\\"slightly too much\\\" ZUSD loss,\\n             * which ensures the error in any given compoundedZUSDDeposit favors the Stability Pool.\\n             */\\n            ZUSDLossPerUnitStaked = (ZUSDLossNumerator.div(_totalZUSDDeposits)).add(1);\\n            lastZUSDLossError_Offset = (ZUSDLossPerUnitStaked.mul(_totalZUSDDeposits)).sub(\\n                ZUSDLossNumerator\\n            );\\n        }\\n\\n        ETHGainPerUnitStaked = ETHNumerator.div(_totalZUSDDeposits);\\n        lastETHError_Offset = ETHNumerator.sub(ETHGainPerUnitStaked.mul(_totalZUSDDeposits));\\n\\n        return (ETHGainPerUnitStaked, ZUSDLossPerUnitStaked);\\n    }\\n\\n    /// Update the Stability Pool reward sum S and product P\\n    function _updateRewardSumAndProduct(\\n        uint256 _ETHGainPerUnitStaked,\\n        uint256 _ZUSDLossPerUnitStaked\\n    ) internal {\\n        uint256 currentP = P;\\n        uint256 newP;\\n\\n        assert(_ZUSDLossPerUnitStaked <= DECIMAL_PRECISION);\\n        /*\\n         * The newProductFactor is the factor by which to change all deposits, due to the depletion of Stability Pool ZUSD in the liquidation.\\n         * We make the product factor 0 if there was a pool-emptying. Otherwise, it is (1 - ZUSDLossPerUnitStaked)\\n         */\\n        uint256 newProductFactor = uint256(DECIMAL_PRECISION).sub(_ZUSDLossPerUnitStaked);\\n\\n        uint128 currentScaleCached = currentScale;\\n        uint128 currentEpochCached = currentEpoch;\\n        uint256 currentS = epochToScaleToSum[currentEpochCached][currentScaleCached];\\n\\n        /*\\n         * Calculate the new S first, before we update P.\\n         * The ETH gain for any given depositor from a liquidation depends on the value of their deposit\\n         * (and the value of totalDeposits) prior to the Stability being depleted by the debt in the liquidation.\\n         *\\n         * Since S corresponds to ETH gain, and P to deposit loss, we update S first.\\n         */\\n        uint256 marginalETHGain = _ETHGainPerUnitStaked.mul(currentP);\\n        uint256 newS = currentS.add(marginalETHGain);\\n        epochToScaleToSum[currentEpochCached][currentScaleCached] = newS;\\n        emit S_Updated(newS, currentEpochCached, currentScaleCached);\\n\\n        // If the Stability Pool was emptied, increment the epoch, and reset the scale and product P\\n        if (newProductFactor == 0) {\\n            currentEpoch = currentEpochCached.add(1);\\n            emit EpochUpdated(currentEpoch);\\n            currentScale = 0;\\n            emit ScaleUpdated(currentScale);\\n            newP = DECIMAL_PRECISION;\\n\\n            // If multiplying P by a non-zero product factor would reduce P below the scale boundary, increment the scale\\n        } else if (currentP.mul(newProductFactor).div(DECIMAL_PRECISION) < SCALE_FACTOR) {\\n            newP = currentP.mul(newProductFactor).mul(SCALE_FACTOR).div(DECIMAL_PRECISION);\\n            currentScale = currentScaleCached.add(1);\\n            emit ScaleUpdated(currentScale);\\n        } else {\\n            newP = currentP.mul(newProductFactor).div(DECIMAL_PRECISION);\\n        }\\n\\n        assert(newP > 0);\\n        P = newP;\\n\\n        emit P_Updated(newP);\\n    }\\n\\n    function _moveOffsetCollAndDebt(uint256 _collToAdd, uint256 _debtToOffset) internal {\\n        IActivePool activePoolCached = activePool;\\n\\n        // Cancel the liquidated ZUSD debt with the ZUSD in the stability pool\\n        activePoolCached.decreaseZUSDDebt(_debtToOffset);\\n        _decreaseZUSD(_debtToOffset);\\n\\n        // Burn the debt that was successfully offset\\n        zusdToken.burn(address(this), _debtToOffset);\\n\\n        activePoolCached.sendETH(address(this), _collToAdd);\\n    }\\n\\n    function _decreaseZUSD(uint256 _amount) internal {\\n        uint256 newTotalZUSDDeposits = totalZUSDDeposits.sub(_amount);\\n        totalZUSDDeposits = newTotalZUSDDeposits;\\n        emit StabilityPoolZUSDBalanceUpdated(newTotalZUSDDeposits);\\n    }\\n\\n    // --- Reward calculator functions for depositor and front end ---\\n\\n    /** Calculates the ETH gain earned by the deposit since its last snapshots were taken.\\n     * Given by the formula:  E = d0 * (S - S(0))/P(0)\\n     * where S(0) and P(0) are the depositor's snapshots of the sum S and product P, respectively.\\n     * d0 is the last recorded deposit value.\\n     */\\n    function getDepositorETHGain(address _depositor) public view override returns (uint256) {\\n        uint256 initialDeposit = deposits[_depositor].initialValue;\\n\\n        if (initialDeposit == 0) {\\n            return 0;\\n        }\\n\\n        Snapshots memory snapshots = depositSnapshots[_depositor];\\n\\n        uint256 ETHGain = _getETHGainFromSnapshots(initialDeposit, snapshots);\\n        return ETHGain;\\n    }\\n\\n    function _getETHGainFromSnapshots(uint256 initialDeposit, Snapshots memory snapshots)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        /*\\n         * Grab the sum 'S' from the epoch at which the stake was made. The ETH gain may span up to one scale change.\\n         * If it does, the second portion of the ETH gain is scaled by 1e9.\\n         * If the gain spans no scale change, the second portion will be 0.\\n         */\\n        uint128 epochSnapshot = snapshots.epoch;\\n        uint128 scaleSnapshot = snapshots.scale;\\n        uint256 S_Snapshot = snapshots.S;\\n        uint256 P_Snapshot = snapshots.P;\\n\\n        uint256 firstPortion = epochToScaleToSum[epochSnapshot][scaleSnapshot].sub(S_Snapshot);\\n        uint256 secondPortion = epochToScaleToSum[epochSnapshot][scaleSnapshot.add(1)].div(\\n            SCALE_FACTOR\\n        );\\n\\n        uint256 ETHGain = initialDeposit.mul(firstPortion.add(secondPortion)).div(P_Snapshot).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        return ETHGain;\\n    }\\n\\n    /**\\n     * Calculate the SOV gain earned by a deposit since its last snapshots were taken.\\n     * Given by the formula:  SOV = d0 * (G - G(0))/P(0)\\n     * where G(0) and P(0) are the depositor's snapshots of the sum G and product P, respectively.\\n     * d0 is the last recorded deposit value.\\n     */\\n    function getDepositorSOVGain(address _depositor) public view override returns (uint256) {\\n        uint256 initialDeposit = deposits[_depositor].initialValue;\\n        if (initialDeposit == 0) {\\n            return 0;\\n        }\\n\\n        address frontEndTag = deposits[_depositor].frontEndTag;\\n\\n        /*\\n         * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n         * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n         * which they made their deposit.\\n         */\\n        uint256 kickbackRate = frontEndTag == ADDRESS_ZERO\\n            ? DECIMAL_PRECISION\\n            : frontEnds[frontEndTag].kickbackRate;\\n\\n        Snapshots memory snapshots = depositSnapshots[_depositor];\\n\\n        uint256 SOVGain = kickbackRate\\n            .mul(_getSOVGainFromSnapshots(initialDeposit, snapshots))\\n            .div(DECIMAL_PRECISION);\\n\\n        return SOVGain;\\n    }\\n\\n    /**\\n     * Return the SOV gain earned by the front end. Given by the formula:  E = D0 * (G - G(0))/P(0)\\n     * where G(0) and P(0) are the depositor's snapshots of the sum G and product P, respectively.\\n     *\\n     * D0 is the last recorded value of the front end's total tagged deposits.\\n     */\\n    function getFrontEndSOVGain(address _frontEnd) public view override returns (uint256) {\\n        uint256 frontEndStake = frontEndStakes[_frontEnd];\\n        if (frontEndStake == 0) {\\n            return 0;\\n        }\\n\\n        uint256 kickbackRate = frontEnds[_frontEnd].kickbackRate;\\n        uint256 frontEndShare = uint256(DECIMAL_PRECISION).sub(kickbackRate);\\n\\n        Snapshots memory snapshots = frontEndSnapshots[_frontEnd];\\n\\n        uint256 SOVGain = frontEndShare\\n            .mul(_getSOVGainFromSnapshots(frontEndStake, snapshots))\\n            .div(DECIMAL_PRECISION);\\n        return SOVGain;\\n    }\\n\\n    function _getSOVGainFromSnapshots(uint256 initialStake, Snapshots memory snapshots)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        /*\\n         * Grab the sum 'G' from the epoch at which the stake was made. The SOV gain may span up to one scale change.\\n         * If it does, the second portion of the SOV gain is scaled by 1e9.\\n         * If the gain spans no scale change, the second portion will be 0.\\n         */\\n        uint128 epochSnapshot = snapshots.epoch;\\n        uint128 scaleSnapshot = snapshots.scale;\\n        uint256 G_Snapshot = snapshots.G;\\n        uint256 P_Snapshot = snapshots.P;\\n\\n        uint256 firstPortion = epochToScaleToG[epochSnapshot][scaleSnapshot].sub(G_Snapshot);\\n        uint256 secondPortion = epochToScaleToG[epochSnapshot][scaleSnapshot.add(1)].div(\\n            SCALE_FACTOR\\n        );\\n\\n        uint256 SOVGain = initialStake.mul(firstPortion.add(secondPortion)).div(P_Snapshot).div(\\n            DECIMAL_PRECISION\\n        );\\n\\n        return SOVGain;\\n    }\\n\\n    // --- Compounded deposit and compounded front end stake ---\\n\\n    /**\\n     * Return the user's compounded deposit. Given by the formula:  d = d0 * P/P(0)\\n     * where P(0) is the depositor's snapshot of the product P, taken when they last updated their deposit.\\n     */\\n    function getCompoundedZUSDDeposit(address _depositor) public view override returns (uint256) {\\n        uint256 initialDeposit = deposits[_depositor].initialValue;\\n        if (initialDeposit == 0) {\\n            return 0;\\n        }\\n\\n        Snapshots memory snapshots = depositSnapshots[_depositor];\\n\\n        uint256 compoundedDeposit = _getCompoundedStakeFromSnapshots(initialDeposit, snapshots);\\n        return compoundedDeposit;\\n    }\\n\\n    /**\\n     * Return the front end's compounded stake. Given by the formula:  D = D0 * P/P(0)\\n     * where P(0) is the depositor's snapshot of the product P, taken at the last time\\n     * when one of the front end's tagged deposits updated their deposit.\\n     *\\n     * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\n     */\\n    function getCompoundedFrontEndStake(address _frontEnd) public view override returns (uint256) {\\n        uint256 frontEndStake = frontEndStakes[_frontEnd];\\n        if (frontEndStake == 0) {\\n            return 0;\\n        }\\n\\n        Snapshots memory snapshots = frontEndSnapshots[_frontEnd];\\n\\n        uint256 compoundedFrontEndStake = _getCompoundedStakeFromSnapshots(\\n            frontEndStake,\\n            snapshots\\n        );\\n        return compoundedFrontEndStake;\\n    }\\n\\n    // Internal function, used to calculcate compounded deposits and compounded front end stakes.\\n    function _getCompoundedStakeFromSnapshots(uint256 initialStake, Snapshots memory snapshots)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 snapshot_P = snapshots.P;\\n        uint128 scaleSnapshot = snapshots.scale;\\n        uint128 epochSnapshot = snapshots.epoch;\\n\\n        // If stake was made before a pool-emptying event, then it has been fully cancelled with debt -- so, return 0\\n        if (epochSnapshot < currentEpoch) {\\n            return 0;\\n        }\\n\\n        uint256 compoundedStake;\\n        uint128 scaleDiff = currentScale.sub(scaleSnapshot);\\n\\n        /* Compute the compounded stake. If a scale change in P was made during the stake's lifetime,\\n         * account for it. If more than one scale change was made, then the stake has decreased by a factor of\\n         * at least 1e-9 -- so return 0.\\n         */\\n        if (scaleDiff == 0) {\\n            compoundedStake = initialStake.mul(P).div(snapshot_P);\\n        } else if (scaleDiff == 1) {\\n            compoundedStake = initialStake.mul(P).div(snapshot_P).div(SCALE_FACTOR);\\n        } else {\\n            // if scaleDiff >= 2\\n            compoundedStake = 0;\\n        }\\n\\n        /*\\n         * If compounded deposit is less than a billionth of the initial deposit, return 0.\\n         *\\n         * NOTE: originally, this line was in place to stop rounding errors making the deposit too large. However, the error\\n         * corrections should ensure the error in P \\\"favors the Pool\\\", i.e. any given compounded deposit should slightly less\\n         * than it's theoretical value.\\n         *\\n         * Thus it's unclear whether this line is still really needed.\\n         */\\n        if (compoundedStake < initialStake.div(1e9)) {\\n            return 0;\\n        }\\n\\n        return compoundedStake;\\n    }\\n\\n    // --- Sender functions for ZUSD deposit, ETH gains and SOV gains ---\\n\\n    /// Transfer the ZUSD tokens from the user to the Stability Pool's address, and update its recorded ZUSD\\n    function _sendZUSDtoStabilityPool(address _address, uint256 _amount) internal {\\n        zusdToken.sendToPool(_address, address(this), _amount);\\n        uint256 newTotalZUSDDeposits = totalZUSDDeposits.add(_amount);\\n        totalZUSDDeposits = newTotalZUSDDeposits;\\n        emit StabilityPoolZUSDBalanceUpdated(newTotalZUSDDeposits);\\n    }\\n\\n    function _sendETHGainToDepositor(uint256 _amount) internal {\\n        _sendETHGainTo(_amount, msg.sender);\\n    }\\n\\n    function _sendETHGainTo(uint256 _amount, address _receiver) internal {\\n        require(_receiver != address(0), \\\"SP::_sendETHGainTo: _receiver is zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n        uint256 newETH = ETH.sub(_amount);\\n        ETH = newETH;\\n        emit StabilityPoolETHBalanceUpdated(newETH);\\n        emit EtherSent(msg.sender, _amount);\\n\\n        (bool success, ) = msg.sender.call{ value: _amount }(\\\"\\\");\\n        require(success, \\\"StabilityPool: sending ETH failed\\\");\\n    }\\n\\n    /// Send ZUSD to user and decrease ZUSD in Pool\\n    function _sendZUSDToDepositor(address _depositor, uint256 ZUSDWithdrawal) internal {\\n        if (ZUSDWithdrawal == 0) {\\n            return;\\n        }\\n\\n        zusdToken.returnFromPool(address(this), _depositor, ZUSDWithdrawal);\\n        _decreaseZUSD(ZUSDWithdrawal);\\n    }\\n\\n    // --- External Front End functions ---\\n\\n    /// Front end makes a one-time selection of kickback rate upon registering\\n    function registerFrontEnd(uint256 _kickbackRate) external override {\\n        _requireFrontEndNotRegistered(msg.sender);\\n        _requireUserHasNoDeposit(msg.sender);\\n        _requireValidKickbackRate(_kickbackRate);\\n\\n        frontEnds[msg.sender].kickbackRate = _kickbackRate;\\n        frontEnds[msg.sender].registered = true;\\n\\n        emit FrontEndRegistered(msg.sender, _kickbackRate);\\n    }\\n\\n    // --- Stability Pool Deposit Functionality ---\\n\\n    function _setFrontEndTag(address _depositor, address _frontEndTag) internal {\\n        deposits[_depositor].frontEndTag = _frontEndTag;\\n        emit FrontEndTagSet(_depositor, _frontEndTag);\\n    }\\n\\n    function _updateDepositAndSnapshots(address _depositor, uint256 _newValue) internal {\\n        deposits[_depositor].initialValue = _newValue;\\n\\n        if (_newValue == 0) {\\n            delete deposits[_depositor].frontEndTag;\\n            delete depositSnapshots[_depositor];\\n            emit DepositSnapshotUpdated(_depositor, 0, 0, 0);\\n            return;\\n        }\\n        uint128 currentScaleCached = currentScale;\\n        uint128 currentEpochCached = currentEpoch;\\n        uint256 currentP = P;\\n\\n        // Get S and G for the current epoch and current scale\\n        uint256 currentS = epochToScaleToSum[currentEpochCached][currentScaleCached];\\n        uint256 currentG = epochToScaleToG[currentEpochCached][currentScaleCached];\\n\\n        // Record new snapshots of the latest running product P, sum S, and sum G, for the depositor\\n        depositSnapshots[_depositor].P = currentP;\\n        depositSnapshots[_depositor].S = currentS;\\n        depositSnapshots[_depositor].G = currentG;\\n        depositSnapshots[_depositor].scale = currentScaleCached;\\n        depositSnapshots[_depositor].epoch = currentEpochCached;\\n\\n        emit DepositSnapshotUpdated(_depositor, currentP, currentS, currentG);\\n    }\\n\\n    function _updateFrontEndStakeAndSnapshots(address _frontEnd, uint256 _newValue) internal {\\n        frontEndStakes[_frontEnd] = _newValue;\\n\\n        if (_newValue == 0) {\\n            delete frontEndSnapshots[_frontEnd];\\n            emit FrontEndSnapshotUpdated(_frontEnd, 0, 0);\\n            return;\\n        }\\n\\n        uint128 currentScaleCached = currentScale;\\n        uint128 currentEpochCached = currentEpoch;\\n        uint256 currentP = P;\\n\\n        // Get G for the current epoch and current scale\\n        uint256 currentG = epochToScaleToG[currentEpochCached][currentScaleCached];\\n\\n        // Record new snapshots of the latest running product P and sum G for the front end\\n        frontEndSnapshots[_frontEnd].P = currentP;\\n        frontEndSnapshots[_frontEnd].G = currentG;\\n        frontEndSnapshots[_frontEnd].scale = currentScaleCached;\\n        frontEndSnapshots[_frontEnd].epoch = currentEpochCached;\\n\\n        emit FrontEndSnapshotUpdated(_frontEnd, currentP, currentG);\\n    }\\n\\n    function _payOutSOVGains(\\n        ICommunityIssuance _communityIssuance,\\n        address _depositor,\\n        address _frontEnd\\n    ) internal {\\n        // Pay out front end's SOV gain\\n        if (_frontEnd != ADDRESS_ZERO) {\\n            uint256 frontEndSOVGain = getFrontEndSOVGain(_frontEnd);\\n            _communityIssuance.sendSOV(_frontEnd, frontEndSOVGain);\\n            emit SOVPaidToFrontEnd(_frontEnd, frontEndSOVGain);\\n        }\\n\\n        // Pay out depositor's SOV gain\\n        uint256 depositorSOVGain = getDepositorSOVGain(_depositor);\\n        _communityIssuance.sendSOV(_depositor, depositorSOVGain);\\n        emit SOVPaidToDepositor(_depositor, depositorSOVGain);\\n    }\\n\\n    // --- 'require' functions ---\\n\\n    function _requireCallerIsActivePool() internal view {\\n        require(msg.sender == address(activePool), \\\"StabilityPool: Caller is not ActivePool\\\");\\n    }\\n\\n    function _requireCallerIsTroveManager() internal view {\\n        require(msg.sender == address(troveManager), \\\"StabilityPool: Caller is not TroveManager\\\");\\n    }\\n\\n    function _requireNoUnderCollateralizedTroves() internal {\\n        uint256 price = priceFeed.fetchPrice();\\n        address lowestTrove = sortedTroves.getLast();\\n        uint256 ICR = troveManager.getCurrentICR(lowestTrove, price);\\n        require(\\n            ICR >= liquityBaseParams.MCR(),\\n            \\\"StabilityPool: Cannot withdraw while there are troves with ICR < MCR\\\"\\n        );\\n    }\\n\\n    function _requireUserHasDeposit(uint256 _initialDeposit) internal pure {\\n        require(_initialDeposit > 0, \\\"StabilityPool: User must have a non-zero deposit\\\");\\n    }\\n\\n    function _requireUserHasNoDeposit(address _address) internal view {\\n        uint256 initialDeposit = deposits[_address].initialValue;\\n        require(initialDeposit == 0, \\\"StabilityPool: User must have no deposit\\\");\\n    }\\n\\n    function _requireNonZeroAmount(uint256 _amount) internal pure {\\n        require(_amount > 0, \\\"StabilityPool: Amount must be non-zero\\\");\\n    }\\n\\n    function _requireUserHasTrove(address _depositor) internal view {\\n        require(\\n            troveManager.getTroveStatus(_depositor) == 1,\\n            \\\"StabilityPool: caller must have an active trove to withdraw ETHGain to\\\"\\n        );\\n    }\\n\\n    function _requireUserHasETHGain(address _depositor) internal view {\\n        uint256 ETHGain = getDepositorETHGain(_depositor);\\n        require(ETHGain > 0, \\\"StabilityPool: caller must have non-zero ETH Gain\\\");\\n    }\\n\\n    function _requireFrontEndNotRegistered(address _address) internal view {\\n        require(\\n            !frontEnds[_address].registered,\\n            \\\"StabilityPool: must not already be a registered front end\\\"\\n        );\\n    }\\n\\n    function _requireFrontEndIsRegisteredOrZero(address _address) internal view {\\n        require(\\n            frontEnds[_address].registered || _address == ADDRESS_ZERO,\\n            \\\"StabilityPool: Tag must be a registered front end, or the zero address\\\"\\n        );\\n    }\\n\\n    function _requireValidKickbackRate(uint256 _kickbackRate) internal pure {\\n        require(\\n            _kickbackRate <= DECIMAL_PRECISION,\\n            \\\"StabilityPool: Kickback rate must be in range [0,1]\\\"\\n        );\\n    }\\n\\n    // --- Fallback function ---\\n\\n    receive() external payable {\\n        _requireCallerIsActivePool();\\n        ETH = ETH.add(msg.value);\\n        StabilityPoolETHBalanceUpdated(ETH);\\n    }\\n}\\n\",\"keccak256\":\"0xf87e830d8f0320eed544c33b4cabfc9b464fc81ad839507f843e6e9033d365dc\",\"license\":\"MIT\"},\"contracts/StabilityPoolStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./Interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"./Interfaces/IStabilityPool.sol\\\";\\nimport \\\"./Interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"./Interfaces/ITroveManager.sol\\\";\\nimport \\\"./Interfaces/IZUSDToken.sol\\\";\\nimport \\\"./Interfaces/ISortedTroves.sol\\\";\\nimport \\\"./Interfaces/ICommunityIssuance.sol\\\";\\nimport \\\"./Dependencies/Ownable.sol\\\";\\nimport \\\"./Dependencies/BaseMath.sol\\\";\\n\\ncontract StabilityPoolStorage is Ownable, BaseMath {\\n    string public constant NAME = \\\"StabilityPool\\\";\\n\\n    IBorrowerOperations public borrowerOperations;\\n\\n    ITroveManager public troveManager;\\n\\n    IZUSDToken public zusdToken;\\n\\n    // Needed to check if there are pending liquidations\\n    ISortedTroves public sortedTroves;\\n\\n    ICommunityIssuance public communityIssuance;\\n\\n    uint256 internal ETH; // deposited ether tracker\\n\\n    // Tracker for ZUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n    uint256 internal totalZUSDDeposits;\\n\\n    // --- Data structures ---\\n\\n    struct FrontEnd {\\n        uint256 kickbackRate;\\n        bool registered;\\n    }\\n\\n    struct Deposit {\\n        uint256 initialValue;\\n        address frontEndTag;\\n    }\\n\\n    struct Snapshots {\\n        uint256 S;\\n        uint256 P;\\n        uint256 G;\\n        uint128 scale;\\n        uint128 epoch;\\n    }\\n\\n    mapping(address => Deposit) public deposits; // depositor address -> Deposit struct\\n    mapping(address => Snapshots) public depositSnapshots; // depositor address -> snapshots struct\\n\\n    mapping(address => FrontEnd) public frontEnds; // front end address -> FrontEnd struct\\n    mapping(address => uint256) public frontEndStakes; // front end address -> last recorded total deposits, tagged with that front end\\n    mapping(address => Snapshots) public frontEndSnapshots; // front end address -> snapshots struct\\n\\n    /*  Product 'P': Running product by which to multiply an initial deposit, in order to find the current compounded deposit,\\n     * after a series of liquidations have occurred, each of which cancel some ZUSD debt with the deposit.\\n     *\\n     * During its lifetime, a deposit's value evolves from d_t to d_t * P / P_t , where P_t\\n     * is the snapshot of P taken at the instant the deposit was made. 18-digit decimal.\\n     */\\n    uint256 public P;\\n\\n    uint256 public constant SCALE_FACTOR = 1e9;\\n\\n    // Each time the scale of P shifts by SCALE_FACTOR, the scale is incremented by 1\\n    uint128 public currentScale;\\n\\n    // With each offset that fully empties the Pool, the epoch is incremented by 1\\n    uint128 public currentEpoch;\\n\\n    /* ETH Gain sum 'S': During its lifetime, each deposit d_t earns an ETH gain of ( d_t * [S - S_t] )/P_t, where S_t\\n     * is the depositor's snapshot of S taken at the time t when the deposit was made.\\n     *\\n     * The 'S' sums are stored in a nested mapping (epoch => scale => sum):\\n     *\\n     * - The inner mapping records the sum S at different scales\\n     * - The outer mapping records the (scale => sum) mappings, for different epochs.\\n     */\\n    mapping(uint128 => mapping(uint128 => uint256)) public epochToScaleToSum;\\n\\n    /*\\n     * Similarly, the sum 'G' is used to calculate SOV gains. During it's lifetime, each deposit d_t earns a SOV gain of\\n     *  ( d_t * [G - G_t] )/P_t, where G_t is the depositor's snapshot of G taken at time t when  the deposit was made.\\n     *\\n     *  SOV reward events occur are triggered by depositor operations (new deposit, topup, withdrawal), and liquidations.\\n     *  In each case, the SOV reward is issued (i.e. G is updated), before other state changes are made.\\n     */\\n    mapping(uint128 => mapping(uint128 => uint256)) public epochToScaleToG;\\n\\n    // Error tracker for the error correction in the SOV issuance calculation\\n    uint256 public lastSOVError;\\n    // Error trackers for the error correction in the offset calculation\\n    uint256 public lastETHError_Offset;\\n    uint256 public lastZUSDLossError_Offset;\\n}\\n\",\"keccak256\":\"0x046ee6c1e461c41f97120bec0380f90c35dfc6042ff10249ab3ed75f2217b7d0\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60806040523480156200001157600080fd5b5062000026336001600160e01b036200002c16565b62000150565b6001600160a01b0381166200005e5760405162461bcd60e51b815260040162000055906200010e565b60405180910390fd5b6001600160a01b0381166200007b6001600160e01b03620000d016565b6001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000604051620000c090620000f1565b6040519081900390209190915550565b600080604051620000e190620000f1565b6040519081900390205492915050565b7035b2bc9737bbb730b136329737bbb732b960791b815260110190565b60208082526022908201527f4f776e61626c653a3a7365744f776e65723a20696e76616c6964206164647265604082015261737360f01b606082015260800190565b61444280620001606000396000f3fe6080604052600436106102975760003560e01c806382e0a5741161015a578063b31ee965116100c1578063de13da3c1161007a578063de13da3c1461075d578063df9cd84f1461077d578063e49d36671461079d578063ec9f7d46146107bd578063fc7e286d146107d2578063fda0101a14610800576102e2565b8063b31ee965146106c9578063bdaf37ea146106de578063c3a34a0e146106f3578063ce4b5bbe14610713578063d733cfd014610728578063d7fb044314610748576102e2565b80639f070670116101135780639f0706701461063a578063a20baee614610506578063a3f4df7e1461064f578063a4e59ac814610671578063a7bfff9714610686578063ae918754146106b4576102e2565b806382e0a574146105a657806386da0824146105c6578063887105d3146105e6578063893d20e8146105fb5780638b8fbd921461061057806395fb16bb14610625576102e2565b806340ed1afd116101fe578063741bef1a116101b7578063741bef1a1461051b578063759b303414610530578063766718081461054557806377553ad414610567578063795d26c31461057c5780637f7dde4a14610591576102e2565b806340ed1afd14610471578063556be101146104915780635d2de642146104b15780635f788d65146104d157806370f1b572146104f157806372fe25aa14610506576102e2565b806328a0a04d1161025057806328a0a04d146103ba5780632e54bf95146103da578063335525ad146103fa578063389e92a51461041a5780633cc742251461043a5780633d83908a1461045c576102e2565b80630fbfe38b146102e757806313af40351461030957806314f6c3be1461032957806316b9d3c5146103545780631bf43555146103855780632199b66f1461039a576102e2565b366102e2576102a4610820565b6009546102b7903463ffffffff61085516565b600981905560405160008051602061438d833981519152916102d8916142f9565b60405180910390a1005b600080fd5b3480156102f357600080fd5b5061030761030236600461397a565b610883565b005b34801561031557600080fd5b5061030761032436600461380e565b610a83565b34801561033557600080fd5b5061033e610ac7565b60405161034b91906142f9565b60405180910390f35b34801561036057600080fd5b5061037461036f36600461380e565b610acd565b60405161034b959493929190614348565b34801561039157600080fd5b5061033e610b08565b3480156103a657600080fd5b506103076103b536600461380e565b610b15565b3480156103c657600080fd5b5061033e6103d5366004613946565b610bac565b3480156103e657600080fd5b506103076103f536600461397a565b610bc9565b34801561040657600080fd5b50610307610415366004613a04565b610bd7565b34801561042657600080fd5b5061033e61043536600461380e565b610c3a565b34801561044657600080fd5b5061044f610ce2565b60405161034b9190613a66565b34801561046857600080fd5b5061044f610cf1565b34801561047d57600080fd5b5061033e61048c36600461380e565b610d00565b34801561049d57600080fd5b506103076104ac36600461397a565b610d9d565b3480156104bd57600080fd5b5061033e6104cc36600461380e565b610e15565b3480156104dd57600080fd5b506103076104ec3660046139aa565b610e27565b3480156104fd57600080fd5b5061033e610e31565b34801561051257600080fd5b5061033e610e37565b34801561052757600080fd5b5061044f610e43565b34801561053c57600080fd5b5061033e610e52565b34801561055157600080fd5b5061055a610e5f565b60405161034b91906142e5565b34801561057357600080fd5b5061044f610e75565b34801561058857600080fd5b5061033e610e84565b34801561059d57600080fd5b5061044f610fa3565b3480156105b257600080fd5b5061033e6105c1366004613946565b610fb2565b3480156105d257600080fd5b506103746105e136600461380e565b610fcf565b3480156105f257600080fd5b5061033e61100a565b34801561060757600080fd5b5061044f6110d9565b34801561061c57600080fd5b5061033e6110f8565b34801561063157600080fd5b5061044f6110fe565b34801561064657600080fd5b5061044f61110d565b34801561065b57600080fd5b5061066461111c565b60405161034b9190613b83565b34801561067d57600080fd5b5061055a611145565b34801561069257600080fd5b506106a66106a136600461380e565b611154565b60405161034b929190614319565b3480156106c057600080fd5b5061044f611170565b3480156106d557600080fd5b5061033e61117f565b3480156106ea57600080fd5b5061033e611185565b3480156106ff57600080fd5b5061030761070e3660046139ce565b61118b565b34801561071f57600080fd5b5061033e61122f565b34801561073457600080fd5b5061030761074336600461387e565b611237565b34801561075457600080fd5b5061033e6114c9565b34801561076957600080fd5b5061033e61077836600461380e565b6114cf565b34801561078957600080fd5b5061033e61079836600461380e565b6115d3565b3480156107a957600080fd5b5061033e6107b836600461380e565b611670565b3480156107c957600080fd5b5061044f61176d565b3480156107de57600080fd5b506107f26107ed36600461380e565b61177c565b60405161034b929190614302565b34801561080c57600080fd5b5061030761081b366004613846565b61179e565b6000546001600160a01b031633146108535760405162461bcd60e51b815260040161084a90613d7b565b60405180910390fd5b565b60008282018381101561087a5760405162461bcd60e51b815260040161084a90613c8b565b90505b92915050565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663e9fc34616040518163ffffffff1660e01b815260040160206040518083038186803b1580156108d357600080fd5b505afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b919061382a565b9050600061091983306119e4565b60065460405163095ea7b360e01b81529192506001600160a01b03169063095ea7b39061094c9085908590600401613b02565b602060405180830381600087803b15801561096657600080fd5b505af115801561097a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099e9190613926565b6109ba5760405162461bcd60e51b815260040161084a90614112565b60065460405163438b1b4b60e01b81526001600160a01b038481169263438b1b4b926109f0929091169085903390600401613b3c565b602060405180830381600087803b158015610a0a57600080fd5b505af1158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190613992565b507f2b0fbec1c4e7e30517f196a714775ffe72770d2348f5d586854bb3c0fdf41df8338483604051610a7693929190613b1b565b60405180910390a1505050565b610a8b6110d9565b6001600160a01b0316336001600160a01b031614610abb5760405162461bcd60e51b815260040161084a90614040565b610ac481611baf565b50565b60095490565b600f602052600090815260409020805460018201546002830154600390930154919290916001600160801b0380821691600160801b90041685565b6809c2007651b250000081565b610b1d6110d9565b6001600160a01b0316336001600160a01b031614610b4d5760405162461bcd60e51b815260040161084a90614040565b610b5681611c3a565b600880546001600160a01b0319166001600160a01b0383161790556040517f3055265812fb8447b9ada4a5d804ec43bd528ec40e89c952bbc7b85dc5ac681190610ba1908390613a66565b60405180910390a150565b601260209081526000928352604080842090915290825290205481565b610bd381336119e4565b5050565b610bdf611c7f565b600a54801580610bed575082155b15610bf85750610bd3565b600854610c0d906001600160a01b0316611ca9565b600080610c1b848685611d36565b91509150610c298282611e2f565b610c338486612130565b5050505050565b6001600160a01b0381166000908152600b602052604081205480610c62576000915050610cdd565b610c6a6137b6565b506001600160a01b0383166000908152600c60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b90910416608082015290610cd78383612266565b93505050505b919050565b6001546001600160a01b031681565b6005546001600160a01b031681565b6001600160a01b0381166000908152600b602052604081205480610d28576000915050610cdd565b610d306137b6565b506001600160a01b0383166000908152600c60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b90910416608082015290610cd78383612357565b610da633612453565b610daf3361248f565b610db8816124c6565b336000818152600d6020526040908190208381556001908101805460ff19169091179055517f19bc932fb9e16a8b5a1e41be9f4c2de59d5ddd7567b8b81405f532ca00a9880e90610e0a9084906142f9565b60405180910390a250565b600e6020526000908152604090205481565b610bd382826124ee565b60145481565b670de0b6b3a764000081565b6002546001600160a01b031681565b6801158e460913d0000081565b601154600160801b90046001600160801b031681565b6004546001600160a01b031681565b60008054604080516272c7d360e71b8152905183926001600160a01b031691633963e980916004808301926020929190829003018186803b158015610ec857600080fd5b505afa158015610edc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f009190613992565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316633963e9806040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5257600080fd5b505afa158015610f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8a9190613992565b9050610f9c828263ffffffff61085516565b9250505090565b6000546001600160a01b031681565b601360209081526000928352604080842090915290825290205481565b600c602052600090815260409020805460018201546002830154600390930154919290916001600160801b0380821691600160801b90041685565b6000805460408051630a7b61df60e11b8152905183926001600160a01b0316916314f6c3be916004808301926020929190829003018186803b15801561104f57600080fd5b505afa158015611063573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110879190613992565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5257600080fd5b6000806040516110e890613a49565b6040519081900390205492915050565b60105481565b6008546001600160a01b031681565b6003546001600160a01b031681565b6040518060400160405280600d81526020016c14dd18589a5b1a5d1e541bdbdb609a1b81525081565b6011546001600160801b031681565b600d602052600090815260409020805460019091015460ff1682565b6007546001600160a01b031681565b60165481565b600a5490565b600480546040805163e9fc346160e01b8152905160009361121d936001600160a01b03169263e9fc34619281830192602092829003018186803b1580156111d157600080fd5b505afa1580156111e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611209919061382a565b60065485906001600160a01b031685612691565b905061122a8160006124ee565b505050565b633b9aca0081565b61123f6110d9565b6001600160a01b0316336001600160a01b03161461126f5760405162461bcd60e51b815260040161084a90614040565b61127888611c3a565b61128187611c3a565b61128a86611c3a565b61129385611c3a565b61129c84611c3a565b6112a583611c3a565b6112ae82611c3a565b6112b781611c3a565b670de0b6b3a7640000601055600380546001600160a01b03199081166001600160a01b038b8116919091179092556004805482168a8416179055600580548216898416179055600080548216888416179055600680548216878416179055600780548216868416179055600280548216858416179055600880549091169183169190911790556040517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed9859061136d908990613a66565b60405180910390a17f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a5678866040516113a49190613a66565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd882856040516113db9190613a66565b60405180910390a17fcdf33850c44a1a874b5fefb51dae615ac6afebd581ef90d571f81b06541d8e9d846040516114129190613a66565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe78800836040516114499190613a66565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db264826040516114809190613a66565b60405180910390a17f3055265812fb8447b9ada4a5d804ec43bd528ec40e89c952bbc7b85dc5ac6811816040516114b79190613a66565b60405180910390a15050505050505050565b60155481565b6001600160a01b0381166000908152600e6020526040812054806114f7576000915050610cdd565b6001600160a01b0383166000908152600d602052604081205490611529670de0b6b3a76400008363ffffffff61293616565b90506115336137b6565b506001600160a01b0385166000908152600f60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b909104166080820152906115c8670de0b6b3a76400006115bc6115af8886612978565b869063ffffffff612a0416565b9063ffffffff612a3e16565b979650505050505050565b6001600160a01b0381166000908152600e6020526040812054806115fb576000915050610cdd565b6116036137b6565b506001600160a01b0383166000908152600f60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b90910416608082015290610cd78383612357565b6001600160a01b0381166000908152600b602052604081205480611698576000915050610cdd565b6001600160a01b038084166000908152600b60205260408120600101549091169081156116dd576001600160a01b0382166000908152600d60205260409020546116e7565b670de0b6b3a76400005b90506116f16137b6565b506001600160a01b0385166000908152600c60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b909104166080820152906115c8670de0b6b3a76400006115bc6115af8886612978565b6006546001600160a01b031681565b600b60205260009081526040902080546001909101546001600160a01b031682565b336000908152600b60205260409020546117b781612a80565b6117c033612aa0565b6117c933612b3f565b6008546001600160a01b03166117de81611ca9565b60006117e933610c3a565b905060006117f633610d00565b9050600061180a858363ffffffff61293616565b336000818152600b60205260409020600101549192506001600160a01b039091169061183890869083612b6c565b6000611843826115d3565b9050806118508382612ce1565b826001600160a01b03166000805160206143ed8339815191528233604051611879929190614302565b60405180910390a261188b3386612e29565b336001600160a01b03166000805160206143cd83398151915287866040516118b4929190613b5f565b60405180910390a2336001600160a01b03166000805160206143ad833981519152866040516118e391906142f9565b60405180910390a26009546118fe908763ffffffff61293616565b600981905560405160008051602061438d8339815191529161191f916142f9565b60405180910390a17f6109e2559dfa766aaec7118351d48a523f0a4157f49c8d68749c8ac41318ad123387604051611958929190613b02565b60405180910390a1600460009054906101000a90046001600160a01b03166001600160a01b031663ea9638bf87338d8d6040518563ffffffff1660e01b81526004016119a693929190613a7a565b6000604051808303818588803b1580156119bf57600080fd5b505af11580156119d3573d6000803e3d6000fd5b505050505050505050505050505050565b60006001600160a01b038216611a0c5760405162461bcd60e51b815260040161084a90613f57565b8215611a1a57611a1a612f9e565b336000908152600b6020526040902054611a3381612a80565b6008546001600160a01b0316611a4881611ca9565b6000611a5333610c3a565b90506000611a6033610d00565b90506000611a6e88836131d5565b90506000611a82868463ffffffff61293616565b336000818152600b60205260409020600101549192506001600160a01b0390911690611ab090879083612b6c565b6000611abb826115d3565b90506000611acf828663ffffffff61293616565b9050611adb8382612ce1565b826001600160a01b03166000805160206143ed8339815191528233604051611b04929190614302565b60405180910390a2611b168b866131eb565b6000611b28878763ffffffff61293616565b9050611b343382612e29565b336001600160a01b03166000805160206143ad83398151915282604051611b5b91906142f9565b60405180910390a2336001600160a01b03166000805160206143cd8339815191528987604051611b8c929190613b5f565b60405180910390a2611b9e8833613264565b50939b9a5050505050505050505050565b6001600160a01b038116611bd55760405162461bcd60e51b815260040161084a90613dc2565b806001600160a01b0316611be76110d9565b6001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000604051611c2a90613a49565b6040519081900390209190915550565b6001600160a01b038116611c605760405162461bcd60e51b815260040161084a90613e04565b803b80610bd35760405162461bcd60e51b815260040161084a90614169565b6005546001600160a01b031633146108535760405162461bcd60e51b815260040161084a90613e8c565b600a54604051636cbdcf4760e01b81526000916001600160a01b03841691636cbdcf4791611cd9916004016142f9565b602060405180830381600087803b158015611cf357600080fd5b505af1158015611d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2b9190613992565b9050610bd381613393565b6000806000611d68601554611d5c670de0b6b3a764000089612a0490919063ffffffff16565b9063ffffffff61085516565b905083851115611d7457fe5b83851415611d91576000601655670de0b6b3a76400009150611df1565b601654600090611dbf90611db388670de0b6b3a764000063ffffffff612a0416565b9063ffffffff61293616565b9050611dd66001611d5c838863ffffffff612a3e16565b9250611dec81611db3858863ffffffff612a0416565b601655505b611e01818563ffffffff612a3e16565b9250611e23611e16848663ffffffff612a0416565b829063ffffffff61293616565b60155550935093915050565b6010546000670de0b6b3a7640000831115611e4657fe5b6000611e60670de0b6b3a76400008563ffffffff61293616565b6011546001600160801b03600160801b820481166000818152601260209081526040808320949095168083529390529283205493945090929091611ea48988612a04565b90506000611eb8838363ffffffff61085516565b6001600160801b038086166000908152601260209081526040808320938a168352929052819020829055519091507fe12e2cd2c9afa8069203ca07e7eff1edce4a075686d0736a8e7e0d593597b20790611f1790839087908990614329565b60405180910390a185611ff057611f3e6001600160801b038516600163ffffffff6134a416565b601180546001600160801b03908116600160801b938216840217918290556040517fb50f0f59e7cb5b421dc77581c3a9919e3806e076e5fa78a874c3f120cb7d874d93611f8f9304909116906142e5565b60405180910390a1601180546001600160801b03191690556040517f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe90611fd8906000906142e5565b60405180910390a1670de0b6b3a764000096506120dd565b633b9aca00612011670de0b6b3a76400006115bc8b8a63ffffffff612a0416565b10156120be57612047670de0b6b3a76400006115bc633b9aca0061203b8c8b63ffffffff612a0416565b9063ffffffff612a0416565b96506120636001600160801b038616600163ffffffff6134a416565b601180546001600160801b0319166001600160801b0392831617908190556040517f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe926120b19216906142e5565b60405180910390a16120dd565b6120da670de0b6b3a76400006115bc8a8963ffffffff612a0416565b96505b600087116120e757fe5b60108790556040517fc1a9618cb59ebca77cbdbc2949f126823c407ff13edb285fd0262519a9c18e8c9061211c9089906142f9565b60405180910390a150505050505050505050565b60005460405163121cbc4d60e11b81526001600160a01b03909116908190632439789a906121629085906004016142f9565b600060405180830381600087803b15801561217c57600080fd5b505af1158015612190573d6000803e3d6000fd5b5050505061219d826134d5565b600654604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac906121cf9030908690600401613b02565b600060405180830381600087803b1580156121e957600080fd5b505af11580156121fd573d6000803e3d6000fd5b50506040516364a197f360e01b81526001600160a01b03841692506364a197f3915061222f9030908790600401613b02565b600060405180830381600087803b15801561224957600080fd5b505af115801561225d573d6000803e3d6000fd5b50505050505050565b6080810151606082015182516020808501516001600160801b038086166000908152601284526040808220928716825291909352822054919493929185906122b4908463ffffffff61293616565b6001600160801b0380871660009081526012602052604081209293509161231791633b9aca00919084906122f1908a16600163ffffffff6134a416565b6001600160801b031681526020810191909152604001600020549063ffffffff612a3e16565b90506000612349670de0b6b3a76400006115bc868161233c888863ffffffff61085516565b8f9063ffffffff612a0416565b9a9950505050505050505050565b6020810151606082015160808301516011546000939291906001600160801b03600160801b90910481169082161015612396576000935050505061087d565b60115460009081906123b7906001600160801b03168563ffffffff61352f16565b90506001600160801b0381166123e7576123e0856115bc6010548b612a0490919063ffffffff16565b915061241f565b806001600160801b03166001141561241a576123e0633b9aca006115bc876115bc6010548d612a0490919063ffffffff16565b600091505b61243388633b9aca0063ffffffff612a3e16565b8210156124485760009550505050505061087d565b509695505050505050565b6001600160a01b0381166000908152600d602052604090206001015460ff1615610ac45760405162461bcd60e51b815260040161084a90614071565b6001600160a01b0381166000908152600b60205260409020548015610bd35760405162461bcd60e51b815260040161084a906140ca565b670de0b6b3a7640000811115610ac45760405162461bcd60e51b815260040161084a90613fa7565b6124f781613569565b61250033612453565b612509826135b6565b336000908152600b60205260409020546008546001600160a01b031661252e81611ca9565b8161253d5761253d33846135d6565b600061254833610c3a565b9050600061255533610d00565b90506000612569858363ffffffff61293616565b336000818152600b60205260409020600101549192506001600160a01b039091169061259790869083612b6c565b60006125a2826115d3565b905060006125b6828b63ffffffff61085516565b90506125c28382612ce1565b826001600160a01b03166000805160206143ed83398151915282336040516125eb929190614302565b60405180910390a26125fd338b613630565b600061260f868c63ffffffff61085516565b905061261b3382612e29565b336001600160a01b03166000805160206143ad8339815191528260405161264291906142f9565b60405180910390a2336001600160a01b03166000805160206143cd8339815191528887604051612673929190613b5f565b60405180910390a2612684876136e4565b5050505050505050505050565b600080856001600160a01b0316637d186bfe6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126cd57600080fd5b505afa1580156126e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612705919061382a565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016127359190613a66565b60206040518083038186803b15801561274d57600080fd5b505afa158015612761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127859190613992565b9050306001600160a01b03831663605629d633838a89356127ac60408c0160208d01613a25565b8b604001358c606001356040518863ffffffff1660e01b81526004016127d89796959493929190613ac1565b600060405180830381600087803b1580156127f257600080fd5b505af1158015612806573d6000803e3d6000fd5b505050508661288b83856001600160a01b03166370a08231856040518263ffffffff1660e01b815260040161283b9190613a66565b60206040518083038186803b15801561285357600080fd5b505afa158015612867573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db39190613992565b146128a85760405162461bcd60e51b815260040161084a90613c42565b60405163fb2c922360e01b81526001600160a01b0389169063fb2c9223906128d89089908b903390600401613b3c565b602060405180830381600087803b1580156128f257600080fd5b505af1158015612906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292a9190613992565b98975050505050505050565b600061087a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506136ee565b608081015160608201516040808401516020808601516001600160801b038087166000908152601384528581209187168152925292812054909493929085906129c7908463ffffffff61293616565b6001600160801b0380871660009081526013602052604081209293509161231791633b9aca00919084906122f1908a16600163ffffffff6134a416565b600082612a135750600061087d565b82820282848281612a2057fe5b041461087a5760405162461bcd60e51b815260040161084a90613f16565b600061087a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061371a565b60008111610ac45760405162461bcd60e51b815260040161084a9061419e565b6005546040516321e3780160e01b81526001600160a01b03909116906321e3780190612ad0908490600401613a66565b60206040518083038186803b158015612ae857600080fd5b505afa158015612afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b209190613992565b600114610ac45760405162461bcd60e51b815260040161084a90613bd6565b6000612b4a82610c3a565b905060008111610bd35760405162461bcd60e51b815260040161084a90613e3b565b6001600160a01b03811615612c2c576000612b86826114cf565b604051633e30771b60e21b81529091506001600160a01b0385169063f8c1dc6c90612bb79085908590600401613b02565b600060405180830381600087803b158015612bd157600080fd5b505af1158015612be5573d6000803e3d6000fd5b50505050816001600160a01b03167f732e331072fe280a520929e5f2cc76c223389ff57d32a4e278cfded03e6f1caa82604051612c2291906142f9565b60405180910390a2505b6000612c3783611670565b604051633e30771b60e21b81529091506001600160a01b0385169063f8c1dc6c90612c689086908590600401613b02565b600060405180830381600087803b158015612c8257600080fd5b505af1158015612c96573d6000803e3d6000fd5b50505050826001600160a01b03167fe9ac2dcd83e719358f1dc0c5c80491937f67d4ec61ef62c262bbe3b78578f92a82604051612cd391906142f9565b60405180910390a250505050565b6001600160a01b0382166000908152600e6020526040902081905580612d6c576001600160a01b0382166000818152600f60205260408082208281556001810183905560028101839055600301829055517fbb1322f85cc7cc8bac4e172a5bc5dcc0c1959007f9a030032abf9258205f0e4591612d5f918190613b5f565b60405180910390a2610bd3565b6011546010546001600160801b03600160801b80840482166000818152601360209081526040808320978616808452978252808320546001600160a01b038b16808552600f90935292819020600181018890556002810184905560030180546001600160801b0319168917909616948402949094179094559151909392907fbb1322f85cc7cc8bac4e172a5bc5dcc0c1959007f9a030032abf9258205f0e4590612e199085908590613b5f565b60405180910390a2505050505050565b6001600160a01b0382166000908152600b6020526040902081905580612ec7576001600160a01b0382166000818152600b60209081526040808320600190810180546001600160a01b0319169055600c909252808320838155918201839055600282018390556003909101829055517f2d6cc0bcdf72c9486f6451bde6b80f44066f4558f77f44dbfedbe7d8b295225a91612d5f9181908190613b6d565b6011546010546001600160801b03600160801b8084048216600081815260126020908152604080832097861680845297825280832054848452601383528184208985528352818420546001600160a01b038c16808652600c90945293829020600181018990558181556002810185905560030180546001600160801b0319168a1790971695850295909517909555935191949390917f2d6cc0bcdf72c9486f6451bde6b80f44066f4558f77f44dbfedbe7d8b295225a90612f8d90869086908690613b6d565b60405180910390a250505050505050565b60025460408051630fdb11cf60e01b815290516000926001600160a01b031691630fdb11cf91600480830192602092919082900301818787803b158015612fe457600080fd5b505af1158015612ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301c9190613992565b90506000600760009054906101000a90046001600160a01b03166001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b15801561306e57600080fd5b505afa158015613082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a6919061382a565b600554604051630d293c7160e41b81529192506000916001600160a01b039091169063d293c710906130de9085908790600401613b02565b60206040518083038186803b1580156130f657600080fd5b505afa15801561310a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312e9190613992565b9050600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b15801561317e57600080fd5b505afa158015613192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b69190613992565b81101561122a5760405162461bcd60e51b815260040161084a9061427b565b60008183106131e4578161087a565b5090919050565b806131f557610bd3565b600654604051631062c15f60e11b81526001600160a01b03909116906320c582be9061322990309086908690600401613a9d565b600060405180830381600087803b15801561324357600080fd5b505af1158015613257573d6000803e3d6000fd5b50505050610bd3816134d5565b6001600160a01b03811661328a5760405162461bcd60e51b815260040161084a90613cc2565b8161329457610bd3565b6009546000906132aa908463ffffffff61293616565b90508060098190555060008051602061438d833981519152816040516132d091906142f9565b60405180910390a17f6109e2559dfa766aaec7118351d48a523f0a4157f49c8d68749c8ac41318ad123384604051613309929190613b02565b60405180910390a16000336001600160a01b03168460405161332a90613a46565b60006040518083038185875af1925050503d8060008114613367576040519150601f19603f3d011682016040523d82523d6000602084013e61336c565b606091505b505090508061338d5760405162461bcd60e51b815260040161084a90613ed5565b50505050565b600a548015806133a1575081155b156133ac5750610ac4565b60006133b88383613751565b905060006133d160105483612a0490919063ffffffff16565b6011546001600160801b03600160801b820481166000908152601360209081526040808320939094168252919091522054909150613415908263ffffffff61085516565b601180546001600160801b03600160801b80830482166000908152601360208181526040808420968616845295815285832097909755945491820483168082529486528381209190921680835294528190205490517f2d6127771b164a9cc8827d24b5955db2a77e7a81dac389107ebb8bce9fb64968936134969391614329565b60405180910390a150505050565b60008282016001600160801b03808516908216101561087a5760405162461bcd60e51b815260040161084a90614236565b600a546000906134eb908363ffffffff61293616565b905080600a819055507ff3c69a10dcea5d744225cbe910fb39d6f8208bb8e21fff523d6756a7966093c78160405161352391906142f9565b60405180910390a15050565b6000826001600160801b0316826001600160801b031611156135635760405162461bcd60e51b815260040161084a906141ee565b50900390565b6001600160a01b0381166000908152600d602052604090206001015460ff168061359a57506001600160a01b038116155b610ac45760405162461bcd60e51b815260040161084a90613d0f565b60008111610ac45760405162461bcd60e51b815260040161084a90613ffa565b6001600160a01b038281166000818152600b602052604080822060010180546001600160a01b0319169486169485179055517f094c08e96a8890877a8390b4f967180a7507ad8622244d05fcd0f9f8e086564e9190a35050565b600654604051632ee65eeb60e21b81526001600160a01b039091169063bb997bac9061366490859030908690600401613a9d565b600060405180830381600087803b15801561367e57600080fd5b505af1158015613692573d6000803e3d6000fd5b5050600a54600092506136ac91508363ffffffff61085516565b905080600a819055507ff3c69a10dcea5d744225cbe910fb39d6f8208bb8e21fff523d6756a7966093c781604051610a7691906142f9565b610ac48133613264565b600081848411156137125760405162461bcd60e51b815260040161084a9190613b83565b505050900390565b6000818361373b5760405162461bcd60e51b815260040161084a9190613b83565b50600083858161374757fe5b0495945050505050565b600080613775601454611d5c670de0b6b3a764000087612a0490919063ffffffff16565b90506000613789828563ffffffff612a3e16565b90506137ab61379e828663ffffffff612a0416565b839063ffffffff61293616565b601455949350505050565b6040518060a0016040528060008152602001600081526020016000815260200160006001600160801b0316815260200160006001600160801b031681525090565b80356001600160801b038116811461087d57600080fd5b60006020828403121561381f578081fd5b813561087a81614377565b60006020828403121561383b578081fd5b815161087a81614377565b60008060408385031215613858578081fd5b823561386381614377565b9150602083013561387381614377565b809150509250929050565b600080600080600080600080610100898b03121561389a578384fd5b88356138a581614377565b975060208901356138b581614377565b965060408901356138c581614377565b955060608901356138d581614377565b945060808901356138e581614377565b935060a08901356138f581614377565b925060c089013561390581614377565b915060e089013561391581614377565b809150509295985092959890939650565b600060208284031215613937578081fd5b8151801515811461087a578182fd5b60008060408385031215613958578182fd5b61396284846137f7565b915061397184602085016137f7565b90509250929050565b60006020828403121561398b578081fd5b5035919050565b6000602082840312156139a3578081fd5b5051919050565b600080604083850312156139bc578182fd5b82359150602083013561387381614377565b60008082840360a08112156139e1578283fd5b833592506080601f19820112156139f6578182fd5b506020830190509250929050565b60008060408385031215613a16578182fd5b50508035926020909101359150565b600060208284031215613a36578081fd5b813560ff8116811461087a578182fd5b90565b7035b2bc9737bbb730b136329737bbb732b960791b815260110190565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b918252602082015260400190565b9283526020830191909152604082015260600190565b6000602080835283518082850152825b81811015613baf57858101830151858201604001528201613b93565b81811115613bc05783604083870101525b50601f01601f1916929092016040019392505050565b60208082526046908201527f53746162696c697479506f6f6c3a2063616c6c6572206d75737420686176652060408201527f616e206163746976652074726f766520746f207769746864726177204554484760608201526561696e20746f60d01b608082015260a00190565b60208082526029908201527f444c4c52207472616e7366657272656420616d6f756e742076616c69646174696040820152681bdb8819985a5b195960ba1b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602d908201527f53503a3a5f73656e644554484761696e546f3a205f726563656976657220697360408201526c207a65726f206164647265737360981b606082015260800190565b60208082526046908201527f53746162696c697479506f6f6c3a20546167206d75737420626520612072656760408201527f697374657265642066726f6e7420656e642c206f7220746865207a65726f206160608201526564647265737360d01b608082015260a00190565b60208082526027908201527f53746162696c697479506f6f6c3a2043616c6c6572206973206e6f74204163746040820152661a5d99541bdbdb60ca1b606082015260800190565b60208082526022908201527f4f776e61626c653a3a7365744f776e65723a20696e76616c6964206164647265604082015261737360f01b606082015260800190565b6020808252601e908201527f4163636f756e742063616e6e6f74206265207a65726f20616464726573730000604082015260600190565b60208082526031908201527f53746162696c697479506f6f6c3a2063616c6c6572206d7573742068617665206040820152703737b716bd32b9379022aa241023b0b4b760791b606082015260800190565b60208082526029908201527f53746162696c697479506f6f6c3a2043616c6c6572206973206e6f742054726f6040820152683b32a6b0b730b3b2b960b91b606082015260800190565b60208082526021908201527f53746162696c697479506f6f6c3a2073656e64696e6720455448206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526030908201527f53503a3a5f776974686472617746726f6d5370546f3a205f726563656976657260408201526f206973207a65726f206164647265737360801b606082015260800190565b60208082526033908201527f53746162696c697479506f6f6c3a204b69636b6261636b2072617465206d75736040820152727420626520696e2072616e6765205b302c315d60681b606082015260800190565b60208082526026908201527f53746162696c697479506f6f6c3a20416d6f756e74206d757374206265206e6f6040820152656e2d7a65726f60d01b606082015260800190565b60208082526017908201527613dddb98589b194e8e881858d8d95cdcc819195b9a5959604a1b604082015260600190565b60208082526039908201527f53746162696c697479506f6f6c3a206d757374206e6f7420616c72656164792060408201527818994818481c9959da5cdd195c995908199c9bdb9d08195b99603a1b606082015260800190565b60208082526028908201527f53746162696c697479506f6f6c3a2055736572206d7573742068617665206e6f6040820152670819195c1bdcda5d60c21b606082015260800190565b60208082526037908201527f4661696c656420746f20617070726f7665205a55534420616d6f756e7420666f60408201527672204d796e74206d417373657420746f2072656465656d60481b606082015260800190565b6020808252818101527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f604082015260600190565b60208082526030908201527f53746162696c697479506f6f6c3a2055736572206d757374206861766520612060408201526f1b9bdb8b5e995c9bc819195c1bdcda5d60821b606082015260800190565b60208082526028908201527f4c697175697479536166654d6174683132383a207375627472616374696f6e206040820152676f766572666c6f7760c01b606082015260800190565b60208082526025908201527f4c697175697479536166654d6174683132383a206164646974696f6e206f766560408201526472666c6f7760d81b606082015260800190565b60208082526044908201527f53746162696c697479506f6f6c3a2043616e6e6f74207769746864726177207760408201527f68696c65207468657265206172652074726f766573207769746820494352203c6060820152631026a1a960e11b608082015260a00190565b6001600160801b0391909116815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9182521515602082015260400190565b9283526001600160801b03918216602084015216604082015260600190565b948552602085019390935260408401919091526001600160801b03908116606084015216608082015260a00190565b6001600160a01b0381168114610ac457600080fdfeceb6d671277d4354fd29977ada70695fbd93a16612abf765d6b0e25c28dc6db3bce78369dccab09eec1986f4d409ab09ffbb47d65423e5148fcf98411c5111c951457222ebca92c335c9c86e2baa1cc0e40ffaa9084a51452980d5ba8dec2f6399920012339b5a3368d3a04b8606ce412c46ed92b7dcd8602d41fc8862cb8f25a26469706673582212206321af42ef27ad235e6728edf061d43549412ce69434e84bbeb795e984294f7864736f6c634300060b0033",
    "deployedBytecode": "0x6080604052600436106102975760003560e01c806382e0a5741161015a578063b31ee965116100c1578063de13da3c1161007a578063de13da3c1461075d578063df9cd84f1461077d578063e49d36671461079d578063ec9f7d46146107bd578063fc7e286d146107d2578063fda0101a14610800576102e2565b8063b31ee965146106c9578063bdaf37ea146106de578063c3a34a0e146106f3578063ce4b5bbe14610713578063d733cfd014610728578063d7fb044314610748576102e2565b80639f070670116101135780639f0706701461063a578063a20baee614610506578063a3f4df7e1461064f578063a4e59ac814610671578063a7bfff9714610686578063ae918754146106b4576102e2565b806382e0a574146105a657806386da0824146105c6578063887105d3146105e6578063893d20e8146105fb5780638b8fbd921461061057806395fb16bb14610625576102e2565b806340ed1afd116101fe578063741bef1a116101b7578063741bef1a1461051b578063759b303414610530578063766718081461054557806377553ad414610567578063795d26c31461057c5780637f7dde4a14610591576102e2565b806340ed1afd14610471578063556be101146104915780635d2de642146104b15780635f788d65146104d157806370f1b572146104f157806372fe25aa14610506576102e2565b806328a0a04d1161025057806328a0a04d146103ba5780632e54bf95146103da578063335525ad146103fa578063389e92a51461041a5780633cc742251461043a5780633d83908a1461045c576102e2565b80630fbfe38b146102e757806313af40351461030957806314f6c3be1461032957806316b9d3c5146103545780631bf43555146103855780632199b66f1461039a576102e2565b366102e2576102a4610820565b6009546102b7903463ffffffff61085516565b600981905560405160008051602061438d833981519152916102d8916142f9565b60405180910390a1005b600080fd5b3480156102f357600080fd5b5061030761030236600461397a565b610883565b005b34801561031557600080fd5b5061030761032436600461380e565b610a83565b34801561033557600080fd5b5061033e610ac7565b60405161034b91906142f9565b60405180910390f35b34801561036057600080fd5b5061037461036f36600461380e565b610acd565b60405161034b959493929190614348565b34801561039157600080fd5b5061033e610b08565b3480156103a657600080fd5b506103076103b536600461380e565b610b15565b3480156103c657600080fd5b5061033e6103d5366004613946565b610bac565b3480156103e657600080fd5b506103076103f536600461397a565b610bc9565b34801561040657600080fd5b50610307610415366004613a04565b610bd7565b34801561042657600080fd5b5061033e61043536600461380e565b610c3a565b34801561044657600080fd5b5061044f610ce2565b60405161034b9190613a66565b34801561046857600080fd5b5061044f610cf1565b34801561047d57600080fd5b5061033e61048c36600461380e565b610d00565b34801561049d57600080fd5b506103076104ac36600461397a565b610d9d565b3480156104bd57600080fd5b5061033e6104cc36600461380e565b610e15565b3480156104dd57600080fd5b506103076104ec3660046139aa565b610e27565b3480156104fd57600080fd5b5061033e610e31565b34801561051257600080fd5b5061033e610e37565b34801561052757600080fd5b5061044f610e43565b34801561053c57600080fd5b5061033e610e52565b34801561055157600080fd5b5061055a610e5f565b60405161034b91906142e5565b34801561057357600080fd5b5061044f610e75565b34801561058857600080fd5b5061033e610e84565b34801561059d57600080fd5b5061044f610fa3565b3480156105b257600080fd5b5061033e6105c1366004613946565b610fb2565b3480156105d257600080fd5b506103746105e136600461380e565b610fcf565b3480156105f257600080fd5b5061033e61100a565b34801561060757600080fd5b5061044f6110d9565b34801561061c57600080fd5b5061033e6110f8565b34801561063157600080fd5b5061044f6110fe565b34801561064657600080fd5b5061044f61110d565b34801561065b57600080fd5b5061066461111c565b60405161034b9190613b83565b34801561067d57600080fd5b5061055a611145565b34801561069257600080fd5b506106a66106a136600461380e565b611154565b60405161034b929190614319565b3480156106c057600080fd5b5061044f611170565b3480156106d557600080fd5b5061033e61117f565b3480156106ea57600080fd5b5061033e611185565b3480156106ff57600080fd5b5061030761070e3660046139ce565b61118b565b34801561071f57600080fd5b5061033e61122f565b34801561073457600080fd5b5061030761074336600461387e565b611237565b34801561075457600080fd5b5061033e6114c9565b34801561076957600080fd5b5061033e61077836600461380e565b6114cf565b34801561078957600080fd5b5061033e61079836600461380e565b6115d3565b3480156107a957600080fd5b5061033e6107b836600461380e565b611670565b3480156107c957600080fd5b5061044f61176d565b3480156107de57600080fd5b506107f26107ed36600461380e565b61177c565b60405161034b929190614302565b34801561080c57600080fd5b5061030761081b366004613846565b61179e565b6000546001600160a01b031633146108535760405162461bcd60e51b815260040161084a90613d7b565b60405180910390fd5b565b60008282018381101561087a5760405162461bcd60e51b815260040161084a90613c8b565b90505b92915050565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663e9fc34616040518163ffffffff1660e01b815260040160206040518083038186803b1580156108d357600080fd5b505afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b919061382a565b9050600061091983306119e4565b60065460405163095ea7b360e01b81529192506001600160a01b03169063095ea7b39061094c9085908590600401613b02565b602060405180830381600087803b15801561096657600080fd5b505af115801561097a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099e9190613926565b6109ba5760405162461bcd60e51b815260040161084a90614112565b60065460405163438b1b4b60e01b81526001600160a01b038481169263438b1b4b926109f0929091169085903390600401613b3c565b602060405180830381600087803b158015610a0a57600080fd5b505af1158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190613992565b507f2b0fbec1c4e7e30517f196a714775ffe72770d2348f5d586854bb3c0fdf41df8338483604051610a7693929190613b1b565b60405180910390a1505050565b610a8b6110d9565b6001600160a01b0316336001600160a01b031614610abb5760405162461bcd60e51b815260040161084a90614040565b610ac481611baf565b50565b60095490565b600f602052600090815260409020805460018201546002830154600390930154919290916001600160801b0380821691600160801b90041685565b6809c2007651b250000081565b610b1d6110d9565b6001600160a01b0316336001600160a01b031614610b4d5760405162461bcd60e51b815260040161084a90614040565b610b5681611c3a565b600880546001600160a01b0319166001600160a01b0383161790556040517f3055265812fb8447b9ada4a5d804ec43bd528ec40e89c952bbc7b85dc5ac681190610ba1908390613a66565b60405180910390a150565b601260209081526000928352604080842090915290825290205481565b610bd381336119e4565b5050565b610bdf611c7f565b600a54801580610bed575082155b15610bf85750610bd3565b600854610c0d906001600160a01b0316611ca9565b600080610c1b848685611d36565b91509150610c298282611e2f565b610c338486612130565b5050505050565b6001600160a01b0381166000908152600b602052604081205480610c62576000915050610cdd565b610c6a6137b6565b506001600160a01b0383166000908152600c60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b90910416608082015290610cd78383612266565b93505050505b919050565b6001546001600160a01b031681565b6005546001600160a01b031681565b6001600160a01b0381166000908152600b602052604081205480610d28576000915050610cdd565b610d306137b6565b506001600160a01b0383166000908152600c60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b90910416608082015290610cd78383612357565b610da633612453565b610daf3361248f565b610db8816124c6565b336000818152600d6020526040908190208381556001908101805460ff19169091179055517f19bc932fb9e16a8b5a1e41be9f4c2de59d5ddd7567b8b81405f532ca00a9880e90610e0a9084906142f9565b60405180910390a250565b600e6020526000908152604090205481565b610bd382826124ee565b60145481565b670de0b6b3a764000081565b6002546001600160a01b031681565b6801158e460913d0000081565b601154600160801b90046001600160801b031681565b6004546001600160a01b031681565b60008054604080516272c7d360e71b8152905183926001600160a01b031691633963e980916004808301926020929190829003018186803b158015610ec857600080fd5b505afa158015610edc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f009190613992565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316633963e9806040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5257600080fd5b505afa158015610f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8a9190613992565b9050610f9c828263ffffffff61085516565b9250505090565b6000546001600160a01b031681565b601360209081526000928352604080842090915290825290205481565b600c602052600090815260409020805460018201546002830154600390930154919290916001600160801b0380821691600160801b90041685565b6000805460408051630a7b61df60e11b8152905183926001600160a01b0316916314f6c3be916004808301926020929190829003018186803b15801561104f57600080fd5b505afa158015611063573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110879190613992565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166314f6c3be6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5257600080fd5b6000806040516110e890613a49565b6040519081900390205492915050565b60105481565b6008546001600160a01b031681565b6003546001600160a01b031681565b6040518060400160405280600d81526020016c14dd18589a5b1a5d1e541bdbdb609a1b81525081565b6011546001600160801b031681565b600d602052600090815260409020805460019091015460ff1682565b6007546001600160a01b031681565b60165481565b600a5490565b600480546040805163e9fc346160e01b8152905160009361121d936001600160a01b03169263e9fc34619281830192602092829003018186803b1580156111d157600080fd5b505afa1580156111e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611209919061382a565b60065485906001600160a01b031685612691565b905061122a8160006124ee565b505050565b633b9aca0081565b61123f6110d9565b6001600160a01b0316336001600160a01b03161461126f5760405162461bcd60e51b815260040161084a90614040565b61127888611c3a565b61128187611c3a565b61128a86611c3a565b61129385611c3a565b61129c84611c3a565b6112a583611c3a565b6112ae82611c3a565b6112b781611c3a565b670de0b6b3a7640000601055600380546001600160a01b03199081166001600160a01b038b8116919091179092556004805482168a8416179055600580548216898416179055600080548216888416179055600680548216878416179055600780548216868416179055600280548216858416179055600880549091169183169190911790556040517f3ca631ffcd2a9b5d9ae18543fc82f58eb4ca33af9e6ab01b7a8e95331e6ed9859061136d908990613a66565b60405180910390a17f143219c9e69b09e07e095fcc889b43d8f46ca892bba65f08dc3a0050869a5678866040516113a49190613a66565b60405180910390a17f78f058b189175430c48dc02699e3a0031ea4ff781536dc2fab847de4babdd882856040516113db9190613a66565b60405180910390a17fcdf33850c44a1a874b5fefb51dae615ac6afebd581ef90d571f81b06541d8e9d846040516114129190613a66565b60405180910390a17f65f4cf077bc01e4742eb5ad98326f6e95b63548ea24b17f8d5e823111fe78800836040516114499190613a66565b60405180910390a17f8c537274438aa850a330284665d81a85dd38267d09e4050d416bfc94142db264826040516114809190613a66565b60405180910390a17f3055265812fb8447b9ada4a5d804ec43bd528ec40e89c952bbc7b85dc5ac6811816040516114b79190613a66565b60405180910390a15050505050505050565b60155481565b6001600160a01b0381166000908152600e6020526040812054806114f7576000915050610cdd565b6001600160a01b0383166000908152600d602052604081205490611529670de0b6b3a76400008363ffffffff61293616565b90506115336137b6565b506001600160a01b0385166000908152600f60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b909104166080820152906115c8670de0b6b3a76400006115bc6115af8886612978565b869063ffffffff612a0416565b9063ffffffff612a3e16565b979650505050505050565b6001600160a01b0381166000908152600e6020526040812054806115fb576000915050610cdd565b6116036137b6565b506001600160a01b0383166000908152600f60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b90910416608082015290610cd78383612357565b6001600160a01b0381166000908152600b602052604081205480611698576000915050610cdd565b6001600160a01b038084166000908152600b60205260408120600101549091169081156116dd576001600160a01b0382166000908152600d60205260409020546116e7565b670de0b6b3a76400005b90506116f16137b6565b506001600160a01b0385166000908152600c60209081526040808320815160a08101835281548152600182015493810193909352600281015491830191909152600301546001600160801b038082166060840152600160801b909104166080820152906115c8670de0b6b3a76400006115bc6115af8886612978565b6006546001600160a01b031681565b600b60205260009081526040902080546001909101546001600160a01b031682565b336000908152600b60205260409020546117b781612a80565b6117c033612aa0565b6117c933612b3f565b6008546001600160a01b03166117de81611ca9565b60006117e933610c3a565b905060006117f633610d00565b9050600061180a858363ffffffff61293616565b336000818152600b60205260409020600101549192506001600160a01b039091169061183890869083612b6c565b6000611843826115d3565b9050806118508382612ce1565b826001600160a01b03166000805160206143ed8339815191528233604051611879929190614302565b60405180910390a261188b3386612e29565b336001600160a01b03166000805160206143cd83398151915287866040516118b4929190613b5f565b60405180910390a2336001600160a01b03166000805160206143ad833981519152866040516118e391906142f9565b60405180910390a26009546118fe908763ffffffff61293616565b600981905560405160008051602061438d8339815191529161191f916142f9565b60405180910390a17f6109e2559dfa766aaec7118351d48a523f0a4157f49c8d68749c8ac41318ad123387604051611958929190613b02565b60405180910390a1600460009054906101000a90046001600160a01b03166001600160a01b031663ea9638bf87338d8d6040518563ffffffff1660e01b81526004016119a693929190613a7a565b6000604051808303818588803b1580156119bf57600080fd5b505af11580156119d3573d6000803e3d6000fd5b505050505050505050505050505050565b60006001600160a01b038216611a0c5760405162461bcd60e51b815260040161084a90613f57565b8215611a1a57611a1a612f9e565b336000908152600b6020526040902054611a3381612a80565b6008546001600160a01b0316611a4881611ca9565b6000611a5333610c3a565b90506000611a6033610d00565b90506000611a6e88836131d5565b90506000611a82868463ffffffff61293616565b336000818152600b60205260409020600101549192506001600160a01b0390911690611ab090879083612b6c565b6000611abb826115d3565b90506000611acf828663ffffffff61293616565b9050611adb8382612ce1565b826001600160a01b03166000805160206143ed8339815191528233604051611b04929190614302565b60405180910390a2611b168b866131eb565b6000611b28878763ffffffff61293616565b9050611b343382612e29565b336001600160a01b03166000805160206143ad83398151915282604051611b5b91906142f9565b60405180910390a2336001600160a01b03166000805160206143cd8339815191528987604051611b8c929190613b5f565b60405180910390a2611b9e8833613264565b50939b9a5050505050505050505050565b6001600160a01b038116611bd55760405162461bcd60e51b815260040161084a90613dc2565b806001600160a01b0316611be76110d9565b6001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000604051611c2a90613a49565b6040519081900390209190915550565b6001600160a01b038116611c605760405162461bcd60e51b815260040161084a90613e04565b803b80610bd35760405162461bcd60e51b815260040161084a90614169565b6005546001600160a01b031633146108535760405162461bcd60e51b815260040161084a90613e8c565b600a54604051636cbdcf4760e01b81526000916001600160a01b03841691636cbdcf4791611cd9916004016142f9565b602060405180830381600087803b158015611cf357600080fd5b505af1158015611d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2b9190613992565b9050610bd381613393565b6000806000611d68601554611d5c670de0b6b3a764000089612a0490919063ffffffff16565b9063ffffffff61085516565b905083851115611d7457fe5b83851415611d91576000601655670de0b6b3a76400009150611df1565b601654600090611dbf90611db388670de0b6b3a764000063ffffffff612a0416565b9063ffffffff61293616565b9050611dd66001611d5c838863ffffffff612a3e16565b9250611dec81611db3858863ffffffff612a0416565b601655505b611e01818563ffffffff612a3e16565b9250611e23611e16848663ffffffff612a0416565b829063ffffffff61293616565b60155550935093915050565b6010546000670de0b6b3a7640000831115611e4657fe5b6000611e60670de0b6b3a76400008563ffffffff61293616565b6011546001600160801b03600160801b820481166000818152601260209081526040808320949095168083529390529283205493945090929091611ea48988612a04565b90506000611eb8838363ffffffff61085516565b6001600160801b038086166000908152601260209081526040808320938a168352929052819020829055519091507fe12e2cd2c9afa8069203ca07e7eff1edce4a075686d0736a8e7e0d593597b20790611f1790839087908990614329565b60405180910390a185611ff057611f3e6001600160801b038516600163ffffffff6134a416565b601180546001600160801b03908116600160801b938216840217918290556040517fb50f0f59e7cb5b421dc77581c3a9919e3806e076e5fa78a874c3f120cb7d874d93611f8f9304909116906142e5565b60405180910390a1601180546001600160801b03191690556040517f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe90611fd8906000906142e5565b60405180910390a1670de0b6b3a764000096506120dd565b633b9aca00612011670de0b6b3a76400006115bc8b8a63ffffffff612a0416565b10156120be57612047670de0b6b3a76400006115bc633b9aca0061203b8c8b63ffffffff612a0416565b9063ffffffff612a0416565b96506120636001600160801b038616600163ffffffff6134a416565b601180546001600160801b0319166001600160801b0392831617908190556040517f1f9dfc70cd666adb18a39d60a797518f7b4febf4b6e24ef37d44f6e1e7219fbe926120b19216906142e5565b60405180910390a16120dd565b6120da670de0b6b3a76400006115bc8a8963ffffffff612a0416565b96505b600087116120e757fe5b60108790556040517fc1a9618cb59ebca77cbdbc2949f126823c407ff13edb285fd0262519a9c18e8c9061211c9089906142f9565b60405180910390a150505050505050505050565b60005460405163121cbc4d60e11b81526001600160a01b03909116908190632439789a906121629085906004016142f9565b600060405180830381600087803b15801561217c57600080fd5b505af1158015612190573d6000803e3d6000fd5b5050505061219d826134d5565b600654604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac906121cf9030908690600401613b02565b600060405180830381600087803b1580156121e957600080fd5b505af11580156121fd573d6000803e3d6000fd5b50506040516364a197f360e01b81526001600160a01b03841692506364a197f3915061222f9030908790600401613b02565b600060405180830381600087803b15801561224957600080fd5b505af115801561225d573d6000803e3d6000fd5b50505050505050565b6080810151606082015182516020808501516001600160801b038086166000908152601284526040808220928716825291909352822054919493929185906122b4908463ffffffff61293616565b6001600160801b0380871660009081526012602052604081209293509161231791633b9aca00919084906122f1908a16600163ffffffff6134a416565b6001600160801b031681526020810191909152604001600020549063ffffffff612a3e16565b90506000612349670de0b6b3a76400006115bc868161233c888863ffffffff61085516565b8f9063ffffffff612a0416565b9a9950505050505050505050565b6020810151606082015160808301516011546000939291906001600160801b03600160801b90910481169082161015612396576000935050505061087d565b60115460009081906123b7906001600160801b03168563ffffffff61352f16565b90506001600160801b0381166123e7576123e0856115bc6010548b612a0490919063ffffffff16565b915061241f565b806001600160801b03166001141561241a576123e0633b9aca006115bc876115bc6010548d612a0490919063ffffffff16565b600091505b61243388633b9aca0063ffffffff612a3e16565b8210156124485760009550505050505061087d565b509695505050505050565b6001600160a01b0381166000908152600d602052604090206001015460ff1615610ac45760405162461bcd60e51b815260040161084a90614071565b6001600160a01b0381166000908152600b60205260409020548015610bd35760405162461bcd60e51b815260040161084a906140ca565b670de0b6b3a7640000811115610ac45760405162461bcd60e51b815260040161084a90613fa7565b6124f781613569565b61250033612453565b612509826135b6565b336000908152600b60205260409020546008546001600160a01b031661252e81611ca9565b8161253d5761253d33846135d6565b600061254833610c3a565b9050600061255533610d00565b90506000612569858363ffffffff61293616565b336000818152600b60205260409020600101549192506001600160a01b039091169061259790869083612b6c565b60006125a2826115d3565b905060006125b6828b63ffffffff61085516565b90506125c28382612ce1565b826001600160a01b03166000805160206143ed83398151915282336040516125eb929190614302565b60405180910390a26125fd338b613630565b600061260f868c63ffffffff61085516565b905061261b3382612e29565b336001600160a01b03166000805160206143ad8339815191528260405161264291906142f9565b60405180910390a2336001600160a01b03166000805160206143cd8339815191528887604051612673929190613b5f565b60405180910390a2612684876136e4565b5050505050505050505050565b600080856001600160a01b0316637d186bfe6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126cd57600080fd5b505afa1580156126e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612705919061382a565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016127359190613a66565b60206040518083038186803b15801561274d57600080fd5b505afa158015612761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127859190613992565b9050306001600160a01b03831663605629d633838a89356127ac60408c0160208d01613a25565b8b604001358c606001356040518863ffffffff1660e01b81526004016127d89796959493929190613ac1565b600060405180830381600087803b1580156127f257600080fd5b505af1158015612806573d6000803e3d6000fd5b505050508661288b83856001600160a01b03166370a08231856040518263ffffffff1660e01b815260040161283b9190613a66565b60206040518083038186803b15801561285357600080fd5b505afa158015612867573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db39190613992565b146128a85760405162461bcd60e51b815260040161084a90613c42565b60405163fb2c922360e01b81526001600160a01b0389169063fb2c9223906128d89089908b903390600401613b3c565b602060405180830381600087803b1580156128f257600080fd5b505af1158015612906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292a9190613992565b98975050505050505050565b600061087a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506136ee565b608081015160608201516040808401516020808601516001600160801b038087166000908152601384528581209187168152925292812054909493929085906129c7908463ffffffff61293616565b6001600160801b0380871660009081526013602052604081209293509161231791633b9aca00919084906122f1908a16600163ffffffff6134a416565b600082612a135750600061087d565b82820282848281612a2057fe5b041461087a5760405162461bcd60e51b815260040161084a90613f16565b600061087a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061371a565b60008111610ac45760405162461bcd60e51b815260040161084a9061419e565b6005546040516321e3780160e01b81526001600160a01b03909116906321e3780190612ad0908490600401613a66565b60206040518083038186803b158015612ae857600080fd5b505afa158015612afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b209190613992565b600114610ac45760405162461bcd60e51b815260040161084a90613bd6565b6000612b4a82610c3a565b905060008111610bd35760405162461bcd60e51b815260040161084a90613e3b565b6001600160a01b03811615612c2c576000612b86826114cf565b604051633e30771b60e21b81529091506001600160a01b0385169063f8c1dc6c90612bb79085908590600401613b02565b600060405180830381600087803b158015612bd157600080fd5b505af1158015612be5573d6000803e3d6000fd5b50505050816001600160a01b03167f732e331072fe280a520929e5f2cc76c223389ff57d32a4e278cfded03e6f1caa82604051612c2291906142f9565b60405180910390a2505b6000612c3783611670565b604051633e30771b60e21b81529091506001600160a01b0385169063f8c1dc6c90612c689086908590600401613b02565b600060405180830381600087803b158015612c8257600080fd5b505af1158015612c96573d6000803e3d6000fd5b50505050826001600160a01b03167fe9ac2dcd83e719358f1dc0c5c80491937f67d4ec61ef62c262bbe3b78578f92a82604051612cd391906142f9565b60405180910390a250505050565b6001600160a01b0382166000908152600e6020526040902081905580612d6c576001600160a01b0382166000818152600f60205260408082208281556001810183905560028101839055600301829055517fbb1322f85cc7cc8bac4e172a5bc5dcc0c1959007f9a030032abf9258205f0e4591612d5f918190613b5f565b60405180910390a2610bd3565b6011546010546001600160801b03600160801b80840482166000818152601360209081526040808320978616808452978252808320546001600160a01b038b16808552600f90935292819020600181018890556002810184905560030180546001600160801b0319168917909616948402949094179094559151909392907fbb1322f85cc7cc8bac4e172a5bc5dcc0c1959007f9a030032abf9258205f0e4590612e199085908590613b5f565b60405180910390a2505050505050565b6001600160a01b0382166000908152600b6020526040902081905580612ec7576001600160a01b0382166000818152600b60209081526040808320600190810180546001600160a01b0319169055600c909252808320838155918201839055600282018390556003909101829055517f2d6cc0bcdf72c9486f6451bde6b80f44066f4558f77f44dbfedbe7d8b295225a91612d5f9181908190613b6d565b6011546010546001600160801b03600160801b8084048216600081815260126020908152604080832097861680845297825280832054848452601383528184208985528352818420546001600160a01b038c16808652600c90945293829020600181018990558181556002810185905560030180546001600160801b0319168a1790971695850295909517909555935191949390917f2d6cc0bcdf72c9486f6451bde6b80f44066f4558f77f44dbfedbe7d8b295225a90612f8d90869086908690613b6d565b60405180910390a250505050505050565b60025460408051630fdb11cf60e01b815290516000926001600160a01b031691630fdb11cf91600480830192602092919082900301818787803b158015612fe457600080fd5b505af1158015612ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301c9190613992565b90506000600760009054906101000a90046001600160a01b03166001600160a01b0316634d6228316040518163ffffffff1660e01b815260040160206040518083038186803b15801561306e57600080fd5b505afa158015613082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a6919061382a565b600554604051630d293c7160e41b81529192506000916001600160a01b039091169063d293c710906130de9085908790600401613b02565b60206040518083038186803b1580156130f657600080fd5b505afa15801561310a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312e9190613992565b9050600360009054906101000a90046001600160a01b03166001600160a01b031663794e57246040518163ffffffff1660e01b815260040160206040518083038186803b15801561317e57600080fd5b505afa158015613192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b69190613992565b81101561122a5760405162461bcd60e51b815260040161084a9061427b565b60008183106131e4578161087a565b5090919050565b806131f557610bd3565b600654604051631062c15f60e11b81526001600160a01b03909116906320c582be9061322990309086908690600401613a9d565b600060405180830381600087803b15801561324357600080fd5b505af1158015613257573d6000803e3d6000fd5b50505050610bd3816134d5565b6001600160a01b03811661328a5760405162461bcd60e51b815260040161084a90613cc2565b8161329457610bd3565b6009546000906132aa908463ffffffff61293616565b90508060098190555060008051602061438d833981519152816040516132d091906142f9565b60405180910390a17f6109e2559dfa766aaec7118351d48a523f0a4157f49c8d68749c8ac41318ad123384604051613309929190613b02565b60405180910390a16000336001600160a01b03168460405161332a90613a46565b60006040518083038185875af1925050503d8060008114613367576040519150601f19603f3d011682016040523d82523d6000602084013e61336c565b606091505b505090508061338d5760405162461bcd60e51b815260040161084a90613ed5565b50505050565b600a548015806133a1575081155b156133ac5750610ac4565b60006133b88383613751565b905060006133d160105483612a0490919063ffffffff16565b6011546001600160801b03600160801b820481166000908152601360209081526040808320939094168252919091522054909150613415908263ffffffff61085516565b601180546001600160801b03600160801b80830482166000908152601360208181526040808420968616845295815285832097909755945491820483168082529486528381209190921680835294528190205490517f2d6127771b164a9cc8827d24b5955db2a77e7a81dac389107ebb8bce9fb64968936134969391614329565b60405180910390a150505050565b60008282016001600160801b03808516908216101561087a5760405162461bcd60e51b815260040161084a90614236565b600a546000906134eb908363ffffffff61293616565b905080600a819055507ff3c69a10dcea5d744225cbe910fb39d6f8208bb8e21fff523d6756a7966093c78160405161352391906142f9565b60405180910390a15050565b6000826001600160801b0316826001600160801b031611156135635760405162461bcd60e51b815260040161084a906141ee565b50900390565b6001600160a01b0381166000908152600d602052604090206001015460ff168061359a57506001600160a01b038116155b610ac45760405162461bcd60e51b815260040161084a90613d0f565b60008111610ac45760405162461bcd60e51b815260040161084a90613ffa565b6001600160a01b038281166000818152600b602052604080822060010180546001600160a01b0319169486169485179055517f094c08e96a8890877a8390b4f967180a7507ad8622244d05fcd0f9f8e086564e9190a35050565b600654604051632ee65eeb60e21b81526001600160a01b039091169063bb997bac9061366490859030908690600401613a9d565b600060405180830381600087803b15801561367e57600080fd5b505af1158015613692573d6000803e3d6000fd5b5050600a54600092506136ac91508363ffffffff61085516565b905080600a819055507ff3c69a10dcea5d744225cbe910fb39d6f8208bb8e21fff523d6756a7966093c781604051610a7691906142f9565b610ac48133613264565b600081848411156137125760405162461bcd60e51b815260040161084a9190613b83565b505050900390565b6000818361373b5760405162461bcd60e51b815260040161084a9190613b83565b50600083858161374757fe5b0495945050505050565b600080613775601454611d5c670de0b6b3a764000087612a0490919063ffffffff16565b90506000613789828563ffffffff612a3e16565b90506137ab61379e828663ffffffff612a0416565b839063ffffffff61293616565b601455949350505050565b6040518060a0016040528060008152602001600081526020016000815260200160006001600160801b0316815260200160006001600160801b031681525090565b80356001600160801b038116811461087d57600080fd5b60006020828403121561381f578081fd5b813561087a81614377565b60006020828403121561383b578081fd5b815161087a81614377565b60008060408385031215613858578081fd5b823561386381614377565b9150602083013561387381614377565b809150509250929050565b600080600080600080600080610100898b03121561389a578384fd5b88356138a581614377565b975060208901356138b581614377565b965060408901356138c581614377565b955060608901356138d581614377565b945060808901356138e581614377565b935060a08901356138f581614377565b925060c089013561390581614377565b915060e089013561391581614377565b809150509295985092959890939650565b600060208284031215613937578081fd5b8151801515811461087a578182fd5b60008060408385031215613958578182fd5b61396284846137f7565b915061397184602085016137f7565b90509250929050565b60006020828403121561398b578081fd5b5035919050565b6000602082840312156139a3578081fd5b5051919050565b600080604083850312156139bc578182fd5b82359150602083013561387381614377565b60008082840360a08112156139e1578283fd5b833592506080601f19820112156139f6578182fd5b506020830190509250929050565b60008060408385031215613a16578182fd5b50508035926020909101359150565b600060208284031215613a36578081fd5b813560ff8116811461087a578182fd5b90565b7035b2bc9737bbb730b136329737bbb732b960791b815260110190565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b918252602082015260400190565b9283526020830191909152604082015260600190565b6000602080835283518082850152825b81811015613baf57858101830151858201604001528201613b93565b81811115613bc05783604083870101525b50601f01601f1916929092016040019392505050565b60208082526046908201527f53746162696c697479506f6f6c3a2063616c6c6572206d75737420686176652060408201527f616e206163746976652074726f766520746f207769746864726177204554484760608201526561696e20746f60d01b608082015260a00190565b60208082526029908201527f444c4c52207472616e7366657272656420616d6f756e742076616c69646174696040820152681bdb8819985a5b195960ba1b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602d908201527f53503a3a5f73656e644554484761696e546f3a205f726563656976657220697360408201526c207a65726f206164647265737360981b606082015260800190565b60208082526046908201527f53746162696c697479506f6f6c3a20546167206d75737420626520612072656760408201527f697374657265642066726f6e7420656e642c206f7220746865207a65726f206160608201526564647265737360d01b608082015260a00190565b60208082526027908201527f53746162696c697479506f6f6c3a2043616c6c6572206973206e6f74204163746040820152661a5d99541bdbdb60ca1b606082015260800190565b60208082526022908201527f4f776e61626c653a3a7365744f776e65723a20696e76616c6964206164647265604082015261737360f01b606082015260800190565b6020808252601e908201527f4163636f756e742063616e6e6f74206265207a65726f20616464726573730000604082015260600190565b60208082526031908201527f53746162696c697479506f6f6c3a2063616c6c6572206d7573742068617665206040820152703737b716bd32b9379022aa241023b0b4b760791b606082015260800190565b60208082526029908201527f53746162696c697479506f6f6c3a2043616c6c6572206973206e6f742054726f6040820152683b32a6b0b730b3b2b960b91b606082015260800190565b60208082526021908201527f53746162696c697479506f6f6c3a2073656e64696e6720455448206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526030908201527f53503a3a5f776974686472617746726f6d5370546f3a205f726563656976657260408201526f206973207a65726f206164647265737360801b606082015260800190565b60208082526033908201527f53746162696c697479506f6f6c3a204b69636b6261636b2072617465206d75736040820152727420626520696e2072616e6765205b302c315d60681b606082015260800190565b60208082526026908201527f53746162696c697479506f6f6c3a20416d6f756e74206d757374206265206e6f6040820152656e2d7a65726f60d01b606082015260800190565b60208082526017908201527613dddb98589b194e8e881858d8d95cdcc819195b9a5959604a1b604082015260600190565b60208082526039908201527f53746162696c697479506f6f6c3a206d757374206e6f7420616c72656164792060408201527818994818481c9959da5cdd195c995908199c9bdb9d08195b99603a1b606082015260800190565b60208082526028908201527f53746162696c697479506f6f6c3a2055736572206d7573742068617665206e6f6040820152670819195c1bdcda5d60c21b606082015260800190565b60208082526037908201527f4661696c656420746f20617070726f7665205a55534420616d6f756e7420666f60408201527672204d796e74206d417373657420746f2072656465656d60481b606082015260800190565b6020808252818101527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f604082015260600190565b60208082526030908201527f53746162696c697479506f6f6c3a2055736572206d757374206861766520612060408201526f1b9bdb8b5e995c9bc819195c1bdcda5d60821b606082015260800190565b60208082526028908201527f4c697175697479536166654d6174683132383a207375627472616374696f6e206040820152676f766572666c6f7760c01b606082015260800190565b60208082526025908201527f4c697175697479536166654d6174683132383a206164646974696f6e206f766560408201526472666c6f7760d81b606082015260800190565b60208082526044908201527f53746162696c697479506f6f6c3a2043616e6e6f74207769746864726177207760408201527f68696c65207468657265206172652074726f766573207769746820494352203c6060820152631026a1a960e11b608082015260a00190565b6001600160801b0391909116815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9182521515602082015260400190565b9283526001600160801b03918216602084015216604082015260600190565b948552602085019390935260408401919091526001600160801b03908116606084015216608082015260a00190565b6001600160a01b0381168114610ac457600080fdfeceb6d671277d4354fd29977ada70695fbd93a16612abf765d6b0e25c28dc6db3bce78369dccab09eec1986f4d409ab09ffbb47d65423e5148fcf98411c5111c951457222ebca92c335c9c86e2baa1cc0e40ffaa9084a51452980d5ba8dec2f6399920012339b5a3368d3a04b8606ce412c46ed92b7dcd8602d41fc8862cb8f25a26469706673582212206321af42ef27ad235e6728edf061d43549412ce69434e84bbeb795e984294f7864736f6c634300060b0033",
    "devdoc": {
        "kind": "dev",
        "methods": {
            "getETH()": {
                "returns": {
                    "_0": "the total amount of ETH held by the pool, accounted in an internal variable instead of `balance`, to exclude edge cases like ETH received from a self-destruct."
                }
            },
            "getOwner()": {
                "returns": {
                    "_owner": "Address of the owner. "
                }
            },
            "getTotalZUSDDeposits()": {
                "returns": {
                    "_0": "ZUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset."
                }
            },
            "setAddresses(address,address,address,address,address,address,address,address)": {
                "details": "initializer function, checks addresses are contracts",
                "params": {
                    "_activePoolAddress": "ActivePool contract address",
                    "_borrowerOperationsAddress": "BorrowerOperations contract address",
                    "_communityIssuanceAddress": "CommunityIssuanceAddress",
                    "_liquityBaseParamsAddress": "LiquidityBaseParams contract address",
                    "_priceFeedAddress": "PriceFeed contract address",
                    "_sortedTrovesAddress": "SortedTroves contract address",
                    "_troveManagerAddress": "TroveManager contract address",
                    "_zusdTokenAddress": "ZUSDToken contract address"
                }
            },
            "setCommunityIssuanceAddress(address)": {
                "details": "setter function specific for community issuance contract.",
                "params": {
                    "_communityIssuanceAddress": "address of new community issuance contract."
                }
            },
            "setOwner(address)": {
                "params": {
                    "_owner": "Address of the owner. "
                }
            }
        },
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "MIN_NET_DEBT()": {
                "notice": "Minimum amount of net ZUSD debt a trove must have"
            },
            "ZUSD_GAS_COMPENSATION()": {
                "notice": "Amount of ZUSD to be locked in gas pool on opening troves"
            },
            "getCompoundedFrontEndStake(address)": {
                "notice": "Return the front end's compounded stake. Given by the formula:  D = D0 * P/P(0) where P(0) is the depositor's snapshot of the product P, taken at the last time when one of the front end's tagged deposits updated their deposit. The front end's compounded stake is equal to the sum of its depositors' compounded deposits."
            },
            "getCompoundedZUSDDeposit(address)": {
                "notice": "Return the user's compounded deposit. Given by the formula:  d = d0 * P/P(0) where P(0) is the depositor's snapshot of the product P, taken when they last updated their deposit."
            },
            "getDepositorETHGain(address)": {
                "notice": "Calculates the ETH gain earned by the deposit since its last snapshots were taken. Given by the formula:  E = d0 * (S - S(0))/P(0) where S(0) and P(0) are the depositor's snapshots of the sum S and product P, respectively. d0 is the last recorded deposit value."
            },
            "getDepositorSOVGain(address)": {
                "notice": "Calculate the SOV gain earned by a deposit since its last snapshots were taken. Given by the formula:  SOV = d0 * (G - G(0))/P(0) where G(0) and P(0) are the depositor's snapshots of the sum G and product P, respectively. d0 is the last recorded deposit value."
            },
            "getFrontEndSOVGain(address)": {
                "notice": "Return the SOV gain earned by the front end. Given by the formula:  E = D0 * (G - G(0))/P(0) where G(0) and P(0) are the depositor's snapshots of the sum G and product P, respectively. D0 is the last recorded value of the front end's total tagged deposits."
            },
            "getOwner()": {
                "notice": "Return address of the owner."
            },
            "offset(uint256,uint256)": {
                "notice": "Cancels out the specified debt against the ZUSD contained in the Stability Pool (as far as possible) and transfers the Trove's ETH collateral from ActivePool to StabilityPool. Only called by liquidation functions in the TroveManager."
            },
            "provideToSP(uint256,address)": {
                "notice": "provideToSP(): - Triggers a SOV issuance, based on time passed since the last issuance and total amount of deposited ZUSD. The SOV issuance is shared between *all* depositors and front ends - Tags the deposit with the provided front end tag param, if it's a new deposit - Sends depositor's accumulated gains (SOV, ETH) to depositor - Sends the tagged front end's accumulated SOV gains to the tagged front end - Increases deposit and tagged front end's stake, and takes new snapshots for each."
            },
            "provideToSpFromDLLR(uint256,(uint256,uint8,bytes32,bytes32))": {
                "notice": "DLLR _owner or _spender can convert a specified amount of DLLR into ZUSD via Sovryn Mynt and deposit the ZUSD into the Zero Stability Pool, all in a single transaction"
            },
            "registerFrontEnd(uint256)": {
                "notice": "Front end makes a one-time selection of kickback rate upon registering"
            },
            "setAddresses(address,address,address,address,address,address,address,address)": {
                "notice": "Called only once on init, to set addresses of other Liquity contracts. Callable only by owner"
            },
            "setOwner(address)": {
                "notice": "Set address of the owner (only owner can call this function)"
            },
            "withdrawETHGainToTrove(address,address)": {
                "notice": "withdrawETHGainToTrove: - Triggers a SOV issuance, based on time passed since the last issuance. The SOV issuance is shared between *all* depositors and front ends - Sends all depositor's SOV gain to  depositor - Sends all tagged front end's SOV gain to the tagged front end - Transfers the depositor's entire ETH gain from the Stability Pool to the caller's trove - Leaves their compounded deposit in the Stability Pool - Updates snapshots for deposit and tagged front end stake "
            },
            "withdrawFromSP(uint256)": {
                "notice": "withdrawFromSP(): - Triggers a SOV issuance, based on time passed since the last issuance and total amount of ZUSD is deposited. The SOV issuance is shared between *all* depositors and front ends - Removes the deposit's front end tag if it is a full withdrawal - Sends all depositor's accumulated gains (SOV, ETH) to depositor - Sends the tagged front end's accumulated SOV gains to the tagged front end - Decreases deposit and tagged front end's stake, and takes new snapshots for each. If _amount > userDeposit, the user withdraws all of their compounded deposit."
            },
            "withdrawFromSpAndConvertToDLLR(uint256)": {
                "notice": "Stability Pool depositor can withdraw a specified amount of ZUSD from the Zero Stability Pool and convert the ZUSD to DLLR via Sovryn Mynt, all in a single transaction"
            }
        },
        "notice": "The Stability Pool holds ZUSD tokens deposited by Stability Pool depositors. When a trove is liquidated, then depending on system conditions, some of its ZUSD debt gets offset with ZUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of ZUSD tokens in the Stability Pool is burned. Thus, a liquidation causes each depositor to receive a ZUSD loss, in proportion to their deposit as a share of total deposits. They also receive an ETH gain, as the ETH collateral of the liquidated trove is distributed among Stability depositors, in the same proportion. When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40% of the total ZUSD in the Stability Pool, depletes 40% of each deposit. A deposit that has experienced a series of liquidations is termed a \"compounded deposit\": each liquidation depletes the deposit, multiplying it by some factor in range ]0,1[ --- IMPLEMENTATION --- We use a highly scalable method of tracking deposits and ETH gains that has O(1) complexity. When a liquidation occurs, rather than updating each depositor's deposit and ETH gain, we simply update two state variables: a product P, and a sum S. A mathematical manipulation allows us to factor out the initial deposit, and accurately track all depositors' compounded deposits and accumulated ETH gains over time, as liquidations occur, using just these two variables P and S. When depositors join the Stability Pool, they get a snapshot of the latest P and S: P_t and S_t, respectively. The formula for a depositor's accumulated ETH gain is derived here: https://github.com/liquity/dev/blob/main/packages/contracts/mathProofs/Scalable%20Compounding%20Stability%20Pool%20Deposits.pdf For a given deposit d_t, the ratio P/P_t tells us the factor by which a deposit has decreased since it joined the Stability Pool, and the term d_t * (S - S_t)/P_t gives us the deposit's total accumulated ETH gain. Each liquidation updates the product P and sum S. After a series of liquidations, a compounded deposit and corresponding ETH gain can be calculated using the initial deposit, the depositor’s snapshots of P and S, and the latest values of P and S. Any time a depositor updates their deposit (withdrawal, top-up) their accumulated ETH gain is paid out, their new deposit is recorded (based on their latest compounded deposit and modified by the withdrawal/top-up), and they receive new snapshots of the latest P and S. Essentially, they make a fresh deposit that overwrites the old one. --- SCALE FACTOR --- Since P is a running product in range ]0,1] that is always-decreasing, it should never reach 0 when multiplied by a number in range ]0,1[. Unfortunately, Solidity floor division always reaches 0, sooner or later. A series of liquidations that nearly empty the Pool (and thus each multiply P by a very small number in range ]0,1[ ) may push P to its 18 digit decimal limit, and round it to 0, when in fact the Pool hasn't been emptied: this would break deposit tracking. So, to track P accurately, we use a scale factor: if a liquidation would cause P to decrease to <1e-9 (and be rounded to 0 by Solidity), we first multiply P by 1e9, and increment a currentScale factor by 1. The added benefit of using 1e9 for the scale factor (rather than 1e18) is that it ensures negligible precision loss close to the scale boundary: when P is at its minimum value of 1e9, the relative precision loss in P due to floor division is only on the order of 1e-9. --- EPOCHS --- Whenever a liquidation fully empties the Stability Pool, all deposits should become 0. However, setting P to 0 would make P be 0 forever, and break all future reward calculations. So, every time the Stability Pool is emptied by a liquidation, we reset P = 1 and currentScale = 0, and increment the currentEpoch by 1. --- TRACKING DEPOSIT OVER SCALE CHANGES AND EPOCHS --- When a deposit is made, it gets snapshots of the currentEpoch and the currentScale. When calculating a compounded deposit, we compare the current epoch to the deposit's epoch snapshot. If the current epoch is newer, then the deposit was present during a pool-emptying liquidation, and necessarily has been depleted to 0. Otherwise, we then compare the current scale to the deposit's scale snapshot. If they're equal, the compounded deposit is given by d_t * P/P_t. If it spans one scale change, it is given by d_t * P/(P_t * 1e9). If it spans more than one scale change, we define the compounded deposit as 0, since it is now less than 1e-9'th of its initial value (e.g. a deposit of 1 billion ZUSD has depleted to < 1 ZUSD).  --- TRACKING DEPOSITOR'S ETH GAIN OVER SCALE CHANGES AND EPOCHS --- In the current epoch, the latest value of S is stored upon each scale change, and the mapping (scale -> S) is stored for each epoch. This allows us to calculate a deposit's accumulated ETH gain, during the epoch in which the deposit was non-zero and earned ETH. We calculate the depositor's accumulated ETH gain for the scale at which they made the deposit, using the ETH gain formula: e_1 = d_t * (S - S_t) / P_t and also for scale after, taking care to divide the latter by a factor of 1e9: e_2 = d_t * S / (P_t * 1e9) The gain in the second scale will be full, as the starting point was in the previous scale, thus no need to subtract anything. The deposit therefore was present for reward events from the beginning of that second scale.        S_i-S_t + S_{i+1}      .<--------.------------>      .         .      . S_i     .   S_{i+1}   <--.-------->.<----------->   S_t.         .   <->.         .      t         .  |---+---------|-------------|-----...         i            i+1 The sum of (e_1 + e_2) captures the depositor's total accumulated ETH gain, handling the case where their deposit spanned one scale change. We only care about gains across one scale change, since the compounded deposit is defined as being 0 once it has spanned more than one scale change. --- UPDATING P WHEN A LIQUIDATION OCCURS --- Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / ETH gain derivations: https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf --- SOV ISSUANCE TO STABILITY POOL DEPOSITORS --- An SOV issuance event occurs at every deposit operation, and every liquidation. Each deposit is tagged with the address of the front end through which it was made. All deposits earn a share of the issued SOV in proportion to the deposit as a share of total deposits. The SOV earned by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate. Please see the system Readme for an overview: https://github.com/liquity/dev/blob/main/README.md#zero-issuance-to-stability-providers We use the same mathematical product-sum approach to track SOV gains for depositors, where 'G' is the sum corresponding to SOV gains. The product P (and snapshot P_t) is re-used, as the ratio P/P_t tracks a deposit's depletion due to liquidations.",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 5224,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "activePool",
                "offset": 0,
                "slot": "0",
                "type": "t_contract(IActivePool)19165"
            },
            {
                "astId": 5226,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "defaultPool",
                "offset": 0,
                "slot": "1",
                "type": "t_contract(IDefaultPool)19604"
            },
            {
                "astId": 5229,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(IPriceFeed)19812"
            },
            {
                "astId": 5232,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "liquityBaseParams",
                "offset": 0,
                "slot": "3",
                "type": "t_contract(ILiquityBaseParams)19746"
            },
            {
                "astId": 27267,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "borrowerOperations",
                "offset": 0,
                "slot": "4",
                "type": "t_contract(IBorrowerOperations)19440"
            },
            {
                "astId": 27269,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "troveManager",
                "offset": 0,
                "slot": "5",
                "type": "t_contract(ITroveManager)20867"
            },
            {
                "astId": 27271,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "zusdToken",
                "offset": 0,
                "slot": "6",
                "type": "t_contract(IZUSDToken)21074"
            },
            {
                "astId": 27273,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "sortedTroves",
                "offset": 0,
                "slot": "7",
                "type": "t_contract(ISortedTroves)20085"
            },
            {
                "astId": 27275,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "communityIssuance",
                "offset": 0,
                "slot": "8",
                "type": "t_contract(ICommunityIssuance)19580"
            },
            {
                "astId": 27277,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "ETH",
                "offset": 0,
                "slot": "9",
                "type": "t_uint256"
            },
            {
                "astId": 27279,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "totalZUSDDeposits",
                "offset": 0,
                "slot": "10",
                "type": "t_uint256"
            },
            {
                "astId": 27304,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "deposits",
                "offset": 0,
                "slot": "11",
                "type": "t_mapping(t_address,t_struct(Deposit)27289_storage)"
            },
            {
                "astId": 27308,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "depositSnapshots",
                "offset": 0,
                "slot": "12",
                "type": "t_mapping(t_address,t_struct(Snapshots)27300_storage)"
            },
            {
                "astId": 27312,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "frontEnds",
                "offset": 0,
                "slot": "13",
                "type": "t_mapping(t_address,t_struct(FrontEnd)27284_storage)"
            },
            {
                "astId": 27316,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "frontEndStakes",
                "offset": 0,
                "slot": "14",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 27320,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "frontEndSnapshots",
                "offset": 0,
                "slot": "15",
                "type": "t_mapping(t_address,t_struct(Snapshots)27300_storage)"
            },
            {
                "astId": 27322,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "P",
                "offset": 0,
                "slot": "16",
                "type": "t_uint256"
            },
            {
                "astId": 27327,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "currentScale",
                "offset": 0,
                "slot": "17",
                "type": "t_uint128"
            },
            {
                "astId": 27329,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "currentEpoch",
                "offset": 16,
                "slot": "17",
                "type": "t_uint128"
            },
            {
                "astId": 27335,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "epochToScaleToSum",
                "offset": 0,
                "slot": "18",
                "type": "t_mapping(t_uint128,t_mapping(t_uint128,t_uint256))"
            },
            {
                "astId": 27341,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "epochToScaleToG",
                "offset": 0,
                "slot": "19",
                "type": "t_mapping(t_uint128,t_mapping(t_uint128,t_uint256))"
            },
            {
                "astId": 27343,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "lastSOVError",
                "offset": 0,
                "slot": "20",
                "type": "t_uint256"
            },
            {
                "astId": 27345,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "lastETHError_Offset",
                "offset": 0,
                "slot": "21",
                "type": "t_uint256"
            },
            {
                "astId": 27347,
                "contract": "contracts/StabilityPool.sol:StabilityPool",
                "label": "lastZUSDLossError_Offset",
                "offset": 0,
                "slot": "22",
                "type": "t_uint256"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_contract(IActivePool)19165": {
                "encoding": "inplace",
                "label": "contract IActivePool",
                "numberOfBytes": "20"
            },
            "t_contract(IBorrowerOperations)19440": {
                "encoding": "inplace",
                "label": "contract IBorrowerOperations",
                "numberOfBytes": "20"
            },
            "t_contract(ICommunityIssuance)19580": {
                "encoding": "inplace",
                "label": "contract ICommunityIssuance",
                "numberOfBytes": "20"
            },
            "t_contract(IDefaultPool)19604": {
                "encoding": "inplace",
                "label": "contract IDefaultPool",
                "numberOfBytes": "20"
            },
            "t_contract(ILiquityBaseParams)19746": {
                "encoding": "inplace",
                "label": "contract ILiquityBaseParams",
                "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)19812": {
                "encoding": "inplace",
                "label": "contract IPriceFeed",
                "numberOfBytes": "20"
            },
            "t_contract(ISortedTroves)20085": {
                "encoding": "inplace",
                "label": "contract ISortedTroves",
                "numberOfBytes": "20"
            },
            "t_contract(ITroveManager)20867": {
                "encoding": "inplace",
                "label": "contract ITroveManager",
                "numberOfBytes": "20"
            },
            "t_contract(IZUSDToken)21074": {
                "encoding": "inplace",
                "label": "contract IZUSDToken",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Deposit)27289_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct StabilityPoolStorage.Deposit)",
                "numberOfBytes": "32",
                "value": "t_struct(Deposit)27289_storage"
            },
            "t_mapping(t_address,t_struct(FrontEnd)27284_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct StabilityPoolStorage.FrontEnd)",
                "numberOfBytes": "32",
                "value": "t_struct(FrontEnd)27284_storage"
            },
            "t_mapping(t_address,t_struct(Snapshots)27300_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct StabilityPoolStorage.Snapshots)",
                "numberOfBytes": "32",
                "value": "t_struct(Snapshots)27300_storage"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_uint128,t_mapping(t_uint128,t_uint256))": {
                "encoding": "mapping",
                "key": "t_uint128",
                "label": "mapping(uint128 => mapping(uint128 => uint256))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_uint128,t_uint256)"
            },
            "t_mapping(t_uint128,t_uint256)": {
                "encoding": "mapping",
                "key": "t_uint128",
                "label": "mapping(uint128 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_struct(Deposit)27289_storage": {
                "encoding": "inplace",
                "label": "struct StabilityPoolStorage.Deposit",
                "members": [
                    {
                        "astId": 27286,
                        "contract": "contracts/StabilityPool.sol:StabilityPool",
                        "label": "initialValue",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 27288,
                        "contract": "contracts/StabilityPool.sol:StabilityPool",
                        "label": "frontEndTag",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_address"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(FrontEnd)27284_storage": {
                "encoding": "inplace",
                "label": "struct StabilityPoolStorage.FrontEnd",
                "members": [
                    {
                        "astId": 27281,
                        "contract": "contracts/StabilityPool.sol:StabilityPool",
                        "label": "kickbackRate",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 27283,
                        "contract": "contracts/StabilityPool.sol:StabilityPool",
                        "label": "registered",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_bool"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(Snapshots)27300_storage": {
                "encoding": "inplace",
                "label": "struct StabilityPoolStorage.Snapshots",
                "members": [
                    {
                        "astId": 27291,
                        "contract": "contracts/StabilityPool.sol:StabilityPool",
                        "label": "S",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 27293,
                        "contract": "contracts/StabilityPool.sol:StabilityPool",
                        "label": "P",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 27295,
                        "contract": "contracts/StabilityPool.sol:StabilityPool",
                        "label": "G",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 27297,
                        "contract": "contracts/StabilityPool.sol:StabilityPool",
                        "label": "scale",
                        "offset": 0,
                        "slot": "3",
                        "type": "t_uint128"
                    },
                    {
                        "astId": 27299,
                        "contract": "contracts/StabilityPool.sol:StabilityPool",
                        "label": "epoch",
                        "offset": 16,
                        "slot": "3",
                        "type": "t_uint128"
                    }
                ],
                "numberOfBytes": "128"
            },
            "t_uint128": {
                "encoding": "inplace",
                "label": "uint128",
                "numberOfBytes": "16"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
